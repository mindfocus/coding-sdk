/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the CodingCIBuildStageData type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CodingCIBuildStageData{}

// CodingCIBuildStageData Stage 返回结构
type CodingCIBuildStageData struct {
	// Stage 返回字符串
	StageJsonString string `json:"StageJsonString"`
}

type _CodingCIBuildStageData CodingCIBuildStageData

// NewCodingCIBuildStageData instantiates a new CodingCIBuildStageData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCodingCIBuildStageData(stageJsonString string) *CodingCIBuildStageData {
	this := CodingCIBuildStageData{}
	this.StageJsonString = stageJsonString
	return &this
}

// NewCodingCIBuildStageDataWithDefaults instantiates a new CodingCIBuildStageData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCodingCIBuildStageDataWithDefaults() *CodingCIBuildStageData {
	this := CodingCIBuildStageData{}
	var stageJsonString string = ""
	this.StageJsonString = stageJsonString
	return &this
}

// GetStageJsonString returns the StageJsonString field value
func (o *CodingCIBuildStageData) GetStageJsonString() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StageJsonString
}

// GetStageJsonStringOk returns a tuple with the StageJsonString field value
// and a boolean to check if the value has been set.
func (o *CodingCIBuildStageData) GetStageJsonStringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StageJsonString, true
}

// SetStageJsonString sets field value
func (o *CodingCIBuildStageData) SetStageJsonString(v string) {
	o.StageJsonString = v
}

func (o CodingCIBuildStageData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CodingCIBuildStageData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["StageJsonString"] = o.StageJsonString
	return toSerialize, nil
}

func (o *CodingCIBuildStageData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"StageJsonString",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCodingCIBuildStageData := _CodingCIBuildStageData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCodingCIBuildStageData)

	if err != nil {
		return err
	}

	*o = CodingCIBuildStageData(varCodingCIBuildStageData)

	return err
}

type NullableCodingCIBuildStageData struct {
	value *CodingCIBuildStageData
	isSet bool
}

func (v NullableCodingCIBuildStageData) Get() *CodingCIBuildStageData {
	return v.value
}

func (v *NullableCodingCIBuildStageData) Set(val *CodingCIBuildStageData) {
	v.value = val
	v.isSet = true
}

func (v NullableCodingCIBuildStageData) IsSet() bool {
	return v.isSet
}

func (v *NullableCodingCIBuildStageData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCodingCIBuildStageData(val *CodingCIBuildStageData) *NullableCodingCIBuildStageData {
	return &NullableCodingCIBuildStageData{value: val, isSet: true}
}

func (v NullableCodingCIBuildStageData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCodingCIBuildStageData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


