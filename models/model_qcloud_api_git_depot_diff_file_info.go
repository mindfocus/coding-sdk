/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the QcloudApiGitDepotDiffFileInfo type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &QcloudApiGitDepotDiffFileInfo{}

// QcloudApiGitDepotDiffFileInfo struct for QcloudApiGitDepotDiffFileInfo
type QcloudApiGitDepotDiffFileInfo struct {
	// 总删除行数
	Deletions int64 `json:"Deletions"`
	DifferentLines []QcloudApiGitDepotDifferentLine `json:"DifferentLines"`
	// 总新增行数
	Insertions int64 `json:"Insertions"`
}

type _QcloudApiGitDepotDiffFileInfo QcloudApiGitDepotDiffFileInfo

// NewQcloudApiGitDepotDiffFileInfo instantiates a new QcloudApiGitDepotDiffFileInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQcloudApiGitDepotDiffFileInfo(deletions int64, differentLines []QcloudApiGitDepotDifferentLine, insertions int64) *QcloudApiGitDepotDiffFileInfo {
	this := QcloudApiGitDepotDiffFileInfo{}
	this.Deletions = deletions
	this.DifferentLines = differentLines
	this.Insertions = insertions
	return &this
}

// NewQcloudApiGitDepotDiffFileInfoWithDefaults instantiates a new QcloudApiGitDepotDiffFileInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQcloudApiGitDepotDiffFileInfoWithDefaults() *QcloudApiGitDepotDiffFileInfo {
	this := QcloudApiGitDepotDiffFileInfo{}
	var deletions int64 = 0
	this.Deletions = deletions
	var insertions int64 = 0
	this.Insertions = insertions
	return &this
}

// GetDeletions returns the Deletions field value
func (o *QcloudApiGitDepotDiffFileInfo) GetDeletions() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Deletions
}

// GetDeletionsOk returns a tuple with the Deletions field value
// and a boolean to check if the value has been set.
func (o *QcloudApiGitDepotDiffFileInfo) GetDeletionsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Deletions, true
}

// SetDeletions sets field value
func (o *QcloudApiGitDepotDiffFileInfo) SetDeletions(v int64) {
	o.Deletions = v
}

// GetDifferentLines returns the DifferentLines field value
func (o *QcloudApiGitDepotDiffFileInfo) GetDifferentLines() []QcloudApiGitDepotDifferentLine {
	if o == nil {
		var ret []QcloudApiGitDepotDifferentLine
		return ret
	}

	return o.DifferentLines
}

// GetDifferentLinesOk returns a tuple with the DifferentLines field value
// and a boolean to check if the value has been set.
func (o *QcloudApiGitDepotDiffFileInfo) GetDifferentLinesOk() ([]QcloudApiGitDepotDifferentLine, bool) {
	if o == nil {
		return nil, false
	}
	return o.DifferentLines, true
}

// SetDifferentLines sets field value
func (o *QcloudApiGitDepotDiffFileInfo) SetDifferentLines(v []QcloudApiGitDepotDifferentLine) {
	o.DifferentLines = v
}

// GetInsertions returns the Insertions field value
func (o *QcloudApiGitDepotDiffFileInfo) GetInsertions() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Insertions
}

// GetInsertionsOk returns a tuple with the Insertions field value
// and a boolean to check if the value has been set.
func (o *QcloudApiGitDepotDiffFileInfo) GetInsertionsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Insertions, true
}

// SetInsertions sets field value
func (o *QcloudApiGitDepotDiffFileInfo) SetInsertions(v int64) {
	o.Insertions = v
}

func (o QcloudApiGitDepotDiffFileInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QcloudApiGitDepotDiffFileInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Deletions"] = o.Deletions
	toSerialize["DifferentLines"] = o.DifferentLines
	toSerialize["Insertions"] = o.Insertions
	return toSerialize, nil
}

func (o *QcloudApiGitDepotDiffFileInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Deletions",
		"DifferentLines",
		"Insertions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQcloudApiGitDepotDiffFileInfo := _QcloudApiGitDepotDiffFileInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQcloudApiGitDepotDiffFileInfo)

	if err != nil {
		return err
	}

	*o = QcloudApiGitDepotDiffFileInfo(varQcloudApiGitDepotDiffFileInfo)

	return err
}

type NullableQcloudApiGitDepotDiffFileInfo struct {
	value *QcloudApiGitDepotDiffFileInfo
	isSet bool
}

func (v NullableQcloudApiGitDepotDiffFileInfo) Get() *QcloudApiGitDepotDiffFileInfo {
	return v.value
}

func (v *NullableQcloudApiGitDepotDiffFileInfo) Set(val *QcloudApiGitDepotDiffFileInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableQcloudApiGitDepotDiffFileInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableQcloudApiGitDepotDiffFileInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQcloudApiGitDepotDiffFileInfo(val *QcloudApiGitDepotDiffFileInfo) *NullableQcloudApiGitDepotDiffFileInfo {
	return &NullableQcloudApiGitDepotDiffFileInfo{value: val, isSet: true}
}

func (v NullableQcloudApiGitDepotDiffFileInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQcloudApiGitDepotDiffFileInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


