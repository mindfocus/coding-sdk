/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the TestDefect type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &TestDefect{}

// TestDefect 测试任务的缺陷信息
type TestDefect struct {
	// 处理人
	AssignedTo utils.NullableString `json:"AssignedTo,omitempty"`
	// 创建人
	Author utils.NullableString `json:"Author,omitempty"`
	// 创建时间
	CreatedAt utils.NullableString `json:"CreatedAt,omitempty"`
	// 描述
	Description utils.NullableString `json:"Description,omitempty"`
	// 缺陷 ID
	Id utils.NullableInt32 `json:"Id,omitempty"`
	// 标题
	Name utils.NullableString `json:"Name,omitempty"`
	// 状态
	Status utils.NullableString `json:"Status,omitempty"`
	// 状态名称
	StatusName utils.NullableString `json:"StatusName,omitempty"`
}

// NewTestDefect instantiates a new TestDefect object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestDefect() *TestDefect {
	this := TestDefect{}
	var assignedTo string = ""
	this.AssignedTo = *utils.NewNullableString(&assignedTo)
	var author string = ""
	this.Author = *utils.NewNullableString(&author)
	var createdAt string = ""
	this.CreatedAt = *utils.NewNullableString(&createdAt)
	var description string = ""
	this.Description = *utils.NewNullableString(&description)
	var name string = ""
	this.Name = *utils.NewNullableString(&name)
	var status string = ""
	this.Status = *utils.NewNullableString(&status)
	var statusName string = ""
	this.StatusName = *utils.NewNullableString(&statusName)
	return &this
}

// NewTestDefectWithDefaults instantiates a new TestDefect object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestDefectWithDefaults() *TestDefect {
	this := TestDefect{}
	var assignedTo string = ""
	this.AssignedTo = *utils.NewNullableString(&assignedTo)
	var author string = ""
	this.Author = *utils.NewNullableString(&author)
	var createdAt string = ""
	this.CreatedAt = *utils.NewNullableString(&createdAt)
	var description string = ""
	this.Description = *utils.NewNullableString(&description)
	var name string = ""
	this.Name = *utils.NewNullableString(&name)
	var status string = ""
	this.Status = *utils.NewNullableString(&status)
	var statusName string = ""
	this.StatusName = *utils.NewNullableString(&statusName)
	return &this
}

// GetAssignedTo returns the AssignedTo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestDefect) GetAssignedTo() string {
	if o == nil || utils.IsNil(o.AssignedTo.Get()) {
		var ret string
		return ret
	}
	return *o.AssignedTo.Get()
}

// GetAssignedToOk returns a tuple with the AssignedTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestDefect) GetAssignedToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AssignedTo.Get(), o.AssignedTo.IsSet()
}

// HasAssignedTo returns a boolean if a field has been set.
func (o *TestDefect) HasAssignedTo() bool {
	if o != nil && o.AssignedTo.IsSet() {
		return true
	}

	return false
}

// SetAssignedTo gets a reference to the given utils.NullableString and assigns it to the AssignedTo field.
func (o *TestDefect) SetAssignedTo(v string) {
	o.AssignedTo.Set(&v)
}
// SetAssignedToNil sets the value for AssignedTo to be an explicit nil
func (o *TestDefect) SetAssignedToNil() {
	o.AssignedTo.Set(nil)
}

// UnsetAssignedTo ensures that no value is present for AssignedTo, not even an explicit nil
func (o *TestDefect) UnsetAssignedTo() {
	o.AssignedTo.Unset()
}

// GetAuthor returns the Author field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestDefect) GetAuthor() string {
	if o == nil || utils.IsNil(o.Author.Get()) {
		var ret string
		return ret
	}
	return *o.Author.Get()
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestDefect) GetAuthorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Author.Get(), o.Author.IsSet()
}

// HasAuthor returns a boolean if a field has been set.
func (o *TestDefect) HasAuthor() bool {
	if o != nil && o.Author.IsSet() {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given utils.NullableString and assigns it to the Author field.
func (o *TestDefect) SetAuthor(v string) {
	o.Author.Set(&v)
}
// SetAuthorNil sets the value for Author to be an explicit nil
func (o *TestDefect) SetAuthorNil() {
	o.Author.Set(nil)
}

// UnsetAuthor ensures that no value is present for Author, not even an explicit nil
func (o *TestDefect) UnsetAuthor() {
	o.Author.Unset()
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestDefect) GetCreatedAt() string {
	if o == nil || utils.IsNil(o.CreatedAt.Get()) {
		var ret string
		return ret
	}
	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestDefect) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *TestDefect) HasCreatedAt() bool {
	if o != nil && o.CreatedAt.IsSet() {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given utils.NullableString and assigns it to the CreatedAt field.
func (o *TestDefect) SetCreatedAt(v string) {
	o.CreatedAt.Set(&v)
}
// SetCreatedAtNil sets the value for CreatedAt to be an explicit nil
func (o *TestDefect) SetCreatedAtNil() {
	o.CreatedAt.Set(nil)
}

// UnsetCreatedAt ensures that no value is present for CreatedAt, not even an explicit nil
func (o *TestDefect) UnsetCreatedAt() {
	o.CreatedAt.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestDefect) GetDescription() string {
	if o == nil || utils.IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestDefect) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *TestDefect) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given utils.NullableString and assigns it to the Description field.
func (o *TestDefect) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *TestDefect) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *TestDefect) UnsetDescription() {
	o.Description.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestDefect) GetId() int32 {
	if o == nil || utils.IsNil(o.Id.Get()) {
		var ret int32
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestDefect) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *TestDefect) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given utils.NullableInt32 and assigns it to the Id field.
func (o *TestDefect) SetId(v int32) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *TestDefect) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *TestDefect) UnsetId() {
	o.Id.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestDefect) GetName() string {
	if o == nil || utils.IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestDefect) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *TestDefect) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given utils.NullableString and assigns it to the Name field.
func (o *TestDefect) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *TestDefect) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *TestDefect) UnsetName() {
	o.Name.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestDefect) GetStatus() string {
	if o == nil || utils.IsNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestDefect) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *TestDefect) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given utils.NullableString and assigns it to the Status field.
func (o *TestDefect) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *TestDefect) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *TestDefect) UnsetStatus() {
	o.Status.Unset()
}

// GetStatusName returns the StatusName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestDefect) GetStatusName() string {
	if o == nil || utils.IsNil(o.StatusName.Get()) {
		var ret string
		return ret
	}
	return *o.StatusName.Get()
}

// GetStatusNameOk returns a tuple with the StatusName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestDefect) GetStatusNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StatusName.Get(), o.StatusName.IsSet()
}

// HasStatusName returns a boolean if a field has been set.
func (o *TestDefect) HasStatusName() bool {
	if o != nil && o.StatusName.IsSet() {
		return true
	}

	return false
}

// SetStatusName gets a reference to the given utils.NullableString and assigns it to the StatusName field.
func (o *TestDefect) SetStatusName(v string) {
	o.StatusName.Set(&v)
}
// SetStatusNameNil sets the value for StatusName to be an explicit nil
func (o *TestDefect) SetStatusNameNil() {
	o.StatusName.Set(nil)
}

// UnsetStatusName ensures that no value is present for StatusName, not even an explicit nil
func (o *TestDefect) UnsetStatusName() {
	o.StatusName.Unset()
}

func (o TestDefect) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestDefect) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AssignedTo.IsSet() {
		toSerialize["AssignedTo"] = o.AssignedTo.Get()
	}
	if o.Author.IsSet() {
		toSerialize["Author"] = o.Author.Get()
	}
	if o.CreatedAt.IsSet() {
		toSerialize["CreatedAt"] = o.CreatedAt.Get()
	}
	if o.Description.IsSet() {
		toSerialize["Description"] = o.Description.Get()
	}
	if o.Id.IsSet() {
		toSerialize["Id"] = o.Id.Get()
	}
	if o.Name.IsSet() {
		toSerialize["Name"] = o.Name.Get()
	}
	if o.Status.IsSet() {
		toSerialize["Status"] = o.Status.Get()
	}
	if o.StatusName.IsSet() {
		toSerialize["StatusName"] = o.StatusName.Get()
	}
	return toSerialize, nil
}

type NullableTestDefect struct {
	value *TestDefect
	isSet bool
}

func (v NullableTestDefect) Get() *TestDefect {
	return v.value
}

func (v *NullableTestDefect) Set(val *TestDefect) {
	v.value = val
	v.isSet = true
}

func (v NullableTestDefect) IsSet() bool {
	return v.isSet
}

func (v *NullableTestDefect) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestDefect(val *TestDefect) *NullableTestDefect {
	return &NullableTestDefect{value: val, isSet: true}
}

func (v NullableTestDefect) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestDefect) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


