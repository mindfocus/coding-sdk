/*
CODING OPEN API

  

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DescribeCdApplicationsByProjectResponseData type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DescribeCdApplicationsByProjectResponseData{}

// DescribeCdApplicationsByProjectResponseData DescribeCdApplicationsByProjectResponseData 结构
type DescribeCdApplicationsByProjectResponseData struct {
	// CD 应用列表
	Applications []CdApplication `json:"Applications,omitempty"`
}

// NewDescribeCdApplicationsByProjectResponseData instantiates a new DescribeCdApplicationsByProjectResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeCdApplicationsByProjectResponseData() *DescribeCdApplicationsByProjectResponseData {
	this := DescribeCdApplicationsByProjectResponseData{}
	return &this
}

// NewDescribeCdApplicationsByProjectResponseDataWithDefaults instantiates a new DescribeCdApplicationsByProjectResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeCdApplicationsByProjectResponseDataWithDefaults() *DescribeCdApplicationsByProjectResponseData {
	this := DescribeCdApplicationsByProjectResponseData{}
	return &this
}

// GetApplications returns the Applications field value if set, zero value otherwise.
func (o *DescribeCdApplicationsByProjectResponseData) GetApplications() []CdApplication {
	if o == nil || utils.IsNil(o.Applications) {
		var ret []CdApplication
		return ret
	}
	return o.Applications
}

// GetApplicationsOk returns a tuple with the Applications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeCdApplicationsByProjectResponseData) GetApplicationsOk() ([]CdApplication, bool) {
	if o == nil || utils.IsNil(o.Applications) {
		return nil, false
	}
	return o.Applications, true
}

// HasApplications returns a boolean if a field has been set.
func (o *DescribeCdApplicationsByProjectResponseData) HasApplications() bool {
	if o != nil && !utils.IsNil(o.Applications) {
		return true
	}

	return false
}

// SetApplications gets a reference to the given []CdApplication and assigns it to the Applications field.
func (o *DescribeCdApplicationsByProjectResponseData) SetApplications(v []CdApplication) {
	o.Applications = v
}

func (o DescribeCdApplicationsByProjectResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeCdApplicationsByProjectResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Applications) {
		toSerialize["Applications"] = o.Applications
	}
	return toSerialize, nil
}

type NullableDescribeCdApplicationsByProjectResponseData struct {
	value *DescribeCdApplicationsByProjectResponseData
	isSet bool
}

func (v NullableDescribeCdApplicationsByProjectResponseData) Get() *DescribeCdApplicationsByProjectResponseData {
	return v.value
}

func (v *NullableDescribeCdApplicationsByProjectResponseData) Set(val *DescribeCdApplicationsByProjectResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeCdApplicationsByProjectResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeCdApplicationsByProjectResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeCdApplicationsByProjectResponseData(val *DescribeCdApplicationsByProjectResponseData) *NullableDescribeCdApplicationsByProjectResponseData {
	return &NullableDescribeCdApplicationsByProjectResponseData{value: val, isSet: true}
}

func (v NullableDescribeCdApplicationsByProjectResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeCdApplicationsByProjectResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


