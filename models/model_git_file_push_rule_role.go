/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the GitFilePushRuleRole type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &GitFilePushRuleRole{}

// GitFilePushRuleRole git 文件推送规则角色
type GitFilePushRuleRole struct {
	// 角色名字
	Name utils.NullableString `json:"Name,omitempty"`
	// 角色 ID
	RoleId utils.NullableInt64 `json:"RoleId,omitempty"`
}

// NewGitFilePushRuleRole instantiates a new GitFilePushRuleRole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitFilePushRuleRole() *GitFilePushRuleRole {
	this := GitFilePushRuleRole{}
	var name string = ""
	this.Name = *utils.NewNullableString(&name)
	return &this
}

// NewGitFilePushRuleRoleWithDefaults instantiates a new GitFilePushRuleRole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitFilePushRuleRoleWithDefaults() *GitFilePushRuleRole {
	this := GitFilePushRuleRole{}
	var name string = ""
	this.Name = *utils.NewNullableString(&name)
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GitFilePushRuleRole) GetName() string {
	if o == nil || utils.IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GitFilePushRuleRole) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *GitFilePushRuleRole) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given utils.NullableString and assigns it to the Name field.
func (o *GitFilePushRuleRole) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *GitFilePushRuleRole) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *GitFilePushRuleRole) UnsetName() {
	o.Name.Unset()
}

// GetRoleId returns the RoleId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GitFilePushRuleRole) GetRoleId() int64 {
	if o == nil || utils.IsNil(o.RoleId.Get()) {
		var ret int64
		return ret
	}
	return *o.RoleId.Get()
}

// GetRoleIdOk returns a tuple with the RoleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GitFilePushRuleRole) GetRoleIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RoleId.Get(), o.RoleId.IsSet()
}

// HasRoleId returns a boolean if a field has been set.
func (o *GitFilePushRuleRole) HasRoleId() bool {
	if o != nil && o.RoleId.IsSet() {
		return true
	}

	return false
}

// SetRoleId gets a reference to the given utils.NullableInt64 and assigns it to the RoleId field.
func (o *GitFilePushRuleRole) SetRoleId(v int64) {
	o.RoleId.Set(&v)
}
// SetRoleIdNil sets the value for RoleId to be an explicit nil
func (o *GitFilePushRuleRole) SetRoleIdNil() {
	o.RoleId.Set(nil)
}

// UnsetRoleId ensures that no value is present for RoleId, not even an explicit nil
func (o *GitFilePushRuleRole) UnsetRoleId() {
	o.RoleId.Unset()
}

func (o GitFilePushRuleRole) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitFilePushRuleRole) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["Name"] = o.Name.Get()
	}
	if o.RoleId.IsSet() {
		toSerialize["RoleId"] = o.RoleId.Get()
	}
	return toSerialize, nil
}

type NullableGitFilePushRuleRole struct {
	value *GitFilePushRuleRole
	isSet bool
}

func (v NullableGitFilePushRuleRole) Get() *GitFilePushRuleRole {
	return v.value
}

func (v *NullableGitFilePushRuleRole) Set(val *GitFilePushRuleRole) {
	v.value = val
	v.isSet = true
}

func (v NullableGitFilePushRuleRole) IsSet() bool {
	return v.isSet
}

func (v *NullableGitFilePushRuleRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitFilePushRuleRole(val *GitFilePushRuleRole) *NullableGitFilePushRuleRole {
	return &NullableGitFilePushRuleRole{value: val, isSet: true}
}

func (v NullableGitFilePushRuleRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitFilePushRuleRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


