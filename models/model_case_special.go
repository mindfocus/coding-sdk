/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the CaseSpecial type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CaseSpecial{}

// CaseSpecial 测试用例
type CaseSpecial struct {
	// 创建时间
	CreatedAt utils.NullableString `json:"CreatedAt,omitempty"`
	// 创建人ID
	CreatedBy utils.NullableString `json:"CreatedBy,omitempty"`
	// 自定义步骤
	CustomSteps []CustomStep `json:"CustomSteps,omitempty"`
	// 预期结果 （适用于文本用例）
	Expected utils.NullableString `json:"Expected,omitempty"`
	// ID 主键
	Id utils.NullableInt32 `json:"Id,omitempty"`
	// 前置步骤
	Preconds utils.NullableString `json:"Preconds,omitempty"`
	// 优先级
	Priority utils.NullableInt32 `json:"Priority,omitempty"`
	// 分组 ID
	SectionId utils.NullableInt32 `json:"SectionId,omitempty"`
	// 排序值
	Sort utils.NullableInt32 `json:"Sort,omitempty"`
	// 文本描述（适用于文本用例）
	Steps utils.NullableString `json:"Steps,omitempty"`
	// 用例类型，可选值：STEPS，TEXT
	TemplateType utils.NullableString `json:"TemplateType,omitempty"`
	// 标题
	Title utils.NullableString `json:"Title,omitempty"`
	// 更新时间
	UpdatedAt utils.NullableString `json:"UpdatedAt,omitempty"`
}

// NewCaseSpecial instantiates a new CaseSpecial object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCaseSpecial() *CaseSpecial {
	this := CaseSpecial{}
	var createdAt string = ""
	this.CreatedAt = *utils.NewNullableString(&createdAt)
	var createdBy string = ""
	this.CreatedBy = *utils.NewNullableString(&createdBy)
	var expected string = ""
	this.Expected = *utils.NewNullableString(&expected)
	var preconds string = ""
	this.Preconds = *utils.NewNullableString(&preconds)
	var steps string = ""
	this.Steps = *utils.NewNullableString(&steps)
	var templateType string = ""
	this.TemplateType = *utils.NewNullableString(&templateType)
	var title string = ""
	this.Title = *utils.NewNullableString(&title)
	var updatedAt string = ""
	this.UpdatedAt = *utils.NewNullableString(&updatedAt)
	return &this
}

// NewCaseSpecialWithDefaults instantiates a new CaseSpecial object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCaseSpecialWithDefaults() *CaseSpecial {
	this := CaseSpecial{}
	var createdAt string = ""
	this.CreatedAt = *utils.NewNullableString(&createdAt)
	var createdBy string = ""
	this.CreatedBy = *utils.NewNullableString(&createdBy)
	var expected string = ""
	this.Expected = *utils.NewNullableString(&expected)
	var preconds string = ""
	this.Preconds = *utils.NewNullableString(&preconds)
	var steps string = ""
	this.Steps = *utils.NewNullableString(&steps)
	var templateType string = ""
	this.TemplateType = *utils.NewNullableString(&templateType)
	var title string = ""
	this.Title = *utils.NewNullableString(&title)
	var updatedAt string = ""
	this.UpdatedAt = *utils.NewNullableString(&updatedAt)
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CaseSpecial) GetCreatedAt() string {
	if o == nil || utils.IsNil(o.CreatedAt.Get()) {
		var ret string
		return ret
	}
	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CaseSpecial) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *CaseSpecial) HasCreatedAt() bool {
	if o != nil && o.CreatedAt.IsSet() {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given utils.NullableString and assigns it to the CreatedAt field.
func (o *CaseSpecial) SetCreatedAt(v string) {
	o.CreatedAt.Set(&v)
}
// SetCreatedAtNil sets the value for CreatedAt to be an explicit nil
func (o *CaseSpecial) SetCreatedAtNil() {
	o.CreatedAt.Set(nil)
}

// UnsetCreatedAt ensures that no value is present for CreatedAt, not even an explicit nil
func (o *CaseSpecial) UnsetCreatedAt() {
	o.CreatedAt.Unset()
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CaseSpecial) GetCreatedBy() string {
	if o == nil || utils.IsNil(o.CreatedBy.Get()) {
		var ret string
		return ret
	}
	return *o.CreatedBy.Get()
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CaseSpecial) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedBy.Get(), o.CreatedBy.IsSet()
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *CaseSpecial) HasCreatedBy() bool {
	if o != nil && o.CreatedBy.IsSet() {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given utils.NullableString and assigns it to the CreatedBy field.
func (o *CaseSpecial) SetCreatedBy(v string) {
	o.CreatedBy.Set(&v)
}
// SetCreatedByNil sets the value for CreatedBy to be an explicit nil
func (o *CaseSpecial) SetCreatedByNil() {
	o.CreatedBy.Set(nil)
}

// UnsetCreatedBy ensures that no value is present for CreatedBy, not even an explicit nil
func (o *CaseSpecial) UnsetCreatedBy() {
	o.CreatedBy.Unset()
}

// GetCustomSteps returns the CustomSteps field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CaseSpecial) GetCustomSteps() []CustomStep {
	if o == nil {
		var ret []CustomStep
		return ret
	}
	return o.CustomSteps
}

// GetCustomStepsOk returns a tuple with the CustomSteps field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CaseSpecial) GetCustomStepsOk() ([]CustomStep, bool) {
	if o == nil || utils.IsNil(o.CustomSteps) {
		return nil, false
	}
	return o.CustomSteps, true
}

// HasCustomSteps returns a boolean if a field has been set.
func (o *CaseSpecial) HasCustomSteps() bool {
	if o != nil && !utils.IsNil(o.CustomSteps) {
		return true
	}

	return false
}

// SetCustomSteps gets a reference to the given []CustomStep and assigns it to the CustomSteps field.
func (o *CaseSpecial) SetCustomSteps(v []CustomStep) {
	o.CustomSteps = v
}

// GetExpected returns the Expected field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CaseSpecial) GetExpected() string {
	if o == nil || utils.IsNil(o.Expected.Get()) {
		var ret string
		return ret
	}
	return *o.Expected.Get()
}

// GetExpectedOk returns a tuple with the Expected field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CaseSpecial) GetExpectedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Expected.Get(), o.Expected.IsSet()
}

// HasExpected returns a boolean if a field has been set.
func (o *CaseSpecial) HasExpected() bool {
	if o != nil && o.Expected.IsSet() {
		return true
	}

	return false
}

// SetExpected gets a reference to the given utils.NullableString and assigns it to the Expected field.
func (o *CaseSpecial) SetExpected(v string) {
	o.Expected.Set(&v)
}
// SetExpectedNil sets the value for Expected to be an explicit nil
func (o *CaseSpecial) SetExpectedNil() {
	o.Expected.Set(nil)
}

// UnsetExpected ensures that no value is present for Expected, not even an explicit nil
func (o *CaseSpecial) UnsetExpected() {
	o.Expected.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CaseSpecial) GetId() int32 {
	if o == nil || utils.IsNil(o.Id.Get()) {
		var ret int32
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CaseSpecial) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *CaseSpecial) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given utils.NullableInt32 and assigns it to the Id field.
func (o *CaseSpecial) SetId(v int32) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *CaseSpecial) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *CaseSpecial) UnsetId() {
	o.Id.Unset()
}

// GetPreconds returns the Preconds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CaseSpecial) GetPreconds() string {
	if o == nil || utils.IsNil(o.Preconds.Get()) {
		var ret string
		return ret
	}
	return *o.Preconds.Get()
}

// GetPrecondsOk returns a tuple with the Preconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CaseSpecial) GetPrecondsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Preconds.Get(), o.Preconds.IsSet()
}

// HasPreconds returns a boolean if a field has been set.
func (o *CaseSpecial) HasPreconds() bool {
	if o != nil && o.Preconds.IsSet() {
		return true
	}

	return false
}

// SetPreconds gets a reference to the given utils.NullableString and assigns it to the Preconds field.
func (o *CaseSpecial) SetPreconds(v string) {
	o.Preconds.Set(&v)
}
// SetPrecondsNil sets the value for Preconds to be an explicit nil
func (o *CaseSpecial) SetPrecondsNil() {
	o.Preconds.Set(nil)
}

// UnsetPreconds ensures that no value is present for Preconds, not even an explicit nil
func (o *CaseSpecial) UnsetPreconds() {
	o.Preconds.Unset()
}

// GetPriority returns the Priority field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CaseSpecial) GetPriority() int32 {
	if o == nil || utils.IsNil(o.Priority.Get()) {
		var ret int32
		return ret
	}
	return *o.Priority.Get()
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CaseSpecial) GetPriorityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Priority.Get(), o.Priority.IsSet()
}

// HasPriority returns a boolean if a field has been set.
func (o *CaseSpecial) HasPriority() bool {
	if o != nil && o.Priority.IsSet() {
		return true
	}

	return false
}

// SetPriority gets a reference to the given utils.NullableInt32 and assigns it to the Priority field.
func (o *CaseSpecial) SetPriority(v int32) {
	o.Priority.Set(&v)
}
// SetPriorityNil sets the value for Priority to be an explicit nil
func (o *CaseSpecial) SetPriorityNil() {
	o.Priority.Set(nil)
}

// UnsetPriority ensures that no value is present for Priority, not even an explicit nil
func (o *CaseSpecial) UnsetPriority() {
	o.Priority.Unset()
}

// GetSectionId returns the SectionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CaseSpecial) GetSectionId() int32 {
	if o == nil || utils.IsNil(o.SectionId.Get()) {
		var ret int32
		return ret
	}
	return *o.SectionId.Get()
}

// GetSectionIdOk returns a tuple with the SectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CaseSpecial) GetSectionIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SectionId.Get(), o.SectionId.IsSet()
}

// HasSectionId returns a boolean if a field has been set.
func (o *CaseSpecial) HasSectionId() bool {
	if o != nil && o.SectionId.IsSet() {
		return true
	}

	return false
}

// SetSectionId gets a reference to the given utils.NullableInt32 and assigns it to the SectionId field.
func (o *CaseSpecial) SetSectionId(v int32) {
	o.SectionId.Set(&v)
}
// SetSectionIdNil sets the value for SectionId to be an explicit nil
func (o *CaseSpecial) SetSectionIdNil() {
	o.SectionId.Set(nil)
}

// UnsetSectionId ensures that no value is present for SectionId, not even an explicit nil
func (o *CaseSpecial) UnsetSectionId() {
	o.SectionId.Unset()
}

// GetSort returns the Sort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CaseSpecial) GetSort() int32 {
	if o == nil || utils.IsNil(o.Sort.Get()) {
		var ret int32
		return ret
	}
	return *o.Sort.Get()
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CaseSpecial) GetSortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sort.Get(), o.Sort.IsSet()
}

// HasSort returns a boolean if a field has been set.
func (o *CaseSpecial) HasSort() bool {
	if o != nil && o.Sort.IsSet() {
		return true
	}

	return false
}

// SetSort gets a reference to the given utils.NullableInt32 and assigns it to the Sort field.
func (o *CaseSpecial) SetSort(v int32) {
	o.Sort.Set(&v)
}
// SetSortNil sets the value for Sort to be an explicit nil
func (o *CaseSpecial) SetSortNil() {
	o.Sort.Set(nil)
}

// UnsetSort ensures that no value is present for Sort, not even an explicit nil
func (o *CaseSpecial) UnsetSort() {
	o.Sort.Unset()
}

// GetSteps returns the Steps field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CaseSpecial) GetSteps() string {
	if o == nil || utils.IsNil(o.Steps.Get()) {
		var ret string
		return ret
	}
	return *o.Steps.Get()
}

// GetStepsOk returns a tuple with the Steps field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CaseSpecial) GetStepsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Steps.Get(), o.Steps.IsSet()
}

// HasSteps returns a boolean if a field has been set.
func (o *CaseSpecial) HasSteps() bool {
	if o != nil && o.Steps.IsSet() {
		return true
	}

	return false
}

// SetSteps gets a reference to the given utils.NullableString and assigns it to the Steps field.
func (o *CaseSpecial) SetSteps(v string) {
	o.Steps.Set(&v)
}
// SetStepsNil sets the value for Steps to be an explicit nil
func (o *CaseSpecial) SetStepsNil() {
	o.Steps.Set(nil)
}

// UnsetSteps ensures that no value is present for Steps, not even an explicit nil
func (o *CaseSpecial) UnsetSteps() {
	o.Steps.Unset()
}

// GetTemplateType returns the TemplateType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CaseSpecial) GetTemplateType() string {
	if o == nil || utils.IsNil(o.TemplateType.Get()) {
		var ret string
		return ret
	}
	return *o.TemplateType.Get()
}

// GetTemplateTypeOk returns a tuple with the TemplateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CaseSpecial) GetTemplateTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TemplateType.Get(), o.TemplateType.IsSet()
}

// HasTemplateType returns a boolean if a field has been set.
func (o *CaseSpecial) HasTemplateType() bool {
	if o != nil && o.TemplateType.IsSet() {
		return true
	}

	return false
}

// SetTemplateType gets a reference to the given utils.NullableString and assigns it to the TemplateType field.
func (o *CaseSpecial) SetTemplateType(v string) {
	o.TemplateType.Set(&v)
}
// SetTemplateTypeNil sets the value for TemplateType to be an explicit nil
func (o *CaseSpecial) SetTemplateTypeNil() {
	o.TemplateType.Set(nil)
}

// UnsetTemplateType ensures that no value is present for TemplateType, not even an explicit nil
func (o *CaseSpecial) UnsetTemplateType() {
	o.TemplateType.Unset()
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CaseSpecial) GetTitle() string {
	if o == nil || utils.IsNil(o.Title.Get()) {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CaseSpecial) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *CaseSpecial) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given utils.NullableString and assigns it to the Title field.
func (o *CaseSpecial) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *CaseSpecial) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *CaseSpecial) UnsetTitle() {
	o.Title.Unset()
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CaseSpecial) GetUpdatedAt() string {
	if o == nil || utils.IsNil(o.UpdatedAt.Get()) {
		var ret string
		return ret
	}
	return *o.UpdatedAt.Get()
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CaseSpecial) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedAt.Get(), o.UpdatedAt.IsSet()
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *CaseSpecial) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt.IsSet() {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given utils.NullableString and assigns it to the UpdatedAt field.
func (o *CaseSpecial) SetUpdatedAt(v string) {
	o.UpdatedAt.Set(&v)
}
// SetUpdatedAtNil sets the value for UpdatedAt to be an explicit nil
func (o *CaseSpecial) SetUpdatedAtNil() {
	o.UpdatedAt.Set(nil)
}

// UnsetUpdatedAt ensures that no value is present for UpdatedAt, not even an explicit nil
func (o *CaseSpecial) UnsetUpdatedAt() {
	o.UpdatedAt.Unset()
}

func (o CaseSpecial) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CaseSpecial) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedAt.IsSet() {
		toSerialize["CreatedAt"] = o.CreatedAt.Get()
	}
	if o.CreatedBy.IsSet() {
		toSerialize["CreatedBy"] = o.CreatedBy.Get()
	}
	if o.CustomSteps != nil {
		toSerialize["CustomSteps"] = o.CustomSteps
	}
	if o.Expected.IsSet() {
		toSerialize["Expected"] = o.Expected.Get()
	}
	if o.Id.IsSet() {
		toSerialize["Id"] = o.Id.Get()
	}
	if o.Preconds.IsSet() {
		toSerialize["Preconds"] = o.Preconds.Get()
	}
	if o.Priority.IsSet() {
		toSerialize["Priority"] = o.Priority.Get()
	}
	if o.SectionId.IsSet() {
		toSerialize["SectionId"] = o.SectionId.Get()
	}
	if o.Sort.IsSet() {
		toSerialize["Sort"] = o.Sort.Get()
	}
	if o.Steps.IsSet() {
		toSerialize["Steps"] = o.Steps.Get()
	}
	if o.TemplateType.IsSet() {
		toSerialize["TemplateType"] = o.TemplateType.Get()
	}
	if o.Title.IsSet() {
		toSerialize["Title"] = o.Title.Get()
	}
	if o.UpdatedAt.IsSet() {
		toSerialize["UpdatedAt"] = o.UpdatedAt.Get()
	}
	return toSerialize, nil
}

type NullableCaseSpecial struct {
	value *CaseSpecial
	isSet bool
}

func (v NullableCaseSpecial) Get() *CaseSpecial {
	return v.value
}

func (v *NullableCaseSpecial) Set(val *CaseSpecial) {
	v.value = val
	v.isSet = true
}

func (v NullableCaseSpecial) IsSet() bool {
	return v.isSet
}

func (v *NullableCaseSpecial) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCaseSpecial(val *CaseSpecial) *NullableCaseSpecial {
	return &NullableCaseSpecial{value: val, isSet: true}
}

func (v NullableCaseSpecial) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCaseSpecial) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


