/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DescribeCodeSearchRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DescribeCodeSearchRequest{}

// DescribeCodeSearchRequest struct for DescribeCodeSearchRequest
type DescribeCodeSearchRequest struct {
	// 分支名称
	BranchName string `json:"BranchName"`
	// 仓库路径
	DepotPath string `json:"DepotPath"`
	// 文件路径（如需查询某个路径下的代码片段，需要输入此参数）
	FilePath *string `json:"FilePath,omitempty"`
	// 查询代码片段关键字
	KeyWord string `json:"KeyWord"`
	// 页码数量
	PageNumber int64 `json:"PageNumber"`
	// 页码大小
	PageSize int64 `json:"PageSize"`
}

type _DescribeCodeSearchRequest DescribeCodeSearchRequest

// NewDescribeCodeSearchRequest instantiates a new DescribeCodeSearchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeCodeSearchRequest(branchName string, depotPath string, keyWord string, pageNumber int64, pageSize int64) *DescribeCodeSearchRequest {
	this := DescribeCodeSearchRequest{}
	this.BranchName = branchName
	this.DepotPath = depotPath
	this.KeyWord = keyWord
	this.PageNumber = pageNumber
	this.PageSize = pageSize
	return &this
}

// NewDescribeCodeSearchRequestWithDefaults instantiates a new DescribeCodeSearchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeCodeSearchRequestWithDefaults() *DescribeCodeSearchRequest {
	this := DescribeCodeSearchRequest{}
	return &this
}

// GetBranchName returns the BranchName field value
func (o *DescribeCodeSearchRequest) GetBranchName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BranchName
}

// GetBranchNameOk returns a tuple with the BranchName field value
// and a boolean to check if the value has been set.
func (o *DescribeCodeSearchRequest) GetBranchNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BranchName, true
}

// SetBranchName sets field value
func (o *DescribeCodeSearchRequest) SetBranchName(v string) {
	o.BranchName = v
}

// GetDepotPath returns the DepotPath field value
func (o *DescribeCodeSearchRequest) GetDepotPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DepotPath
}

// GetDepotPathOk returns a tuple with the DepotPath field value
// and a boolean to check if the value has been set.
func (o *DescribeCodeSearchRequest) GetDepotPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepotPath, true
}

// SetDepotPath sets field value
func (o *DescribeCodeSearchRequest) SetDepotPath(v string) {
	o.DepotPath = v
}

// GetFilePath returns the FilePath field value if set, zero value otherwise.
func (o *DescribeCodeSearchRequest) GetFilePath() string {
	if o == nil || utils.IsNil(o.FilePath) {
		var ret string
		return ret
	}
	return *o.FilePath
}

// GetFilePathOk returns a tuple with the FilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeCodeSearchRequest) GetFilePathOk() (*string, bool) {
	if o == nil || utils.IsNil(o.FilePath) {
		return nil, false
	}
	return o.FilePath, true
}

// HasFilePath returns a boolean if a field has been set.
func (o *DescribeCodeSearchRequest) HasFilePath() bool {
	if o != nil && !utils.IsNil(o.FilePath) {
		return true
	}

	return false
}

// SetFilePath gets a reference to the given string and assigns it to the FilePath field.
func (o *DescribeCodeSearchRequest) SetFilePath(v string) {
	o.FilePath = &v
}

// GetKeyWord returns the KeyWord field value
func (o *DescribeCodeSearchRequest) GetKeyWord() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeyWord
}

// GetKeyWordOk returns a tuple with the KeyWord field value
// and a boolean to check if the value has been set.
func (o *DescribeCodeSearchRequest) GetKeyWordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyWord, true
}

// SetKeyWord sets field value
func (o *DescribeCodeSearchRequest) SetKeyWord(v string) {
	o.KeyWord = v
}

// GetPageNumber returns the PageNumber field value
func (o *DescribeCodeSearchRequest) GetPageNumber() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.PageNumber
}

// GetPageNumberOk returns a tuple with the PageNumber field value
// and a boolean to check if the value has been set.
func (o *DescribeCodeSearchRequest) GetPageNumberOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PageNumber, true
}

// SetPageNumber sets field value
func (o *DescribeCodeSearchRequest) SetPageNumber(v int64) {
	o.PageNumber = v
}

// GetPageSize returns the PageSize field value
func (o *DescribeCodeSearchRequest) GetPageSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value
// and a boolean to check if the value has been set.
func (o *DescribeCodeSearchRequest) GetPageSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PageSize, true
}

// SetPageSize sets field value
func (o *DescribeCodeSearchRequest) SetPageSize(v int64) {
	o.PageSize = v
}

func (o DescribeCodeSearchRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeCodeSearchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["BranchName"] = o.BranchName
	toSerialize["DepotPath"] = o.DepotPath
	if !utils.IsNil(o.FilePath) {
		toSerialize["FilePath"] = o.FilePath
	}
	toSerialize["KeyWord"] = o.KeyWord
	toSerialize["PageNumber"] = o.PageNumber
	toSerialize["PageSize"] = o.PageSize
	return toSerialize, nil
}

func (o *DescribeCodeSearchRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"BranchName",
		"DepotPath",
		"KeyWord",
		"PageNumber",
		"PageSize",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescribeCodeSearchRequest := _DescribeCodeSearchRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDescribeCodeSearchRequest)

	if err != nil {
		return err
	}

	*o = DescribeCodeSearchRequest(varDescribeCodeSearchRequest)

	return err
}

type NullableDescribeCodeSearchRequest struct {
	value *DescribeCodeSearchRequest
	isSet bool
}

func (v NullableDescribeCodeSearchRequest) Get() *DescribeCodeSearchRequest {
	return v.value
}

func (v *NullableDescribeCodeSearchRequest) Set(val *DescribeCodeSearchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeCodeSearchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeCodeSearchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeCodeSearchRequest(val *DescribeCodeSearchRequest) *NullableDescribeCodeSearchRequest {
	return &NullableDescribeCodeSearchRequest{value: val, isSet: true}
}

func (v NullableDescribeCodeSearchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeCodeSearchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


