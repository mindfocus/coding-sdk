/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the WikiData type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &WikiData{}

// WikiData wiki的具体信息
type WikiData struct {
	// 是否为维护者
	CanMaintain *bool `json:"CanMaintain,omitempty"`
	// 是否可以阅读
	CanRead utils.NullableBool `json:"CanRead,omitempty"`
	// 内容
	Content *string `json:"Content,omitempty"`
	// 创建时间
	CreatedAt map[string]interface{} `json:"CreatedAt,omitempty"`
	Creator *User `json:"Creator,omitempty"`
	// 当前versionId
	CurrentVersion *int64 `json:"CurrentVersion,omitempty"`
	Editor *User `json:"Editor,omitempty"`
	// 修改次数
	HistoriesCount *int64 `json:"HistoriesCount,omitempty"`
	// wiki历史Id
	HistoryId *int64 `json:"HistoryId,omitempty"`
	// 内容转成的html
	Html *string `json:"Html,omitempty"`
	// wikiId
	Id *int64 `json:"Id,omitempty"`
	// wik的code
	Iid *int64 `json:"Iid,omitempty"`
	// 最新versionId
	LastVersion *int64 `json:"LastVersion,omitempty"`
	// 提交说明
	Msg utils.NullableString `json:"Msg,omitempty"`
	// 所处顺序位置
	Order *int64 `json:"Order,omitempty"`
	// 父级 IiD
	ParentIid *int64 `json:"ParentIid,omitempty"`
	// 是否父级分享
	ParentShared *bool `json:"ParentShared,omitempty"`
	// 父级可见范围
	ParentVisibleRange utils.NullableString `json:"ParentVisibleRange,omitempty"`
	// 路径
	Path utils.NullableString `json:"Path,omitempty"`
	// 标题
	Title *string `json:"Title,omitempty"`
	// 修改时间
	UpdatedAt map[string]interface{} `json:"UpdatedAt,omitempty"`
	// 可见范围
	VisibleRange utils.NullableString `json:"VisibleRange,omitempty"`
}

// NewWikiData instantiates a new WikiData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWikiData() *WikiData {
	this := WikiData{}
	var canMaintain bool = false
	this.CanMaintain = &canMaintain
	var canRead bool = false
	this.CanRead = *utils.NewNullableBool(&canRead)
	var content string = ""
	this.Content = &content
	var html string = ""
	this.Html = &html
	var msg string = ""
	this.Msg = *utils.NewNullableString(&msg)
	var parentShared bool = false
	this.ParentShared = &parentShared
	var parentVisibleRange string = ""
	this.ParentVisibleRange = *utils.NewNullableString(&parentVisibleRange)
	var path string = ""
	this.Path = *utils.NewNullableString(&path)
	var title string = ""
	this.Title = &title
	var visibleRange string = ""
	this.VisibleRange = *utils.NewNullableString(&visibleRange)
	return &this
}

// NewWikiDataWithDefaults instantiates a new WikiData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWikiDataWithDefaults() *WikiData {
	this := WikiData{}
	var canMaintain bool = false
	this.CanMaintain = &canMaintain
	var canRead bool = false
	this.CanRead = *utils.NewNullableBool(&canRead)
	var content string = ""
	this.Content = &content
	var html string = ""
	this.Html = &html
	var msg string = ""
	this.Msg = *utils.NewNullableString(&msg)
	var parentShared bool = false
	this.ParentShared = &parentShared
	var parentVisibleRange string = ""
	this.ParentVisibleRange = *utils.NewNullableString(&parentVisibleRange)
	var path string = ""
	this.Path = *utils.NewNullableString(&path)
	var title string = ""
	this.Title = &title
	var visibleRange string = ""
	this.VisibleRange = *utils.NewNullableString(&visibleRange)
	return &this
}

// GetCanMaintain returns the CanMaintain field value if set, zero value otherwise.
func (o *WikiData) GetCanMaintain() bool {
	if o == nil || utils.IsNil(o.CanMaintain) {
		var ret bool
		return ret
	}
	return *o.CanMaintain
}

// GetCanMaintainOk returns a tuple with the CanMaintain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WikiData) GetCanMaintainOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.CanMaintain) {
		return nil, false
	}
	return o.CanMaintain, true
}

// HasCanMaintain returns a boolean if a field has been set.
func (o *WikiData) HasCanMaintain() bool {
	if o != nil && !utils.IsNil(o.CanMaintain) {
		return true
	}

	return false
}

// SetCanMaintain gets a reference to the given bool and assigns it to the CanMaintain field.
func (o *WikiData) SetCanMaintain(v bool) {
	o.CanMaintain = &v
}

// GetCanRead returns the CanRead field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WikiData) GetCanRead() bool {
	if o == nil || utils.IsNil(o.CanRead.Get()) {
		var ret bool
		return ret
	}
	return *o.CanRead.Get()
}

// GetCanReadOk returns a tuple with the CanRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WikiData) GetCanReadOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CanRead.Get(), o.CanRead.IsSet()
}

// HasCanRead returns a boolean if a field has been set.
func (o *WikiData) HasCanRead() bool {
	if o != nil && o.CanRead.IsSet() {
		return true
	}

	return false
}

// SetCanRead gets a reference to the given utils.NullableBool and assigns it to the CanRead field.
func (o *WikiData) SetCanRead(v bool) {
	o.CanRead.Set(&v)
}
// SetCanReadNil sets the value for CanRead to be an explicit nil
func (o *WikiData) SetCanReadNil() {
	o.CanRead.Set(nil)
}

// UnsetCanRead ensures that no value is present for CanRead, not even an explicit nil
func (o *WikiData) UnsetCanRead() {
	o.CanRead.Unset()
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *WikiData) GetContent() string {
	if o == nil || utils.IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WikiData) GetContentOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *WikiData) HasContent() bool {
	if o != nil && !utils.IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *WikiData) SetContent(v string) {
	o.Content = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *WikiData) GetCreatedAt() map[string]interface{} {
	if o == nil || utils.IsNil(o.CreatedAt) {
		var ret map[string]interface{}
		return ret
	}
	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WikiData) GetCreatedAtOk() (map[string]interface{}, bool) {
	if o == nil || utils.IsNil(o.CreatedAt) {
		return map[string]interface{}{}, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *WikiData) HasCreatedAt() bool {
	if o != nil && !utils.IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given map[string]interface{} and assigns it to the CreatedAt field.
func (o *WikiData) SetCreatedAt(v map[string]interface{}) {
	o.CreatedAt = v
}

// GetCreator returns the Creator field value if set, zero value otherwise.
func (o *WikiData) GetCreator() User {
	if o == nil || utils.IsNil(o.Creator) {
		var ret User
		return ret
	}
	return *o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WikiData) GetCreatorOk() (*User, bool) {
	if o == nil || utils.IsNil(o.Creator) {
		return nil, false
	}
	return o.Creator, true
}

// HasCreator returns a boolean if a field has been set.
func (o *WikiData) HasCreator() bool {
	if o != nil && !utils.IsNil(o.Creator) {
		return true
	}

	return false
}

// SetCreator gets a reference to the given User and assigns it to the Creator field.
func (o *WikiData) SetCreator(v User) {
	o.Creator = &v
}

// GetCurrentVersion returns the CurrentVersion field value if set, zero value otherwise.
func (o *WikiData) GetCurrentVersion() int64 {
	if o == nil || utils.IsNil(o.CurrentVersion) {
		var ret int64
		return ret
	}
	return *o.CurrentVersion
}

// GetCurrentVersionOk returns a tuple with the CurrentVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WikiData) GetCurrentVersionOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.CurrentVersion) {
		return nil, false
	}
	return o.CurrentVersion, true
}

// HasCurrentVersion returns a boolean if a field has been set.
func (o *WikiData) HasCurrentVersion() bool {
	if o != nil && !utils.IsNil(o.CurrentVersion) {
		return true
	}

	return false
}

// SetCurrentVersion gets a reference to the given int64 and assigns it to the CurrentVersion field.
func (o *WikiData) SetCurrentVersion(v int64) {
	o.CurrentVersion = &v
}

// GetEditor returns the Editor field value if set, zero value otherwise.
func (o *WikiData) GetEditor() User {
	if o == nil || utils.IsNil(o.Editor) {
		var ret User
		return ret
	}
	return *o.Editor
}

// GetEditorOk returns a tuple with the Editor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WikiData) GetEditorOk() (*User, bool) {
	if o == nil || utils.IsNil(o.Editor) {
		return nil, false
	}
	return o.Editor, true
}

// HasEditor returns a boolean if a field has been set.
func (o *WikiData) HasEditor() bool {
	if o != nil && !utils.IsNil(o.Editor) {
		return true
	}

	return false
}

// SetEditor gets a reference to the given User and assigns it to the Editor field.
func (o *WikiData) SetEditor(v User) {
	o.Editor = &v
}

// GetHistoriesCount returns the HistoriesCount field value if set, zero value otherwise.
func (o *WikiData) GetHistoriesCount() int64 {
	if o == nil || utils.IsNil(o.HistoriesCount) {
		var ret int64
		return ret
	}
	return *o.HistoriesCount
}

// GetHistoriesCountOk returns a tuple with the HistoriesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WikiData) GetHistoriesCountOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.HistoriesCount) {
		return nil, false
	}
	return o.HistoriesCount, true
}

// HasHistoriesCount returns a boolean if a field has been set.
func (o *WikiData) HasHistoriesCount() bool {
	if o != nil && !utils.IsNil(o.HistoriesCount) {
		return true
	}

	return false
}

// SetHistoriesCount gets a reference to the given int64 and assigns it to the HistoriesCount field.
func (o *WikiData) SetHistoriesCount(v int64) {
	o.HistoriesCount = &v
}

// GetHistoryId returns the HistoryId field value if set, zero value otherwise.
func (o *WikiData) GetHistoryId() int64 {
	if o == nil || utils.IsNil(o.HistoryId) {
		var ret int64
		return ret
	}
	return *o.HistoryId
}

// GetHistoryIdOk returns a tuple with the HistoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WikiData) GetHistoryIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.HistoryId) {
		return nil, false
	}
	return o.HistoryId, true
}

// HasHistoryId returns a boolean if a field has been set.
func (o *WikiData) HasHistoryId() bool {
	if o != nil && !utils.IsNil(o.HistoryId) {
		return true
	}

	return false
}

// SetHistoryId gets a reference to the given int64 and assigns it to the HistoryId field.
func (o *WikiData) SetHistoryId(v int64) {
	o.HistoryId = &v
}

// GetHtml returns the Html field value if set, zero value otherwise.
func (o *WikiData) GetHtml() string {
	if o == nil || utils.IsNil(o.Html) {
		var ret string
		return ret
	}
	return *o.Html
}

// GetHtmlOk returns a tuple with the Html field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WikiData) GetHtmlOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Html) {
		return nil, false
	}
	return o.Html, true
}

// HasHtml returns a boolean if a field has been set.
func (o *WikiData) HasHtml() bool {
	if o != nil && !utils.IsNil(o.Html) {
		return true
	}

	return false
}

// SetHtml gets a reference to the given string and assigns it to the Html field.
func (o *WikiData) SetHtml(v string) {
	o.Html = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WikiData) GetId() int64 {
	if o == nil || utils.IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WikiData) GetIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WikiData) HasId() bool {
	if o != nil && !utils.IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *WikiData) SetId(v int64) {
	o.Id = &v
}

// GetIid returns the Iid field value if set, zero value otherwise.
func (o *WikiData) GetIid() int64 {
	if o == nil || utils.IsNil(o.Iid) {
		var ret int64
		return ret
	}
	return *o.Iid
}

// GetIidOk returns a tuple with the Iid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WikiData) GetIidOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Iid) {
		return nil, false
	}
	return o.Iid, true
}

// HasIid returns a boolean if a field has been set.
func (o *WikiData) HasIid() bool {
	if o != nil && !utils.IsNil(o.Iid) {
		return true
	}

	return false
}

// SetIid gets a reference to the given int64 and assigns it to the Iid field.
func (o *WikiData) SetIid(v int64) {
	o.Iid = &v
}

// GetLastVersion returns the LastVersion field value if set, zero value otherwise.
func (o *WikiData) GetLastVersion() int64 {
	if o == nil || utils.IsNil(o.LastVersion) {
		var ret int64
		return ret
	}
	return *o.LastVersion
}

// GetLastVersionOk returns a tuple with the LastVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WikiData) GetLastVersionOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.LastVersion) {
		return nil, false
	}
	return o.LastVersion, true
}

// HasLastVersion returns a boolean if a field has been set.
func (o *WikiData) HasLastVersion() bool {
	if o != nil && !utils.IsNil(o.LastVersion) {
		return true
	}

	return false
}

// SetLastVersion gets a reference to the given int64 and assigns it to the LastVersion field.
func (o *WikiData) SetLastVersion(v int64) {
	o.LastVersion = &v
}

// GetMsg returns the Msg field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WikiData) GetMsg() string {
	if o == nil || utils.IsNil(o.Msg.Get()) {
		var ret string
		return ret
	}
	return *o.Msg.Get()
}

// GetMsgOk returns a tuple with the Msg field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WikiData) GetMsgOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Msg.Get(), o.Msg.IsSet()
}

// HasMsg returns a boolean if a field has been set.
func (o *WikiData) HasMsg() bool {
	if o != nil && o.Msg.IsSet() {
		return true
	}

	return false
}

// SetMsg gets a reference to the given utils.NullableString and assigns it to the Msg field.
func (o *WikiData) SetMsg(v string) {
	o.Msg.Set(&v)
}
// SetMsgNil sets the value for Msg to be an explicit nil
func (o *WikiData) SetMsgNil() {
	o.Msg.Set(nil)
}

// UnsetMsg ensures that no value is present for Msg, not even an explicit nil
func (o *WikiData) UnsetMsg() {
	o.Msg.Unset()
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *WikiData) GetOrder() int64 {
	if o == nil || utils.IsNil(o.Order) {
		var ret int64
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WikiData) GetOrderOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *WikiData) HasOrder() bool {
	if o != nil && !utils.IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given int64 and assigns it to the Order field.
func (o *WikiData) SetOrder(v int64) {
	o.Order = &v
}

// GetParentIid returns the ParentIid field value if set, zero value otherwise.
func (o *WikiData) GetParentIid() int64 {
	if o == nil || utils.IsNil(o.ParentIid) {
		var ret int64
		return ret
	}
	return *o.ParentIid
}

// GetParentIidOk returns a tuple with the ParentIid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WikiData) GetParentIidOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.ParentIid) {
		return nil, false
	}
	return o.ParentIid, true
}

// HasParentIid returns a boolean if a field has been set.
func (o *WikiData) HasParentIid() bool {
	if o != nil && !utils.IsNil(o.ParentIid) {
		return true
	}

	return false
}

// SetParentIid gets a reference to the given int64 and assigns it to the ParentIid field.
func (o *WikiData) SetParentIid(v int64) {
	o.ParentIid = &v
}

// GetParentShared returns the ParentShared field value if set, zero value otherwise.
func (o *WikiData) GetParentShared() bool {
	if o == nil || utils.IsNil(o.ParentShared) {
		var ret bool
		return ret
	}
	return *o.ParentShared
}

// GetParentSharedOk returns a tuple with the ParentShared field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WikiData) GetParentSharedOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.ParentShared) {
		return nil, false
	}
	return o.ParentShared, true
}

// HasParentShared returns a boolean if a field has been set.
func (o *WikiData) HasParentShared() bool {
	if o != nil && !utils.IsNil(o.ParentShared) {
		return true
	}

	return false
}

// SetParentShared gets a reference to the given bool and assigns it to the ParentShared field.
func (o *WikiData) SetParentShared(v bool) {
	o.ParentShared = &v
}

// GetParentVisibleRange returns the ParentVisibleRange field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WikiData) GetParentVisibleRange() string {
	if o == nil || utils.IsNil(o.ParentVisibleRange.Get()) {
		var ret string
		return ret
	}
	return *o.ParentVisibleRange.Get()
}

// GetParentVisibleRangeOk returns a tuple with the ParentVisibleRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WikiData) GetParentVisibleRangeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentVisibleRange.Get(), o.ParentVisibleRange.IsSet()
}

// HasParentVisibleRange returns a boolean if a field has been set.
func (o *WikiData) HasParentVisibleRange() bool {
	if o != nil && o.ParentVisibleRange.IsSet() {
		return true
	}

	return false
}

// SetParentVisibleRange gets a reference to the given utils.NullableString and assigns it to the ParentVisibleRange field.
func (o *WikiData) SetParentVisibleRange(v string) {
	o.ParentVisibleRange.Set(&v)
}
// SetParentVisibleRangeNil sets the value for ParentVisibleRange to be an explicit nil
func (o *WikiData) SetParentVisibleRangeNil() {
	o.ParentVisibleRange.Set(nil)
}

// UnsetParentVisibleRange ensures that no value is present for ParentVisibleRange, not even an explicit nil
func (o *WikiData) UnsetParentVisibleRange() {
	o.ParentVisibleRange.Unset()
}

// GetPath returns the Path field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WikiData) GetPath() string {
	if o == nil || utils.IsNil(o.Path.Get()) {
		var ret string
		return ret
	}
	return *o.Path.Get()
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WikiData) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Path.Get(), o.Path.IsSet()
}

// HasPath returns a boolean if a field has been set.
func (o *WikiData) HasPath() bool {
	if o != nil && o.Path.IsSet() {
		return true
	}

	return false
}

// SetPath gets a reference to the given utils.NullableString and assigns it to the Path field.
func (o *WikiData) SetPath(v string) {
	o.Path.Set(&v)
}
// SetPathNil sets the value for Path to be an explicit nil
func (o *WikiData) SetPathNil() {
	o.Path.Set(nil)
}

// UnsetPath ensures that no value is present for Path, not even an explicit nil
func (o *WikiData) UnsetPath() {
	o.Path.Unset()
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *WikiData) GetTitle() string {
	if o == nil || utils.IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WikiData) GetTitleOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *WikiData) HasTitle() bool {
	if o != nil && !utils.IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *WikiData) SetTitle(v string) {
	o.Title = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *WikiData) GetUpdatedAt() map[string]interface{} {
	if o == nil || utils.IsNil(o.UpdatedAt) {
		var ret map[string]interface{}
		return ret
	}
	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WikiData) GetUpdatedAtOk() (map[string]interface{}, bool) {
	if o == nil || utils.IsNil(o.UpdatedAt) {
		return map[string]interface{}{}, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *WikiData) HasUpdatedAt() bool {
	if o != nil && !utils.IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given map[string]interface{} and assigns it to the UpdatedAt field.
func (o *WikiData) SetUpdatedAt(v map[string]interface{}) {
	o.UpdatedAt = v
}

// GetVisibleRange returns the VisibleRange field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WikiData) GetVisibleRange() string {
	if o == nil || utils.IsNil(o.VisibleRange.Get()) {
		var ret string
		return ret
	}
	return *o.VisibleRange.Get()
}

// GetVisibleRangeOk returns a tuple with the VisibleRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WikiData) GetVisibleRangeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VisibleRange.Get(), o.VisibleRange.IsSet()
}

// HasVisibleRange returns a boolean if a field has been set.
func (o *WikiData) HasVisibleRange() bool {
	if o != nil && o.VisibleRange.IsSet() {
		return true
	}

	return false
}

// SetVisibleRange gets a reference to the given utils.NullableString and assigns it to the VisibleRange field.
func (o *WikiData) SetVisibleRange(v string) {
	o.VisibleRange.Set(&v)
}
// SetVisibleRangeNil sets the value for VisibleRange to be an explicit nil
func (o *WikiData) SetVisibleRangeNil() {
	o.VisibleRange.Set(nil)
}

// UnsetVisibleRange ensures that no value is present for VisibleRange, not even an explicit nil
func (o *WikiData) UnsetVisibleRange() {
	o.VisibleRange.Unset()
}

func (o WikiData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WikiData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.CanMaintain) {
		toSerialize["CanMaintain"] = o.CanMaintain
	}
	if o.CanRead.IsSet() {
		toSerialize["CanRead"] = o.CanRead.Get()
	}
	if !utils.IsNil(o.Content) {
		toSerialize["Content"] = o.Content
	}
	if !utils.IsNil(o.CreatedAt) {
		toSerialize["CreatedAt"] = o.CreatedAt
	}
	if !utils.IsNil(o.Creator) {
		toSerialize["Creator"] = o.Creator
	}
	if !utils.IsNil(o.CurrentVersion) {
		toSerialize["CurrentVersion"] = o.CurrentVersion
	}
	if !utils.IsNil(o.Editor) {
		toSerialize["Editor"] = o.Editor
	}
	if !utils.IsNil(o.HistoriesCount) {
		toSerialize["HistoriesCount"] = o.HistoriesCount
	}
	if !utils.IsNil(o.HistoryId) {
		toSerialize["HistoryId"] = o.HistoryId
	}
	if !utils.IsNil(o.Html) {
		toSerialize["Html"] = o.Html
	}
	if !utils.IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !utils.IsNil(o.Iid) {
		toSerialize["Iid"] = o.Iid
	}
	if !utils.IsNil(o.LastVersion) {
		toSerialize["LastVersion"] = o.LastVersion
	}
	if o.Msg.IsSet() {
		toSerialize["Msg"] = o.Msg.Get()
	}
	if !utils.IsNil(o.Order) {
		toSerialize["Order"] = o.Order
	}
	if !utils.IsNil(o.ParentIid) {
		toSerialize["ParentIid"] = o.ParentIid
	}
	if !utils.IsNil(o.ParentShared) {
		toSerialize["ParentShared"] = o.ParentShared
	}
	if o.ParentVisibleRange.IsSet() {
		toSerialize["ParentVisibleRange"] = o.ParentVisibleRange.Get()
	}
	if o.Path.IsSet() {
		toSerialize["Path"] = o.Path.Get()
	}
	if !utils.IsNil(o.Title) {
		toSerialize["Title"] = o.Title
	}
	if !utils.IsNil(o.UpdatedAt) {
		toSerialize["UpdatedAt"] = o.UpdatedAt
	}
	if o.VisibleRange.IsSet() {
		toSerialize["VisibleRange"] = o.VisibleRange.Get()
	}
	return toSerialize, nil
}

type NullableWikiData struct {
	value *WikiData
	isSet bool
}

func (v NullableWikiData) Get() *WikiData {
	return v.value
}

func (v *NullableWikiData) Set(val *WikiData) {
	v.value = val
	v.isSet = true
}

func (v NullableWikiData) IsSet() bool {
	return v.isSet
}

func (v *NullableWikiData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWikiData(val *WikiData) *NullableWikiData {
	return &NullableWikiData{value: val, isSet: true}
}

func (v NullableWikiData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWikiData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


