/*
CODING OPEN API

  

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DescribeCdPipelineConfigResponseData type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DescribeCdPipelineConfigResponseData{}

// DescribeCdPipelineConfigResponseData DescribeCdPipelineConfigResponseData 结构
type DescribeCdPipelineConfigResponseData struct {
	PipelineConfig *PipelineConfig `json:"PipelineConfig,omitempty"`
}

// NewDescribeCdPipelineConfigResponseData instantiates a new DescribeCdPipelineConfigResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeCdPipelineConfigResponseData() *DescribeCdPipelineConfigResponseData {
	this := DescribeCdPipelineConfigResponseData{}
	return &this
}

// NewDescribeCdPipelineConfigResponseDataWithDefaults instantiates a new DescribeCdPipelineConfigResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeCdPipelineConfigResponseDataWithDefaults() *DescribeCdPipelineConfigResponseData {
	this := DescribeCdPipelineConfigResponseData{}
	return &this
}

// GetPipelineConfig returns the PipelineConfig field value if set, zero value otherwise.
func (o *DescribeCdPipelineConfigResponseData) GetPipelineConfig() PipelineConfig {
	if o == nil || utils.IsNil(o.PipelineConfig) {
		var ret PipelineConfig
		return ret
	}
	return *o.PipelineConfig
}

// GetPipelineConfigOk returns a tuple with the PipelineConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeCdPipelineConfigResponseData) GetPipelineConfigOk() (*PipelineConfig, bool) {
	if o == nil || utils.IsNil(o.PipelineConfig) {
		return nil, false
	}
	return o.PipelineConfig, true
}

// HasPipelineConfig returns a boolean if a field has been set.
func (o *DescribeCdPipelineConfigResponseData) HasPipelineConfig() bool {
	if o != nil && !utils.IsNil(o.PipelineConfig) {
		return true
	}

	return false
}

// SetPipelineConfig gets a reference to the given PipelineConfig and assigns it to the PipelineConfig field.
func (o *DescribeCdPipelineConfigResponseData) SetPipelineConfig(v PipelineConfig) {
	o.PipelineConfig = &v
}

func (o DescribeCdPipelineConfigResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeCdPipelineConfigResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.PipelineConfig) {
		toSerialize["PipelineConfig"] = o.PipelineConfig
	}
	return toSerialize, nil
}

type NullableDescribeCdPipelineConfigResponseData struct {
	value *DescribeCdPipelineConfigResponseData
	isSet bool
}

func (v NullableDescribeCdPipelineConfigResponseData) Get() *DescribeCdPipelineConfigResponseData {
	return v.value
}

func (v *NullableDescribeCdPipelineConfigResponseData) Set(val *DescribeCdPipelineConfigResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeCdPipelineConfigResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeCdPipelineConfigResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeCdPipelineConfigResponseData(val *DescribeCdPipelineConfigResponseData) *NullableDescribeCdPipelineConfigResponseData {
	return &NullableDescribeCdPipelineConfigResponseData{value: val, isSet: true}
}

func (v NullableDescribeCdPipelineConfigResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeCdPipelineConfigResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


