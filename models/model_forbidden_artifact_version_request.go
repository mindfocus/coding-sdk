/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the ForbiddenArtifactVersionRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ForbiddenArtifactVersionRequest{}

// ForbiddenArtifactVersionRequest struct for ForbiddenArtifactVersionRequest
type ForbiddenArtifactVersionRequest struct {
	// FORBIDDEN 禁止下载，UNFORBIDDEN 解除禁止下载
	ForbiddenAction string `json:"ForbiddenAction"`
	// 禁止下载说明
	ForbiddenNote *string `json:"ForbiddenNote,omitempty"`
	// 包名
	Package string `json:"Package"`
	// 版本号
	PackageVersion string `json:"PackageVersion"`
	// 项目 ID
	ProjectId int32 `json:"ProjectId"`
	// 仓库名
	Repository string `json:"Repository"`
}

type _ForbiddenArtifactVersionRequest ForbiddenArtifactVersionRequest

// NewForbiddenArtifactVersionRequest instantiates a new ForbiddenArtifactVersionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForbiddenArtifactVersionRequest(forbiddenAction string, package_ string, packageVersion string, projectId int32, repository string) *ForbiddenArtifactVersionRequest {
	this := ForbiddenArtifactVersionRequest{}
	this.ForbiddenAction = forbiddenAction
	this.Package = package_
	this.PackageVersion = packageVersion
	this.ProjectId = projectId
	this.Repository = repository
	return &this
}

// NewForbiddenArtifactVersionRequestWithDefaults instantiates a new ForbiddenArtifactVersionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForbiddenArtifactVersionRequestWithDefaults() *ForbiddenArtifactVersionRequest {
	this := ForbiddenArtifactVersionRequest{}
	return &this
}

// GetForbiddenAction returns the ForbiddenAction field value
func (o *ForbiddenArtifactVersionRequest) GetForbiddenAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ForbiddenAction
}

// GetForbiddenActionOk returns a tuple with the ForbiddenAction field value
// and a boolean to check if the value has been set.
func (o *ForbiddenArtifactVersionRequest) GetForbiddenActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ForbiddenAction, true
}

// SetForbiddenAction sets field value
func (o *ForbiddenArtifactVersionRequest) SetForbiddenAction(v string) {
	o.ForbiddenAction = v
}

// GetForbiddenNote returns the ForbiddenNote field value if set, zero value otherwise.
func (o *ForbiddenArtifactVersionRequest) GetForbiddenNote() string {
	if o == nil || utils.IsNil(o.ForbiddenNote) {
		var ret string
		return ret
	}
	return *o.ForbiddenNote
}

// GetForbiddenNoteOk returns a tuple with the ForbiddenNote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForbiddenArtifactVersionRequest) GetForbiddenNoteOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ForbiddenNote) {
		return nil, false
	}
	return o.ForbiddenNote, true
}

// HasForbiddenNote returns a boolean if a field has been set.
func (o *ForbiddenArtifactVersionRequest) HasForbiddenNote() bool {
	if o != nil && !utils.IsNil(o.ForbiddenNote) {
		return true
	}

	return false
}

// SetForbiddenNote gets a reference to the given string and assigns it to the ForbiddenNote field.
func (o *ForbiddenArtifactVersionRequest) SetForbiddenNote(v string) {
	o.ForbiddenNote = &v
}

// GetPackage returns the Package field value
func (o *ForbiddenArtifactVersionRequest) GetPackage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Package
}

// GetPackageOk returns a tuple with the Package field value
// and a boolean to check if the value has been set.
func (o *ForbiddenArtifactVersionRequest) GetPackageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Package, true
}

// SetPackage sets field value
func (o *ForbiddenArtifactVersionRequest) SetPackage(v string) {
	o.Package = v
}

// GetPackageVersion returns the PackageVersion field value
func (o *ForbiddenArtifactVersionRequest) GetPackageVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PackageVersion
}

// GetPackageVersionOk returns a tuple with the PackageVersion field value
// and a boolean to check if the value has been set.
func (o *ForbiddenArtifactVersionRequest) GetPackageVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PackageVersion, true
}

// SetPackageVersion sets field value
func (o *ForbiddenArtifactVersionRequest) SetPackageVersion(v string) {
	o.PackageVersion = v
}

// GetProjectId returns the ProjectId field value
func (o *ForbiddenArtifactVersionRequest) GetProjectId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *ForbiddenArtifactVersionRequest) GetProjectIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *ForbiddenArtifactVersionRequest) SetProjectId(v int32) {
	o.ProjectId = v
}

// GetRepository returns the Repository field value
func (o *ForbiddenArtifactVersionRequest) GetRepository() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value
// and a boolean to check if the value has been set.
func (o *ForbiddenArtifactVersionRequest) GetRepositoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Repository, true
}

// SetRepository sets field value
func (o *ForbiddenArtifactVersionRequest) SetRepository(v string) {
	o.Repository = v
}

func (o ForbiddenArtifactVersionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ForbiddenArtifactVersionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ForbiddenAction"] = o.ForbiddenAction
	if !utils.IsNil(o.ForbiddenNote) {
		toSerialize["ForbiddenNote"] = o.ForbiddenNote
	}
	toSerialize["Package"] = o.Package
	toSerialize["PackageVersion"] = o.PackageVersion
	toSerialize["ProjectId"] = o.ProjectId
	toSerialize["Repository"] = o.Repository
	return toSerialize, nil
}

func (o *ForbiddenArtifactVersionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ForbiddenAction",
		"Package",
		"PackageVersion",
		"ProjectId",
		"Repository",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varForbiddenArtifactVersionRequest := _ForbiddenArtifactVersionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varForbiddenArtifactVersionRequest)

	if err != nil {
		return err
	}

	*o = ForbiddenArtifactVersionRequest(varForbiddenArtifactVersionRequest)

	return err
}

type NullableForbiddenArtifactVersionRequest struct {
	value *ForbiddenArtifactVersionRequest
	isSet bool
}

func (v NullableForbiddenArtifactVersionRequest) Get() *ForbiddenArtifactVersionRequest {
	return v.value
}

func (v *NullableForbiddenArtifactVersionRequest) Set(val *ForbiddenArtifactVersionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableForbiddenArtifactVersionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableForbiddenArtifactVersionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForbiddenArtifactVersionRequest(val *ForbiddenArtifactVersionRequest) *NullableForbiddenArtifactVersionRequest {
	return &NullableForbiddenArtifactVersionRequest{value: val, isSet: true}
}

func (v NullableForbiddenArtifactVersionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForbiddenArtifactVersionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


