/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the TestFull type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &TestFull{}

// TestFull 测试任务详细信息
type TestFull struct {
	// 处理人 ID
	AssignedToId utils.NullableInt32 `json:"AssignedToId,omitempty"`
	Case *Case `json:"Case,omitempty"`
	// 用例 ID
	CaseId utils.NullableInt32 `json:"CaseId,omitempty"`
	// 测试任务 ID
	Id utils.NullableInt32 `json:"Id,omitempty"`
	// 是否归档
	IsCompleted utils.NullableBool `json:"IsCompleted,omitempty"`
	// 优先级
	Priority utils.NullableInt32 `json:"Priority,omitempty"`
	// 分组 ID
	SectionId utils.NullableInt32 `json:"SectionId,omitempty"`
	// 用例所属分组（按层级由上到下排序）
	SectionPath []string `json:"SectionPath,omitempty"`
	// 排序
	Sort utils.NullableInt32 `json:"Sort,omitempty"`
	// 状态
	Status utils.NullableString `json:"Status,omitempty"`
	// 测试时间
	TestedAt utils.NullableString `json:"TestedAt,omitempty"`
	// 测试人 ID
	TestedBy utils.NullableInt32 `json:"TestedBy,omitempty"`
	// 标题
	Title utils.NullableString `json:"Title,omitempty"`
}

// NewTestFull instantiates a new TestFull object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestFull() *TestFull {
	this := TestFull{}
	var isCompleted bool = false
	this.IsCompleted = *utils.NewNullableBool(&isCompleted)
	var status string = ""
	this.Status = *utils.NewNullableString(&status)
	var testedAt string = ""
	this.TestedAt = *utils.NewNullableString(&testedAt)
	var title string = ""
	this.Title = *utils.NewNullableString(&title)
	return &this
}

// NewTestFullWithDefaults instantiates a new TestFull object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestFullWithDefaults() *TestFull {
	this := TestFull{}
	var isCompleted bool = false
	this.IsCompleted = *utils.NewNullableBool(&isCompleted)
	var status string = ""
	this.Status = *utils.NewNullableString(&status)
	var testedAt string = ""
	this.TestedAt = *utils.NewNullableString(&testedAt)
	var title string = ""
	this.Title = *utils.NewNullableString(&title)
	return &this
}

// GetAssignedToId returns the AssignedToId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestFull) GetAssignedToId() int32 {
	if o == nil || utils.IsNil(o.AssignedToId.Get()) {
		var ret int32
		return ret
	}
	return *o.AssignedToId.Get()
}

// GetAssignedToIdOk returns a tuple with the AssignedToId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestFull) GetAssignedToIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AssignedToId.Get(), o.AssignedToId.IsSet()
}

// HasAssignedToId returns a boolean if a field has been set.
func (o *TestFull) HasAssignedToId() bool {
	if o != nil && o.AssignedToId.IsSet() {
		return true
	}

	return false
}

// SetAssignedToId gets a reference to the given utils.NullableInt32 and assigns it to the AssignedToId field.
func (o *TestFull) SetAssignedToId(v int32) {
	o.AssignedToId.Set(&v)
}
// SetAssignedToIdNil sets the value for AssignedToId to be an explicit nil
func (o *TestFull) SetAssignedToIdNil() {
	o.AssignedToId.Set(nil)
}

// UnsetAssignedToId ensures that no value is present for AssignedToId, not even an explicit nil
func (o *TestFull) UnsetAssignedToId() {
	o.AssignedToId.Unset()
}

// GetCase returns the Case field value if set, zero value otherwise.
func (o *TestFull) GetCase() Case {
	if o == nil || utils.IsNil(o.Case) {
		var ret Case
		return ret
	}
	return *o.Case
}

// GetCaseOk returns a tuple with the Case field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestFull) GetCaseOk() (*Case, bool) {
	if o == nil || utils.IsNil(o.Case) {
		return nil, false
	}
	return o.Case, true
}

// HasCase returns a boolean if a field has been set.
func (o *TestFull) HasCase() bool {
	if o != nil && !utils.IsNil(o.Case) {
		return true
	}

	return false
}

// SetCase gets a reference to the given Case and assigns it to the Case field.
func (o *TestFull) SetCase(v Case) {
	o.Case = &v
}

// GetCaseId returns the CaseId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestFull) GetCaseId() int32 {
	if o == nil || utils.IsNil(o.CaseId.Get()) {
		var ret int32
		return ret
	}
	return *o.CaseId.Get()
}

// GetCaseIdOk returns a tuple with the CaseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestFull) GetCaseIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaseId.Get(), o.CaseId.IsSet()
}

// HasCaseId returns a boolean if a field has been set.
func (o *TestFull) HasCaseId() bool {
	if o != nil && o.CaseId.IsSet() {
		return true
	}

	return false
}

// SetCaseId gets a reference to the given utils.NullableInt32 and assigns it to the CaseId field.
func (o *TestFull) SetCaseId(v int32) {
	o.CaseId.Set(&v)
}
// SetCaseIdNil sets the value for CaseId to be an explicit nil
func (o *TestFull) SetCaseIdNil() {
	o.CaseId.Set(nil)
}

// UnsetCaseId ensures that no value is present for CaseId, not even an explicit nil
func (o *TestFull) UnsetCaseId() {
	o.CaseId.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestFull) GetId() int32 {
	if o == nil || utils.IsNil(o.Id.Get()) {
		var ret int32
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestFull) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *TestFull) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given utils.NullableInt32 and assigns it to the Id field.
func (o *TestFull) SetId(v int32) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *TestFull) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *TestFull) UnsetId() {
	o.Id.Unset()
}

// GetIsCompleted returns the IsCompleted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestFull) GetIsCompleted() bool {
	if o == nil || utils.IsNil(o.IsCompleted.Get()) {
		var ret bool
		return ret
	}
	return *o.IsCompleted.Get()
}

// GetIsCompletedOk returns a tuple with the IsCompleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestFull) GetIsCompletedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsCompleted.Get(), o.IsCompleted.IsSet()
}

// HasIsCompleted returns a boolean if a field has been set.
func (o *TestFull) HasIsCompleted() bool {
	if o != nil && o.IsCompleted.IsSet() {
		return true
	}

	return false
}

// SetIsCompleted gets a reference to the given utils.NullableBool and assigns it to the IsCompleted field.
func (o *TestFull) SetIsCompleted(v bool) {
	o.IsCompleted.Set(&v)
}
// SetIsCompletedNil sets the value for IsCompleted to be an explicit nil
func (o *TestFull) SetIsCompletedNil() {
	o.IsCompleted.Set(nil)
}

// UnsetIsCompleted ensures that no value is present for IsCompleted, not even an explicit nil
func (o *TestFull) UnsetIsCompleted() {
	o.IsCompleted.Unset()
}

// GetPriority returns the Priority field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestFull) GetPriority() int32 {
	if o == nil || utils.IsNil(o.Priority.Get()) {
		var ret int32
		return ret
	}
	return *o.Priority.Get()
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestFull) GetPriorityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Priority.Get(), o.Priority.IsSet()
}

// HasPriority returns a boolean if a field has been set.
func (o *TestFull) HasPriority() bool {
	if o != nil && o.Priority.IsSet() {
		return true
	}

	return false
}

// SetPriority gets a reference to the given utils.NullableInt32 and assigns it to the Priority field.
func (o *TestFull) SetPriority(v int32) {
	o.Priority.Set(&v)
}
// SetPriorityNil sets the value for Priority to be an explicit nil
func (o *TestFull) SetPriorityNil() {
	o.Priority.Set(nil)
}

// UnsetPriority ensures that no value is present for Priority, not even an explicit nil
func (o *TestFull) UnsetPriority() {
	o.Priority.Unset()
}

// GetSectionId returns the SectionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestFull) GetSectionId() int32 {
	if o == nil || utils.IsNil(o.SectionId.Get()) {
		var ret int32
		return ret
	}
	return *o.SectionId.Get()
}

// GetSectionIdOk returns a tuple with the SectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestFull) GetSectionIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SectionId.Get(), o.SectionId.IsSet()
}

// HasSectionId returns a boolean if a field has been set.
func (o *TestFull) HasSectionId() bool {
	if o != nil && o.SectionId.IsSet() {
		return true
	}

	return false
}

// SetSectionId gets a reference to the given utils.NullableInt32 and assigns it to the SectionId field.
func (o *TestFull) SetSectionId(v int32) {
	o.SectionId.Set(&v)
}
// SetSectionIdNil sets the value for SectionId to be an explicit nil
func (o *TestFull) SetSectionIdNil() {
	o.SectionId.Set(nil)
}

// UnsetSectionId ensures that no value is present for SectionId, not even an explicit nil
func (o *TestFull) UnsetSectionId() {
	o.SectionId.Unset()
}

// GetSectionPath returns the SectionPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestFull) GetSectionPath() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.SectionPath
}

// GetSectionPathOk returns a tuple with the SectionPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestFull) GetSectionPathOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.SectionPath) {
		return nil, false
	}
	return o.SectionPath, true
}

// HasSectionPath returns a boolean if a field has been set.
func (o *TestFull) HasSectionPath() bool {
	if o != nil && !utils.IsNil(o.SectionPath) {
		return true
	}

	return false
}

// SetSectionPath gets a reference to the given []string and assigns it to the SectionPath field.
func (o *TestFull) SetSectionPath(v []string) {
	o.SectionPath = v
}

// GetSort returns the Sort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestFull) GetSort() int32 {
	if o == nil || utils.IsNil(o.Sort.Get()) {
		var ret int32
		return ret
	}
	return *o.Sort.Get()
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestFull) GetSortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sort.Get(), o.Sort.IsSet()
}

// HasSort returns a boolean if a field has been set.
func (o *TestFull) HasSort() bool {
	if o != nil && o.Sort.IsSet() {
		return true
	}

	return false
}

// SetSort gets a reference to the given utils.NullableInt32 and assigns it to the Sort field.
func (o *TestFull) SetSort(v int32) {
	o.Sort.Set(&v)
}
// SetSortNil sets the value for Sort to be an explicit nil
func (o *TestFull) SetSortNil() {
	o.Sort.Set(nil)
}

// UnsetSort ensures that no value is present for Sort, not even an explicit nil
func (o *TestFull) UnsetSort() {
	o.Sort.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestFull) GetStatus() string {
	if o == nil || utils.IsNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestFull) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *TestFull) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given utils.NullableString and assigns it to the Status field.
func (o *TestFull) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *TestFull) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *TestFull) UnsetStatus() {
	o.Status.Unset()
}

// GetTestedAt returns the TestedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestFull) GetTestedAt() string {
	if o == nil || utils.IsNil(o.TestedAt.Get()) {
		var ret string
		return ret
	}
	return *o.TestedAt.Get()
}

// GetTestedAtOk returns a tuple with the TestedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestFull) GetTestedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TestedAt.Get(), o.TestedAt.IsSet()
}

// HasTestedAt returns a boolean if a field has been set.
func (o *TestFull) HasTestedAt() bool {
	if o != nil && o.TestedAt.IsSet() {
		return true
	}

	return false
}

// SetTestedAt gets a reference to the given utils.NullableString and assigns it to the TestedAt field.
func (o *TestFull) SetTestedAt(v string) {
	o.TestedAt.Set(&v)
}
// SetTestedAtNil sets the value for TestedAt to be an explicit nil
func (o *TestFull) SetTestedAtNil() {
	o.TestedAt.Set(nil)
}

// UnsetTestedAt ensures that no value is present for TestedAt, not even an explicit nil
func (o *TestFull) UnsetTestedAt() {
	o.TestedAt.Unset()
}

// GetTestedBy returns the TestedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestFull) GetTestedBy() int32 {
	if o == nil || utils.IsNil(o.TestedBy.Get()) {
		var ret int32
		return ret
	}
	return *o.TestedBy.Get()
}

// GetTestedByOk returns a tuple with the TestedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestFull) GetTestedByOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TestedBy.Get(), o.TestedBy.IsSet()
}

// HasTestedBy returns a boolean if a field has been set.
func (o *TestFull) HasTestedBy() bool {
	if o != nil && o.TestedBy.IsSet() {
		return true
	}

	return false
}

// SetTestedBy gets a reference to the given utils.NullableInt32 and assigns it to the TestedBy field.
func (o *TestFull) SetTestedBy(v int32) {
	o.TestedBy.Set(&v)
}
// SetTestedByNil sets the value for TestedBy to be an explicit nil
func (o *TestFull) SetTestedByNil() {
	o.TestedBy.Set(nil)
}

// UnsetTestedBy ensures that no value is present for TestedBy, not even an explicit nil
func (o *TestFull) UnsetTestedBy() {
	o.TestedBy.Unset()
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestFull) GetTitle() string {
	if o == nil || utils.IsNil(o.Title.Get()) {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestFull) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *TestFull) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given utils.NullableString and assigns it to the Title field.
func (o *TestFull) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *TestFull) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *TestFull) UnsetTitle() {
	o.Title.Unset()
}

func (o TestFull) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestFull) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AssignedToId.IsSet() {
		toSerialize["AssignedToId"] = o.AssignedToId.Get()
	}
	if !utils.IsNil(o.Case) {
		toSerialize["Case"] = o.Case
	}
	if o.CaseId.IsSet() {
		toSerialize["CaseId"] = o.CaseId.Get()
	}
	if o.Id.IsSet() {
		toSerialize["Id"] = o.Id.Get()
	}
	if o.IsCompleted.IsSet() {
		toSerialize["IsCompleted"] = o.IsCompleted.Get()
	}
	if o.Priority.IsSet() {
		toSerialize["Priority"] = o.Priority.Get()
	}
	if o.SectionId.IsSet() {
		toSerialize["SectionId"] = o.SectionId.Get()
	}
	if o.SectionPath != nil {
		toSerialize["SectionPath"] = o.SectionPath
	}
	if o.Sort.IsSet() {
		toSerialize["Sort"] = o.Sort.Get()
	}
	if o.Status.IsSet() {
		toSerialize["Status"] = o.Status.Get()
	}
	if o.TestedAt.IsSet() {
		toSerialize["TestedAt"] = o.TestedAt.Get()
	}
	if o.TestedBy.IsSet() {
		toSerialize["TestedBy"] = o.TestedBy.Get()
	}
	if o.Title.IsSet() {
		toSerialize["Title"] = o.Title.Get()
	}
	return toSerialize, nil
}

type NullableTestFull struct {
	value *TestFull
	isSet bool
}

func (v NullableTestFull) Get() *TestFull {
	return v.value
}

func (v *NullableTestFull) Set(val *TestFull) {
	v.value = val
	v.isSet = true
}

func (v NullableTestFull) IsSet() bool {
	return v.isSet
}

func (v *NullableTestFull) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestFull(val *TestFull) *NullableTestFull {
	return &NullableTestFull{value: val, isSet: true}
}

func (v NullableTestFull) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestFull) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


