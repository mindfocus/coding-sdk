/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DescribeTestListRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DescribeTestListRequest{}

// DescribeTestListRequest struct for DescribeTestListRequest
type DescribeTestListRequest struct {
	// 优先级
	Priority *int32 `json:"Priority,omitempty"`
	// 项目名称
	ProjectName string `json:"ProjectName"`
	// 测试计划 ID
	RunId *int32 `json:"RunId,omitempty"`
	// 测试状态,UNTESTED:未测试,PASSED:通过,BLOCKED:阻塞,RETEST:重测,FAILED:失败
	Status *string `json:"Status,omitempty"`
}

type _DescribeTestListRequest DescribeTestListRequest

// NewDescribeTestListRequest instantiates a new DescribeTestListRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeTestListRequest(projectName string) *DescribeTestListRequest {
	this := DescribeTestListRequest{}
	this.ProjectName = projectName
	return &this
}

// NewDescribeTestListRequestWithDefaults instantiates a new DescribeTestListRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeTestListRequestWithDefaults() *DescribeTestListRequest {
	this := DescribeTestListRequest{}
	return &this
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *DescribeTestListRequest) GetPriority() int32 {
	if o == nil || utils.IsNil(o.Priority) {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeTestListRequest) GetPriorityOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *DescribeTestListRequest) HasPriority() bool {
	if o != nil && !utils.IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *DescribeTestListRequest) SetPriority(v int32) {
	o.Priority = &v
}

// GetProjectName returns the ProjectName field value
func (o *DescribeTestListRequest) GetProjectName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value
// and a boolean to check if the value has been set.
func (o *DescribeTestListRequest) GetProjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectName, true
}

// SetProjectName sets field value
func (o *DescribeTestListRequest) SetProjectName(v string) {
	o.ProjectName = v
}

// GetRunId returns the RunId field value if set, zero value otherwise.
func (o *DescribeTestListRequest) GetRunId() int32 {
	if o == nil || utils.IsNil(o.RunId) {
		var ret int32
		return ret
	}
	return *o.RunId
}

// GetRunIdOk returns a tuple with the RunId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeTestListRequest) GetRunIdOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.RunId) {
		return nil, false
	}
	return o.RunId, true
}

// HasRunId returns a boolean if a field has been set.
func (o *DescribeTestListRequest) HasRunId() bool {
	if o != nil && !utils.IsNil(o.RunId) {
		return true
	}

	return false
}

// SetRunId gets a reference to the given int32 and assigns it to the RunId field.
func (o *DescribeTestListRequest) SetRunId(v int32) {
	o.RunId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DescribeTestListRequest) GetStatus() string {
	if o == nil || utils.IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeTestListRequest) GetStatusOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DescribeTestListRequest) HasStatus() bool {
	if o != nil && !utils.IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DescribeTestListRequest) SetStatus(v string) {
	o.Status = &v
}

func (o DescribeTestListRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeTestListRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Priority) {
		toSerialize["Priority"] = o.Priority
	}
	toSerialize["ProjectName"] = o.ProjectName
	if !utils.IsNil(o.RunId) {
		toSerialize["RunId"] = o.RunId
	}
	if !utils.IsNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	return toSerialize, nil
}

func (o *DescribeTestListRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ProjectName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescribeTestListRequest := _DescribeTestListRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDescribeTestListRequest)

	if err != nil {
		return err
	}

	*o = DescribeTestListRequest(varDescribeTestListRequest)

	return err
}

type NullableDescribeTestListRequest struct {
	value *DescribeTestListRequest
	isSet bool
}

func (v NullableDescribeTestListRequest) Get() *DescribeTestListRequest {
	return v.value
}

func (v *NullableDescribeTestListRequest) Set(val *DescribeTestListRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeTestListRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeTestListRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeTestListRequest(val *DescribeTestListRequest) *NullableDescribeTestListRequest {
	return &NullableDescribeTestListRequest{value: val, isSet: true}
}

func (v NullableDescribeTestListRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeTestListRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


