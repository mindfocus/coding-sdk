/*
CODING OPEN API

  

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the TestDefectsData type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &TestDefectsData{}

// TestDefectsData 测试任务缺陷数据
type TestDefectsData struct {
	// 测试任务的缺陷信息
	Defects []TestDefect `json:"Defects,omitempty"`
}

// NewTestDefectsData instantiates a new TestDefectsData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestDefectsData() *TestDefectsData {
	this := TestDefectsData{}
	return &this
}

// NewTestDefectsDataWithDefaults instantiates a new TestDefectsData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestDefectsDataWithDefaults() *TestDefectsData {
	this := TestDefectsData{}
	return &this
}

// GetDefects returns the Defects field value if set, zero value otherwise.
func (o *TestDefectsData) GetDefects() []TestDefect {
	if o == nil || utils.IsNil(o.Defects) {
		var ret []TestDefect
		return ret
	}
	return o.Defects
}

// GetDefectsOk returns a tuple with the Defects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestDefectsData) GetDefectsOk() ([]TestDefect, bool) {
	if o == nil || utils.IsNil(o.Defects) {
		return nil, false
	}
	return o.Defects, true
}

// HasDefects returns a boolean if a field has been set.
func (o *TestDefectsData) HasDefects() bool {
	if o != nil && !utils.IsNil(o.Defects) {
		return true
	}

	return false
}

// SetDefects gets a reference to the given []TestDefect and assigns it to the Defects field.
func (o *TestDefectsData) SetDefects(v []TestDefect) {
	o.Defects = v
}

func (o TestDefectsData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestDefectsData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Defects) {
		toSerialize["Defects"] = o.Defects
	}
	return toSerialize, nil
}

type NullableTestDefectsData struct {
	value *TestDefectsData
	isSet bool
}

func (v NullableTestDefectsData) Get() *TestDefectsData {
	return v.value
}

func (v *NullableTestDefectsData) Set(val *TestDefectsData) {
	v.value = val
	v.isSet = true
}

func (v NullableTestDefectsData) IsSet() bool {
	return v.isSet
}

func (v *NullableTestDefectsData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestDefectsData(val *TestDefectsData) *NullableTestDefectsData {
	return &NullableTestDefectsData{value: val, isSet: true}
}

func (v NullableTestDefectsData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestDefectsData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


