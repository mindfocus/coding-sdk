/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DescribeIssueFileUrlRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DescribeIssueFileUrlRequest{}

// DescribeIssueFileUrlRequest struct for DescribeIssueFileUrlRequest
type DescribeIssueFileUrlRequest struct {
	// 文件 ID
	FileId int64 `json:"FileId"`
	// 项目名称
	ProjectName string `json:"ProjectName"`
}

type _DescribeIssueFileUrlRequest DescribeIssueFileUrlRequest

// NewDescribeIssueFileUrlRequest instantiates a new DescribeIssueFileUrlRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeIssueFileUrlRequest(fileId int64, projectName string) *DescribeIssueFileUrlRequest {
	this := DescribeIssueFileUrlRequest{}
	this.FileId = fileId
	this.ProjectName = projectName
	return &this
}

// NewDescribeIssueFileUrlRequestWithDefaults instantiates a new DescribeIssueFileUrlRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeIssueFileUrlRequestWithDefaults() *DescribeIssueFileUrlRequest {
	this := DescribeIssueFileUrlRequest{}
	return &this
}

// GetFileId returns the FileId field value
func (o *DescribeIssueFileUrlRequest) GetFileId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FileId
}

// GetFileIdOk returns a tuple with the FileId field value
// and a boolean to check if the value has been set.
func (o *DescribeIssueFileUrlRequest) GetFileIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileId, true
}

// SetFileId sets field value
func (o *DescribeIssueFileUrlRequest) SetFileId(v int64) {
	o.FileId = v
}

// GetProjectName returns the ProjectName field value
func (o *DescribeIssueFileUrlRequest) GetProjectName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value
// and a boolean to check if the value has been set.
func (o *DescribeIssueFileUrlRequest) GetProjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectName, true
}

// SetProjectName sets field value
func (o *DescribeIssueFileUrlRequest) SetProjectName(v string) {
	o.ProjectName = v
}

func (o DescribeIssueFileUrlRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeIssueFileUrlRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["FileId"] = o.FileId
	toSerialize["ProjectName"] = o.ProjectName
	return toSerialize, nil
}

func (o *DescribeIssueFileUrlRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"FileId",
		"ProjectName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescribeIssueFileUrlRequest := _DescribeIssueFileUrlRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDescribeIssueFileUrlRequest)

	if err != nil {
		return err
	}

	*o = DescribeIssueFileUrlRequest(varDescribeIssueFileUrlRequest)

	return err
}

type NullableDescribeIssueFileUrlRequest struct {
	value *DescribeIssueFileUrlRequest
	isSet bool
}

func (v NullableDescribeIssueFileUrlRequest) Get() *DescribeIssueFileUrlRequest {
	return v.value
}

func (v *NullableDescribeIssueFileUrlRequest) Set(val *DescribeIssueFileUrlRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeIssueFileUrlRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeIssueFileUrlRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeIssueFileUrlRequest(val *DescribeIssueFileUrlRequest) *NullableDescribeIssueFileUrlRequest {
	return &NullableDescribeIssueFileUrlRequest{value: val, isSet: true}
}

func (v NullableDescribeIssueFileUrlRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeIssueFileUrlRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


