/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the FileDiff type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &FileDiff{}

// FileDiff 文件差别详情
type FileDiff struct {
	// 操作类型,具体值为: ADD(添加), MODIFY(修改), DELETE(删除), REPLACE(替换)
	ChangeType *string `json:"ChangeType,omitempty"`
	// 删除的行数
	Deletions *int64 `json:"Deletions,omitempty"`
	// Diff Line
	DiffLines []DifferentLine `json:"DiffLines,omitempty"`
	// 新增的行数
	Insertions *int64 `json:"Insertions,omitempty"`
	// 请求的objectid
	ObjectId *string `json:"ObjectId,omitempty"`
	// 文件路径
	Path *string `json:"Path,omitempty"`
}

// NewFileDiff instantiates a new FileDiff object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileDiff() *FileDiff {
	this := FileDiff{}
	var changeType string = ""
	this.ChangeType = &changeType
	var objectId string = ""
	this.ObjectId = &objectId
	var path string = ""
	this.Path = &path
	return &this
}

// NewFileDiffWithDefaults instantiates a new FileDiff object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileDiffWithDefaults() *FileDiff {
	this := FileDiff{}
	var changeType string = ""
	this.ChangeType = &changeType
	var objectId string = ""
	this.ObjectId = &objectId
	var path string = ""
	this.Path = &path
	return &this
}

// GetChangeType returns the ChangeType field value if set, zero value otherwise.
func (o *FileDiff) GetChangeType() string {
	if o == nil || utils.IsNil(o.ChangeType) {
		var ret string
		return ret
	}
	return *o.ChangeType
}

// GetChangeTypeOk returns a tuple with the ChangeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileDiff) GetChangeTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ChangeType) {
		return nil, false
	}
	return o.ChangeType, true
}

// HasChangeType returns a boolean if a field has been set.
func (o *FileDiff) HasChangeType() bool {
	if o != nil && !utils.IsNil(o.ChangeType) {
		return true
	}

	return false
}

// SetChangeType gets a reference to the given string and assigns it to the ChangeType field.
func (o *FileDiff) SetChangeType(v string) {
	o.ChangeType = &v
}

// GetDeletions returns the Deletions field value if set, zero value otherwise.
func (o *FileDiff) GetDeletions() int64 {
	if o == nil || utils.IsNil(o.Deletions) {
		var ret int64
		return ret
	}
	return *o.Deletions
}

// GetDeletionsOk returns a tuple with the Deletions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileDiff) GetDeletionsOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Deletions) {
		return nil, false
	}
	return o.Deletions, true
}

// HasDeletions returns a boolean if a field has been set.
func (o *FileDiff) HasDeletions() bool {
	if o != nil && !utils.IsNil(o.Deletions) {
		return true
	}

	return false
}

// SetDeletions gets a reference to the given int64 and assigns it to the Deletions field.
func (o *FileDiff) SetDeletions(v int64) {
	o.Deletions = &v
}

// GetDiffLines returns the DiffLines field value if set, zero value otherwise.
func (o *FileDiff) GetDiffLines() []DifferentLine {
	if o == nil || utils.IsNil(o.DiffLines) {
		var ret []DifferentLine
		return ret
	}
	return o.DiffLines
}

// GetDiffLinesOk returns a tuple with the DiffLines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileDiff) GetDiffLinesOk() ([]DifferentLine, bool) {
	if o == nil || utils.IsNil(o.DiffLines) {
		return nil, false
	}
	return o.DiffLines, true
}

// HasDiffLines returns a boolean if a field has been set.
func (o *FileDiff) HasDiffLines() bool {
	if o != nil && !utils.IsNil(o.DiffLines) {
		return true
	}

	return false
}

// SetDiffLines gets a reference to the given []DifferentLine and assigns it to the DiffLines field.
func (o *FileDiff) SetDiffLines(v []DifferentLine) {
	o.DiffLines = v
}

// GetInsertions returns the Insertions field value if set, zero value otherwise.
func (o *FileDiff) GetInsertions() int64 {
	if o == nil || utils.IsNil(o.Insertions) {
		var ret int64
		return ret
	}
	return *o.Insertions
}

// GetInsertionsOk returns a tuple with the Insertions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileDiff) GetInsertionsOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Insertions) {
		return nil, false
	}
	return o.Insertions, true
}

// HasInsertions returns a boolean if a field has been set.
func (o *FileDiff) HasInsertions() bool {
	if o != nil && !utils.IsNil(o.Insertions) {
		return true
	}

	return false
}

// SetInsertions gets a reference to the given int64 and assigns it to the Insertions field.
func (o *FileDiff) SetInsertions(v int64) {
	o.Insertions = &v
}

// GetObjectId returns the ObjectId field value if set, zero value otherwise.
func (o *FileDiff) GetObjectId() string {
	if o == nil || utils.IsNil(o.ObjectId) {
		var ret string
		return ret
	}
	return *o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileDiff) GetObjectIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ObjectId) {
		return nil, false
	}
	return o.ObjectId, true
}

// HasObjectId returns a boolean if a field has been set.
func (o *FileDiff) HasObjectId() bool {
	if o != nil && !utils.IsNil(o.ObjectId) {
		return true
	}

	return false
}

// SetObjectId gets a reference to the given string and assigns it to the ObjectId field.
func (o *FileDiff) SetObjectId(v string) {
	o.ObjectId = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *FileDiff) GetPath() string {
	if o == nil || utils.IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileDiff) GetPathOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *FileDiff) HasPath() bool {
	if o != nil && !utils.IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *FileDiff) SetPath(v string) {
	o.Path = &v
}

func (o FileDiff) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileDiff) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.ChangeType) {
		toSerialize["ChangeType"] = o.ChangeType
	}
	if !utils.IsNil(o.Deletions) {
		toSerialize["Deletions"] = o.Deletions
	}
	if !utils.IsNil(o.DiffLines) {
		toSerialize["DiffLines"] = o.DiffLines
	}
	if !utils.IsNil(o.Insertions) {
		toSerialize["Insertions"] = o.Insertions
	}
	if !utils.IsNil(o.ObjectId) {
		toSerialize["ObjectId"] = o.ObjectId
	}
	if !utils.IsNil(o.Path) {
		toSerialize["Path"] = o.Path
	}
	return toSerialize, nil
}

type NullableFileDiff struct {
	value *FileDiff
	isSet bool
}

func (v NullableFileDiff) Get() *FileDiff {
	return v.value
}

func (v *NullableFileDiff) Set(val *FileDiff) {
	v.value = val
	v.isSet = true
}

func (v NullableFileDiff) IsSet() bool {
	return v.isSet
}

func (v *NullableFileDiff) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileDiff(val *FileDiff) *NullableFileDiff {
	return &NullableFileDiff{value: val, isSet: true}
}

func (v NullableFileDiff) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileDiff) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


