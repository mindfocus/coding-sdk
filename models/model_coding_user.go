/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the CodingUser type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CodingUser{}

// CodingUser 用户信息
type CodingUser struct {
	// 用户头像地址
	Avatar utils.NullableString `json:"Avatar,omitempty"`
	// 用户电子邮箱地址
	Email *string `json:"Email,omitempty"`
	// 用户全局Key
	GlobalKey utils.NullableString `json:"GlobalKey,omitempty"`
	// 用户 ID
	Id *int64 `json:"Id,omitempty"`
	// 用户名字
	Name utils.NullableString `json:"Name,omitempty"`
	// 用户状态
	Status utils.NullableString `json:"Status,omitempty"`
	// 团队 ID
	TeamId utils.NullableInt64 `json:"TeamId,omitempty"`
}

// NewCodingUser instantiates a new CodingUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCodingUser() *CodingUser {
	this := CodingUser{}
	var avatar string = ""
	this.Avatar = *utils.NewNullableString(&avatar)
	var email string = ""
	this.Email = &email
	var globalKey string = ""
	this.GlobalKey = *utils.NewNullableString(&globalKey)
	var name string = ""
	this.Name = *utils.NewNullableString(&name)
	var status string = ""
	this.Status = *utils.NewNullableString(&status)
	return &this
}

// NewCodingUserWithDefaults instantiates a new CodingUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCodingUserWithDefaults() *CodingUser {
	this := CodingUser{}
	var avatar string = ""
	this.Avatar = *utils.NewNullableString(&avatar)
	var email string = ""
	this.Email = &email
	var globalKey string = ""
	this.GlobalKey = *utils.NewNullableString(&globalKey)
	var name string = ""
	this.Name = *utils.NewNullableString(&name)
	var status string = ""
	this.Status = *utils.NewNullableString(&status)
	return &this
}

// GetAvatar returns the Avatar field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CodingUser) GetAvatar() string {
	if o == nil || utils.IsNil(o.Avatar.Get()) {
		var ret string
		return ret
	}
	return *o.Avatar.Get()
}

// GetAvatarOk returns a tuple with the Avatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CodingUser) GetAvatarOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Avatar.Get(), o.Avatar.IsSet()
}

// HasAvatar returns a boolean if a field has been set.
func (o *CodingUser) HasAvatar() bool {
	if o != nil && o.Avatar.IsSet() {
		return true
	}

	return false
}

// SetAvatar gets a reference to the given utils.NullableString and assigns it to the Avatar field.
func (o *CodingUser) SetAvatar(v string) {
	o.Avatar.Set(&v)
}
// SetAvatarNil sets the value for Avatar to be an explicit nil
func (o *CodingUser) SetAvatarNil() {
	o.Avatar.Set(nil)
}

// UnsetAvatar ensures that no value is present for Avatar, not even an explicit nil
func (o *CodingUser) UnsetAvatar() {
	o.Avatar.Unset()
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *CodingUser) GetEmail() string {
	if o == nil || utils.IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodingUser) GetEmailOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *CodingUser) HasEmail() bool {
	if o != nil && !utils.IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *CodingUser) SetEmail(v string) {
	o.Email = &v
}

// GetGlobalKey returns the GlobalKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CodingUser) GetGlobalKey() string {
	if o == nil || utils.IsNil(o.GlobalKey.Get()) {
		var ret string
		return ret
	}
	return *o.GlobalKey.Get()
}

// GetGlobalKeyOk returns a tuple with the GlobalKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CodingUser) GetGlobalKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GlobalKey.Get(), o.GlobalKey.IsSet()
}

// HasGlobalKey returns a boolean if a field has been set.
func (o *CodingUser) HasGlobalKey() bool {
	if o != nil && o.GlobalKey.IsSet() {
		return true
	}

	return false
}

// SetGlobalKey gets a reference to the given utils.NullableString and assigns it to the GlobalKey field.
func (o *CodingUser) SetGlobalKey(v string) {
	o.GlobalKey.Set(&v)
}
// SetGlobalKeyNil sets the value for GlobalKey to be an explicit nil
func (o *CodingUser) SetGlobalKeyNil() {
	o.GlobalKey.Set(nil)
}

// UnsetGlobalKey ensures that no value is present for GlobalKey, not even an explicit nil
func (o *CodingUser) UnsetGlobalKey() {
	o.GlobalKey.Unset()
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CodingUser) GetId() int64 {
	if o == nil || utils.IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodingUser) GetIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CodingUser) HasId() bool {
	if o != nil && !utils.IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *CodingUser) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CodingUser) GetName() string {
	if o == nil || utils.IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CodingUser) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *CodingUser) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given utils.NullableString and assigns it to the Name field.
func (o *CodingUser) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *CodingUser) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *CodingUser) UnsetName() {
	o.Name.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CodingUser) GetStatus() string {
	if o == nil || utils.IsNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CodingUser) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *CodingUser) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given utils.NullableString and assigns it to the Status field.
func (o *CodingUser) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *CodingUser) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *CodingUser) UnsetStatus() {
	o.Status.Unset()
}

// GetTeamId returns the TeamId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CodingUser) GetTeamId() int64 {
	if o == nil || utils.IsNil(o.TeamId.Get()) {
		var ret int64
		return ret
	}
	return *o.TeamId.Get()
}

// GetTeamIdOk returns a tuple with the TeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CodingUser) GetTeamIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TeamId.Get(), o.TeamId.IsSet()
}

// HasTeamId returns a boolean if a field has been set.
func (o *CodingUser) HasTeamId() bool {
	if o != nil && o.TeamId.IsSet() {
		return true
	}

	return false
}

// SetTeamId gets a reference to the given utils.NullableInt64 and assigns it to the TeamId field.
func (o *CodingUser) SetTeamId(v int64) {
	o.TeamId.Set(&v)
}
// SetTeamIdNil sets the value for TeamId to be an explicit nil
func (o *CodingUser) SetTeamIdNil() {
	o.TeamId.Set(nil)
}

// UnsetTeamId ensures that no value is present for TeamId, not even an explicit nil
func (o *CodingUser) UnsetTeamId() {
	o.TeamId.Unset()
}

func (o CodingUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CodingUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Avatar.IsSet() {
		toSerialize["Avatar"] = o.Avatar.Get()
	}
	if !utils.IsNil(o.Email) {
		toSerialize["Email"] = o.Email
	}
	if o.GlobalKey.IsSet() {
		toSerialize["GlobalKey"] = o.GlobalKey.Get()
	}
	if !utils.IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if o.Name.IsSet() {
		toSerialize["Name"] = o.Name.Get()
	}
	if o.Status.IsSet() {
		toSerialize["Status"] = o.Status.Get()
	}
	if o.TeamId.IsSet() {
		toSerialize["TeamId"] = o.TeamId.Get()
	}
	return toSerialize, nil
}

type NullableCodingUser struct {
	value *CodingUser
	isSet bool
}

func (v NullableCodingUser) Get() *CodingUser {
	return v.value
}

func (v *NullableCodingUser) Set(val *CodingUser) {
	v.value = val
	v.isSet = true
}

func (v NullableCodingUser) IsSet() bool {
	return v.isSet
}

func (v *NullableCodingUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCodingUser(val *CodingUser) *NullableCodingUser {
	return &NullableCodingUser{value: val, isSet: true}
}

func (v NullableCodingUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCodingUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


