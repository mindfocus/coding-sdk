/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the CodingCIPersonalExternalDepot type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CodingCIPersonalExternalDepot{}

// CodingCIPersonalExternalDepot 个人外部仓库返回结构
type CodingCIPersonalExternalDepot struct {
	// 外部仓库是否被关联
	Authorized utils.NullableBool `json:"Authorized,omitempty"`
	// 仓库 Https 地址
	DepotHttpsUrl utils.NullableString `json:"DepotHttpsUrl,omitempty"`
	// 仓库 Ssh 地址
	DepotSshUrl utils.NullableString `json:"DepotSshUrl,omitempty"`
	// 仓库类型
	DepotType *string `json:"DepotType,omitempty"`
	// 仓库 Id
	Id *int32 `json:"Id,omitempty"`
	// 是否是默认显示第一位的仓库
	IsDefault *bool `json:"IsDefault,omitempty"`
	// 仓库名称
	Name *string `json:"Name,omitempty"`
	// 请使用 Authorized 代替判断仓库是否关联，该仓库是否 CI 可用，如果可用返回值为 continue_integration，如果仓库类型是 CODING 那么这个值永远是continue_integration
	OpenModule *string `json:"OpenModule,omitempty"`
	// 所有者用户名
	OwnerName utils.NullableString `json:"OwnerName,omitempty"`
	// 源代码仓库 id （如果是 coding 跨项目代码仓库，此字段记录代码仓库的实际 id ）
	SourceDepotId *int64 `json:"SourceDepotId,omitempty"`
}

// NewCodingCIPersonalExternalDepot instantiates a new CodingCIPersonalExternalDepot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCodingCIPersonalExternalDepot() *CodingCIPersonalExternalDepot {
	this := CodingCIPersonalExternalDepot{}
	var authorized bool = false
	this.Authorized = *utils.NewNullableBool(&authorized)
	var depotHttpsUrl string = ""
	this.DepotHttpsUrl = *utils.NewNullableString(&depotHttpsUrl)
	var depotSshUrl string = ""
	this.DepotSshUrl = *utils.NewNullableString(&depotSshUrl)
	var depotType string = ""
	this.DepotType = &depotType
	var isDefault bool = false
	this.IsDefault = &isDefault
	var name string = ""
	this.Name = &name
	var openModule string = ""
	this.OpenModule = &openModule
	var ownerName string = ""
	this.OwnerName = *utils.NewNullableString(&ownerName)
	return &this
}

// NewCodingCIPersonalExternalDepotWithDefaults instantiates a new CodingCIPersonalExternalDepot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCodingCIPersonalExternalDepotWithDefaults() *CodingCIPersonalExternalDepot {
	this := CodingCIPersonalExternalDepot{}
	var authorized bool = false
	this.Authorized = *utils.NewNullableBool(&authorized)
	var depotHttpsUrl string = ""
	this.DepotHttpsUrl = *utils.NewNullableString(&depotHttpsUrl)
	var depotSshUrl string = ""
	this.DepotSshUrl = *utils.NewNullableString(&depotSshUrl)
	var depotType string = ""
	this.DepotType = &depotType
	var isDefault bool = false
	this.IsDefault = &isDefault
	var name string = ""
	this.Name = &name
	var openModule string = ""
	this.OpenModule = &openModule
	var ownerName string = ""
	this.OwnerName = *utils.NewNullableString(&ownerName)
	return &this
}

// GetAuthorized returns the Authorized field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CodingCIPersonalExternalDepot) GetAuthorized() bool {
	if o == nil || utils.IsNil(o.Authorized.Get()) {
		var ret bool
		return ret
	}
	return *o.Authorized.Get()
}

// GetAuthorizedOk returns a tuple with the Authorized field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CodingCIPersonalExternalDepot) GetAuthorizedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Authorized.Get(), o.Authorized.IsSet()
}

// HasAuthorized returns a boolean if a field has been set.
func (o *CodingCIPersonalExternalDepot) HasAuthorized() bool {
	if o != nil && o.Authorized.IsSet() {
		return true
	}

	return false
}

// SetAuthorized gets a reference to the given utils.NullableBool and assigns it to the Authorized field.
func (o *CodingCIPersonalExternalDepot) SetAuthorized(v bool) {
	o.Authorized.Set(&v)
}
// SetAuthorizedNil sets the value for Authorized to be an explicit nil
func (o *CodingCIPersonalExternalDepot) SetAuthorizedNil() {
	o.Authorized.Set(nil)
}

// UnsetAuthorized ensures that no value is present for Authorized, not even an explicit nil
func (o *CodingCIPersonalExternalDepot) UnsetAuthorized() {
	o.Authorized.Unset()
}

// GetDepotHttpsUrl returns the DepotHttpsUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CodingCIPersonalExternalDepot) GetDepotHttpsUrl() string {
	if o == nil || utils.IsNil(o.DepotHttpsUrl.Get()) {
		var ret string
		return ret
	}
	return *o.DepotHttpsUrl.Get()
}

// GetDepotHttpsUrlOk returns a tuple with the DepotHttpsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CodingCIPersonalExternalDepot) GetDepotHttpsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DepotHttpsUrl.Get(), o.DepotHttpsUrl.IsSet()
}

// HasDepotHttpsUrl returns a boolean if a field has been set.
func (o *CodingCIPersonalExternalDepot) HasDepotHttpsUrl() bool {
	if o != nil && o.DepotHttpsUrl.IsSet() {
		return true
	}

	return false
}

// SetDepotHttpsUrl gets a reference to the given utils.NullableString and assigns it to the DepotHttpsUrl field.
func (o *CodingCIPersonalExternalDepot) SetDepotHttpsUrl(v string) {
	o.DepotHttpsUrl.Set(&v)
}
// SetDepotHttpsUrlNil sets the value for DepotHttpsUrl to be an explicit nil
func (o *CodingCIPersonalExternalDepot) SetDepotHttpsUrlNil() {
	o.DepotHttpsUrl.Set(nil)
}

// UnsetDepotHttpsUrl ensures that no value is present for DepotHttpsUrl, not even an explicit nil
func (o *CodingCIPersonalExternalDepot) UnsetDepotHttpsUrl() {
	o.DepotHttpsUrl.Unset()
}

// GetDepotSshUrl returns the DepotSshUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CodingCIPersonalExternalDepot) GetDepotSshUrl() string {
	if o == nil || utils.IsNil(o.DepotSshUrl.Get()) {
		var ret string
		return ret
	}
	return *o.DepotSshUrl.Get()
}

// GetDepotSshUrlOk returns a tuple with the DepotSshUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CodingCIPersonalExternalDepot) GetDepotSshUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DepotSshUrl.Get(), o.DepotSshUrl.IsSet()
}

// HasDepotSshUrl returns a boolean if a field has been set.
func (o *CodingCIPersonalExternalDepot) HasDepotSshUrl() bool {
	if o != nil && o.DepotSshUrl.IsSet() {
		return true
	}

	return false
}

// SetDepotSshUrl gets a reference to the given utils.NullableString and assigns it to the DepotSshUrl field.
func (o *CodingCIPersonalExternalDepot) SetDepotSshUrl(v string) {
	o.DepotSshUrl.Set(&v)
}
// SetDepotSshUrlNil sets the value for DepotSshUrl to be an explicit nil
func (o *CodingCIPersonalExternalDepot) SetDepotSshUrlNil() {
	o.DepotSshUrl.Set(nil)
}

// UnsetDepotSshUrl ensures that no value is present for DepotSshUrl, not even an explicit nil
func (o *CodingCIPersonalExternalDepot) UnsetDepotSshUrl() {
	o.DepotSshUrl.Unset()
}

// GetDepotType returns the DepotType field value if set, zero value otherwise.
func (o *CodingCIPersonalExternalDepot) GetDepotType() string {
	if o == nil || utils.IsNil(o.DepotType) {
		var ret string
		return ret
	}
	return *o.DepotType
}

// GetDepotTypeOk returns a tuple with the DepotType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodingCIPersonalExternalDepot) GetDepotTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.DepotType) {
		return nil, false
	}
	return o.DepotType, true
}

// HasDepotType returns a boolean if a field has been set.
func (o *CodingCIPersonalExternalDepot) HasDepotType() bool {
	if o != nil && !utils.IsNil(o.DepotType) {
		return true
	}

	return false
}

// SetDepotType gets a reference to the given string and assigns it to the DepotType field.
func (o *CodingCIPersonalExternalDepot) SetDepotType(v string) {
	o.DepotType = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CodingCIPersonalExternalDepot) GetId() int32 {
	if o == nil || utils.IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodingCIPersonalExternalDepot) GetIdOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CodingCIPersonalExternalDepot) HasId() bool {
	if o != nil && !utils.IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CodingCIPersonalExternalDepot) SetId(v int32) {
	o.Id = &v
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise.
func (o *CodingCIPersonalExternalDepot) GetIsDefault() bool {
	if o == nil || utils.IsNil(o.IsDefault) {
		var ret bool
		return ret
	}
	return *o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodingCIPersonalExternalDepot) GetIsDefaultOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IsDefault) {
		return nil, false
	}
	return o.IsDefault, true
}

// HasIsDefault returns a boolean if a field has been set.
func (o *CodingCIPersonalExternalDepot) HasIsDefault() bool {
	if o != nil && !utils.IsNil(o.IsDefault) {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given bool and assigns it to the IsDefault field.
func (o *CodingCIPersonalExternalDepot) SetIsDefault(v bool) {
	o.IsDefault = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CodingCIPersonalExternalDepot) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodingCIPersonalExternalDepot) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CodingCIPersonalExternalDepot) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CodingCIPersonalExternalDepot) SetName(v string) {
	o.Name = &v
}

// GetOpenModule returns the OpenModule field value if set, zero value otherwise.
func (o *CodingCIPersonalExternalDepot) GetOpenModule() string {
	if o == nil || utils.IsNil(o.OpenModule) {
		var ret string
		return ret
	}
	return *o.OpenModule
}

// GetOpenModuleOk returns a tuple with the OpenModule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodingCIPersonalExternalDepot) GetOpenModuleOk() (*string, bool) {
	if o == nil || utils.IsNil(o.OpenModule) {
		return nil, false
	}
	return o.OpenModule, true
}

// HasOpenModule returns a boolean if a field has been set.
func (o *CodingCIPersonalExternalDepot) HasOpenModule() bool {
	if o != nil && !utils.IsNil(o.OpenModule) {
		return true
	}

	return false
}

// SetOpenModule gets a reference to the given string and assigns it to the OpenModule field.
func (o *CodingCIPersonalExternalDepot) SetOpenModule(v string) {
	o.OpenModule = &v
}

// GetOwnerName returns the OwnerName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CodingCIPersonalExternalDepot) GetOwnerName() string {
	if o == nil || utils.IsNil(o.OwnerName.Get()) {
		var ret string
		return ret
	}
	return *o.OwnerName.Get()
}

// GetOwnerNameOk returns a tuple with the OwnerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CodingCIPersonalExternalDepot) GetOwnerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OwnerName.Get(), o.OwnerName.IsSet()
}

// HasOwnerName returns a boolean if a field has been set.
func (o *CodingCIPersonalExternalDepot) HasOwnerName() bool {
	if o != nil && o.OwnerName.IsSet() {
		return true
	}

	return false
}

// SetOwnerName gets a reference to the given utils.NullableString and assigns it to the OwnerName field.
func (o *CodingCIPersonalExternalDepot) SetOwnerName(v string) {
	o.OwnerName.Set(&v)
}
// SetOwnerNameNil sets the value for OwnerName to be an explicit nil
func (o *CodingCIPersonalExternalDepot) SetOwnerNameNil() {
	o.OwnerName.Set(nil)
}

// UnsetOwnerName ensures that no value is present for OwnerName, not even an explicit nil
func (o *CodingCIPersonalExternalDepot) UnsetOwnerName() {
	o.OwnerName.Unset()
}

// GetSourceDepotId returns the SourceDepotId field value if set, zero value otherwise.
func (o *CodingCIPersonalExternalDepot) GetSourceDepotId() int64 {
	if o == nil || utils.IsNil(o.SourceDepotId) {
		var ret int64
		return ret
	}
	return *o.SourceDepotId
}

// GetSourceDepotIdOk returns a tuple with the SourceDepotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodingCIPersonalExternalDepot) GetSourceDepotIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.SourceDepotId) {
		return nil, false
	}
	return o.SourceDepotId, true
}

// HasSourceDepotId returns a boolean if a field has been set.
func (o *CodingCIPersonalExternalDepot) HasSourceDepotId() bool {
	if o != nil && !utils.IsNil(o.SourceDepotId) {
		return true
	}

	return false
}

// SetSourceDepotId gets a reference to the given int64 and assigns it to the SourceDepotId field.
func (o *CodingCIPersonalExternalDepot) SetSourceDepotId(v int64) {
	o.SourceDepotId = &v
}

func (o CodingCIPersonalExternalDepot) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CodingCIPersonalExternalDepot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Authorized.IsSet() {
		toSerialize["Authorized"] = o.Authorized.Get()
	}
	if o.DepotHttpsUrl.IsSet() {
		toSerialize["DepotHttpsUrl"] = o.DepotHttpsUrl.Get()
	}
	if o.DepotSshUrl.IsSet() {
		toSerialize["DepotSshUrl"] = o.DepotSshUrl.Get()
	}
	if !utils.IsNil(o.DepotType) {
		toSerialize["DepotType"] = o.DepotType
	}
	if !utils.IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !utils.IsNil(o.IsDefault) {
		toSerialize["IsDefault"] = o.IsDefault
	}
	if !utils.IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !utils.IsNil(o.OpenModule) {
		toSerialize["OpenModule"] = o.OpenModule
	}
	if o.OwnerName.IsSet() {
		toSerialize["OwnerName"] = o.OwnerName.Get()
	}
	if !utils.IsNil(o.SourceDepotId) {
		toSerialize["SourceDepotId"] = o.SourceDepotId
	}
	return toSerialize, nil
}

type NullableCodingCIPersonalExternalDepot struct {
	value *CodingCIPersonalExternalDepot
	isSet bool
}

func (v NullableCodingCIPersonalExternalDepot) Get() *CodingCIPersonalExternalDepot {
	return v.value
}

func (v *NullableCodingCIPersonalExternalDepot) Set(val *CodingCIPersonalExternalDepot) {
	v.value = val
	v.isSet = true
}

func (v NullableCodingCIPersonalExternalDepot) IsSet() bool {
	return v.isSet
}

func (v *NullableCodingCIPersonalExternalDepot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCodingCIPersonalExternalDepot(val *CodingCIPersonalExternalDepot) *NullableCodingCIPersonalExternalDepot {
	return &NullableCodingCIPersonalExternalDepot{value: val, isSet: true}
}

func (v NullableCodingCIPersonalExternalDepot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCodingCIPersonalExternalDepot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


