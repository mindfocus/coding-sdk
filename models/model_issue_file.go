/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the IssueFile type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &IssueFile{}

// IssueFile 事项附件
type IssueFile struct {
	// 文件 Id
	FileId *int64 `json:"FileId,omitempty"`
	// 文件名称
	Name *string `json:"Name,omitempty"`
	// 文件大小
	Size *int32 `json:"Size,omitempty"`
	// 类型：  1-文本，  2-图片，  3-二进制文件，  4-SVG
	Type *int64 `json:"Type,omitempty"`
	// 临时下载地址
	Url *string `json:"Url,omitempty"`
}

// NewIssueFile instantiates a new IssueFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueFile() *IssueFile {
	this := IssueFile{}
	var name string = ""
	this.Name = &name
	var url string = ""
	this.Url = &url
	return &this
}

// NewIssueFileWithDefaults instantiates a new IssueFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueFileWithDefaults() *IssueFile {
	this := IssueFile{}
	var name string = ""
	this.Name = &name
	var url string = ""
	this.Url = &url
	return &this
}

// GetFileId returns the FileId field value if set, zero value otherwise.
func (o *IssueFile) GetFileId() int64 {
	if o == nil || utils.IsNil(o.FileId) {
		var ret int64
		return ret
	}
	return *o.FileId
}

// GetFileIdOk returns a tuple with the FileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueFile) GetFileIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.FileId) {
		return nil, false
	}
	return o.FileId, true
}

// HasFileId returns a boolean if a field has been set.
func (o *IssueFile) HasFileId() bool {
	if o != nil && !utils.IsNil(o.FileId) {
		return true
	}

	return false
}

// SetFileId gets a reference to the given int64 and assigns it to the FileId field.
func (o *IssueFile) SetFileId(v int64) {
	o.FileId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IssueFile) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueFile) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IssueFile) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IssueFile) SetName(v string) {
	o.Name = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *IssueFile) GetSize() int32 {
	if o == nil || utils.IsNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueFile) GetSizeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *IssueFile) HasSize() bool {
	if o != nil && !utils.IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *IssueFile) SetSize(v int32) {
	o.Size = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IssueFile) GetType() int64 {
	if o == nil || utils.IsNil(o.Type) {
		var ret int64
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueFile) GetTypeOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IssueFile) HasType() bool {
	if o != nil && !utils.IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given int64 and assigns it to the Type field.
func (o *IssueFile) SetType(v int64) {
	o.Type = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *IssueFile) GetUrl() string {
	if o == nil || utils.IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueFile) GetUrlOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *IssueFile) HasUrl() bool {
	if o != nil && !utils.IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *IssueFile) SetUrl(v string) {
	o.Url = &v
}

func (o IssueFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IssueFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.FileId) {
		toSerialize["FileId"] = o.FileId
	}
	if !utils.IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !utils.IsNil(o.Size) {
		toSerialize["Size"] = o.Size
	}
	if !utils.IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	if !utils.IsNil(o.Url) {
		toSerialize["Url"] = o.Url
	}
	return toSerialize, nil
}

type NullableIssueFile struct {
	value *IssueFile
	isSet bool
}

func (v NullableIssueFile) Get() *IssueFile {
	return v.value
}

func (v *NullableIssueFile) Set(val *IssueFile) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueFile) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueFile(val *IssueFile) *NullableIssueFile {
	return &NullableIssueFile{value: val, isSet: true}
}

func (v NullableIssueFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


