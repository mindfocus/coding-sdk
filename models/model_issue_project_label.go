/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the IssueProjectLabel type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &IssueProjectLabel{}

// IssueProjectLabel 事项的项目标签
type IssueProjectLabel struct {
	// 标签颜色，例如：#5A606B
	Color *string `json:"Color,omitempty"`
	// 项目标签 Id
	Id *int64 `json:"Id,omitempty"`
	// 名称
	Name *string `json:"Name,omitempty"`
}

// NewIssueProjectLabel instantiates a new IssueProjectLabel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueProjectLabel() *IssueProjectLabel {
	this := IssueProjectLabel{}
	var color string = ""
	this.Color = &color
	var name string = ""
	this.Name = &name
	return &this
}

// NewIssueProjectLabelWithDefaults instantiates a new IssueProjectLabel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueProjectLabelWithDefaults() *IssueProjectLabel {
	this := IssueProjectLabel{}
	var color string = ""
	this.Color = &color
	var name string = ""
	this.Name = &name
	return &this
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *IssueProjectLabel) GetColor() string {
	if o == nil || utils.IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueProjectLabel) GetColorOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *IssueProjectLabel) HasColor() bool {
	if o != nil && !utils.IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *IssueProjectLabel) SetColor(v string) {
	o.Color = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IssueProjectLabel) GetId() int64 {
	if o == nil || utils.IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueProjectLabel) GetIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IssueProjectLabel) HasId() bool {
	if o != nil && !utils.IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *IssueProjectLabel) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IssueProjectLabel) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueProjectLabel) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IssueProjectLabel) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IssueProjectLabel) SetName(v string) {
	o.Name = &v
}

func (o IssueProjectLabel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IssueProjectLabel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Color) {
		toSerialize["Color"] = o.Color
	}
	if !utils.IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !utils.IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	return toSerialize, nil
}

type NullableIssueProjectLabel struct {
	value *IssueProjectLabel
	isSet bool
}

func (v NullableIssueProjectLabel) Get() *IssueProjectLabel {
	return v.value
}

func (v *NullableIssueProjectLabel) Set(val *IssueProjectLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueProjectLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueProjectLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueProjectLabel(val *IssueProjectLabel) *NullableIssueProjectLabel {
	return &NullableIssueProjectLabel{value: val, isSet: true}
}

func (v NullableIssueProjectLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueProjectLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


