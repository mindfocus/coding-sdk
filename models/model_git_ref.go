/*
CODING OPEN API

  

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the GitRef type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &GitRef{}

// GitRef 仓库分支
type GitRef struct {
	// 是否是附注标签
	AnnotatedTag *bool `json:"AnnotatedTag,omitempty"`
	// 展示名
	DisplayName *string `json:"DisplayName,omitempty"`
	// 最后一次提交全部信息
	FullMessage *string `json:"FullMessage,omitempty"`
	// 名字
	Name *string `json:"Name,omitempty"`
	// 对象id
	ObjectId *string `json:"ObjectId,omitempty"`
	// 分支objectId
	RefObjectId *string `json:"RefObjectId,omitempty"`
	// 最后一次提交简短信息
	ShortMessage *string `json:"ShortMessage,omitempty"`
}

// NewGitRef instantiates a new GitRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitRef() *GitRef {
	this := GitRef{}
	var annotatedTag bool = false
	this.AnnotatedTag = &annotatedTag
	var displayName string = ""
	this.DisplayName = &displayName
	var fullMessage string = ""
	this.FullMessage = &fullMessage
	var name string = ""
	this.Name = &name
	var objectId string = ""
	this.ObjectId = &objectId
	var refObjectId string = ""
	this.RefObjectId = &refObjectId
	var shortMessage string = ""
	this.ShortMessage = &shortMessage
	return &this
}

// NewGitRefWithDefaults instantiates a new GitRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitRefWithDefaults() *GitRef {
	this := GitRef{}
	var annotatedTag bool = false
	this.AnnotatedTag = &annotatedTag
	var displayName string = ""
	this.DisplayName = &displayName
	var fullMessage string = ""
	this.FullMessage = &fullMessage
	var name string = ""
	this.Name = &name
	var objectId string = ""
	this.ObjectId = &objectId
	var refObjectId string = ""
	this.RefObjectId = &refObjectId
	var shortMessage string = ""
	this.ShortMessage = &shortMessage
	return &this
}

// GetAnnotatedTag returns the AnnotatedTag field value if set, zero value otherwise.
func (o *GitRef) GetAnnotatedTag() bool {
	if o == nil || utils.IsNil(o.AnnotatedTag) {
		var ret bool
		return ret
	}
	return *o.AnnotatedTag
}

// GetAnnotatedTagOk returns a tuple with the AnnotatedTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitRef) GetAnnotatedTagOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.AnnotatedTag) {
		return nil, false
	}
	return o.AnnotatedTag, true
}

// HasAnnotatedTag returns a boolean if a field has been set.
func (o *GitRef) HasAnnotatedTag() bool {
	if o != nil && !utils.IsNil(o.AnnotatedTag) {
		return true
	}

	return false
}

// SetAnnotatedTag gets a reference to the given bool and assigns it to the AnnotatedTag field.
func (o *GitRef) SetAnnotatedTag(v bool) {
	o.AnnotatedTag = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *GitRef) GetDisplayName() string {
	if o == nil || utils.IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitRef) GetDisplayNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *GitRef) HasDisplayName() bool {
	if o != nil && !utils.IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *GitRef) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetFullMessage returns the FullMessage field value if set, zero value otherwise.
func (o *GitRef) GetFullMessage() string {
	if o == nil || utils.IsNil(o.FullMessage) {
		var ret string
		return ret
	}
	return *o.FullMessage
}

// GetFullMessageOk returns a tuple with the FullMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitRef) GetFullMessageOk() (*string, bool) {
	if o == nil || utils.IsNil(o.FullMessage) {
		return nil, false
	}
	return o.FullMessage, true
}

// HasFullMessage returns a boolean if a field has been set.
func (o *GitRef) HasFullMessage() bool {
	if o != nil && !utils.IsNil(o.FullMessage) {
		return true
	}

	return false
}

// SetFullMessage gets a reference to the given string and assigns it to the FullMessage field.
func (o *GitRef) SetFullMessage(v string) {
	o.FullMessage = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GitRef) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitRef) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GitRef) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GitRef) SetName(v string) {
	o.Name = &v
}

// GetObjectId returns the ObjectId field value if set, zero value otherwise.
func (o *GitRef) GetObjectId() string {
	if o == nil || utils.IsNil(o.ObjectId) {
		var ret string
		return ret
	}
	return *o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitRef) GetObjectIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ObjectId) {
		return nil, false
	}
	return o.ObjectId, true
}

// HasObjectId returns a boolean if a field has been set.
func (o *GitRef) HasObjectId() bool {
	if o != nil && !utils.IsNil(o.ObjectId) {
		return true
	}

	return false
}

// SetObjectId gets a reference to the given string and assigns it to the ObjectId field.
func (o *GitRef) SetObjectId(v string) {
	o.ObjectId = &v
}

// GetRefObjectId returns the RefObjectId field value if set, zero value otherwise.
func (o *GitRef) GetRefObjectId() string {
	if o == nil || utils.IsNil(o.RefObjectId) {
		var ret string
		return ret
	}
	return *o.RefObjectId
}

// GetRefObjectIdOk returns a tuple with the RefObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitRef) GetRefObjectIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.RefObjectId) {
		return nil, false
	}
	return o.RefObjectId, true
}

// HasRefObjectId returns a boolean if a field has been set.
func (o *GitRef) HasRefObjectId() bool {
	if o != nil && !utils.IsNil(o.RefObjectId) {
		return true
	}

	return false
}

// SetRefObjectId gets a reference to the given string and assigns it to the RefObjectId field.
func (o *GitRef) SetRefObjectId(v string) {
	o.RefObjectId = &v
}

// GetShortMessage returns the ShortMessage field value if set, zero value otherwise.
func (o *GitRef) GetShortMessage() string {
	if o == nil || utils.IsNil(o.ShortMessage) {
		var ret string
		return ret
	}
	return *o.ShortMessage
}

// GetShortMessageOk returns a tuple with the ShortMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitRef) GetShortMessageOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ShortMessage) {
		return nil, false
	}
	return o.ShortMessage, true
}

// HasShortMessage returns a boolean if a field has been set.
func (o *GitRef) HasShortMessage() bool {
	if o != nil && !utils.IsNil(o.ShortMessage) {
		return true
	}

	return false
}

// SetShortMessage gets a reference to the given string and assigns it to the ShortMessage field.
func (o *GitRef) SetShortMessage(v string) {
	o.ShortMessage = &v
}

func (o GitRef) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.AnnotatedTag) {
		toSerialize["AnnotatedTag"] = o.AnnotatedTag
	}
	if !utils.IsNil(o.DisplayName) {
		toSerialize["DisplayName"] = o.DisplayName
	}
	if !utils.IsNil(o.FullMessage) {
		toSerialize["FullMessage"] = o.FullMessage
	}
	if !utils.IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !utils.IsNil(o.ObjectId) {
		toSerialize["ObjectId"] = o.ObjectId
	}
	if !utils.IsNil(o.RefObjectId) {
		toSerialize["RefObjectId"] = o.RefObjectId
	}
	if !utils.IsNil(o.ShortMessage) {
		toSerialize["ShortMessage"] = o.ShortMessage
	}
	return toSerialize, nil
}

type NullableGitRef struct {
	value *GitRef
	isSet bool
}

func (v NullableGitRef) Get() *GitRef {
	return v.value
}

func (v *NullableGitRef) Set(val *GitRef) {
	v.value = val
	v.isSet = true
}

func (v NullableGitRef) IsSet() bool {
	return v.isSet
}

func (v *NullableGitRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitRef(val *GitRef) *NullableGitRef {
	return &NullableGitRef{value: val, isSet: true}
}

func (v NullableGitRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


