/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DescribePreSignUploadUrlRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DescribePreSignUploadUrlRequest{}

// DescribePreSignUploadUrlRequest struct for DescribePreSignUploadUrlRequest
type DescribePreSignUploadUrlRequest struct {
	// 内容类型，和web端的文件上传时content-type是一样的
	ContentType string `json:"ContentType"`
	// 文件名
	FileName string `json:"FileName"`
	// 若上传项目协同附件场景时，不需要配置或默认为0即可。若用于上传到文件网盘，可以设置文件夹ID, 用于文件存放位置，ID值通过open api【创建文件夹】获取
	FolderId int64 `json:"FolderId"`
	// 文件夹类型，0: 常规文件夹, 1:隐藏文件夹。 如果是用于项目协同上传附件的场景，配置为1；如果是上传到文件网盘则配置为0。
	FolderType int64 `json:"FolderType"`
	// 项目名称
	ProjectName string `json:"ProjectName"`
}

type _DescribePreSignUploadUrlRequest DescribePreSignUploadUrlRequest

// NewDescribePreSignUploadUrlRequest instantiates a new DescribePreSignUploadUrlRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribePreSignUploadUrlRequest(contentType string, fileName string, folderId int64, folderType int64, projectName string) *DescribePreSignUploadUrlRequest {
	this := DescribePreSignUploadUrlRequest{}
	this.ContentType = contentType
	this.FileName = fileName
	this.FolderId = folderId
	this.FolderType = folderType
	this.ProjectName = projectName
	return &this
}

// NewDescribePreSignUploadUrlRequestWithDefaults instantiates a new DescribePreSignUploadUrlRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribePreSignUploadUrlRequestWithDefaults() *DescribePreSignUploadUrlRequest {
	this := DescribePreSignUploadUrlRequest{}
	var contentType string = ""
	this.ContentType = contentType
	var fileName string = ""
	this.FileName = fileName
	var folderId int64 = 0
	this.FolderId = folderId
	var folderType int64 = 0
	this.FolderType = folderType
	var projectName string = ""
	this.ProjectName = projectName
	return &this
}

// GetContentType returns the ContentType field value
func (o *DescribePreSignUploadUrlRequest) GetContentType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value
// and a boolean to check if the value has been set.
func (o *DescribePreSignUploadUrlRequest) GetContentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentType, true
}

// SetContentType sets field value
func (o *DescribePreSignUploadUrlRequest) SetContentType(v string) {
	o.ContentType = v
}

// GetFileName returns the FileName field value
func (o *DescribePreSignUploadUrlRequest) GetFileName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value
// and a boolean to check if the value has been set.
func (o *DescribePreSignUploadUrlRequest) GetFileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileName, true
}

// SetFileName sets field value
func (o *DescribePreSignUploadUrlRequest) SetFileName(v string) {
	o.FileName = v
}

// GetFolderId returns the FolderId field value
func (o *DescribePreSignUploadUrlRequest) GetFolderId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FolderId
}

// GetFolderIdOk returns a tuple with the FolderId field value
// and a boolean to check if the value has been set.
func (o *DescribePreSignUploadUrlRequest) GetFolderIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FolderId, true
}

// SetFolderId sets field value
func (o *DescribePreSignUploadUrlRequest) SetFolderId(v int64) {
	o.FolderId = v
}

// GetFolderType returns the FolderType field value
func (o *DescribePreSignUploadUrlRequest) GetFolderType() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FolderType
}

// GetFolderTypeOk returns a tuple with the FolderType field value
// and a boolean to check if the value has been set.
func (o *DescribePreSignUploadUrlRequest) GetFolderTypeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FolderType, true
}

// SetFolderType sets field value
func (o *DescribePreSignUploadUrlRequest) SetFolderType(v int64) {
	o.FolderType = v
}

// GetProjectName returns the ProjectName field value
func (o *DescribePreSignUploadUrlRequest) GetProjectName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value
// and a boolean to check if the value has been set.
func (o *DescribePreSignUploadUrlRequest) GetProjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectName, true
}

// SetProjectName sets field value
func (o *DescribePreSignUploadUrlRequest) SetProjectName(v string) {
	o.ProjectName = v
}

func (o DescribePreSignUploadUrlRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribePreSignUploadUrlRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ContentType"] = o.ContentType
	toSerialize["FileName"] = o.FileName
	toSerialize["FolderId"] = o.FolderId
	toSerialize["FolderType"] = o.FolderType
	toSerialize["ProjectName"] = o.ProjectName
	return toSerialize, nil
}

func (o *DescribePreSignUploadUrlRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ContentType",
		"FileName",
		"FolderId",
		"FolderType",
		"ProjectName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescribePreSignUploadUrlRequest := _DescribePreSignUploadUrlRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDescribePreSignUploadUrlRequest)

	if err != nil {
		return err
	}

	*o = DescribePreSignUploadUrlRequest(varDescribePreSignUploadUrlRequest)

	return err
}

type NullableDescribePreSignUploadUrlRequest struct {
	value *DescribePreSignUploadUrlRequest
	isSet bool
}

func (v NullableDescribePreSignUploadUrlRequest) Get() *DescribePreSignUploadUrlRequest {
	return v.value
}

func (v *NullableDescribePreSignUploadUrlRequest) Set(val *DescribePreSignUploadUrlRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribePreSignUploadUrlRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribePreSignUploadUrlRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribePreSignUploadUrlRequest(val *DescribePreSignUploadUrlRequest) *NullableDescribePreSignUploadUrlRequest {
	return &NullableDescribePreSignUploadUrlRequest{value: val, isSet: true}
}

func (v NullableDescribePreSignUploadUrlRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribePreSignUploadUrlRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


