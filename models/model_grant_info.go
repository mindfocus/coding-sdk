/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the GrantInfo type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &GrantInfo{}

// GrantInfo 授权信息
type GrantInfo struct {
	// 授权对象 ID
	GrantObjectId string `json:"GrantObjectId"`
	// 授权对象类型：USER,USER_GROUP,DEPARTMENT
	GrantScope string `json:"GrantScope"`
	// 权限组 ID
	PolicyId int64 `json:"PolicyId"`
	// 身份 key，后期扩展场景使用，暂时留空即可
	PrincipalKey *string `json:"PrincipalKey,omitempty"`
	// 身份 value，后期扩展场景使用，暂时留空即可
	PrincipalValue *string `json:"PrincipalValue,omitempty"`
}

type _GrantInfo GrantInfo

// NewGrantInfo instantiates a new GrantInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGrantInfo(grantObjectId string, grantScope string, policyId int64) *GrantInfo {
	this := GrantInfo{}
	this.GrantObjectId = grantObjectId
	this.GrantScope = grantScope
	this.PolicyId = policyId
	var principalKey string = ""
	this.PrincipalKey = &principalKey
	var principalValue string = ""
	this.PrincipalValue = &principalValue
	return &this
}

// NewGrantInfoWithDefaults instantiates a new GrantInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGrantInfoWithDefaults() *GrantInfo {
	this := GrantInfo{}
	var grantObjectId string = ""
	this.GrantObjectId = grantObjectId
	var grantScope string = ""
	this.GrantScope = grantScope
	var principalKey string = ""
	this.PrincipalKey = &principalKey
	var principalValue string = ""
	this.PrincipalValue = &principalValue
	return &this
}

// GetGrantObjectId returns the GrantObjectId field value
func (o *GrantInfo) GetGrantObjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GrantObjectId
}

// GetGrantObjectIdOk returns a tuple with the GrantObjectId field value
// and a boolean to check if the value has been set.
func (o *GrantInfo) GetGrantObjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GrantObjectId, true
}

// SetGrantObjectId sets field value
func (o *GrantInfo) SetGrantObjectId(v string) {
	o.GrantObjectId = v
}

// GetGrantScope returns the GrantScope field value
func (o *GrantInfo) GetGrantScope() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GrantScope
}

// GetGrantScopeOk returns a tuple with the GrantScope field value
// and a boolean to check if the value has been set.
func (o *GrantInfo) GetGrantScopeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GrantScope, true
}

// SetGrantScope sets field value
func (o *GrantInfo) SetGrantScope(v string) {
	o.GrantScope = v
}

// GetPolicyId returns the PolicyId field value
func (o *GrantInfo) GetPolicyId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.PolicyId
}

// GetPolicyIdOk returns a tuple with the PolicyId field value
// and a boolean to check if the value has been set.
func (o *GrantInfo) GetPolicyIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PolicyId, true
}

// SetPolicyId sets field value
func (o *GrantInfo) SetPolicyId(v int64) {
	o.PolicyId = v
}

// GetPrincipalKey returns the PrincipalKey field value if set, zero value otherwise.
func (o *GrantInfo) GetPrincipalKey() string {
	if o == nil || utils.IsNil(o.PrincipalKey) {
		var ret string
		return ret
	}
	return *o.PrincipalKey
}

// GetPrincipalKeyOk returns a tuple with the PrincipalKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GrantInfo) GetPrincipalKeyOk() (*string, bool) {
	if o == nil || utils.IsNil(o.PrincipalKey) {
		return nil, false
	}
	return o.PrincipalKey, true
}

// HasPrincipalKey returns a boolean if a field has been set.
func (o *GrantInfo) HasPrincipalKey() bool {
	if o != nil && !utils.IsNil(o.PrincipalKey) {
		return true
	}

	return false
}

// SetPrincipalKey gets a reference to the given string and assigns it to the PrincipalKey field.
func (o *GrantInfo) SetPrincipalKey(v string) {
	o.PrincipalKey = &v
}

// GetPrincipalValue returns the PrincipalValue field value if set, zero value otherwise.
func (o *GrantInfo) GetPrincipalValue() string {
	if o == nil || utils.IsNil(o.PrincipalValue) {
		var ret string
		return ret
	}
	return *o.PrincipalValue
}

// GetPrincipalValueOk returns a tuple with the PrincipalValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GrantInfo) GetPrincipalValueOk() (*string, bool) {
	if o == nil || utils.IsNil(o.PrincipalValue) {
		return nil, false
	}
	return o.PrincipalValue, true
}

// HasPrincipalValue returns a boolean if a field has been set.
func (o *GrantInfo) HasPrincipalValue() bool {
	if o != nil && !utils.IsNil(o.PrincipalValue) {
		return true
	}

	return false
}

// SetPrincipalValue gets a reference to the given string and assigns it to the PrincipalValue field.
func (o *GrantInfo) SetPrincipalValue(v string) {
	o.PrincipalValue = &v
}

func (o GrantInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GrantInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["GrantObjectId"] = o.GrantObjectId
	toSerialize["GrantScope"] = o.GrantScope
	toSerialize["PolicyId"] = o.PolicyId
	if !utils.IsNil(o.PrincipalKey) {
		toSerialize["PrincipalKey"] = o.PrincipalKey
	}
	if !utils.IsNil(o.PrincipalValue) {
		toSerialize["PrincipalValue"] = o.PrincipalValue
	}
	return toSerialize, nil
}

func (o *GrantInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"GrantObjectId",
		"GrantScope",
		"PolicyId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGrantInfo := _GrantInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGrantInfo)

	if err != nil {
		return err
	}

	*o = GrantInfo(varGrantInfo)

	return err
}

type NullableGrantInfo struct {
	value *GrantInfo
	isSet bool
}

func (v NullableGrantInfo) Get() *GrantInfo {
	return v.value
}

func (v *NullableGrantInfo) Set(val *GrantInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableGrantInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableGrantInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGrantInfo(val *GrantInfo) *NullableGrantInfo {
	return &NullableGrantInfo{value: val, isSet: true}
}

func (v NullableGrantInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGrantInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


