/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the ModifyCodingCIJobRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ModifyCodingCIJobRequest{}

// ModifyCodingCIJobRequest struct for ModifyCodingCIJobRequest
type ModifyCodingCIJobRequest struct {
	// 不管构建成功还是失败总是通知的用户
	AlwaysUserIdList []int32 `json:"AlwaysUserIdList,omitempty"`
	// 自动取消相同 MR
	AutoCancelSameMergeRequest bool `json:"AutoCancelSameMergeRequest"`
	// 自动取消相同版本
	AutoCancelSameRevision bool `json:"AutoCancelSameRevision"`
	// hookType 为 CUSTOME 时须指定
	BranchRegex *string `json:"BranchRegex,omitempty"`
	// hookType 为 DEFAULT 时须指定
	BranchSelector *string `json:"BranchSelector,omitempty"`
	// 仅构建失败时要通知的用户
	BuildFailUserIdList []int32 `json:"BuildFailUserIdList,omitempty"`
	// 任务缓存目录配置
	CachePathList []CodingCIJobCachePath `json:"CachePathList,omitempty"`
	// 仓库 ID
	DepotId int32 `json:"DepotId"`
	// 仓库类型 CODING,TGIT,GITHUB,GITLAB,GITLAB_PRIVATE,GITEE,NONE
	DepotType string `json:"DepotType"`
	// 环境变量配置
	EnvList []CodingCIJobEnv `json:"EnvList,omitempty"`
	// 执行方式 CVM | STATIC
	ExecuteIn string `json:"ExecuteIn"`
	// 自定义构建节点池 ID，ExecuteIn 为 AGENT 必填
	ExecutedAgentPoolId *int32 `json:"ExecutedAgentPoolId,omitempty"`
	// 代码更新触发匹配规则
	HookType string `json:"HookType"`
	// 构建计划 ID
	Id int32 `json:"Id"`
	// STATIC，SCM 从代码库读取
	JenkinsFileFromType string `json:"JenkinsFileFromType"`
	// JenkinsFileFromType 为 SCM 必填
	JenkinsFilePath *string `json:"JenkinsFilePath,omitempty"`
	// JenkinsFileFromType 为 STATIC 必填
	JenkinsFileStaticContent *string `json:"JenkinsFileStaticContent,omitempty"`
	// 构建计划来源 TKE TCB
	JobFromType string `json:"JobFromType"`
	// 构建计划名称
	Name *string `json:"Name,omitempty"`
	// 项目 ID
	ProjectId int32 `json:"ProjectId"`
	// 针对 CRON triggerMethod 的 schedule 规则配置, 暂只用于添加
	ScheduleList []CodingCIJobSchedule `json:"ScheduleList,omitempty"`
	// REF_CHANGE 代码更新触发      CRON = 1 定时触发      MR_CHANGE  MR变动触发  TKE 对接他们传空数组老是有问题，遂改成非必填
	TriggerMethodList []string `json:"TriggerMethodList,omitempty"`
	// 构建结果通知触发者机制  ALWAYS -总是通知;  BUILD_FAIL -仅构建失败时通知;
	TriggerRemind string `json:"TriggerRemind"`
}

type _ModifyCodingCIJobRequest ModifyCodingCIJobRequest

// NewModifyCodingCIJobRequest instantiates a new ModifyCodingCIJobRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModifyCodingCIJobRequest(autoCancelSameMergeRequest bool, autoCancelSameRevision bool, depotId int32, depotType string, executeIn string, hookType string, id int32, jenkinsFileFromType string, jobFromType string, projectId int32, triggerRemind string) *ModifyCodingCIJobRequest {
	this := ModifyCodingCIJobRequest{}
	this.AutoCancelSameMergeRequest = autoCancelSameMergeRequest
	this.AutoCancelSameRevision = autoCancelSameRevision
	this.DepotId = depotId
	this.DepotType = depotType
	this.ExecuteIn = executeIn
	this.HookType = hookType
	this.Id = id
	this.JenkinsFileFromType = jenkinsFileFromType
	this.JobFromType = jobFromType
	this.ProjectId = projectId
	this.TriggerRemind = triggerRemind
	return &this
}

// NewModifyCodingCIJobRequestWithDefaults instantiates a new ModifyCodingCIJobRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModifyCodingCIJobRequestWithDefaults() *ModifyCodingCIJobRequest {
	this := ModifyCodingCIJobRequest{}
	return &this
}

// GetAlwaysUserIdList returns the AlwaysUserIdList field value if set, zero value otherwise.
func (o *ModifyCodingCIJobRequest) GetAlwaysUserIdList() []int32 {
	if o == nil || utils.IsNil(o.AlwaysUserIdList) {
		var ret []int32
		return ret
	}
	return o.AlwaysUserIdList
}

// GetAlwaysUserIdListOk returns a tuple with the AlwaysUserIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifyCodingCIJobRequest) GetAlwaysUserIdListOk() ([]int32, bool) {
	if o == nil || utils.IsNil(o.AlwaysUserIdList) {
		return nil, false
	}
	return o.AlwaysUserIdList, true
}

// HasAlwaysUserIdList returns a boolean if a field has been set.
func (o *ModifyCodingCIJobRequest) HasAlwaysUserIdList() bool {
	if o != nil && !utils.IsNil(o.AlwaysUserIdList) {
		return true
	}

	return false
}

// SetAlwaysUserIdList gets a reference to the given []int32 and assigns it to the AlwaysUserIdList field.
func (o *ModifyCodingCIJobRequest) SetAlwaysUserIdList(v []int32) {
	o.AlwaysUserIdList = v
}

// GetAutoCancelSameMergeRequest returns the AutoCancelSameMergeRequest field value
func (o *ModifyCodingCIJobRequest) GetAutoCancelSameMergeRequest() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AutoCancelSameMergeRequest
}

// GetAutoCancelSameMergeRequestOk returns a tuple with the AutoCancelSameMergeRequest field value
// and a boolean to check if the value has been set.
func (o *ModifyCodingCIJobRequest) GetAutoCancelSameMergeRequestOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AutoCancelSameMergeRequest, true
}

// SetAutoCancelSameMergeRequest sets field value
func (o *ModifyCodingCIJobRequest) SetAutoCancelSameMergeRequest(v bool) {
	o.AutoCancelSameMergeRequest = v
}

// GetAutoCancelSameRevision returns the AutoCancelSameRevision field value
func (o *ModifyCodingCIJobRequest) GetAutoCancelSameRevision() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AutoCancelSameRevision
}

// GetAutoCancelSameRevisionOk returns a tuple with the AutoCancelSameRevision field value
// and a boolean to check if the value has been set.
func (o *ModifyCodingCIJobRequest) GetAutoCancelSameRevisionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AutoCancelSameRevision, true
}

// SetAutoCancelSameRevision sets field value
func (o *ModifyCodingCIJobRequest) SetAutoCancelSameRevision(v bool) {
	o.AutoCancelSameRevision = v
}

// GetBranchRegex returns the BranchRegex field value if set, zero value otherwise.
func (o *ModifyCodingCIJobRequest) GetBranchRegex() string {
	if o == nil || utils.IsNil(o.BranchRegex) {
		var ret string
		return ret
	}
	return *o.BranchRegex
}

// GetBranchRegexOk returns a tuple with the BranchRegex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifyCodingCIJobRequest) GetBranchRegexOk() (*string, bool) {
	if o == nil || utils.IsNil(o.BranchRegex) {
		return nil, false
	}
	return o.BranchRegex, true
}

// HasBranchRegex returns a boolean if a field has been set.
func (o *ModifyCodingCIJobRequest) HasBranchRegex() bool {
	if o != nil && !utils.IsNil(o.BranchRegex) {
		return true
	}

	return false
}

// SetBranchRegex gets a reference to the given string and assigns it to the BranchRegex field.
func (o *ModifyCodingCIJobRequest) SetBranchRegex(v string) {
	o.BranchRegex = &v
}

// GetBranchSelector returns the BranchSelector field value if set, zero value otherwise.
func (o *ModifyCodingCIJobRequest) GetBranchSelector() string {
	if o == nil || utils.IsNil(o.BranchSelector) {
		var ret string
		return ret
	}
	return *o.BranchSelector
}

// GetBranchSelectorOk returns a tuple with the BranchSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifyCodingCIJobRequest) GetBranchSelectorOk() (*string, bool) {
	if o == nil || utils.IsNil(o.BranchSelector) {
		return nil, false
	}
	return o.BranchSelector, true
}

// HasBranchSelector returns a boolean if a field has been set.
func (o *ModifyCodingCIJobRequest) HasBranchSelector() bool {
	if o != nil && !utils.IsNil(o.BranchSelector) {
		return true
	}

	return false
}

// SetBranchSelector gets a reference to the given string and assigns it to the BranchSelector field.
func (o *ModifyCodingCIJobRequest) SetBranchSelector(v string) {
	o.BranchSelector = &v
}

// GetBuildFailUserIdList returns the BuildFailUserIdList field value if set, zero value otherwise.
func (o *ModifyCodingCIJobRequest) GetBuildFailUserIdList() []int32 {
	if o == nil || utils.IsNil(o.BuildFailUserIdList) {
		var ret []int32
		return ret
	}
	return o.BuildFailUserIdList
}

// GetBuildFailUserIdListOk returns a tuple with the BuildFailUserIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifyCodingCIJobRequest) GetBuildFailUserIdListOk() ([]int32, bool) {
	if o == nil || utils.IsNil(o.BuildFailUserIdList) {
		return nil, false
	}
	return o.BuildFailUserIdList, true
}

// HasBuildFailUserIdList returns a boolean if a field has been set.
func (o *ModifyCodingCIJobRequest) HasBuildFailUserIdList() bool {
	if o != nil && !utils.IsNil(o.BuildFailUserIdList) {
		return true
	}

	return false
}

// SetBuildFailUserIdList gets a reference to the given []int32 and assigns it to the BuildFailUserIdList field.
func (o *ModifyCodingCIJobRequest) SetBuildFailUserIdList(v []int32) {
	o.BuildFailUserIdList = v
}

// GetCachePathList returns the CachePathList field value if set, zero value otherwise.
func (o *ModifyCodingCIJobRequest) GetCachePathList() []CodingCIJobCachePath {
	if o == nil || utils.IsNil(o.CachePathList) {
		var ret []CodingCIJobCachePath
		return ret
	}
	return o.CachePathList
}

// GetCachePathListOk returns a tuple with the CachePathList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifyCodingCIJobRequest) GetCachePathListOk() ([]CodingCIJobCachePath, bool) {
	if o == nil || utils.IsNil(o.CachePathList) {
		return nil, false
	}
	return o.CachePathList, true
}

// HasCachePathList returns a boolean if a field has been set.
func (o *ModifyCodingCIJobRequest) HasCachePathList() bool {
	if o != nil && !utils.IsNil(o.CachePathList) {
		return true
	}

	return false
}

// SetCachePathList gets a reference to the given []CodingCIJobCachePath and assigns it to the CachePathList field.
func (o *ModifyCodingCIJobRequest) SetCachePathList(v []CodingCIJobCachePath) {
	o.CachePathList = v
}

// GetDepotId returns the DepotId field value
func (o *ModifyCodingCIJobRequest) GetDepotId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DepotId
}

// GetDepotIdOk returns a tuple with the DepotId field value
// and a boolean to check if the value has been set.
func (o *ModifyCodingCIJobRequest) GetDepotIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepotId, true
}

// SetDepotId sets field value
func (o *ModifyCodingCIJobRequest) SetDepotId(v int32) {
	o.DepotId = v
}

// GetDepotType returns the DepotType field value
func (o *ModifyCodingCIJobRequest) GetDepotType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DepotType
}

// GetDepotTypeOk returns a tuple with the DepotType field value
// and a boolean to check if the value has been set.
func (o *ModifyCodingCIJobRequest) GetDepotTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepotType, true
}

// SetDepotType sets field value
func (o *ModifyCodingCIJobRequest) SetDepotType(v string) {
	o.DepotType = v
}

// GetEnvList returns the EnvList field value if set, zero value otherwise.
func (o *ModifyCodingCIJobRequest) GetEnvList() []CodingCIJobEnv {
	if o == nil || utils.IsNil(o.EnvList) {
		var ret []CodingCIJobEnv
		return ret
	}
	return o.EnvList
}

// GetEnvListOk returns a tuple with the EnvList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifyCodingCIJobRequest) GetEnvListOk() ([]CodingCIJobEnv, bool) {
	if o == nil || utils.IsNil(o.EnvList) {
		return nil, false
	}
	return o.EnvList, true
}

// HasEnvList returns a boolean if a field has been set.
func (o *ModifyCodingCIJobRequest) HasEnvList() bool {
	if o != nil && !utils.IsNil(o.EnvList) {
		return true
	}

	return false
}

// SetEnvList gets a reference to the given []CodingCIJobEnv and assigns it to the EnvList field.
func (o *ModifyCodingCIJobRequest) SetEnvList(v []CodingCIJobEnv) {
	o.EnvList = v
}

// GetExecuteIn returns the ExecuteIn field value
func (o *ModifyCodingCIJobRequest) GetExecuteIn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExecuteIn
}

// GetExecuteInOk returns a tuple with the ExecuteIn field value
// and a boolean to check if the value has been set.
func (o *ModifyCodingCIJobRequest) GetExecuteInOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExecuteIn, true
}

// SetExecuteIn sets field value
func (o *ModifyCodingCIJobRequest) SetExecuteIn(v string) {
	o.ExecuteIn = v
}

// GetExecutedAgentPoolId returns the ExecutedAgentPoolId field value if set, zero value otherwise.
func (o *ModifyCodingCIJobRequest) GetExecutedAgentPoolId() int32 {
	if o == nil || utils.IsNil(o.ExecutedAgentPoolId) {
		var ret int32
		return ret
	}
	return *o.ExecutedAgentPoolId
}

// GetExecutedAgentPoolIdOk returns a tuple with the ExecutedAgentPoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifyCodingCIJobRequest) GetExecutedAgentPoolIdOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.ExecutedAgentPoolId) {
		return nil, false
	}
	return o.ExecutedAgentPoolId, true
}

// HasExecutedAgentPoolId returns a boolean if a field has been set.
func (o *ModifyCodingCIJobRequest) HasExecutedAgentPoolId() bool {
	if o != nil && !utils.IsNil(o.ExecutedAgentPoolId) {
		return true
	}

	return false
}

// SetExecutedAgentPoolId gets a reference to the given int32 and assigns it to the ExecutedAgentPoolId field.
func (o *ModifyCodingCIJobRequest) SetExecutedAgentPoolId(v int32) {
	o.ExecutedAgentPoolId = &v
}

// GetHookType returns the HookType field value
func (o *ModifyCodingCIJobRequest) GetHookType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HookType
}

// GetHookTypeOk returns a tuple with the HookType field value
// and a boolean to check if the value has been set.
func (o *ModifyCodingCIJobRequest) GetHookTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HookType, true
}

// SetHookType sets field value
func (o *ModifyCodingCIJobRequest) SetHookType(v string) {
	o.HookType = v
}

// GetId returns the Id field value
func (o *ModifyCodingCIJobRequest) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ModifyCodingCIJobRequest) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ModifyCodingCIJobRequest) SetId(v int32) {
	o.Id = v
}

// GetJenkinsFileFromType returns the JenkinsFileFromType field value
func (o *ModifyCodingCIJobRequest) GetJenkinsFileFromType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.JenkinsFileFromType
}

// GetJenkinsFileFromTypeOk returns a tuple with the JenkinsFileFromType field value
// and a boolean to check if the value has been set.
func (o *ModifyCodingCIJobRequest) GetJenkinsFileFromTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JenkinsFileFromType, true
}

// SetJenkinsFileFromType sets field value
func (o *ModifyCodingCIJobRequest) SetJenkinsFileFromType(v string) {
	o.JenkinsFileFromType = v
}

// GetJenkinsFilePath returns the JenkinsFilePath field value if set, zero value otherwise.
func (o *ModifyCodingCIJobRequest) GetJenkinsFilePath() string {
	if o == nil || utils.IsNil(o.JenkinsFilePath) {
		var ret string
		return ret
	}
	return *o.JenkinsFilePath
}

// GetJenkinsFilePathOk returns a tuple with the JenkinsFilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifyCodingCIJobRequest) GetJenkinsFilePathOk() (*string, bool) {
	if o == nil || utils.IsNil(o.JenkinsFilePath) {
		return nil, false
	}
	return o.JenkinsFilePath, true
}

// HasJenkinsFilePath returns a boolean if a field has been set.
func (o *ModifyCodingCIJobRequest) HasJenkinsFilePath() bool {
	if o != nil && !utils.IsNil(o.JenkinsFilePath) {
		return true
	}

	return false
}

// SetJenkinsFilePath gets a reference to the given string and assigns it to the JenkinsFilePath field.
func (o *ModifyCodingCIJobRequest) SetJenkinsFilePath(v string) {
	o.JenkinsFilePath = &v
}

// GetJenkinsFileStaticContent returns the JenkinsFileStaticContent field value if set, zero value otherwise.
func (o *ModifyCodingCIJobRequest) GetJenkinsFileStaticContent() string {
	if o == nil || utils.IsNil(o.JenkinsFileStaticContent) {
		var ret string
		return ret
	}
	return *o.JenkinsFileStaticContent
}

// GetJenkinsFileStaticContentOk returns a tuple with the JenkinsFileStaticContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifyCodingCIJobRequest) GetJenkinsFileStaticContentOk() (*string, bool) {
	if o == nil || utils.IsNil(o.JenkinsFileStaticContent) {
		return nil, false
	}
	return o.JenkinsFileStaticContent, true
}

// HasJenkinsFileStaticContent returns a boolean if a field has been set.
func (o *ModifyCodingCIJobRequest) HasJenkinsFileStaticContent() bool {
	if o != nil && !utils.IsNil(o.JenkinsFileStaticContent) {
		return true
	}

	return false
}

// SetJenkinsFileStaticContent gets a reference to the given string and assigns it to the JenkinsFileStaticContent field.
func (o *ModifyCodingCIJobRequest) SetJenkinsFileStaticContent(v string) {
	o.JenkinsFileStaticContent = &v
}

// GetJobFromType returns the JobFromType field value
func (o *ModifyCodingCIJobRequest) GetJobFromType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.JobFromType
}

// GetJobFromTypeOk returns a tuple with the JobFromType field value
// and a boolean to check if the value has been set.
func (o *ModifyCodingCIJobRequest) GetJobFromTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JobFromType, true
}

// SetJobFromType sets field value
func (o *ModifyCodingCIJobRequest) SetJobFromType(v string) {
	o.JobFromType = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ModifyCodingCIJobRequest) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifyCodingCIJobRequest) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ModifyCodingCIJobRequest) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ModifyCodingCIJobRequest) SetName(v string) {
	o.Name = &v
}

// GetProjectId returns the ProjectId field value
func (o *ModifyCodingCIJobRequest) GetProjectId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *ModifyCodingCIJobRequest) GetProjectIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *ModifyCodingCIJobRequest) SetProjectId(v int32) {
	o.ProjectId = v
}

// GetScheduleList returns the ScheduleList field value if set, zero value otherwise.
func (o *ModifyCodingCIJobRequest) GetScheduleList() []CodingCIJobSchedule {
	if o == nil || utils.IsNil(o.ScheduleList) {
		var ret []CodingCIJobSchedule
		return ret
	}
	return o.ScheduleList
}

// GetScheduleListOk returns a tuple with the ScheduleList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifyCodingCIJobRequest) GetScheduleListOk() ([]CodingCIJobSchedule, bool) {
	if o == nil || utils.IsNil(o.ScheduleList) {
		return nil, false
	}
	return o.ScheduleList, true
}

// HasScheduleList returns a boolean if a field has been set.
func (o *ModifyCodingCIJobRequest) HasScheduleList() bool {
	if o != nil && !utils.IsNil(o.ScheduleList) {
		return true
	}

	return false
}

// SetScheduleList gets a reference to the given []CodingCIJobSchedule and assigns it to the ScheduleList field.
func (o *ModifyCodingCIJobRequest) SetScheduleList(v []CodingCIJobSchedule) {
	o.ScheduleList = v
}

// GetTriggerMethodList returns the TriggerMethodList field value if set, zero value otherwise.
func (o *ModifyCodingCIJobRequest) GetTriggerMethodList() []string {
	if o == nil || utils.IsNil(o.TriggerMethodList) {
		var ret []string
		return ret
	}
	return o.TriggerMethodList
}

// GetTriggerMethodListOk returns a tuple with the TriggerMethodList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifyCodingCIJobRequest) GetTriggerMethodListOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.TriggerMethodList) {
		return nil, false
	}
	return o.TriggerMethodList, true
}

// HasTriggerMethodList returns a boolean if a field has been set.
func (o *ModifyCodingCIJobRequest) HasTriggerMethodList() bool {
	if o != nil && !utils.IsNil(o.TriggerMethodList) {
		return true
	}

	return false
}

// SetTriggerMethodList gets a reference to the given []string and assigns it to the TriggerMethodList field.
func (o *ModifyCodingCIJobRequest) SetTriggerMethodList(v []string) {
	o.TriggerMethodList = v
}

// GetTriggerRemind returns the TriggerRemind field value
func (o *ModifyCodingCIJobRequest) GetTriggerRemind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TriggerRemind
}

// GetTriggerRemindOk returns a tuple with the TriggerRemind field value
// and a boolean to check if the value has been set.
func (o *ModifyCodingCIJobRequest) GetTriggerRemindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TriggerRemind, true
}

// SetTriggerRemind sets field value
func (o *ModifyCodingCIJobRequest) SetTriggerRemind(v string) {
	o.TriggerRemind = v
}

func (o ModifyCodingCIJobRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModifyCodingCIJobRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.AlwaysUserIdList) {
		toSerialize["AlwaysUserIdList"] = o.AlwaysUserIdList
	}
	toSerialize["AutoCancelSameMergeRequest"] = o.AutoCancelSameMergeRequest
	toSerialize["AutoCancelSameRevision"] = o.AutoCancelSameRevision
	if !utils.IsNil(o.BranchRegex) {
		toSerialize["BranchRegex"] = o.BranchRegex
	}
	if !utils.IsNil(o.BranchSelector) {
		toSerialize["BranchSelector"] = o.BranchSelector
	}
	if !utils.IsNil(o.BuildFailUserIdList) {
		toSerialize["BuildFailUserIdList"] = o.BuildFailUserIdList
	}
	if !utils.IsNil(o.CachePathList) {
		toSerialize["CachePathList"] = o.CachePathList
	}
	toSerialize["DepotId"] = o.DepotId
	toSerialize["DepotType"] = o.DepotType
	if !utils.IsNil(o.EnvList) {
		toSerialize["EnvList"] = o.EnvList
	}
	toSerialize["ExecuteIn"] = o.ExecuteIn
	if !utils.IsNil(o.ExecutedAgentPoolId) {
		toSerialize["ExecutedAgentPoolId"] = o.ExecutedAgentPoolId
	}
	toSerialize["HookType"] = o.HookType
	toSerialize["Id"] = o.Id
	toSerialize["JenkinsFileFromType"] = o.JenkinsFileFromType
	if !utils.IsNil(o.JenkinsFilePath) {
		toSerialize["JenkinsFilePath"] = o.JenkinsFilePath
	}
	if !utils.IsNil(o.JenkinsFileStaticContent) {
		toSerialize["JenkinsFileStaticContent"] = o.JenkinsFileStaticContent
	}
	toSerialize["JobFromType"] = o.JobFromType
	if !utils.IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	toSerialize["ProjectId"] = o.ProjectId
	if !utils.IsNil(o.ScheduleList) {
		toSerialize["ScheduleList"] = o.ScheduleList
	}
	if !utils.IsNil(o.TriggerMethodList) {
		toSerialize["TriggerMethodList"] = o.TriggerMethodList
	}
	toSerialize["TriggerRemind"] = o.TriggerRemind
	return toSerialize, nil
}

func (o *ModifyCodingCIJobRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"AutoCancelSameMergeRequest",
		"AutoCancelSameRevision",
		"DepotId",
		"DepotType",
		"ExecuteIn",
		"HookType",
		"Id",
		"JenkinsFileFromType",
		"JobFromType",
		"ProjectId",
		"TriggerRemind",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModifyCodingCIJobRequest := _ModifyCodingCIJobRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModifyCodingCIJobRequest)

	if err != nil {
		return err
	}

	*o = ModifyCodingCIJobRequest(varModifyCodingCIJobRequest)

	return err
}

type NullableModifyCodingCIJobRequest struct {
	value *ModifyCodingCIJobRequest
	isSet bool
}

func (v NullableModifyCodingCIJobRequest) Get() *ModifyCodingCIJobRequest {
	return v.value
}

func (v *NullableModifyCodingCIJobRequest) Set(val *ModifyCodingCIJobRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableModifyCodingCIJobRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableModifyCodingCIJobRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModifyCodingCIJobRequest(val *ModifyCodingCIJobRequest) *NullableModifyCodingCIJobRequest {
	return &NullableModifyCodingCIJobRequest{value: val, isSet: true}
}

func (v NullableModifyCodingCIJobRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModifyCodingCIJobRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


