/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DescribeDifferentBetween2CommitsRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DescribeDifferentBetween2CommitsRequest{}

// DescribeDifferentBetween2CommitsRequest struct for DescribeDifferentBetween2CommitsRequest
type DescribeDifferentBetween2CommitsRequest struct {
	// 仓库Id
	DepotId int64 `json:"DepotId"`
	// 仓库路径，与DepotID二选一即可
	DepotPath *string `json:"DepotPath,omitempty"`
	// 文件路径
	Path string `json:"Path"`
	// 源分支
	Source string `json:"Source"`
	// commit对比方式,是否直接对比差异
	Straight *bool `json:"Straight,omitempty"`
	// 目标分支
	Target string `json:"Target"`
}

type _DescribeDifferentBetween2CommitsRequest DescribeDifferentBetween2CommitsRequest

// NewDescribeDifferentBetween2CommitsRequest instantiates a new DescribeDifferentBetween2CommitsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeDifferentBetween2CommitsRequest(depotId int64, path string, source string, target string) *DescribeDifferentBetween2CommitsRequest {
	this := DescribeDifferentBetween2CommitsRequest{}
	this.DepotId = depotId
	var depotPath string = "codingcorp/test/depot"
	this.DepotPath = &depotPath
	this.Path = path
	this.Source = source
	var straight bool = false
	this.Straight = &straight
	this.Target = target
	return &this
}

// NewDescribeDifferentBetween2CommitsRequestWithDefaults instantiates a new DescribeDifferentBetween2CommitsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeDifferentBetween2CommitsRequestWithDefaults() *DescribeDifferentBetween2CommitsRequest {
	this := DescribeDifferentBetween2CommitsRequest{}
	var depotId int64 = 0
	this.DepotId = depotId
	var depotPath string = "codingcorp/test/depot"
	this.DepotPath = &depotPath
	var path string = "README.md"
	this.Path = path
	var source string = "master"
	this.Source = source
	var straight bool = false
	this.Straight = &straight
	var target string = "dev"
	this.Target = target
	return &this
}

// GetDepotId returns the DepotId field value
func (o *DescribeDifferentBetween2CommitsRequest) GetDepotId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DepotId
}

// GetDepotIdOk returns a tuple with the DepotId field value
// and a boolean to check if the value has been set.
func (o *DescribeDifferentBetween2CommitsRequest) GetDepotIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepotId, true
}

// SetDepotId sets field value
func (o *DescribeDifferentBetween2CommitsRequest) SetDepotId(v int64) {
	o.DepotId = v
}

// GetDepotPath returns the DepotPath field value if set, zero value otherwise.
func (o *DescribeDifferentBetween2CommitsRequest) GetDepotPath() string {
	if o == nil || utils.IsNil(o.DepotPath) {
		var ret string
		return ret
	}
	return *o.DepotPath
}

// GetDepotPathOk returns a tuple with the DepotPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeDifferentBetween2CommitsRequest) GetDepotPathOk() (*string, bool) {
	if o == nil || utils.IsNil(o.DepotPath) {
		return nil, false
	}
	return o.DepotPath, true
}

// HasDepotPath returns a boolean if a field has been set.
func (o *DescribeDifferentBetween2CommitsRequest) HasDepotPath() bool {
	if o != nil && !utils.IsNil(o.DepotPath) {
		return true
	}

	return false
}

// SetDepotPath gets a reference to the given string and assigns it to the DepotPath field.
func (o *DescribeDifferentBetween2CommitsRequest) SetDepotPath(v string) {
	o.DepotPath = &v
}

// GetPath returns the Path field value
func (o *DescribeDifferentBetween2CommitsRequest) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *DescribeDifferentBetween2CommitsRequest) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *DescribeDifferentBetween2CommitsRequest) SetPath(v string) {
	o.Path = v
}

// GetSource returns the Source field value
func (o *DescribeDifferentBetween2CommitsRequest) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *DescribeDifferentBetween2CommitsRequest) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *DescribeDifferentBetween2CommitsRequest) SetSource(v string) {
	o.Source = v
}

// GetStraight returns the Straight field value if set, zero value otherwise.
func (o *DescribeDifferentBetween2CommitsRequest) GetStraight() bool {
	if o == nil || utils.IsNil(o.Straight) {
		var ret bool
		return ret
	}
	return *o.Straight
}

// GetStraightOk returns a tuple with the Straight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeDifferentBetween2CommitsRequest) GetStraightOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.Straight) {
		return nil, false
	}
	return o.Straight, true
}

// HasStraight returns a boolean if a field has been set.
func (o *DescribeDifferentBetween2CommitsRequest) HasStraight() bool {
	if o != nil && !utils.IsNil(o.Straight) {
		return true
	}

	return false
}

// SetStraight gets a reference to the given bool and assigns it to the Straight field.
func (o *DescribeDifferentBetween2CommitsRequest) SetStraight(v bool) {
	o.Straight = &v
}

// GetTarget returns the Target field value
func (o *DescribeDifferentBetween2CommitsRequest) GetTarget() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Target
}

// GetTargetOk returns a tuple with the Target field value
// and a boolean to check if the value has been set.
func (o *DescribeDifferentBetween2CommitsRequest) GetTargetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Target, true
}

// SetTarget sets field value
func (o *DescribeDifferentBetween2CommitsRequest) SetTarget(v string) {
	o.Target = v
}

func (o DescribeDifferentBetween2CommitsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeDifferentBetween2CommitsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["DepotId"] = o.DepotId
	if !utils.IsNil(o.DepotPath) {
		toSerialize["DepotPath"] = o.DepotPath
	}
	toSerialize["Path"] = o.Path
	toSerialize["Source"] = o.Source
	if !utils.IsNil(o.Straight) {
		toSerialize["Straight"] = o.Straight
	}
	toSerialize["Target"] = o.Target
	return toSerialize, nil
}

func (o *DescribeDifferentBetween2CommitsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"DepotId",
		"Path",
		"Source",
		"Target",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescribeDifferentBetween2CommitsRequest := _DescribeDifferentBetween2CommitsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDescribeDifferentBetween2CommitsRequest)

	if err != nil {
		return err
	}

	*o = DescribeDifferentBetween2CommitsRequest(varDescribeDifferentBetween2CommitsRequest)

	return err
}

type NullableDescribeDifferentBetween2CommitsRequest struct {
	value *DescribeDifferentBetween2CommitsRequest
	isSet bool
}

func (v NullableDescribeDifferentBetween2CommitsRequest) Get() *DescribeDifferentBetween2CommitsRequest {
	return v.value
}

func (v *NullableDescribeDifferentBetween2CommitsRequest) Set(val *DescribeDifferentBetween2CommitsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeDifferentBetween2CommitsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeDifferentBetween2CommitsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeDifferentBetween2CommitsRequest(val *DescribeDifferentBetween2CommitsRequest) *NullableDescribeDifferentBetween2CommitsRequest {
	return &NullableDescribeDifferentBetween2CommitsRequest{value: val, isSet: true}
}

func (v NullableDescribeDifferentBetween2CommitsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeDifferentBetween2CommitsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


