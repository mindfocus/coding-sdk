/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DescribeCommitRefsRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DescribeCommitRefsRequest{}

// DescribeCommitRefsRequest struct for DescribeCommitRefsRequest
type DescribeCommitRefsRequest struct {
	// 仓库路径
	DepotPath string `json:"DepotPath"`
	// 提交sha
	Sha string `json:"Sha"`
	// ref类型,all 查询分支和标签，branch查询分支，tag查询标签
	Type string `json:"Type"`
}

type _DescribeCommitRefsRequest DescribeCommitRefsRequest

// NewDescribeCommitRefsRequest instantiates a new DescribeCommitRefsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeCommitRefsRequest(depotPath string, sha string, type_ string) *DescribeCommitRefsRequest {
	this := DescribeCommitRefsRequest{}
	this.DepotPath = depotPath
	this.Sha = sha
	this.Type = type_
	return &this
}

// NewDescribeCommitRefsRequestWithDefaults instantiates a new DescribeCommitRefsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeCommitRefsRequestWithDefaults() *DescribeCommitRefsRequest {
	this := DescribeCommitRefsRequest{}
	return &this
}

// GetDepotPath returns the DepotPath field value
func (o *DescribeCommitRefsRequest) GetDepotPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DepotPath
}

// GetDepotPathOk returns a tuple with the DepotPath field value
// and a boolean to check if the value has been set.
func (o *DescribeCommitRefsRequest) GetDepotPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepotPath, true
}

// SetDepotPath sets field value
func (o *DescribeCommitRefsRequest) SetDepotPath(v string) {
	o.DepotPath = v
}

// GetSha returns the Sha field value
func (o *DescribeCommitRefsRequest) GetSha() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sha
}

// GetShaOk returns a tuple with the Sha field value
// and a boolean to check if the value has been set.
func (o *DescribeCommitRefsRequest) GetShaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sha, true
}

// SetSha sets field value
func (o *DescribeCommitRefsRequest) SetSha(v string) {
	o.Sha = v
}

// GetType returns the Type field value
func (o *DescribeCommitRefsRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DescribeCommitRefsRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DescribeCommitRefsRequest) SetType(v string) {
	o.Type = v
}

func (o DescribeCommitRefsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeCommitRefsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["DepotPath"] = o.DepotPath
	toSerialize["Sha"] = o.Sha
	toSerialize["Type"] = o.Type
	return toSerialize, nil
}

func (o *DescribeCommitRefsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"DepotPath",
		"Sha",
		"Type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescribeCommitRefsRequest := _DescribeCommitRefsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDescribeCommitRefsRequest)

	if err != nil {
		return err
	}

	*o = DescribeCommitRefsRequest(varDescribeCommitRefsRequest)

	return err
}

type NullableDescribeCommitRefsRequest struct {
	value *DescribeCommitRefsRequest
	isSet bool
}

func (v NullableDescribeCommitRefsRequest) Get() *DescribeCommitRefsRequest {
	return v.value
}

func (v *NullableDescribeCommitRefsRequest) Set(val *DescribeCommitRefsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeCommitRefsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeCommitRefsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeCommitRefsRequest(val *DescribeCommitRefsRequest) *NullableDescribeCommitRefsRequest {
	return &NullableDescribeCommitRefsRequest{value: val, isSet: true}
}

func (v NullableDescribeCommitRefsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeCommitRefsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


