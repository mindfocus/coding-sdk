/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DescribeGitReleasesRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DescribeGitReleasesRequest{}

// DescribeGitReleasesRequest struct for DescribeGitReleasesRequest
type DescribeGitReleasesRequest struct {
	// 仓库id
	DepotId int64 `json:"DepotId"`
	// 仓库路径，DepotId与DepotPath二选一即可
	DepotPath *string `json:"DepotPath,omitempty"`
	// 搜索条件:起始日期
	FromDate *string `json:"FromDate,omitempty"`
	// 页数
	PageNumber *int64 `json:"PageNumber,omitempty"`
	// 每页条数
	PageSize *int64 `json:"PageSize,omitempty"`
	// 搜索条件:版本状态(0:全部 1:已发布 2:预发布)
	Status *int64 `json:"Status,omitempty"`
	// 搜索条件:标签名字
	TagName *string `json:"TagName,omitempty"`
	// 搜索条件:终止日期
	ToDate *string `json:"ToDate,omitempty"`
}

type _DescribeGitReleasesRequest DescribeGitReleasesRequest

// NewDescribeGitReleasesRequest instantiates a new DescribeGitReleasesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeGitReleasesRequest(depotId int64) *DescribeGitReleasesRequest {
	this := DescribeGitReleasesRequest{}
	this.DepotId = depotId
	return &this
}

// NewDescribeGitReleasesRequestWithDefaults instantiates a new DescribeGitReleasesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeGitReleasesRequestWithDefaults() *DescribeGitReleasesRequest {
	this := DescribeGitReleasesRequest{}
	return &this
}

// GetDepotId returns the DepotId field value
func (o *DescribeGitReleasesRequest) GetDepotId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DepotId
}

// GetDepotIdOk returns a tuple with the DepotId field value
// and a boolean to check if the value has been set.
func (o *DescribeGitReleasesRequest) GetDepotIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepotId, true
}

// SetDepotId sets field value
func (o *DescribeGitReleasesRequest) SetDepotId(v int64) {
	o.DepotId = v
}

// GetDepotPath returns the DepotPath field value if set, zero value otherwise.
func (o *DescribeGitReleasesRequest) GetDepotPath() string {
	if o == nil || utils.IsNil(o.DepotPath) {
		var ret string
		return ret
	}
	return *o.DepotPath
}

// GetDepotPathOk returns a tuple with the DepotPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeGitReleasesRequest) GetDepotPathOk() (*string, bool) {
	if o == nil || utils.IsNil(o.DepotPath) {
		return nil, false
	}
	return o.DepotPath, true
}

// HasDepotPath returns a boolean if a field has been set.
func (o *DescribeGitReleasesRequest) HasDepotPath() bool {
	if o != nil && !utils.IsNil(o.DepotPath) {
		return true
	}

	return false
}

// SetDepotPath gets a reference to the given string and assigns it to the DepotPath field.
func (o *DescribeGitReleasesRequest) SetDepotPath(v string) {
	o.DepotPath = &v
}

// GetFromDate returns the FromDate field value if set, zero value otherwise.
func (o *DescribeGitReleasesRequest) GetFromDate() string {
	if o == nil || utils.IsNil(o.FromDate) {
		var ret string
		return ret
	}
	return *o.FromDate
}

// GetFromDateOk returns a tuple with the FromDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeGitReleasesRequest) GetFromDateOk() (*string, bool) {
	if o == nil || utils.IsNil(o.FromDate) {
		return nil, false
	}
	return o.FromDate, true
}

// HasFromDate returns a boolean if a field has been set.
func (o *DescribeGitReleasesRequest) HasFromDate() bool {
	if o != nil && !utils.IsNil(o.FromDate) {
		return true
	}

	return false
}

// SetFromDate gets a reference to the given string and assigns it to the FromDate field.
func (o *DescribeGitReleasesRequest) SetFromDate(v string) {
	o.FromDate = &v
}

// GetPageNumber returns the PageNumber field value if set, zero value otherwise.
func (o *DescribeGitReleasesRequest) GetPageNumber() int64 {
	if o == nil || utils.IsNil(o.PageNumber) {
		var ret int64
		return ret
	}
	return *o.PageNumber
}

// GetPageNumberOk returns a tuple with the PageNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeGitReleasesRequest) GetPageNumberOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.PageNumber) {
		return nil, false
	}
	return o.PageNumber, true
}

// HasPageNumber returns a boolean if a field has been set.
func (o *DescribeGitReleasesRequest) HasPageNumber() bool {
	if o != nil && !utils.IsNil(o.PageNumber) {
		return true
	}

	return false
}

// SetPageNumber gets a reference to the given int64 and assigns it to the PageNumber field.
func (o *DescribeGitReleasesRequest) SetPageNumber(v int64) {
	o.PageNumber = &v
}

// GetPageSize returns the PageSize field value if set, zero value otherwise.
func (o *DescribeGitReleasesRequest) GetPageSize() int64 {
	if o == nil || utils.IsNil(o.PageSize) {
		var ret int64
		return ret
	}
	return *o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeGitReleasesRequest) GetPageSizeOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.PageSize) {
		return nil, false
	}
	return o.PageSize, true
}

// HasPageSize returns a boolean if a field has been set.
func (o *DescribeGitReleasesRequest) HasPageSize() bool {
	if o != nil && !utils.IsNil(o.PageSize) {
		return true
	}

	return false
}

// SetPageSize gets a reference to the given int64 and assigns it to the PageSize field.
func (o *DescribeGitReleasesRequest) SetPageSize(v int64) {
	o.PageSize = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DescribeGitReleasesRequest) GetStatus() int64 {
	if o == nil || utils.IsNil(o.Status) {
		var ret int64
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeGitReleasesRequest) GetStatusOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DescribeGitReleasesRequest) HasStatus() bool {
	if o != nil && !utils.IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int64 and assigns it to the Status field.
func (o *DescribeGitReleasesRequest) SetStatus(v int64) {
	o.Status = &v
}

// GetTagName returns the TagName field value if set, zero value otherwise.
func (o *DescribeGitReleasesRequest) GetTagName() string {
	if o == nil || utils.IsNil(o.TagName) {
		var ret string
		return ret
	}
	return *o.TagName
}

// GetTagNameOk returns a tuple with the TagName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeGitReleasesRequest) GetTagNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.TagName) {
		return nil, false
	}
	return o.TagName, true
}

// HasTagName returns a boolean if a field has been set.
func (o *DescribeGitReleasesRequest) HasTagName() bool {
	if o != nil && !utils.IsNil(o.TagName) {
		return true
	}

	return false
}

// SetTagName gets a reference to the given string and assigns it to the TagName field.
func (o *DescribeGitReleasesRequest) SetTagName(v string) {
	o.TagName = &v
}

// GetToDate returns the ToDate field value if set, zero value otherwise.
func (o *DescribeGitReleasesRequest) GetToDate() string {
	if o == nil || utils.IsNil(o.ToDate) {
		var ret string
		return ret
	}
	return *o.ToDate
}

// GetToDateOk returns a tuple with the ToDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeGitReleasesRequest) GetToDateOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ToDate) {
		return nil, false
	}
	return o.ToDate, true
}

// HasToDate returns a boolean if a field has been set.
func (o *DescribeGitReleasesRequest) HasToDate() bool {
	if o != nil && !utils.IsNil(o.ToDate) {
		return true
	}

	return false
}

// SetToDate gets a reference to the given string and assigns it to the ToDate field.
func (o *DescribeGitReleasesRequest) SetToDate(v string) {
	o.ToDate = &v
}

func (o DescribeGitReleasesRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeGitReleasesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["DepotId"] = o.DepotId
	if !utils.IsNil(o.DepotPath) {
		toSerialize["DepotPath"] = o.DepotPath
	}
	if !utils.IsNil(o.FromDate) {
		toSerialize["FromDate"] = o.FromDate
	}
	if !utils.IsNil(o.PageNumber) {
		toSerialize["PageNumber"] = o.PageNumber
	}
	if !utils.IsNil(o.PageSize) {
		toSerialize["PageSize"] = o.PageSize
	}
	if !utils.IsNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	if !utils.IsNil(o.TagName) {
		toSerialize["TagName"] = o.TagName
	}
	if !utils.IsNil(o.ToDate) {
		toSerialize["ToDate"] = o.ToDate
	}
	return toSerialize, nil
}

func (o *DescribeGitReleasesRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"DepotId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescribeGitReleasesRequest := _DescribeGitReleasesRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDescribeGitReleasesRequest)

	if err != nil {
		return err
	}

	*o = DescribeGitReleasesRequest(varDescribeGitReleasesRequest)

	return err
}

type NullableDescribeGitReleasesRequest struct {
	value *DescribeGitReleasesRequest
	isSet bool
}

func (v NullableDescribeGitReleasesRequest) Get() *DescribeGitReleasesRequest {
	return v.value
}

func (v *NullableDescribeGitReleasesRequest) Set(val *DescribeGitReleasesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeGitReleasesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeGitReleasesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeGitReleasesRequest(val *DescribeGitReleasesRequest) *NullableDescribeGitReleasesRequest {
	return &NullableDescribeGitReleasesRequest{value: val, isSet: true}
}

func (v NullableDescribeGitReleasesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeGitReleasesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


