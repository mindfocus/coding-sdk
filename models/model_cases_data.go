/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the CasesData type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CasesData{}

// CasesData 测试用例列表
type CasesData struct {
	// 用例列表
	Cases []Case `json:"Cases,omitempty"`
}

// NewCasesData instantiates a new CasesData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCasesData() *CasesData {
	this := CasesData{}
	return &this
}

// NewCasesDataWithDefaults instantiates a new CasesData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCasesDataWithDefaults() *CasesData {
	this := CasesData{}
	return &this
}

// GetCases returns the Cases field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CasesData) GetCases() []Case {
	if o == nil {
		var ret []Case
		return ret
	}
	return o.Cases
}

// GetCasesOk returns a tuple with the Cases field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CasesData) GetCasesOk() ([]Case, bool) {
	if o == nil || utils.IsNil(o.Cases) {
		return nil, false
	}
	return o.Cases, true
}

// HasCases returns a boolean if a field has been set.
func (o *CasesData) HasCases() bool {
	if o != nil && !utils.IsNil(o.Cases) {
		return true
	}

	return false
}

// SetCases gets a reference to the given []Case and assigns it to the Cases field.
func (o *CasesData) SetCases(v []Case) {
	o.Cases = v
}

func (o CasesData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CasesData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Cases != nil {
		toSerialize["Cases"] = o.Cases
	}
	return toSerialize, nil
}

type NullableCasesData struct {
	value *CasesData
	isSet bool
}

func (v NullableCasesData) Get() *CasesData {
	return v.value
}

func (v *NullableCasesData) Set(val *CasesData) {
	v.value = val
	v.isSet = true
}

func (v NullableCasesData) IsSet() bool {
	return v.isSet
}

func (v *NullableCasesData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCasesData(val *CasesData) *NullableCasesData {
	return &NullableCasesData{value: val, isSet: true}
}

func (v NullableCasesData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCasesData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


