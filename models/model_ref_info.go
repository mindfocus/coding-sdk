/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the RefInfo type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &RefInfo{}

// RefInfo 用于描述分支信息
type RefInfo struct {
	// 分支名称
	Ref *string `json:"Ref,omitempty"`
}

// NewRefInfo instantiates a new RefInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRefInfo() *RefInfo {
	this := RefInfo{}
	var ref string = ""
	this.Ref = &ref
	return &this
}

// NewRefInfoWithDefaults instantiates a new RefInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRefInfoWithDefaults() *RefInfo {
	this := RefInfo{}
	var ref string = ""
	this.Ref = &ref
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *RefInfo) GetRef() string {
	if o == nil || utils.IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefInfo) GetRefOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *RefInfo) HasRef() bool {
	if o != nil && !utils.IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *RefInfo) SetRef(v string) {
	o.Ref = &v
}

func (o RefInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RefInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Ref) {
		toSerialize["Ref"] = o.Ref
	}
	return toSerialize, nil
}

type NullableRefInfo struct {
	value *RefInfo
	isSet bool
}

func (v NullableRefInfo) Get() *RefInfo {
	return v.value
}

func (v *NullableRefInfo) Set(val *RefInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRefInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRefInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefInfo(val *RefInfo) *NullableRefInfo {
	return &NullableRefInfo{value: val, isSet: true}
}

func (v NullableRefInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


