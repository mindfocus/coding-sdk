/*
CODING OPEN API

  

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the AttachmentPrepareData type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &AttachmentPrepareData{}

// AttachmentPrepareData 附件预上传信息
type AttachmentPrepareData struct {
	AttachmentPrepare *AttachmentPrepare `json:"AttachmentPrepare,omitempty"`
}

// NewAttachmentPrepareData instantiates a new AttachmentPrepareData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttachmentPrepareData() *AttachmentPrepareData {
	this := AttachmentPrepareData{}
	return &this
}

// NewAttachmentPrepareDataWithDefaults instantiates a new AttachmentPrepareData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttachmentPrepareDataWithDefaults() *AttachmentPrepareData {
	this := AttachmentPrepareData{}
	return &this
}

// GetAttachmentPrepare returns the AttachmentPrepare field value if set, zero value otherwise.
func (o *AttachmentPrepareData) GetAttachmentPrepare() AttachmentPrepare {
	if o == nil || utils.IsNil(o.AttachmentPrepare) {
		var ret AttachmentPrepare
		return ret
	}
	return *o.AttachmentPrepare
}

// GetAttachmentPrepareOk returns a tuple with the AttachmentPrepare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachmentPrepareData) GetAttachmentPrepareOk() (*AttachmentPrepare, bool) {
	if o == nil || utils.IsNil(o.AttachmentPrepare) {
		return nil, false
	}
	return o.AttachmentPrepare, true
}

// HasAttachmentPrepare returns a boolean if a field has been set.
func (o *AttachmentPrepareData) HasAttachmentPrepare() bool {
	if o != nil && !utils.IsNil(o.AttachmentPrepare) {
		return true
	}

	return false
}

// SetAttachmentPrepare gets a reference to the given AttachmentPrepare and assigns it to the AttachmentPrepare field.
func (o *AttachmentPrepareData) SetAttachmentPrepare(v AttachmentPrepare) {
	o.AttachmentPrepare = &v
}

func (o AttachmentPrepareData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttachmentPrepareData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.AttachmentPrepare) {
		toSerialize["AttachmentPrepare"] = o.AttachmentPrepare
	}
	return toSerialize, nil
}

type NullableAttachmentPrepareData struct {
	value *AttachmentPrepareData
	isSet bool
}

func (v NullableAttachmentPrepareData) Get() *AttachmentPrepareData {
	return v.value
}

func (v *NullableAttachmentPrepareData) Set(val *AttachmentPrepareData) {
	v.value = val
	v.isSet = true
}

func (v NullableAttachmentPrepareData) IsSet() bool {
	return v.isSet
}

func (v *NullableAttachmentPrepareData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttachmentPrepareData(val *AttachmentPrepareData) *NullableAttachmentPrepareData {
	return &NullableAttachmentPrepareData{value: val, isSet: true}
}

func (v NullableAttachmentPrepareData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttachmentPrepareData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


