/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the ReportData type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ReportData{}

// ReportData 测试报告详情
type ReportData struct {
	Report *Report `json:"Report,omitempty"`
}

// NewReportData instantiates a new ReportData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportData() *ReportData {
	this := ReportData{}
	return &this
}

// NewReportDataWithDefaults instantiates a new ReportData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportDataWithDefaults() *ReportData {
	this := ReportData{}
	return &this
}

// GetReport returns the Report field value if set, zero value otherwise.
func (o *ReportData) GetReport() Report {
	if o == nil || utils.IsNil(o.Report) {
		var ret Report
		return ret
	}
	return *o.Report
}

// GetReportOk returns a tuple with the Report field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportData) GetReportOk() (*Report, bool) {
	if o == nil || utils.IsNil(o.Report) {
		return nil, false
	}
	return o.Report, true
}

// HasReport returns a boolean if a field has been set.
func (o *ReportData) HasReport() bool {
	if o != nil && !utils.IsNil(o.Report) {
		return true
	}

	return false
}

// SetReport gets a reference to the given Report and assigns it to the Report field.
func (o *ReportData) SetReport(v Report) {
	o.Report = &v
}

func (o ReportData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Report) {
		toSerialize["Report"] = o.Report
	}
	return toSerialize, nil
}

type NullableReportData struct {
	value *ReportData
	isSet bool
}

func (v NullableReportData) Get() *ReportData {
	return v.value
}

func (v *NullableReportData) Set(val *ReportData) {
	v.value = val
	v.isSet = true
}

func (v NullableReportData) IsSet() bool {
	return v.isSet
}

func (v *NullableReportData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportData(val *ReportData) *NullableReportData {
	return &NullableReportData{value: val, isSet: true}
}

func (v NullableReportData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


