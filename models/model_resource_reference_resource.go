/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the ResourceReferenceResource type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ResourceReferenceResource{}

// ResourceReferenceResource 资源信息
type ResourceReferenceResource struct {
	// 资源附加信息，json格式
	Meta string `json:"Meta"`
	// 资源code
	ResourceCode string `json:"ResourceCode"`
	// 资源类型名
	ResourceTypeName string `json:"ResourceTypeName"`
	// 资源 ID
	ResourceId string `json:"ResourceId"`
	// 资源名
	Title string `json:"Title"`
	// 资源类型
	ResourceType string `json:"ResourceType"`
	// 资源图标
	Icon string `json:"Icon"`
}

type _ResourceReferenceResource ResourceReferenceResource

// NewResourceReferenceResource instantiates a new ResourceReferenceResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceReferenceResource(meta string, resourceCode string, resourceTypeName string, resourceId string, title string, resourceType string, icon string) *ResourceReferenceResource {
	this := ResourceReferenceResource{}
	this.Meta = meta
	this.ResourceCode = resourceCode
	this.ResourceTypeName = resourceTypeName
	this.ResourceId = resourceId
	this.Title = title
	this.ResourceType = resourceType
	this.Icon = icon
	return &this
}

// NewResourceReferenceResourceWithDefaults instantiates a new ResourceReferenceResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceReferenceResourceWithDefaults() *ResourceReferenceResource {
	this := ResourceReferenceResource{}
	var meta string = ""
	this.Meta = meta
	var resourceCode string = ""
	this.ResourceCode = resourceCode
	var resourceTypeName string = ""
	this.ResourceTypeName = resourceTypeName
	var resourceId string = ""
	this.ResourceId = resourceId
	var title string = ""
	this.Title = title
	var resourceType string = ""
	this.ResourceType = resourceType
	var icon string = ""
	this.Icon = icon
	return &this
}

// GetMeta returns the Meta field value
func (o *ResourceReferenceResource) GetMeta() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value
// and a boolean to check if the value has been set.
func (o *ResourceReferenceResource) GetMetaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Meta, true
}

// SetMeta sets field value
func (o *ResourceReferenceResource) SetMeta(v string) {
	o.Meta = v
}

// GetResourceCode returns the ResourceCode field value
func (o *ResourceReferenceResource) GetResourceCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceCode
}

// GetResourceCodeOk returns a tuple with the ResourceCode field value
// and a boolean to check if the value has been set.
func (o *ResourceReferenceResource) GetResourceCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceCode, true
}

// SetResourceCode sets field value
func (o *ResourceReferenceResource) SetResourceCode(v string) {
	o.ResourceCode = v
}

// GetResourceTypeName returns the ResourceTypeName field value
func (o *ResourceReferenceResource) GetResourceTypeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceTypeName
}

// GetResourceTypeNameOk returns a tuple with the ResourceTypeName field value
// and a boolean to check if the value has been set.
func (o *ResourceReferenceResource) GetResourceTypeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceTypeName, true
}

// SetResourceTypeName sets field value
func (o *ResourceReferenceResource) SetResourceTypeName(v string) {
	o.ResourceTypeName = v
}

// GetResourceId returns the ResourceId field value
func (o *ResourceReferenceResource) GetResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value
// and a boolean to check if the value has been set.
func (o *ResourceReferenceResource) GetResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceId, true
}

// SetResourceId sets field value
func (o *ResourceReferenceResource) SetResourceId(v string) {
	o.ResourceId = v
}

// GetTitle returns the Title field value
func (o *ResourceReferenceResource) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *ResourceReferenceResource) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *ResourceReferenceResource) SetTitle(v string) {
	o.Title = v
}

// GetResourceType returns the ResourceType field value
func (o *ResourceReferenceResource) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *ResourceReferenceResource) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *ResourceReferenceResource) SetResourceType(v string) {
	o.ResourceType = v
}

// GetIcon returns the Icon field value
func (o *ResourceReferenceResource) GetIcon() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Icon
}

// GetIconOk returns a tuple with the Icon field value
// and a boolean to check if the value has been set.
func (o *ResourceReferenceResource) GetIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Icon, true
}

// SetIcon sets field value
func (o *ResourceReferenceResource) SetIcon(v string) {
	o.Icon = v
}

func (o ResourceReferenceResource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceReferenceResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Meta"] = o.Meta
	toSerialize["ResourceCode"] = o.ResourceCode
	toSerialize["ResourceTypeName"] = o.ResourceTypeName
	toSerialize["ResourceId"] = o.ResourceId
	toSerialize["Title"] = o.Title
	toSerialize["ResourceType"] = o.ResourceType
	toSerialize["Icon"] = o.Icon
	return toSerialize, nil
}

func (o *ResourceReferenceResource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Meta",
		"ResourceCode",
		"ResourceTypeName",
		"ResourceId",
		"Title",
		"ResourceType",
		"Icon",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceReferenceResource := _ResourceReferenceResource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResourceReferenceResource)

	if err != nil {
		return err
	}

	*o = ResourceReferenceResource(varResourceReferenceResource)

	return err
}

type NullableResourceReferenceResource struct {
	value *ResourceReferenceResource
	isSet bool
}

func (v NullableResourceReferenceResource) Get() *ResourceReferenceResource {
	return v.value
}

func (v *NullableResourceReferenceResource) Set(val *ResourceReferenceResource) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceReferenceResource) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceReferenceResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceReferenceResource(val *ResourceReferenceResource) *NullableResourceReferenceResource {
	return &NullableResourceReferenceResource{value: val, isSet: true}
}

func (v NullableResourceReferenceResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceReferenceResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


