/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the IssueSimpleData type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &IssueSimpleData{}

// IssueSimpleData 事项基础信息
type IssueSimpleData struct {
	Assignee *User `json:"Assignee,omitempty"`
	// 事项 Code
	Code *int64 `json:"Code,omitempty"`
	// 事项状态 Id
	IssueStatusId *int64 `json:"IssueStatusId,omitempty"`
	// 事项状态名称
	IssueStatusName *string `json:"IssueStatusName,omitempty"`
	// 事项状态类型：  TODO｜PROCESSING｜ COMPLETED
	IssueStatusType *string `json:"IssueStatusType,omitempty"`
	IssueTypeDetail *IssueTypeDetail `json:"IssueTypeDetail,omitempty"`
	// 名称
	Name *string `json:"Name,omitempty"`
	// 优先级：  \"0\" - 低，  \"1\" - 中，  \"2\" - 高，  \"3\" - 紧急，  \"\" - 未指定
	Priority utils.NullableString `json:"Priority,omitempty"`
	// 事项类型：  DEFECT - 缺陷，  REQUIREMENT - 需求，  MISSION - 任务，  EPIC - 史诗，  SUB_TASK - 子工作项
	Type *string `json:"Type,omitempty"`
}

// NewIssueSimpleData instantiates a new IssueSimpleData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueSimpleData() *IssueSimpleData {
	this := IssueSimpleData{}
	var issueStatusName string = ""
	this.IssueStatusName = &issueStatusName
	var issueStatusType string = ""
	this.IssueStatusType = &issueStatusType
	var name string = ""
	this.Name = &name
	var priority string = ""
	this.Priority = *utils.NewNullableString(&priority)
	var type_ string = ""
	this.Type = &type_
	return &this
}

// NewIssueSimpleDataWithDefaults instantiates a new IssueSimpleData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueSimpleDataWithDefaults() *IssueSimpleData {
	this := IssueSimpleData{}
	var issueStatusName string = ""
	this.IssueStatusName = &issueStatusName
	var issueStatusType string = ""
	this.IssueStatusType = &issueStatusType
	var name string = ""
	this.Name = &name
	var priority string = ""
	this.Priority = *utils.NewNullableString(&priority)
	var type_ string = ""
	this.Type = &type_
	return &this
}

// GetAssignee returns the Assignee field value if set, zero value otherwise.
func (o *IssueSimpleData) GetAssignee() User {
	if o == nil || utils.IsNil(o.Assignee) {
		var ret User
		return ret
	}
	return *o.Assignee
}

// GetAssigneeOk returns a tuple with the Assignee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueSimpleData) GetAssigneeOk() (*User, bool) {
	if o == nil || utils.IsNil(o.Assignee) {
		return nil, false
	}
	return o.Assignee, true
}

// HasAssignee returns a boolean if a field has been set.
func (o *IssueSimpleData) HasAssignee() bool {
	if o != nil && !utils.IsNil(o.Assignee) {
		return true
	}

	return false
}

// SetAssignee gets a reference to the given User and assigns it to the Assignee field.
func (o *IssueSimpleData) SetAssignee(v User) {
	o.Assignee = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *IssueSimpleData) GetCode() int64 {
	if o == nil || utils.IsNil(o.Code) {
		var ret int64
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueSimpleData) GetCodeOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *IssueSimpleData) HasCode() bool {
	if o != nil && !utils.IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given int64 and assigns it to the Code field.
func (o *IssueSimpleData) SetCode(v int64) {
	o.Code = &v
}

// GetIssueStatusId returns the IssueStatusId field value if set, zero value otherwise.
func (o *IssueSimpleData) GetIssueStatusId() int64 {
	if o == nil || utils.IsNil(o.IssueStatusId) {
		var ret int64
		return ret
	}
	return *o.IssueStatusId
}

// GetIssueStatusIdOk returns a tuple with the IssueStatusId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueSimpleData) GetIssueStatusIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.IssueStatusId) {
		return nil, false
	}
	return o.IssueStatusId, true
}

// HasIssueStatusId returns a boolean if a field has been set.
func (o *IssueSimpleData) HasIssueStatusId() bool {
	if o != nil && !utils.IsNil(o.IssueStatusId) {
		return true
	}

	return false
}

// SetIssueStatusId gets a reference to the given int64 and assigns it to the IssueStatusId field.
func (o *IssueSimpleData) SetIssueStatusId(v int64) {
	o.IssueStatusId = &v
}

// GetIssueStatusName returns the IssueStatusName field value if set, zero value otherwise.
func (o *IssueSimpleData) GetIssueStatusName() string {
	if o == nil || utils.IsNil(o.IssueStatusName) {
		var ret string
		return ret
	}
	return *o.IssueStatusName
}

// GetIssueStatusNameOk returns a tuple with the IssueStatusName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueSimpleData) GetIssueStatusNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.IssueStatusName) {
		return nil, false
	}
	return o.IssueStatusName, true
}

// HasIssueStatusName returns a boolean if a field has been set.
func (o *IssueSimpleData) HasIssueStatusName() bool {
	if o != nil && !utils.IsNil(o.IssueStatusName) {
		return true
	}

	return false
}

// SetIssueStatusName gets a reference to the given string and assigns it to the IssueStatusName field.
func (o *IssueSimpleData) SetIssueStatusName(v string) {
	o.IssueStatusName = &v
}

// GetIssueStatusType returns the IssueStatusType field value if set, zero value otherwise.
func (o *IssueSimpleData) GetIssueStatusType() string {
	if o == nil || utils.IsNil(o.IssueStatusType) {
		var ret string
		return ret
	}
	return *o.IssueStatusType
}

// GetIssueStatusTypeOk returns a tuple with the IssueStatusType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueSimpleData) GetIssueStatusTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.IssueStatusType) {
		return nil, false
	}
	return o.IssueStatusType, true
}

// HasIssueStatusType returns a boolean if a field has been set.
func (o *IssueSimpleData) HasIssueStatusType() bool {
	if o != nil && !utils.IsNil(o.IssueStatusType) {
		return true
	}

	return false
}

// SetIssueStatusType gets a reference to the given string and assigns it to the IssueStatusType field.
func (o *IssueSimpleData) SetIssueStatusType(v string) {
	o.IssueStatusType = &v
}

// GetIssueTypeDetail returns the IssueTypeDetail field value if set, zero value otherwise.
func (o *IssueSimpleData) GetIssueTypeDetail() IssueTypeDetail {
	if o == nil || utils.IsNil(o.IssueTypeDetail) {
		var ret IssueTypeDetail
		return ret
	}
	return *o.IssueTypeDetail
}

// GetIssueTypeDetailOk returns a tuple with the IssueTypeDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueSimpleData) GetIssueTypeDetailOk() (*IssueTypeDetail, bool) {
	if o == nil || utils.IsNil(o.IssueTypeDetail) {
		return nil, false
	}
	return o.IssueTypeDetail, true
}

// HasIssueTypeDetail returns a boolean if a field has been set.
func (o *IssueSimpleData) HasIssueTypeDetail() bool {
	if o != nil && !utils.IsNil(o.IssueTypeDetail) {
		return true
	}

	return false
}

// SetIssueTypeDetail gets a reference to the given IssueTypeDetail and assigns it to the IssueTypeDetail field.
func (o *IssueSimpleData) SetIssueTypeDetail(v IssueTypeDetail) {
	o.IssueTypeDetail = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IssueSimpleData) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueSimpleData) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IssueSimpleData) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IssueSimpleData) SetName(v string) {
	o.Name = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssueSimpleData) GetPriority() string {
	if o == nil || utils.IsNil(o.Priority.Get()) {
		var ret string
		return ret
	}
	return *o.Priority.Get()
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssueSimpleData) GetPriorityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Priority.Get(), o.Priority.IsSet()
}

// HasPriority returns a boolean if a field has been set.
func (o *IssueSimpleData) HasPriority() bool {
	if o != nil && o.Priority.IsSet() {
		return true
	}

	return false
}

// SetPriority gets a reference to the given utils.NullableString and assigns it to the Priority field.
func (o *IssueSimpleData) SetPriority(v string) {
	o.Priority.Set(&v)
}
// SetPriorityNil sets the value for Priority to be an explicit nil
func (o *IssueSimpleData) SetPriorityNil() {
	o.Priority.Set(nil)
}

// UnsetPriority ensures that no value is present for Priority, not even an explicit nil
func (o *IssueSimpleData) UnsetPriority() {
	o.Priority.Unset()
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IssueSimpleData) GetType() string {
	if o == nil || utils.IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueSimpleData) GetTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IssueSimpleData) HasType() bool {
	if o != nil && !utils.IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *IssueSimpleData) SetType(v string) {
	o.Type = &v
}

func (o IssueSimpleData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IssueSimpleData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Assignee) {
		toSerialize["Assignee"] = o.Assignee
	}
	if !utils.IsNil(o.Code) {
		toSerialize["Code"] = o.Code
	}
	if !utils.IsNil(o.IssueStatusId) {
		toSerialize["IssueStatusId"] = o.IssueStatusId
	}
	if !utils.IsNil(o.IssueStatusName) {
		toSerialize["IssueStatusName"] = o.IssueStatusName
	}
	if !utils.IsNil(o.IssueStatusType) {
		toSerialize["IssueStatusType"] = o.IssueStatusType
	}
	if !utils.IsNil(o.IssueTypeDetail) {
		toSerialize["IssueTypeDetail"] = o.IssueTypeDetail
	}
	if !utils.IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if o.Priority.IsSet() {
		toSerialize["Priority"] = o.Priority.Get()
	}
	if !utils.IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	return toSerialize, nil
}

type NullableIssueSimpleData struct {
	value *IssueSimpleData
	isSet bool
}

func (v NullableIssueSimpleData) Get() *IssueSimpleData {
	return v.value
}

func (v *NullableIssueSimpleData) Set(val *IssueSimpleData) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueSimpleData) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueSimpleData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueSimpleData(val *IssueSimpleData) *NullableIssueSimpleData {
	return &NullableIssueSimpleData{value: val, isSet: true}
}

func (v NullableIssueSimpleData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueSimpleData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


