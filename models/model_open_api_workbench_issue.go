/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the OpenApiWorkbenchIssue type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &OpenApiWorkbenchIssue{}

// OpenApiWorkbenchIssue 工作台事项数据
type OpenApiWorkbenchIssue struct {
	Assignee *User `json:"Assignee,omitempty"`
	// 子
	ChildCompletedCount utils.NullableInt64 `json:"ChildCompletedCount,omitempty"`
	// 子
	ChildCount utils.NullableInt64 `json:"ChildCount,omitempty"`
	// 事项code
	Code utils.NullableInt64 `json:"Code,omitempty"`
	// 创建时间
	CreatedAt utils.NullableInt64 `json:"CreatedAt,omitempty"`
	Creator *User `json:"Creator,omitempty"`
	// 描述
	Description utils.NullableBool `json:"Description,omitempty"`
	// 截止时间
	DueDate utils.NullableInt64 `json:"DueDate,omitempty"`
	Epic *Epic `json:"Epic,omitempty"`
	IssueStatus *IssueStatus `json:"IssueStatus,omitempty"`
	IssueType *IssueTypeDetail `json:"IssueType,omitempty"`
	Iteration *IterationSimple `json:"Iteration,omitempty"`
	// 事项名称
	Name utils.NullableString `json:"Name,omitempty"`
	// 父事项code
	ParentCode utils.NullableInt64 `json:"ParentCode,omitempty"`
	ParentIssue *IssueSimpleData `json:"ParentIssue,omitempty"`
	// 优先级
	Priority utils.NullableString `json:"Priority,omitempty"`
	Project *Project `json:"Project,omitempty"`
	// 项目ID
	ProjectId utils.NullableInt64 `json:"ProjectId,omitempty"`
	// 子工作项
	SubTasks []SubTask `json:"SubTasks,omitempty"`
	// 事项类型
	Type utils.NullableString `json:"Type,omitempty"`
	// 更新时间
	UpdatedAt utils.NullableInt64 `json:"UpdatedAt,omitempty"`
}

// NewOpenApiWorkbenchIssue instantiates a new OpenApiWorkbenchIssue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenApiWorkbenchIssue() *OpenApiWorkbenchIssue {
	this := OpenApiWorkbenchIssue{}
	var description bool = false
	this.Description = *utils.NewNullableBool(&description)
	var name string = ""
	this.Name = *utils.NewNullableString(&name)
	var priority string = ""
	this.Priority = *utils.NewNullableString(&priority)
	var type_ string = ""
	this.Type = *utils.NewNullableString(&type_)
	return &this
}

// NewOpenApiWorkbenchIssueWithDefaults instantiates a new OpenApiWorkbenchIssue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenApiWorkbenchIssueWithDefaults() *OpenApiWorkbenchIssue {
	this := OpenApiWorkbenchIssue{}
	var description bool = false
	this.Description = *utils.NewNullableBool(&description)
	var name string = ""
	this.Name = *utils.NewNullableString(&name)
	var priority string = ""
	this.Priority = *utils.NewNullableString(&priority)
	var type_ string = ""
	this.Type = *utils.NewNullableString(&type_)
	return &this
}

// GetAssignee returns the Assignee field value if set, zero value otherwise.
func (o *OpenApiWorkbenchIssue) GetAssignee() User {
	if o == nil || utils.IsNil(o.Assignee) {
		var ret User
		return ret
	}
	return *o.Assignee
}

// GetAssigneeOk returns a tuple with the Assignee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenApiWorkbenchIssue) GetAssigneeOk() (*User, bool) {
	if o == nil || utils.IsNil(o.Assignee) {
		return nil, false
	}
	return o.Assignee, true
}

// HasAssignee returns a boolean if a field has been set.
func (o *OpenApiWorkbenchIssue) HasAssignee() bool {
	if o != nil && !utils.IsNil(o.Assignee) {
		return true
	}

	return false
}

// SetAssignee gets a reference to the given User and assigns it to the Assignee field.
func (o *OpenApiWorkbenchIssue) SetAssignee(v User) {
	o.Assignee = &v
}

// GetChildCompletedCount returns the ChildCompletedCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenApiWorkbenchIssue) GetChildCompletedCount() int64 {
	if o == nil || utils.IsNil(o.ChildCompletedCount.Get()) {
		var ret int64
		return ret
	}
	return *o.ChildCompletedCount.Get()
}

// GetChildCompletedCountOk returns a tuple with the ChildCompletedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenApiWorkbenchIssue) GetChildCompletedCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChildCompletedCount.Get(), o.ChildCompletedCount.IsSet()
}

// HasChildCompletedCount returns a boolean if a field has been set.
func (o *OpenApiWorkbenchIssue) HasChildCompletedCount() bool {
	if o != nil && o.ChildCompletedCount.IsSet() {
		return true
	}

	return false
}

// SetChildCompletedCount gets a reference to the given utils.NullableInt64 and assigns it to the ChildCompletedCount field.
func (o *OpenApiWorkbenchIssue) SetChildCompletedCount(v int64) {
	o.ChildCompletedCount.Set(&v)
}
// SetChildCompletedCountNil sets the value for ChildCompletedCount to be an explicit nil
func (o *OpenApiWorkbenchIssue) SetChildCompletedCountNil() {
	o.ChildCompletedCount.Set(nil)
}

// UnsetChildCompletedCount ensures that no value is present for ChildCompletedCount, not even an explicit nil
func (o *OpenApiWorkbenchIssue) UnsetChildCompletedCount() {
	o.ChildCompletedCount.Unset()
}

// GetChildCount returns the ChildCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenApiWorkbenchIssue) GetChildCount() int64 {
	if o == nil || utils.IsNil(o.ChildCount.Get()) {
		var ret int64
		return ret
	}
	return *o.ChildCount.Get()
}

// GetChildCountOk returns a tuple with the ChildCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenApiWorkbenchIssue) GetChildCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChildCount.Get(), o.ChildCount.IsSet()
}

// HasChildCount returns a boolean if a field has been set.
func (o *OpenApiWorkbenchIssue) HasChildCount() bool {
	if o != nil && o.ChildCount.IsSet() {
		return true
	}

	return false
}

// SetChildCount gets a reference to the given utils.NullableInt64 and assigns it to the ChildCount field.
func (o *OpenApiWorkbenchIssue) SetChildCount(v int64) {
	o.ChildCount.Set(&v)
}
// SetChildCountNil sets the value for ChildCount to be an explicit nil
func (o *OpenApiWorkbenchIssue) SetChildCountNil() {
	o.ChildCount.Set(nil)
}

// UnsetChildCount ensures that no value is present for ChildCount, not even an explicit nil
func (o *OpenApiWorkbenchIssue) UnsetChildCount() {
	o.ChildCount.Unset()
}

// GetCode returns the Code field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenApiWorkbenchIssue) GetCode() int64 {
	if o == nil || utils.IsNil(o.Code.Get()) {
		var ret int64
		return ret
	}
	return *o.Code.Get()
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenApiWorkbenchIssue) GetCodeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Code.Get(), o.Code.IsSet()
}

// HasCode returns a boolean if a field has been set.
func (o *OpenApiWorkbenchIssue) HasCode() bool {
	if o != nil && o.Code.IsSet() {
		return true
	}

	return false
}

// SetCode gets a reference to the given utils.NullableInt64 and assigns it to the Code field.
func (o *OpenApiWorkbenchIssue) SetCode(v int64) {
	o.Code.Set(&v)
}
// SetCodeNil sets the value for Code to be an explicit nil
func (o *OpenApiWorkbenchIssue) SetCodeNil() {
	o.Code.Set(nil)
}

// UnsetCode ensures that no value is present for Code, not even an explicit nil
func (o *OpenApiWorkbenchIssue) UnsetCode() {
	o.Code.Unset()
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenApiWorkbenchIssue) GetCreatedAt() int64 {
	if o == nil || utils.IsNil(o.CreatedAt.Get()) {
		var ret int64
		return ret
	}
	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenApiWorkbenchIssue) GetCreatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *OpenApiWorkbenchIssue) HasCreatedAt() bool {
	if o != nil && o.CreatedAt.IsSet() {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given utils.NullableInt64 and assigns it to the CreatedAt field.
func (o *OpenApiWorkbenchIssue) SetCreatedAt(v int64) {
	o.CreatedAt.Set(&v)
}
// SetCreatedAtNil sets the value for CreatedAt to be an explicit nil
func (o *OpenApiWorkbenchIssue) SetCreatedAtNil() {
	o.CreatedAt.Set(nil)
}

// UnsetCreatedAt ensures that no value is present for CreatedAt, not even an explicit nil
func (o *OpenApiWorkbenchIssue) UnsetCreatedAt() {
	o.CreatedAt.Unset()
}

// GetCreator returns the Creator field value if set, zero value otherwise.
func (o *OpenApiWorkbenchIssue) GetCreator() User {
	if o == nil || utils.IsNil(o.Creator) {
		var ret User
		return ret
	}
	return *o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenApiWorkbenchIssue) GetCreatorOk() (*User, bool) {
	if o == nil || utils.IsNil(o.Creator) {
		return nil, false
	}
	return o.Creator, true
}

// HasCreator returns a boolean if a field has been set.
func (o *OpenApiWorkbenchIssue) HasCreator() bool {
	if o != nil && !utils.IsNil(o.Creator) {
		return true
	}

	return false
}

// SetCreator gets a reference to the given User and assigns it to the Creator field.
func (o *OpenApiWorkbenchIssue) SetCreator(v User) {
	o.Creator = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenApiWorkbenchIssue) GetDescription() bool {
	if o == nil || utils.IsNil(o.Description.Get()) {
		var ret bool
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenApiWorkbenchIssue) GetDescriptionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *OpenApiWorkbenchIssue) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given utils.NullableBool and assigns it to the Description field.
func (o *OpenApiWorkbenchIssue) SetDescription(v bool) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *OpenApiWorkbenchIssue) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *OpenApiWorkbenchIssue) UnsetDescription() {
	o.Description.Unset()
}

// GetDueDate returns the DueDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenApiWorkbenchIssue) GetDueDate() int64 {
	if o == nil || utils.IsNil(o.DueDate.Get()) {
		var ret int64
		return ret
	}
	return *o.DueDate.Get()
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenApiWorkbenchIssue) GetDueDateOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DueDate.Get(), o.DueDate.IsSet()
}

// HasDueDate returns a boolean if a field has been set.
func (o *OpenApiWorkbenchIssue) HasDueDate() bool {
	if o != nil && o.DueDate.IsSet() {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given utils.NullableInt64 and assigns it to the DueDate field.
func (o *OpenApiWorkbenchIssue) SetDueDate(v int64) {
	o.DueDate.Set(&v)
}
// SetDueDateNil sets the value for DueDate to be an explicit nil
func (o *OpenApiWorkbenchIssue) SetDueDateNil() {
	o.DueDate.Set(nil)
}

// UnsetDueDate ensures that no value is present for DueDate, not even an explicit nil
func (o *OpenApiWorkbenchIssue) UnsetDueDate() {
	o.DueDate.Unset()
}

// GetEpic returns the Epic field value if set, zero value otherwise.
func (o *OpenApiWorkbenchIssue) GetEpic() Epic {
	if o == nil || utils.IsNil(o.Epic) {
		var ret Epic
		return ret
	}
	return *o.Epic
}

// GetEpicOk returns a tuple with the Epic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenApiWorkbenchIssue) GetEpicOk() (*Epic, bool) {
	if o == nil || utils.IsNil(o.Epic) {
		return nil, false
	}
	return o.Epic, true
}

// HasEpic returns a boolean if a field has been set.
func (o *OpenApiWorkbenchIssue) HasEpic() bool {
	if o != nil && !utils.IsNil(o.Epic) {
		return true
	}

	return false
}

// SetEpic gets a reference to the given Epic and assigns it to the Epic field.
func (o *OpenApiWorkbenchIssue) SetEpic(v Epic) {
	o.Epic = &v
}

// GetIssueStatus returns the IssueStatus field value if set, zero value otherwise.
func (o *OpenApiWorkbenchIssue) GetIssueStatus() IssueStatus {
	if o == nil || utils.IsNil(o.IssueStatus) {
		var ret IssueStatus
		return ret
	}
	return *o.IssueStatus
}

// GetIssueStatusOk returns a tuple with the IssueStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenApiWorkbenchIssue) GetIssueStatusOk() (*IssueStatus, bool) {
	if o == nil || utils.IsNil(o.IssueStatus) {
		return nil, false
	}
	return o.IssueStatus, true
}

// HasIssueStatus returns a boolean if a field has been set.
func (o *OpenApiWorkbenchIssue) HasIssueStatus() bool {
	if o != nil && !utils.IsNil(o.IssueStatus) {
		return true
	}

	return false
}

// SetIssueStatus gets a reference to the given IssueStatus and assigns it to the IssueStatus field.
func (o *OpenApiWorkbenchIssue) SetIssueStatus(v IssueStatus) {
	o.IssueStatus = &v
}

// GetIssueType returns the IssueType field value if set, zero value otherwise.
func (o *OpenApiWorkbenchIssue) GetIssueType() IssueTypeDetail {
	if o == nil || utils.IsNil(o.IssueType) {
		var ret IssueTypeDetail
		return ret
	}
	return *o.IssueType
}

// GetIssueTypeOk returns a tuple with the IssueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenApiWorkbenchIssue) GetIssueTypeOk() (*IssueTypeDetail, bool) {
	if o == nil || utils.IsNil(o.IssueType) {
		return nil, false
	}
	return o.IssueType, true
}

// HasIssueType returns a boolean if a field has been set.
func (o *OpenApiWorkbenchIssue) HasIssueType() bool {
	if o != nil && !utils.IsNil(o.IssueType) {
		return true
	}

	return false
}

// SetIssueType gets a reference to the given IssueTypeDetail and assigns it to the IssueType field.
func (o *OpenApiWorkbenchIssue) SetIssueType(v IssueTypeDetail) {
	o.IssueType = &v
}

// GetIteration returns the Iteration field value if set, zero value otherwise.
func (o *OpenApiWorkbenchIssue) GetIteration() IterationSimple {
	if o == nil || utils.IsNil(o.Iteration) {
		var ret IterationSimple
		return ret
	}
	return *o.Iteration
}

// GetIterationOk returns a tuple with the Iteration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenApiWorkbenchIssue) GetIterationOk() (*IterationSimple, bool) {
	if o == nil || utils.IsNil(o.Iteration) {
		return nil, false
	}
	return o.Iteration, true
}

// HasIteration returns a boolean if a field has been set.
func (o *OpenApiWorkbenchIssue) HasIteration() bool {
	if o != nil && !utils.IsNil(o.Iteration) {
		return true
	}

	return false
}

// SetIteration gets a reference to the given IterationSimple and assigns it to the Iteration field.
func (o *OpenApiWorkbenchIssue) SetIteration(v IterationSimple) {
	o.Iteration = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenApiWorkbenchIssue) GetName() string {
	if o == nil || utils.IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenApiWorkbenchIssue) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *OpenApiWorkbenchIssue) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given utils.NullableString and assigns it to the Name field.
func (o *OpenApiWorkbenchIssue) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *OpenApiWorkbenchIssue) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *OpenApiWorkbenchIssue) UnsetName() {
	o.Name.Unset()
}

// GetParentCode returns the ParentCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenApiWorkbenchIssue) GetParentCode() int64 {
	if o == nil || utils.IsNil(o.ParentCode.Get()) {
		var ret int64
		return ret
	}
	return *o.ParentCode.Get()
}

// GetParentCodeOk returns a tuple with the ParentCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenApiWorkbenchIssue) GetParentCodeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentCode.Get(), o.ParentCode.IsSet()
}

// HasParentCode returns a boolean if a field has been set.
func (o *OpenApiWorkbenchIssue) HasParentCode() bool {
	if o != nil && o.ParentCode.IsSet() {
		return true
	}

	return false
}

// SetParentCode gets a reference to the given utils.NullableInt64 and assigns it to the ParentCode field.
func (o *OpenApiWorkbenchIssue) SetParentCode(v int64) {
	o.ParentCode.Set(&v)
}
// SetParentCodeNil sets the value for ParentCode to be an explicit nil
func (o *OpenApiWorkbenchIssue) SetParentCodeNil() {
	o.ParentCode.Set(nil)
}

// UnsetParentCode ensures that no value is present for ParentCode, not even an explicit nil
func (o *OpenApiWorkbenchIssue) UnsetParentCode() {
	o.ParentCode.Unset()
}

// GetParentIssue returns the ParentIssue field value if set, zero value otherwise.
func (o *OpenApiWorkbenchIssue) GetParentIssue() IssueSimpleData {
	if o == nil || utils.IsNil(o.ParentIssue) {
		var ret IssueSimpleData
		return ret
	}
	return *o.ParentIssue
}

// GetParentIssueOk returns a tuple with the ParentIssue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenApiWorkbenchIssue) GetParentIssueOk() (*IssueSimpleData, bool) {
	if o == nil || utils.IsNil(o.ParentIssue) {
		return nil, false
	}
	return o.ParentIssue, true
}

// HasParentIssue returns a boolean if a field has been set.
func (o *OpenApiWorkbenchIssue) HasParentIssue() bool {
	if o != nil && !utils.IsNil(o.ParentIssue) {
		return true
	}

	return false
}

// SetParentIssue gets a reference to the given IssueSimpleData and assigns it to the ParentIssue field.
func (o *OpenApiWorkbenchIssue) SetParentIssue(v IssueSimpleData) {
	o.ParentIssue = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenApiWorkbenchIssue) GetPriority() string {
	if o == nil || utils.IsNil(o.Priority.Get()) {
		var ret string
		return ret
	}
	return *o.Priority.Get()
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenApiWorkbenchIssue) GetPriorityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Priority.Get(), o.Priority.IsSet()
}

// HasPriority returns a boolean if a field has been set.
func (o *OpenApiWorkbenchIssue) HasPriority() bool {
	if o != nil && o.Priority.IsSet() {
		return true
	}

	return false
}

// SetPriority gets a reference to the given utils.NullableString and assigns it to the Priority field.
func (o *OpenApiWorkbenchIssue) SetPriority(v string) {
	o.Priority.Set(&v)
}
// SetPriorityNil sets the value for Priority to be an explicit nil
func (o *OpenApiWorkbenchIssue) SetPriorityNil() {
	o.Priority.Set(nil)
}

// UnsetPriority ensures that no value is present for Priority, not even an explicit nil
func (o *OpenApiWorkbenchIssue) UnsetPriority() {
	o.Priority.Unset()
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *OpenApiWorkbenchIssue) GetProject() Project {
	if o == nil || utils.IsNil(o.Project) {
		var ret Project
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenApiWorkbenchIssue) GetProjectOk() (*Project, bool) {
	if o == nil || utils.IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *OpenApiWorkbenchIssue) HasProject() bool {
	if o != nil && !utils.IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given Project and assigns it to the Project field.
func (o *OpenApiWorkbenchIssue) SetProject(v Project) {
	o.Project = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenApiWorkbenchIssue) GetProjectId() int64 {
	if o == nil || utils.IsNil(o.ProjectId.Get()) {
		var ret int64
		return ret
	}
	return *o.ProjectId.Get()
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenApiWorkbenchIssue) GetProjectIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProjectId.Get(), o.ProjectId.IsSet()
}

// HasProjectId returns a boolean if a field has been set.
func (o *OpenApiWorkbenchIssue) HasProjectId() bool {
	if o != nil && o.ProjectId.IsSet() {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given utils.NullableInt64 and assigns it to the ProjectId field.
func (o *OpenApiWorkbenchIssue) SetProjectId(v int64) {
	o.ProjectId.Set(&v)
}
// SetProjectIdNil sets the value for ProjectId to be an explicit nil
func (o *OpenApiWorkbenchIssue) SetProjectIdNil() {
	o.ProjectId.Set(nil)
}

// UnsetProjectId ensures that no value is present for ProjectId, not even an explicit nil
func (o *OpenApiWorkbenchIssue) UnsetProjectId() {
	o.ProjectId.Unset()
}

// GetSubTasks returns the SubTasks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenApiWorkbenchIssue) GetSubTasks() []SubTask {
	if o == nil {
		var ret []SubTask
		return ret
	}
	return o.SubTasks
}

// GetSubTasksOk returns a tuple with the SubTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenApiWorkbenchIssue) GetSubTasksOk() ([]SubTask, bool) {
	if o == nil || utils.IsNil(o.SubTasks) {
		return nil, false
	}
	return o.SubTasks, true
}

// HasSubTasks returns a boolean if a field has been set.
func (o *OpenApiWorkbenchIssue) HasSubTasks() bool {
	if o != nil && !utils.IsNil(o.SubTasks) {
		return true
	}

	return false
}

// SetSubTasks gets a reference to the given []SubTask and assigns it to the SubTasks field.
func (o *OpenApiWorkbenchIssue) SetSubTasks(v []SubTask) {
	o.SubTasks = v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenApiWorkbenchIssue) GetType() string {
	if o == nil || utils.IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenApiWorkbenchIssue) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *OpenApiWorkbenchIssue) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given utils.NullableString and assigns it to the Type field.
func (o *OpenApiWorkbenchIssue) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *OpenApiWorkbenchIssue) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *OpenApiWorkbenchIssue) UnsetType() {
	o.Type.Unset()
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenApiWorkbenchIssue) GetUpdatedAt() int64 {
	if o == nil || utils.IsNil(o.UpdatedAt.Get()) {
		var ret int64
		return ret
	}
	return *o.UpdatedAt.Get()
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenApiWorkbenchIssue) GetUpdatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedAt.Get(), o.UpdatedAt.IsSet()
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *OpenApiWorkbenchIssue) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt.IsSet() {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given utils.NullableInt64 and assigns it to the UpdatedAt field.
func (o *OpenApiWorkbenchIssue) SetUpdatedAt(v int64) {
	o.UpdatedAt.Set(&v)
}
// SetUpdatedAtNil sets the value for UpdatedAt to be an explicit nil
func (o *OpenApiWorkbenchIssue) SetUpdatedAtNil() {
	o.UpdatedAt.Set(nil)
}

// UnsetUpdatedAt ensures that no value is present for UpdatedAt, not even an explicit nil
func (o *OpenApiWorkbenchIssue) UnsetUpdatedAt() {
	o.UpdatedAt.Unset()
}

func (o OpenApiWorkbenchIssue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpenApiWorkbenchIssue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Assignee) {
		toSerialize["Assignee"] = o.Assignee
	}
	if o.ChildCompletedCount.IsSet() {
		toSerialize["ChildCompletedCount"] = o.ChildCompletedCount.Get()
	}
	if o.ChildCount.IsSet() {
		toSerialize["ChildCount"] = o.ChildCount.Get()
	}
	if o.Code.IsSet() {
		toSerialize["Code"] = o.Code.Get()
	}
	if o.CreatedAt.IsSet() {
		toSerialize["CreatedAt"] = o.CreatedAt.Get()
	}
	if !utils.IsNil(o.Creator) {
		toSerialize["Creator"] = o.Creator
	}
	if o.Description.IsSet() {
		toSerialize["Description"] = o.Description.Get()
	}
	if o.DueDate.IsSet() {
		toSerialize["DueDate"] = o.DueDate.Get()
	}
	if !utils.IsNil(o.Epic) {
		toSerialize["Epic"] = o.Epic
	}
	if !utils.IsNil(o.IssueStatus) {
		toSerialize["IssueStatus"] = o.IssueStatus
	}
	if !utils.IsNil(o.IssueType) {
		toSerialize["IssueType"] = o.IssueType
	}
	if !utils.IsNil(o.Iteration) {
		toSerialize["Iteration"] = o.Iteration
	}
	if o.Name.IsSet() {
		toSerialize["Name"] = o.Name.Get()
	}
	if o.ParentCode.IsSet() {
		toSerialize["ParentCode"] = o.ParentCode.Get()
	}
	if !utils.IsNil(o.ParentIssue) {
		toSerialize["ParentIssue"] = o.ParentIssue
	}
	if o.Priority.IsSet() {
		toSerialize["Priority"] = o.Priority.Get()
	}
	if !utils.IsNil(o.Project) {
		toSerialize["Project"] = o.Project
	}
	if o.ProjectId.IsSet() {
		toSerialize["ProjectId"] = o.ProjectId.Get()
	}
	if o.SubTasks != nil {
		toSerialize["SubTasks"] = o.SubTasks
	}
	if o.Type.IsSet() {
		toSerialize["Type"] = o.Type.Get()
	}
	if o.UpdatedAt.IsSet() {
		toSerialize["UpdatedAt"] = o.UpdatedAt.Get()
	}
	return toSerialize, nil
}

type NullableOpenApiWorkbenchIssue struct {
	value *OpenApiWorkbenchIssue
	isSet bool
}

func (v NullableOpenApiWorkbenchIssue) Get() *OpenApiWorkbenchIssue {
	return v.value
}

func (v *NullableOpenApiWorkbenchIssue) Set(val *OpenApiWorkbenchIssue) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenApiWorkbenchIssue) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenApiWorkbenchIssue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenApiWorkbenchIssue(val *OpenApiWorkbenchIssue) *NullableOpenApiWorkbenchIssue {
	return &NullableOpenApiWorkbenchIssue{value: val, isSet: true}
}

func (v NullableOpenApiWorkbenchIssue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenApiWorkbenchIssue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


