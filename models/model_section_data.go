/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the SectionData type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &SectionData{}

// SectionData 分组信息
type SectionData struct {
	Section *Section `json:"Section,omitempty"`
}

// NewSectionData instantiates a new SectionData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSectionData() *SectionData {
	this := SectionData{}
	return &this
}

// NewSectionDataWithDefaults instantiates a new SectionData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSectionDataWithDefaults() *SectionData {
	this := SectionData{}
	return &this
}

// GetSection returns the Section field value if set, zero value otherwise.
func (o *SectionData) GetSection() Section {
	if o == nil || utils.IsNil(o.Section) {
		var ret Section
		return ret
	}
	return *o.Section
}

// GetSectionOk returns a tuple with the Section field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SectionData) GetSectionOk() (*Section, bool) {
	if o == nil || utils.IsNil(o.Section) {
		return nil, false
	}
	return o.Section, true
}

// HasSection returns a boolean if a field has been set.
func (o *SectionData) HasSection() bool {
	if o != nil && !utils.IsNil(o.Section) {
		return true
	}

	return false
}

// SetSection gets a reference to the given Section and assigns it to the Section field.
func (o *SectionData) SetSection(v Section) {
	o.Section = &v
}

func (o SectionData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SectionData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Section) {
		toSerialize["Section"] = o.Section
	}
	return toSerialize, nil
}

type NullableSectionData struct {
	value *SectionData
	isSet bool
}

func (v NullableSectionData) Get() *SectionData {
	return v.value
}

func (v *NullableSectionData) Set(val *SectionData) {
	v.value = val
	v.isSet = true
}

func (v NullableSectionData) IsSet() bool {
	return v.isSet
}

func (v *NullableSectionData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSectionData(val *SectionData) *NullableSectionData {
	return &NullableSectionData{value: val, isSet: true}
}

func (v NullableSectionData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSectionData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


