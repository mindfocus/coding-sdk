/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DescribeCommitsBetweenCommitAndCommit200ResponseResponse type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DescribeCommitsBetweenCommitAndCommit200ResponseResponse{}

// DescribeCommitsBetweenCommitAndCommit200ResponseResponse 公共返回体
type DescribeCommitsBetweenCommitAndCommit200ResponseResponse struct {
	DifferentOfCommitDetail *DifferentOfCommitDetail `json:"DifferentOfCommitDetail,omitempty"`
	// 请求id
	RequestId *string `json:"RequestId,omitempty"`
}

// NewDescribeCommitsBetweenCommitAndCommit200ResponseResponse instantiates a new DescribeCommitsBetweenCommitAndCommit200ResponseResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeCommitsBetweenCommitAndCommit200ResponseResponse() *DescribeCommitsBetweenCommitAndCommit200ResponseResponse {
	this := DescribeCommitsBetweenCommitAndCommit200ResponseResponse{}
	var requestId string = "xxxxx"
	this.RequestId = &requestId
	return &this
}

// NewDescribeCommitsBetweenCommitAndCommit200ResponseResponseWithDefaults instantiates a new DescribeCommitsBetweenCommitAndCommit200ResponseResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeCommitsBetweenCommitAndCommit200ResponseResponseWithDefaults() *DescribeCommitsBetweenCommitAndCommit200ResponseResponse {
	this := DescribeCommitsBetweenCommitAndCommit200ResponseResponse{}
	var requestId string = "xxxxx"
	this.RequestId = &requestId
	return &this
}

// GetDifferentOfCommitDetail returns the DifferentOfCommitDetail field value if set, zero value otherwise.
func (o *DescribeCommitsBetweenCommitAndCommit200ResponseResponse) GetDifferentOfCommitDetail() DifferentOfCommitDetail {
	if o == nil || utils.IsNil(o.DifferentOfCommitDetail) {
		var ret DifferentOfCommitDetail
		return ret
	}
	return *o.DifferentOfCommitDetail
}

// GetDifferentOfCommitDetailOk returns a tuple with the DifferentOfCommitDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeCommitsBetweenCommitAndCommit200ResponseResponse) GetDifferentOfCommitDetailOk() (*DifferentOfCommitDetail, bool) {
	if o == nil || utils.IsNil(o.DifferentOfCommitDetail) {
		return nil, false
	}
	return o.DifferentOfCommitDetail, true
}

// HasDifferentOfCommitDetail returns a boolean if a field has been set.
func (o *DescribeCommitsBetweenCommitAndCommit200ResponseResponse) HasDifferentOfCommitDetail() bool {
	if o != nil && !utils.IsNil(o.DifferentOfCommitDetail) {
		return true
	}

	return false
}

// SetDifferentOfCommitDetail gets a reference to the given DifferentOfCommitDetail and assigns it to the DifferentOfCommitDetail field.
func (o *DescribeCommitsBetweenCommitAndCommit200ResponseResponse) SetDifferentOfCommitDetail(v DifferentOfCommitDetail) {
	o.DifferentOfCommitDetail = &v
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *DescribeCommitsBetweenCommitAndCommit200ResponseResponse) GetRequestId() string {
	if o == nil || utils.IsNil(o.RequestId) {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeCommitsBetweenCommitAndCommit200ResponseResponse) GetRequestIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.RequestId) {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *DescribeCommitsBetweenCommitAndCommit200ResponseResponse) HasRequestId() bool {
	if o != nil && !utils.IsNil(o.RequestId) {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *DescribeCommitsBetweenCommitAndCommit200ResponseResponse) SetRequestId(v string) {
	o.RequestId = &v
}

func (o DescribeCommitsBetweenCommitAndCommit200ResponseResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeCommitsBetweenCommitAndCommit200ResponseResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.DifferentOfCommitDetail) {
		toSerialize["DifferentOfCommitDetail"] = o.DifferentOfCommitDetail
	}
	if !utils.IsNil(o.RequestId) {
		toSerialize["RequestId"] = o.RequestId
	}
	return toSerialize, nil
}

type NullableDescribeCommitsBetweenCommitAndCommit200ResponseResponse struct {
	value *DescribeCommitsBetweenCommitAndCommit200ResponseResponse
	isSet bool
}

func (v NullableDescribeCommitsBetweenCommitAndCommit200ResponseResponse) Get() *DescribeCommitsBetweenCommitAndCommit200ResponseResponse {
	return v.value
}

func (v *NullableDescribeCommitsBetweenCommitAndCommit200ResponseResponse) Set(val *DescribeCommitsBetweenCommitAndCommit200ResponseResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeCommitsBetweenCommitAndCommit200ResponseResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeCommitsBetweenCommitAndCommit200ResponseResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeCommitsBetweenCommitAndCommit200ResponseResponse(val *DescribeCommitsBetweenCommitAndCommit200ResponseResponse) *NullableDescribeCommitsBetweenCommitAndCommit200ResponseResponse {
	return &NullableDescribeCommitsBetweenCommitAndCommit200ResponseResponse{value: val, isSet: true}
}

func (v NullableDescribeCommitsBetweenCommitAndCommit200ResponseResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeCommitsBetweenCommitAndCommit200ResponseResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


