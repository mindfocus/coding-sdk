/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the MergeRequestDiff type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &MergeRequestDiff{}

// MergeRequestDiff 合并请求 diff 信息
type MergeRequestDiff struct {
	// 一共减少行数
	Deletions utils.NullableInt64 `json:"Deletions,omitempty"`
	// 一共新增行数
	Insertions utils.NullableInt64 `json:"Insertions,omitempty"`
	// diff 信息是否过多，不宜于展示
	IsLarge utils.NullableBool `json:"IsLarge,omitempty"`
	// 源分支对应的Sha值
	NewSha utils.NullableString `json:"NewSha,omitempty"`
	// 目标分支对应的Sha值
	OldSha utils.NullableString `json:"OldSha,omitempty"`
	// 文件信息
	Paths []MergeRequestDiffFile `json:"Paths,omitempty"`
}

// NewMergeRequestDiff instantiates a new MergeRequestDiff object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMergeRequestDiff() *MergeRequestDiff {
	this := MergeRequestDiff{}
	var isLarge bool = false
	this.IsLarge = *utils.NewNullableBool(&isLarge)
	var newSha string = ""
	this.NewSha = *utils.NewNullableString(&newSha)
	var oldSha string = ""
	this.OldSha = *utils.NewNullableString(&oldSha)
	return &this
}

// NewMergeRequestDiffWithDefaults instantiates a new MergeRequestDiff object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMergeRequestDiffWithDefaults() *MergeRequestDiff {
	this := MergeRequestDiff{}
	var isLarge bool = false
	this.IsLarge = *utils.NewNullableBool(&isLarge)
	var newSha string = ""
	this.NewSha = *utils.NewNullableString(&newSha)
	var oldSha string = ""
	this.OldSha = *utils.NewNullableString(&oldSha)
	return &this
}

// GetDeletions returns the Deletions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MergeRequestDiff) GetDeletions() int64 {
	if o == nil || utils.IsNil(o.Deletions.Get()) {
		var ret int64
		return ret
	}
	return *o.Deletions.Get()
}

// GetDeletionsOk returns a tuple with the Deletions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MergeRequestDiff) GetDeletionsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Deletions.Get(), o.Deletions.IsSet()
}

// HasDeletions returns a boolean if a field has been set.
func (o *MergeRequestDiff) HasDeletions() bool {
	if o != nil && o.Deletions.IsSet() {
		return true
	}

	return false
}

// SetDeletions gets a reference to the given utils.NullableInt64 and assigns it to the Deletions field.
func (o *MergeRequestDiff) SetDeletions(v int64) {
	o.Deletions.Set(&v)
}
// SetDeletionsNil sets the value for Deletions to be an explicit nil
func (o *MergeRequestDiff) SetDeletionsNil() {
	o.Deletions.Set(nil)
}

// UnsetDeletions ensures that no value is present for Deletions, not even an explicit nil
func (o *MergeRequestDiff) UnsetDeletions() {
	o.Deletions.Unset()
}

// GetInsertions returns the Insertions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MergeRequestDiff) GetInsertions() int64 {
	if o == nil || utils.IsNil(o.Insertions.Get()) {
		var ret int64
		return ret
	}
	return *o.Insertions.Get()
}

// GetInsertionsOk returns a tuple with the Insertions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MergeRequestDiff) GetInsertionsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Insertions.Get(), o.Insertions.IsSet()
}

// HasInsertions returns a boolean if a field has been set.
func (o *MergeRequestDiff) HasInsertions() bool {
	if o != nil && o.Insertions.IsSet() {
		return true
	}

	return false
}

// SetInsertions gets a reference to the given utils.NullableInt64 and assigns it to the Insertions field.
func (o *MergeRequestDiff) SetInsertions(v int64) {
	o.Insertions.Set(&v)
}
// SetInsertionsNil sets the value for Insertions to be an explicit nil
func (o *MergeRequestDiff) SetInsertionsNil() {
	o.Insertions.Set(nil)
}

// UnsetInsertions ensures that no value is present for Insertions, not even an explicit nil
func (o *MergeRequestDiff) UnsetInsertions() {
	o.Insertions.Unset()
}

// GetIsLarge returns the IsLarge field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MergeRequestDiff) GetIsLarge() bool {
	if o == nil || utils.IsNil(o.IsLarge.Get()) {
		var ret bool
		return ret
	}
	return *o.IsLarge.Get()
}

// GetIsLargeOk returns a tuple with the IsLarge field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MergeRequestDiff) GetIsLargeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsLarge.Get(), o.IsLarge.IsSet()
}

// HasIsLarge returns a boolean if a field has been set.
func (o *MergeRequestDiff) HasIsLarge() bool {
	if o != nil && o.IsLarge.IsSet() {
		return true
	}

	return false
}

// SetIsLarge gets a reference to the given utils.NullableBool and assigns it to the IsLarge field.
func (o *MergeRequestDiff) SetIsLarge(v bool) {
	o.IsLarge.Set(&v)
}
// SetIsLargeNil sets the value for IsLarge to be an explicit nil
func (o *MergeRequestDiff) SetIsLargeNil() {
	o.IsLarge.Set(nil)
}

// UnsetIsLarge ensures that no value is present for IsLarge, not even an explicit nil
func (o *MergeRequestDiff) UnsetIsLarge() {
	o.IsLarge.Unset()
}

// GetNewSha returns the NewSha field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MergeRequestDiff) GetNewSha() string {
	if o == nil || utils.IsNil(o.NewSha.Get()) {
		var ret string
		return ret
	}
	return *o.NewSha.Get()
}

// GetNewShaOk returns a tuple with the NewSha field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MergeRequestDiff) GetNewShaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NewSha.Get(), o.NewSha.IsSet()
}

// HasNewSha returns a boolean if a field has been set.
func (o *MergeRequestDiff) HasNewSha() bool {
	if o != nil && o.NewSha.IsSet() {
		return true
	}

	return false
}

// SetNewSha gets a reference to the given utils.NullableString and assigns it to the NewSha field.
func (o *MergeRequestDiff) SetNewSha(v string) {
	o.NewSha.Set(&v)
}
// SetNewShaNil sets the value for NewSha to be an explicit nil
func (o *MergeRequestDiff) SetNewShaNil() {
	o.NewSha.Set(nil)
}

// UnsetNewSha ensures that no value is present for NewSha, not even an explicit nil
func (o *MergeRequestDiff) UnsetNewSha() {
	o.NewSha.Unset()
}

// GetOldSha returns the OldSha field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MergeRequestDiff) GetOldSha() string {
	if o == nil || utils.IsNil(o.OldSha.Get()) {
		var ret string
		return ret
	}
	return *o.OldSha.Get()
}

// GetOldShaOk returns a tuple with the OldSha field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MergeRequestDiff) GetOldShaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OldSha.Get(), o.OldSha.IsSet()
}

// HasOldSha returns a boolean if a field has been set.
func (o *MergeRequestDiff) HasOldSha() bool {
	if o != nil && o.OldSha.IsSet() {
		return true
	}

	return false
}

// SetOldSha gets a reference to the given utils.NullableString and assigns it to the OldSha field.
func (o *MergeRequestDiff) SetOldSha(v string) {
	o.OldSha.Set(&v)
}
// SetOldShaNil sets the value for OldSha to be an explicit nil
func (o *MergeRequestDiff) SetOldShaNil() {
	o.OldSha.Set(nil)
}

// UnsetOldSha ensures that no value is present for OldSha, not even an explicit nil
func (o *MergeRequestDiff) UnsetOldSha() {
	o.OldSha.Unset()
}

// GetPaths returns the Paths field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MergeRequestDiff) GetPaths() []MergeRequestDiffFile {
	if o == nil {
		var ret []MergeRequestDiffFile
		return ret
	}
	return o.Paths
}

// GetPathsOk returns a tuple with the Paths field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MergeRequestDiff) GetPathsOk() ([]MergeRequestDiffFile, bool) {
	if o == nil || utils.IsNil(o.Paths) {
		return nil, false
	}
	return o.Paths, true
}

// HasPaths returns a boolean if a field has been set.
func (o *MergeRequestDiff) HasPaths() bool {
	if o != nil && !utils.IsNil(o.Paths) {
		return true
	}

	return false
}

// SetPaths gets a reference to the given []MergeRequestDiffFile and assigns it to the Paths field.
func (o *MergeRequestDiff) SetPaths(v []MergeRequestDiffFile) {
	o.Paths = v
}

func (o MergeRequestDiff) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MergeRequestDiff) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Deletions.IsSet() {
		toSerialize["Deletions"] = o.Deletions.Get()
	}
	if o.Insertions.IsSet() {
		toSerialize["Insertions"] = o.Insertions.Get()
	}
	if o.IsLarge.IsSet() {
		toSerialize["IsLarge"] = o.IsLarge.Get()
	}
	if o.NewSha.IsSet() {
		toSerialize["NewSha"] = o.NewSha.Get()
	}
	if o.OldSha.IsSet() {
		toSerialize["OldSha"] = o.OldSha.Get()
	}
	if o.Paths != nil {
		toSerialize["Paths"] = o.Paths
	}
	return toSerialize, nil
}

type NullableMergeRequestDiff struct {
	value *MergeRequestDiff
	isSet bool
}

func (v NullableMergeRequestDiff) Get() *MergeRequestDiff {
	return v.value
}

func (v *NullableMergeRequestDiff) Set(val *MergeRequestDiff) {
	v.value = val
	v.isSet = true
}

func (v NullableMergeRequestDiff) IsSet() bool {
	return v.isSet
}

func (v *NullableMergeRequestDiff) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMergeRequestDiff(val *MergeRequestDiff) *NullableMergeRequestDiff {
	return &NullableMergeRequestDiff{value: val, isSet: true}
}

func (v NullableMergeRequestDiff) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMergeRequestDiff) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


