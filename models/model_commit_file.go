/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the CommitFile type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CommitFile{}

// CommitFile git 提交 文件信息
type CommitFile struct {
	// 文件内容
	Content *string `json:"Content,omitempty"`
	// ENCODING_RAW：不对文件编码；ENCODING_BASE64：传入的文件内容使用 base64 编码
	ContentEncoding string `json:"ContentEncoding"`
	// 新建文件、重命名的文件路径
	NewPath *string `json:"NewPath,omitempty"`
	// 文件路径
	Path string `json:"Path"`
	// 是否删除
	WantDelete bool `json:"WantDelete"`
	// 是否重命名
	WantRename bool `json:"WantRename"`
}

type _CommitFile CommitFile

// NewCommitFile instantiates a new CommitFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommitFile(contentEncoding string, path string, wantDelete bool, wantRename bool) *CommitFile {
	this := CommitFile{}
	var content string = ""
	this.Content = &content
	this.ContentEncoding = contentEncoding
	var newPath string = ""
	this.NewPath = &newPath
	this.Path = path
	this.WantDelete = wantDelete
	this.WantRename = wantRename
	return &this
}

// NewCommitFileWithDefaults instantiates a new CommitFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitFileWithDefaults() *CommitFile {
	this := CommitFile{}
	var content string = ""
	this.Content = &content
	var contentEncoding string = ""
	this.ContentEncoding = contentEncoding
	var newPath string = ""
	this.NewPath = &newPath
	var path string = ""
	this.Path = path
	var wantDelete bool = false
	this.WantDelete = wantDelete
	var wantRename bool = false
	this.WantRename = wantRename
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *CommitFile) GetContent() string {
	if o == nil || utils.IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitFile) GetContentOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *CommitFile) HasContent() bool {
	if o != nil && !utils.IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *CommitFile) SetContent(v string) {
	o.Content = &v
}

// GetContentEncoding returns the ContentEncoding field value
func (o *CommitFile) GetContentEncoding() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentEncoding
}

// GetContentEncodingOk returns a tuple with the ContentEncoding field value
// and a boolean to check if the value has been set.
func (o *CommitFile) GetContentEncodingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentEncoding, true
}

// SetContentEncoding sets field value
func (o *CommitFile) SetContentEncoding(v string) {
	o.ContentEncoding = v
}

// GetNewPath returns the NewPath field value if set, zero value otherwise.
func (o *CommitFile) GetNewPath() string {
	if o == nil || utils.IsNil(o.NewPath) {
		var ret string
		return ret
	}
	return *o.NewPath
}

// GetNewPathOk returns a tuple with the NewPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitFile) GetNewPathOk() (*string, bool) {
	if o == nil || utils.IsNil(o.NewPath) {
		return nil, false
	}
	return o.NewPath, true
}

// HasNewPath returns a boolean if a field has been set.
func (o *CommitFile) HasNewPath() bool {
	if o != nil && !utils.IsNil(o.NewPath) {
		return true
	}

	return false
}

// SetNewPath gets a reference to the given string and assigns it to the NewPath field.
func (o *CommitFile) SetNewPath(v string) {
	o.NewPath = &v
}

// GetPath returns the Path field value
func (o *CommitFile) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *CommitFile) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *CommitFile) SetPath(v string) {
	o.Path = v
}

// GetWantDelete returns the WantDelete field value
func (o *CommitFile) GetWantDelete() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.WantDelete
}

// GetWantDeleteOk returns a tuple with the WantDelete field value
// and a boolean to check if the value has been set.
func (o *CommitFile) GetWantDeleteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WantDelete, true
}

// SetWantDelete sets field value
func (o *CommitFile) SetWantDelete(v bool) {
	o.WantDelete = v
}

// GetWantRename returns the WantRename field value
func (o *CommitFile) GetWantRename() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.WantRename
}

// GetWantRenameOk returns a tuple with the WantRename field value
// and a boolean to check if the value has been set.
func (o *CommitFile) GetWantRenameOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WantRename, true
}

// SetWantRename sets field value
func (o *CommitFile) SetWantRename(v bool) {
	o.WantRename = v
}

func (o CommitFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommitFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Content) {
		toSerialize["Content"] = o.Content
	}
	toSerialize["ContentEncoding"] = o.ContentEncoding
	if !utils.IsNil(o.NewPath) {
		toSerialize["NewPath"] = o.NewPath
	}
	toSerialize["Path"] = o.Path
	toSerialize["WantDelete"] = o.WantDelete
	toSerialize["WantRename"] = o.WantRename
	return toSerialize, nil
}

func (o *CommitFile) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ContentEncoding",
		"Path",
		"WantDelete",
		"WantRename",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommitFile := _CommitFile{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommitFile)

	if err != nil {
		return err
	}

	*o = CommitFile(varCommitFile)

	return err
}

type NullableCommitFile struct {
	value *CommitFile
	isSet bool
}

func (v NullableCommitFile) Get() *CommitFile {
	return v.value
}

func (v *NullableCommitFile) Set(val *CommitFile) {
	v.value = val
	v.isSet = true
}

func (v NullableCommitFile) IsSet() bool {
	return v.isSet
}

func (v *NullableCommitFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommitFile(val *CommitFile) *NullableCommitFile {
	return &NullableCommitFile{value: val, isSet: true}
}

func (v NullableCommitFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommitFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


