/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the IssueDetail type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &IssueDetail{}

// IssueDetail 事项详情
type IssueDetail struct {
	Assignee *User `json:"Assignee,omitempty"`
	// 事项 Code
	Code *int64 `json:"Code,omitempty"`
	// 完成时间戳
	CompletedAt *int64 `json:"CompletedAt,omitempty"`
	// 创建时间戳
	CreatedAt *int64 `json:"CreatedAt,omitempty"`
	Creator *User `json:"Creator,omitempty"`
	// 自定义属性列表
	CustomFields []CustomFields `json:"CustomFields,omitempty"`
	DefectType *DefectType `json:"DefectType,omitempty"`
	// 描述
	Description *string `json:"Description,omitempty"`
	// 截止日期时间戳
	DueDate *int64 `json:"DueDate,omitempty"`
	Epic *Epic `json:"Epic,omitempty"`
	// 附件列表
	Files []IssueFile `json:"Files,omitempty"`
	// 事项状态 Id
	IssueStatusId *int64 `json:"IssueStatusId,omitempty"`
	// 事项状态名称
	IssueStatusName *string `json:"IssueStatusName,omitempty"`
	// 事项状态类型
	IssueStatusType *string `json:"IssueStatusType,omitempty"`
	IssueTypeDetail *IssueTypeDetail `json:"IssueTypeDetail,omitempty"`
	// 事项类型 ID
	IssueTypeId *int64 `json:"IssueTypeId,omitempty"`
	Iteration *IterationSimple `json:"Iteration,omitempty"`
	// 迭代 Id
	IterationId *int64 `json:"IterationId,omitempty"`
	// 标签列表
	Labels []IssueProjectLabel `json:"Labels,omitempty"`
	// 名称
	Name *string `json:"Name,omitempty"`
	Parent *IssueSimpleData `json:"Parent,omitempty"`
	// 父事项类型
	ParentType *string `json:"ParentType,omitempty"`
	// 优先级：  0 - 低，  1 - 中，  2 - 高，  3 - 紧急，  \"\" - 未指定
	Priority *string `json:"Priority,omitempty"`
	Project *Project `json:"Project,omitempty"`
	ProjectModule *IssueProjectModule `json:"ProjectModule,omitempty"`
	RequirementType *RequirementType `json:"RequirementType,omitempty"`
	// 开始日期时间戳
	StartDate *int64 `json:"StartDate,omitempty"`
	// 故事点，例如：0.5、0、1  空字符串 \"\" 表示未指定。
	StoryPoint *string `json:"StoryPoint,omitempty"`
	// 子工作项列表
	SubTasks []SubTask `json:"SubTasks,omitempty"`
	// 第三方链接列表
	ThirdLinks []IssueThirdLink `json:"ThirdLinks,omitempty"`
	// 事项类型：  DEFECT - 缺陷，  REQUIREMENT - 需求，  MISSION - 任务，  EPIC - 史诗，  SUB_TASK - 子工作项
	Type *string `json:"Type,omitempty"`
	// 修改时间戳
	UpdatedAt *int64 `json:"UpdatedAt,omitempty"`
	// 关注人列表
	Watchers []User `json:"Watchers,omitempty"`
	// 工时（小时数）
	WorkingHours *float32 `json:"WorkingHours,omitempty"`
	// 经办人列表
	Assignees []User `json:"Assignees,omitempty"`
}

// NewIssueDetail instantiates a new IssueDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueDetail() *IssueDetail {
	this := IssueDetail{}
	var description string = ""
	this.Description = &description
	var issueStatusName string = ""
	this.IssueStatusName = &issueStatusName
	var issueStatusType string = ""
	this.IssueStatusType = &issueStatusType
	var name string = ""
	this.Name = &name
	var parentType string = ""
	this.ParentType = &parentType
	var priority string = ""
	this.Priority = &priority
	var storyPoint string = ""
	this.StoryPoint = &storyPoint
	var type_ string = ""
	this.Type = &type_
	return &this
}

// NewIssueDetailWithDefaults instantiates a new IssueDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueDetailWithDefaults() *IssueDetail {
	this := IssueDetail{}
	var description string = ""
	this.Description = &description
	var issueStatusName string = ""
	this.IssueStatusName = &issueStatusName
	var issueStatusType string = ""
	this.IssueStatusType = &issueStatusType
	var name string = ""
	this.Name = &name
	var parentType string = ""
	this.ParentType = &parentType
	var priority string = ""
	this.Priority = &priority
	var storyPoint string = ""
	this.StoryPoint = &storyPoint
	var type_ string = ""
	this.Type = &type_
	return &this
}

// GetAssignee returns the Assignee field value if set, zero value otherwise.
func (o *IssueDetail) GetAssignee() User {
	if o == nil || utils.IsNil(o.Assignee) {
		var ret User
		return ret
	}
	return *o.Assignee
}

// GetAssigneeOk returns a tuple with the Assignee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueDetail) GetAssigneeOk() (*User, bool) {
	if o == nil || utils.IsNil(o.Assignee) {
		return nil, false
	}
	return o.Assignee, true
}

// HasAssignee returns a boolean if a field has been set.
func (o *IssueDetail) HasAssignee() bool {
	if o != nil && !utils.IsNil(o.Assignee) {
		return true
	}

	return false
}

// SetAssignee gets a reference to the given User and assigns it to the Assignee field.
func (o *IssueDetail) SetAssignee(v User) {
	o.Assignee = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *IssueDetail) GetCode() int64 {
	if o == nil || utils.IsNil(o.Code) {
		var ret int64
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueDetail) GetCodeOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *IssueDetail) HasCode() bool {
	if o != nil && !utils.IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given int64 and assigns it to the Code field.
func (o *IssueDetail) SetCode(v int64) {
	o.Code = &v
}

// GetCompletedAt returns the CompletedAt field value if set, zero value otherwise.
func (o *IssueDetail) GetCompletedAt() int64 {
	if o == nil || utils.IsNil(o.CompletedAt) {
		var ret int64
		return ret
	}
	return *o.CompletedAt
}

// GetCompletedAtOk returns a tuple with the CompletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueDetail) GetCompletedAtOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.CompletedAt) {
		return nil, false
	}
	return o.CompletedAt, true
}

// HasCompletedAt returns a boolean if a field has been set.
func (o *IssueDetail) HasCompletedAt() bool {
	if o != nil && !utils.IsNil(o.CompletedAt) {
		return true
	}

	return false
}

// SetCompletedAt gets a reference to the given int64 and assigns it to the CompletedAt field.
func (o *IssueDetail) SetCompletedAt(v int64) {
	o.CompletedAt = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *IssueDetail) GetCreatedAt() int64 {
	if o == nil || utils.IsNil(o.CreatedAt) {
		var ret int64
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueDetail) GetCreatedAtOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *IssueDetail) HasCreatedAt() bool {
	if o != nil && !utils.IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int64 and assigns it to the CreatedAt field.
func (o *IssueDetail) SetCreatedAt(v int64) {
	o.CreatedAt = &v
}

// GetCreator returns the Creator field value if set, zero value otherwise.
func (o *IssueDetail) GetCreator() User {
	if o == nil || utils.IsNil(o.Creator) {
		var ret User
		return ret
	}
	return *o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueDetail) GetCreatorOk() (*User, bool) {
	if o == nil || utils.IsNil(o.Creator) {
		return nil, false
	}
	return o.Creator, true
}

// HasCreator returns a boolean if a field has been set.
func (o *IssueDetail) HasCreator() bool {
	if o != nil && !utils.IsNil(o.Creator) {
		return true
	}

	return false
}

// SetCreator gets a reference to the given User and assigns it to the Creator field.
func (o *IssueDetail) SetCreator(v User) {
	o.Creator = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *IssueDetail) GetCustomFields() []CustomFields {
	if o == nil || utils.IsNil(o.CustomFields) {
		var ret []CustomFields
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueDetail) GetCustomFieldsOk() ([]CustomFields, bool) {
	if o == nil || utils.IsNil(o.CustomFields) {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *IssueDetail) HasCustomFields() bool {
	if o != nil && !utils.IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given []CustomFields and assigns it to the CustomFields field.
func (o *IssueDetail) SetCustomFields(v []CustomFields) {
	o.CustomFields = v
}

// GetDefectType returns the DefectType field value if set, zero value otherwise.
func (o *IssueDetail) GetDefectType() DefectType {
	if o == nil || utils.IsNil(o.DefectType) {
		var ret DefectType
		return ret
	}
	return *o.DefectType
}

// GetDefectTypeOk returns a tuple with the DefectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueDetail) GetDefectTypeOk() (*DefectType, bool) {
	if o == nil || utils.IsNil(o.DefectType) {
		return nil, false
	}
	return o.DefectType, true
}

// HasDefectType returns a boolean if a field has been set.
func (o *IssueDetail) HasDefectType() bool {
	if o != nil && !utils.IsNil(o.DefectType) {
		return true
	}

	return false
}

// SetDefectType gets a reference to the given DefectType and assigns it to the DefectType field.
func (o *IssueDetail) SetDefectType(v DefectType) {
	o.DefectType = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *IssueDetail) GetDescription() string {
	if o == nil || utils.IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueDetail) GetDescriptionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *IssueDetail) HasDescription() bool {
	if o != nil && !utils.IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *IssueDetail) SetDescription(v string) {
	o.Description = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *IssueDetail) GetDueDate() int64 {
	if o == nil || utils.IsNil(o.DueDate) {
		var ret int64
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueDetail) GetDueDateOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.DueDate) {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *IssueDetail) HasDueDate() bool {
	if o != nil && !utils.IsNil(o.DueDate) {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given int64 and assigns it to the DueDate field.
func (o *IssueDetail) SetDueDate(v int64) {
	o.DueDate = &v
}

// GetEpic returns the Epic field value if set, zero value otherwise.
func (o *IssueDetail) GetEpic() Epic {
	if o == nil || utils.IsNil(o.Epic) {
		var ret Epic
		return ret
	}
	return *o.Epic
}

// GetEpicOk returns a tuple with the Epic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueDetail) GetEpicOk() (*Epic, bool) {
	if o == nil || utils.IsNil(o.Epic) {
		return nil, false
	}
	return o.Epic, true
}

// HasEpic returns a boolean if a field has been set.
func (o *IssueDetail) HasEpic() bool {
	if o != nil && !utils.IsNil(o.Epic) {
		return true
	}

	return false
}

// SetEpic gets a reference to the given Epic and assigns it to the Epic field.
func (o *IssueDetail) SetEpic(v Epic) {
	o.Epic = &v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *IssueDetail) GetFiles() []IssueFile {
	if o == nil || utils.IsNil(o.Files) {
		var ret []IssueFile
		return ret
	}
	return o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueDetail) GetFilesOk() ([]IssueFile, bool) {
	if o == nil || utils.IsNil(o.Files) {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *IssueDetail) HasFiles() bool {
	if o != nil && !utils.IsNil(o.Files) {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []IssueFile and assigns it to the Files field.
func (o *IssueDetail) SetFiles(v []IssueFile) {
	o.Files = v
}

// GetIssueStatusId returns the IssueStatusId field value if set, zero value otherwise.
func (o *IssueDetail) GetIssueStatusId() int64 {
	if o == nil || utils.IsNil(o.IssueStatusId) {
		var ret int64
		return ret
	}
	return *o.IssueStatusId
}

// GetIssueStatusIdOk returns a tuple with the IssueStatusId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueDetail) GetIssueStatusIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.IssueStatusId) {
		return nil, false
	}
	return o.IssueStatusId, true
}

// HasIssueStatusId returns a boolean if a field has been set.
func (o *IssueDetail) HasIssueStatusId() bool {
	if o != nil && !utils.IsNil(o.IssueStatusId) {
		return true
	}

	return false
}

// SetIssueStatusId gets a reference to the given int64 and assigns it to the IssueStatusId field.
func (o *IssueDetail) SetIssueStatusId(v int64) {
	o.IssueStatusId = &v
}

// GetIssueStatusName returns the IssueStatusName field value if set, zero value otherwise.
func (o *IssueDetail) GetIssueStatusName() string {
	if o == nil || utils.IsNil(o.IssueStatusName) {
		var ret string
		return ret
	}
	return *o.IssueStatusName
}

// GetIssueStatusNameOk returns a tuple with the IssueStatusName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueDetail) GetIssueStatusNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.IssueStatusName) {
		return nil, false
	}
	return o.IssueStatusName, true
}

// HasIssueStatusName returns a boolean if a field has been set.
func (o *IssueDetail) HasIssueStatusName() bool {
	if o != nil && !utils.IsNil(o.IssueStatusName) {
		return true
	}

	return false
}

// SetIssueStatusName gets a reference to the given string and assigns it to the IssueStatusName field.
func (o *IssueDetail) SetIssueStatusName(v string) {
	o.IssueStatusName = &v
}

// GetIssueStatusType returns the IssueStatusType field value if set, zero value otherwise.
func (o *IssueDetail) GetIssueStatusType() string {
	if o == nil || utils.IsNil(o.IssueStatusType) {
		var ret string
		return ret
	}
	return *o.IssueStatusType
}

// GetIssueStatusTypeOk returns a tuple with the IssueStatusType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueDetail) GetIssueStatusTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.IssueStatusType) {
		return nil, false
	}
	return o.IssueStatusType, true
}

// HasIssueStatusType returns a boolean if a field has been set.
func (o *IssueDetail) HasIssueStatusType() bool {
	if o != nil && !utils.IsNil(o.IssueStatusType) {
		return true
	}

	return false
}

// SetIssueStatusType gets a reference to the given string and assigns it to the IssueStatusType field.
func (o *IssueDetail) SetIssueStatusType(v string) {
	o.IssueStatusType = &v
}

// GetIssueTypeDetail returns the IssueTypeDetail field value if set, zero value otherwise.
func (o *IssueDetail) GetIssueTypeDetail() IssueTypeDetail {
	if o == nil || utils.IsNil(o.IssueTypeDetail) {
		var ret IssueTypeDetail
		return ret
	}
	return *o.IssueTypeDetail
}

// GetIssueTypeDetailOk returns a tuple with the IssueTypeDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueDetail) GetIssueTypeDetailOk() (*IssueTypeDetail, bool) {
	if o == nil || utils.IsNil(o.IssueTypeDetail) {
		return nil, false
	}
	return o.IssueTypeDetail, true
}

// HasIssueTypeDetail returns a boolean if a field has been set.
func (o *IssueDetail) HasIssueTypeDetail() bool {
	if o != nil && !utils.IsNil(o.IssueTypeDetail) {
		return true
	}

	return false
}

// SetIssueTypeDetail gets a reference to the given IssueTypeDetail and assigns it to the IssueTypeDetail field.
func (o *IssueDetail) SetIssueTypeDetail(v IssueTypeDetail) {
	o.IssueTypeDetail = &v
}

// GetIssueTypeId returns the IssueTypeId field value if set, zero value otherwise.
func (o *IssueDetail) GetIssueTypeId() int64 {
	if o == nil || utils.IsNil(o.IssueTypeId) {
		var ret int64
		return ret
	}
	return *o.IssueTypeId
}

// GetIssueTypeIdOk returns a tuple with the IssueTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueDetail) GetIssueTypeIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.IssueTypeId) {
		return nil, false
	}
	return o.IssueTypeId, true
}

// HasIssueTypeId returns a boolean if a field has been set.
func (o *IssueDetail) HasIssueTypeId() bool {
	if o != nil && !utils.IsNil(o.IssueTypeId) {
		return true
	}

	return false
}

// SetIssueTypeId gets a reference to the given int64 and assigns it to the IssueTypeId field.
func (o *IssueDetail) SetIssueTypeId(v int64) {
	o.IssueTypeId = &v
}

// GetIteration returns the Iteration field value if set, zero value otherwise.
func (o *IssueDetail) GetIteration() IterationSimple {
	if o == nil || utils.IsNil(o.Iteration) {
		var ret IterationSimple
		return ret
	}
	return *o.Iteration
}

// GetIterationOk returns a tuple with the Iteration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueDetail) GetIterationOk() (*IterationSimple, bool) {
	if o == nil || utils.IsNil(o.Iteration) {
		return nil, false
	}
	return o.Iteration, true
}

// HasIteration returns a boolean if a field has been set.
func (o *IssueDetail) HasIteration() bool {
	if o != nil && !utils.IsNil(o.Iteration) {
		return true
	}

	return false
}

// SetIteration gets a reference to the given IterationSimple and assigns it to the Iteration field.
func (o *IssueDetail) SetIteration(v IterationSimple) {
	o.Iteration = &v
}

// GetIterationId returns the IterationId field value if set, zero value otherwise.
func (o *IssueDetail) GetIterationId() int64 {
	if o == nil || utils.IsNil(o.IterationId) {
		var ret int64
		return ret
	}
	return *o.IterationId
}

// GetIterationIdOk returns a tuple with the IterationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueDetail) GetIterationIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.IterationId) {
		return nil, false
	}
	return o.IterationId, true
}

// HasIterationId returns a boolean if a field has been set.
func (o *IssueDetail) HasIterationId() bool {
	if o != nil && !utils.IsNil(o.IterationId) {
		return true
	}

	return false
}

// SetIterationId gets a reference to the given int64 and assigns it to the IterationId field.
func (o *IssueDetail) SetIterationId(v int64) {
	o.IterationId = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *IssueDetail) GetLabels() []IssueProjectLabel {
	if o == nil || utils.IsNil(o.Labels) {
		var ret []IssueProjectLabel
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueDetail) GetLabelsOk() ([]IssueProjectLabel, bool) {
	if o == nil || utils.IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *IssueDetail) HasLabels() bool {
	if o != nil && !utils.IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []IssueProjectLabel and assigns it to the Labels field.
func (o *IssueDetail) SetLabels(v []IssueProjectLabel) {
	o.Labels = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IssueDetail) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueDetail) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IssueDetail) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IssueDetail) SetName(v string) {
	o.Name = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *IssueDetail) GetParent() IssueSimpleData {
	if o == nil || utils.IsNil(o.Parent) {
		var ret IssueSimpleData
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueDetail) GetParentOk() (*IssueSimpleData, bool) {
	if o == nil || utils.IsNil(o.Parent) {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *IssueDetail) HasParent() bool {
	if o != nil && !utils.IsNil(o.Parent) {
		return true
	}

	return false
}

// SetParent gets a reference to the given IssueSimpleData and assigns it to the Parent field.
func (o *IssueDetail) SetParent(v IssueSimpleData) {
	o.Parent = &v
}

// GetParentType returns the ParentType field value if set, zero value otherwise.
func (o *IssueDetail) GetParentType() string {
	if o == nil || utils.IsNil(o.ParentType) {
		var ret string
		return ret
	}
	return *o.ParentType
}

// GetParentTypeOk returns a tuple with the ParentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueDetail) GetParentTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ParentType) {
		return nil, false
	}
	return o.ParentType, true
}

// HasParentType returns a boolean if a field has been set.
func (o *IssueDetail) HasParentType() bool {
	if o != nil && !utils.IsNil(o.ParentType) {
		return true
	}

	return false
}

// SetParentType gets a reference to the given string and assigns it to the ParentType field.
func (o *IssueDetail) SetParentType(v string) {
	o.ParentType = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *IssueDetail) GetPriority() string {
	if o == nil || utils.IsNil(o.Priority) {
		var ret string
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueDetail) GetPriorityOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *IssueDetail) HasPriority() bool {
	if o != nil && !utils.IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given string and assigns it to the Priority field.
func (o *IssueDetail) SetPriority(v string) {
	o.Priority = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *IssueDetail) GetProject() Project {
	if o == nil || utils.IsNil(o.Project) {
		var ret Project
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueDetail) GetProjectOk() (*Project, bool) {
	if o == nil || utils.IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *IssueDetail) HasProject() bool {
	if o != nil && !utils.IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given Project and assigns it to the Project field.
func (o *IssueDetail) SetProject(v Project) {
	o.Project = &v
}

// GetProjectModule returns the ProjectModule field value if set, zero value otherwise.
func (o *IssueDetail) GetProjectModule() IssueProjectModule {
	if o == nil || utils.IsNil(o.ProjectModule) {
		var ret IssueProjectModule
		return ret
	}
	return *o.ProjectModule
}

// GetProjectModuleOk returns a tuple with the ProjectModule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueDetail) GetProjectModuleOk() (*IssueProjectModule, bool) {
	if o == nil || utils.IsNil(o.ProjectModule) {
		return nil, false
	}
	return o.ProjectModule, true
}

// HasProjectModule returns a boolean if a field has been set.
func (o *IssueDetail) HasProjectModule() bool {
	if o != nil && !utils.IsNil(o.ProjectModule) {
		return true
	}

	return false
}

// SetProjectModule gets a reference to the given IssueProjectModule and assigns it to the ProjectModule field.
func (o *IssueDetail) SetProjectModule(v IssueProjectModule) {
	o.ProjectModule = &v
}

// GetRequirementType returns the RequirementType field value if set, zero value otherwise.
func (o *IssueDetail) GetRequirementType() RequirementType {
	if o == nil || utils.IsNil(o.RequirementType) {
		var ret RequirementType
		return ret
	}
	return *o.RequirementType
}

// GetRequirementTypeOk returns a tuple with the RequirementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueDetail) GetRequirementTypeOk() (*RequirementType, bool) {
	if o == nil || utils.IsNil(o.RequirementType) {
		return nil, false
	}
	return o.RequirementType, true
}

// HasRequirementType returns a boolean if a field has been set.
func (o *IssueDetail) HasRequirementType() bool {
	if o != nil && !utils.IsNil(o.RequirementType) {
		return true
	}

	return false
}

// SetRequirementType gets a reference to the given RequirementType and assigns it to the RequirementType field.
func (o *IssueDetail) SetRequirementType(v RequirementType) {
	o.RequirementType = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *IssueDetail) GetStartDate() int64 {
	if o == nil || utils.IsNil(o.StartDate) {
		var ret int64
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueDetail) GetStartDateOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *IssueDetail) HasStartDate() bool {
	if o != nil && !utils.IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given int64 and assigns it to the StartDate field.
func (o *IssueDetail) SetStartDate(v int64) {
	o.StartDate = &v
}

// GetStoryPoint returns the StoryPoint field value if set, zero value otherwise.
func (o *IssueDetail) GetStoryPoint() string {
	if o == nil || utils.IsNil(o.StoryPoint) {
		var ret string
		return ret
	}
	return *o.StoryPoint
}

// GetStoryPointOk returns a tuple with the StoryPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueDetail) GetStoryPointOk() (*string, bool) {
	if o == nil || utils.IsNil(o.StoryPoint) {
		return nil, false
	}
	return o.StoryPoint, true
}

// HasStoryPoint returns a boolean if a field has been set.
func (o *IssueDetail) HasStoryPoint() bool {
	if o != nil && !utils.IsNil(o.StoryPoint) {
		return true
	}

	return false
}

// SetStoryPoint gets a reference to the given string and assigns it to the StoryPoint field.
func (o *IssueDetail) SetStoryPoint(v string) {
	o.StoryPoint = &v
}

// GetSubTasks returns the SubTasks field value if set, zero value otherwise.
func (o *IssueDetail) GetSubTasks() []SubTask {
	if o == nil || utils.IsNil(o.SubTasks) {
		var ret []SubTask
		return ret
	}
	return o.SubTasks
}

// GetSubTasksOk returns a tuple with the SubTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueDetail) GetSubTasksOk() ([]SubTask, bool) {
	if o == nil || utils.IsNil(o.SubTasks) {
		return nil, false
	}
	return o.SubTasks, true
}

// HasSubTasks returns a boolean if a field has been set.
func (o *IssueDetail) HasSubTasks() bool {
	if o != nil && !utils.IsNil(o.SubTasks) {
		return true
	}

	return false
}

// SetSubTasks gets a reference to the given []SubTask and assigns it to the SubTasks field.
func (o *IssueDetail) SetSubTasks(v []SubTask) {
	o.SubTasks = v
}

// GetThirdLinks returns the ThirdLinks field value if set, zero value otherwise.
func (o *IssueDetail) GetThirdLinks() []IssueThirdLink {
	if o == nil || utils.IsNil(o.ThirdLinks) {
		var ret []IssueThirdLink
		return ret
	}
	return o.ThirdLinks
}

// GetThirdLinksOk returns a tuple with the ThirdLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueDetail) GetThirdLinksOk() ([]IssueThirdLink, bool) {
	if o == nil || utils.IsNil(o.ThirdLinks) {
		return nil, false
	}
	return o.ThirdLinks, true
}

// HasThirdLinks returns a boolean if a field has been set.
func (o *IssueDetail) HasThirdLinks() bool {
	if o != nil && !utils.IsNil(o.ThirdLinks) {
		return true
	}

	return false
}

// SetThirdLinks gets a reference to the given []IssueThirdLink and assigns it to the ThirdLinks field.
func (o *IssueDetail) SetThirdLinks(v []IssueThirdLink) {
	o.ThirdLinks = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IssueDetail) GetType() string {
	if o == nil || utils.IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueDetail) GetTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IssueDetail) HasType() bool {
	if o != nil && !utils.IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *IssueDetail) SetType(v string) {
	o.Type = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *IssueDetail) GetUpdatedAt() int64 {
	if o == nil || utils.IsNil(o.UpdatedAt) {
		var ret int64
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueDetail) GetUpdatedAtOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *IssueDetail) HasUpdatedAt() bool {
	if o != nil && !utils.IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given int64 and assigns it to the UpdatedAt field.
func (o *IssueDetail) SetUpdatedAt(v int64) {
	o.UpdatedAt = &v
}

// GetWatchers returns the Watchers field value if set, zero value otherwise.
func (o *IssueDetail) GetWatchers() []User {
	if o == nil || utils.IsNil(o.Watchers) {
		var ret []User
		return ret
	}
	return o.Watchers
}

// GetWatchersOk returns a tuple with the Watchers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueDetail) GetWatchersOk() ([]User, bool) {
	if o == nil || utils.IsNil(o.Watchers) {
		return nil, false
	}
	return o.Watchers, true
}

// HasWatchers returns a boolean if a field has been set.
func (o *IssueDetail) HasWatchers() bool {
	if o != nil && !utils.IsNil(o.Watchers) {
		return true
	}

	return false
}

// SetWatchers gets a reference to the given []User and assigns it to the Watchers field.
func (o *IssueDetail) SetWatchers(v []User) {
	o.Watchers = v
}

// GetWorkingHours returns the WorkingHours field value if set, zero value otherwise.
func (o *IssueDetail) GetWorkingHours() float32 {
	if o == nil || utils.IsNil(o.WorkingHours) {
		var ret float32
		return ret
	}
	return *o.WorkingHours
}

// GetWorkingHoursOk returns a tuple with the WorkingHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueDetail) GetWorkingHoursOk() (*float32, bool) {
	if o == nil || utils.IsNil(o.WorkingHours) {
		return nil, false
	}
	return o.WorkingHours, true
}

// HasWorkingHours returns a boolean if a field has been set.
func (o *IssueDetail) HasWorkingHours() bool {
	if o != nil && !utils.IsNil(o.WorkingHours) {
		return true
	}

	return false
}

// SetWorkingHours gets a reference to the given float32 and assigns it to the WorkingHours field.
func (o *IssueDetail) SetWorkingHours(v float32) {
	o.WorkingHours = &v
}

// GetAssignees returns the Assignees field value if set, zero value otherwise.
func (o *IssueDetail) GetAssignees() []User {
	if o == nil || utils.IsNil(o.Assignees) {
		var ret []User
		return ret
	}
	return o.Assignees
}

// GetAssigneesOk returns a tuple with the Assignees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueDetail) GetAssigneesOk() ([]User, bool) {
	if o == nil || utils.IsNil(o.Assignees) {
		return nil, false
	}
	return o.Assignees, true
}

// HasAssignees returns a boolean if a field has been set.
func (o *IssueDetail) HasAssignees() bool {
	if o != nil && !utils.IsNil(o.Assignees) {
		return true
	}

	return false
}

// SetAssignees gets a reference to the given []User and assigns it to the Assignees field.
func (o *IssueDetail) SetAssignees(v []User) {
	o.Assignees = v
}

func (o IssueDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IssueDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Assignee) {
		toSerialize["Assignee"] = o.Assignee
	}
	if !utils.IsNil(o.Code) {
		toSerialize["Code"] = o.Code
	}
	if !utils.IsNil(o.CompletedAt) {
		toSerialize["CompletedAt"] = o.CompletedAt
	}
	if !utils.IsNil(o.CreatedAt) {
		toSerialize["CreatedAt"] = o.CreatedAt
	}
	if !utils.IsNil(o.Creator) {
		toSerialize["Creator"] = o.Creator
	}
	if !utils.IsNil(o.CustomFields) {
		toSerialize["CustomFields"] = o.CustomFields
	}
	if !utils.IsNil(o.DefectType) {
		toSerialize["DefectType"] = o.DefectType
	}
	if !utils.IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !utils.IsNil(o.DueDate) {
		toSerialize["DueDate"] = o.DueDate
	}
	if !utils.IsNil(o.Epic) {
		toSerialize["Epic"] = o.Epic
	}
	if !utils.IsNil(o.Files) {
		toSerialize["Files"] = o.Files
	}
	if !utils.IsNil(o.IssueStatusId) {
		toSerialize["IssueStatusId"] = o.IssueStatusId
	}
	if !utils.IsNil(o.IssueStatusName) {
		toSerialize["IssueStatusName"] = o.IssueStatusName
	}
	if !utils.IsNil(o.IssueStatusType) {
		toSerialize["IssueStatusType"] = o.IssueStatusType
	}
	if !utils.IsNil(o.IssueTypeDetail) {
		toSerialize["IssueTypeDetail"] = o.IssueTypeDetail
	}
	if !utils.IsNil(o.IssueTypeId) {
		toSerialize["IssueTypeId"] = o.IssueTypeId
	}
	if !utils.IsNil(o.Iteration) {
		toSerialize["Iteration"] = o.Iteration
	}
	if !utils.IsNil(o.IterationId) {
		toSerialize["IterationId"] = o.IterationId
	}
	if !utils.IsNil(o.Labels) {
		toSerialize["Labels"] = o.Labels
	}
	if !utils.IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !utils.IsNil(o.Parent) {
		toSerialize["Parent"] = o.Parent
	}
	if !utils.IsNil(o.ParentType) {
		toSerialize["ParentType"] = o.ParentType
	}
	if !utils.IsNil(o.Priority) {
		toSerialize["Priority"] = o.Priority
	}
	if !utils.IsNil(o.Project) {
		toSerialize["Project"] = o.Project
	}
	if !utils.IsNil(o.ProjectModule) {
		toSerialize["ProjectModule"] = o.ProjectModule
	}
	if !utils.IsNil(o.RequirementType) {
		toSerialize["RequirementType"] = o.RequirementType
	}
	if !utils.IsNil(o.StartDate) {
		toSerialize["StartDate"] = o.StartDate
	}
	if !utils.IsNil(o.StoryPoint) {
		toSerialize["StoryPoint"] = o.StoryPoint
	}
	if !utils.IsNil(o.SubTasks) {
		toSerialize["SubTasks"] = o.SubTasks
	}
	if !utils.IsNil(o.ThirdLinks) {
		toSerialize["ThirdLinks"] = o.ThirdLinks
	}
	if !utils.IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	if !utils.IsNil(o.UpdatedAt) {
		toSerialize["UpdatedAt"] = o.UpdatedAt
	}
	if !utils.IsNil(o.Watchers) {
		toSerialize["Watchers"] = o.Watchers
	}
	if !utils.IsNil(o.WorkingHours) {
		toSerialize["WorkingHours"] = o.WorkingHours
	}
	if !utils.IsNil(o.Assignees) {
		toSerialize["Assignees"] = o.Assignees
	}
	return toSerialize, nil
}

type NullableIssueDetail struct {
	value *IssueDetail
	isSet bool
}

func (v NullableIssueDetail) Get() *IssueDetail {
	return v.value
}

func (v *NullableIssueDetail) Set(val *IssueDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueDetail(val *IssueDetail) *NullableIssueDetail {
	return &NullableIssueDetail{value: val, isSet: true}
}

func (v NullableIssueDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


