/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the CreateReadOnlyRefRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CreateReadOnlyRefRequest{}

// CreateReadOnlyRefRequest struct for CreateReadOnlyRefRequest
type CreateReadOnlyRefRequest struct {
	// 仓库路径
	DepotPath string `json:"DepotPath"`
	// 分支名称
	RefName string `json:"RefName"`
}

type _CreateReadOnlyRefRequest CreateReadOnlyRefRequest

// NewCreateReadOnlyRefRequest instantiates a new CreateReadOnlyRefRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateReadOnlyRefRequest(depotPath string, refName string) *CreateReadOnlyRefRequest {
	this := CreateReadOnlyRefRequest{}
	this.DepotPath = depotPath
	this.RefName = refName
	return &this
}

// NewCreateReadOnlyRefRequestWithDefaults instantiates a new CreateReadOnlyRefRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateReadOnlyRefRequestWithDefaults() *CreateReadOnlyRefRequest {
	this := CreateReadOnlyRefRequest{}
	return &this
}

// GetDepotPath returns the DepotPath field value
func (o *CreateReadOnlyRefRequest) GetDepotPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DepotPath
}

// GetDepotPathOk returns a tuple with the DepotPath field value
// and a boolean to check if the value has been set.
func (o *CreateReadOnlyRefRequest) GetDepotPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepotPath, true
}

// SetDepotPath sets field value
func (o *CreateReadOnlyRefRequest) SetDepotPath(v string) {
	o.DepotPath = v
}

// GetRefName returns the RefName field value
func (o *CreateReadOnlyRefRequest) GetRefName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RefName
}

// GetRefNameOk returns a tuple with the RefName field value
// and a boolean to check if the value has been set.
func (o *CreateReadOnlyRefRequest) GetRefNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RefName, true
}

// SetRefName sets field value
func (o *CreateReadOnlyRefRequest) SetRefName(v string) {
	o.RefName = v
}

func (o CreateReadOnlyRefRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateReadOnlyRefRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["DepotPath"] = o.DepotPath
	toSerialize["RefName"] = o.RefName
	return toSerialize, nil
}

func (o *CreateReadOnlyRefRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"DepotPath",
		"RefName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateReadOnlyRefRequest := _CreateReadOnlyRefRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateReadOnlyRefRequest)

	if err != nil {
		return err
	}

	*o = CreateReadOnlyRefRequest(varCreateReadOnlyRefRequest)

	return err
}

type NullableCreateReadOnlyRefRequest struct {
	value *CreateReadOnlyRefRequest
	isSet bool
}

func (v NullableCreateReadOnlyRefRequest) Get() *CreateReadOnlyRefRequest {
	return v.value
}

func (v *NullableCreateReadOnlyRefRequest) Set(val *CreateReadOnlyRefRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateReadOnlyRefRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateReadOnlyRefRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateReadOnlyRefRequest(val *CreateReadOnlyRefRequest) *NullableCreateReadOnlyRefRequest {
	return &NullableCreateReadOnlyRefRequest{value: val, isSet: true}
}

func (v NullableCreateReadOnlyRefRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateReadOnlyRefRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


