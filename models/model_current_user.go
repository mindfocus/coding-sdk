/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the CurrentUser type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CurrentUser{}

// CurrentUser 当前用户信息
type CurrentUser struct {
	// 头像地址
	Avatar utils.NullableString `json:"Avatar,omitempty"`
	// 邮箱
	Email utils.NullableString `json:"Email,omitempty"`
	// 邮箱是否已验证
	EmailValidation utils.NullableInt64 `json:"EmailValidation,omitempty"`
	// 用户唯一标志
	GlobalKey utils.NullableString `json:"GlobalKey,omitempty"`
	// 无用头像
	Gravatar utils.NullableString `json:"Gravatar,omitempty"`
	// 用户 ID
	Id *int64 `json:"Id,omitempty"`
	// 姓名
	Name utils.NullableString `json:"Name,omitempty"`
	// 姓名拼音
	NamePinYin utils.NullableString `json:"NamePinYin,omitempty"`
	// 联系电话
	Phone utils.NullableString `json:"Phone,omitempty"`
	// 手机号地区
	PhoneRegionCode utils.NullableString `json:"PhoneRegionCode,omitempty"`
	// 手机是否已验证
	PhoneValidation utils.NullableInt64 `json:"PhoneValidation,omitempty"`
	// 区号
	Region utils.NullableString `json:"Region,omitempty"`
	// 状态(新用户/已激活)
	Status utils.NullableInt64 `json:"Status,omitempty"`
	// 团队 ID
	TeamId utils.NullableInt64 `json:"TeamId,omitempty"`
	// 企微id
	WeComId utils.NullableString `json:"WeComId,omitempty"`
}

// NewCurrentUser instantiates a new CurrentUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrentUser() *CurrentUser {
	this := CurrentUser{}
	var avatar string = ""
	this.Avatar = *utils.NewNullableString(&avatar)
	var email string = ""
	this.Email = *utils.NewNullableString(&email)
	var globalKey string = ""
	this.GlobalKey = *utils.NewNullableString(&globalKey)
	var gravatar string = ""
	this.Gravatar = *utils.NewNullableString(&gravatar)
	var name string = ""
	this.Name = *utils.NewNullableString(&name)
	var namePinYin string = ""
	this.NamePinYin = *utils.NewNullableString(&namePinYin)
	var phone string = ""
	this.Phone = *utils.NewNullableString(&phone)
	var phoneRegionCode string = ""
	this.PhoneRegionCode = *utils.NewNullableString(&phoneRegionCode)
	var region string = ""
	this.Region = *utils.NewNullableString(&region)
	var weComId string = ""
	this.WeComId = *utils.NewNullableString(&weComId)
	return &this
}

// NewCurrentUserWithDefaults instantiates a new CurrentUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrentUserWithDefaults() *CurrentUser {
	this := CurrentUser{}
	var avatar string = ""
	this.Avatar = *utils.NewNullableString(&avatar)
	var email string = ""
	this.Email = *utils.NewNullableString(&email)
	var globalKey string = ""
	this.GlobalKey = *utils.NewNullableString(&globalKey)
	var gravatar string = ""
	this.Gravatar = *utils.NewNullableString(&gravatar)
	var name string = ""
	this.Name = *utils.NewNullableString(&name)
	var namePinYin string = ""
	this.NamePinYin = *utils.NewNullableString(&namePinYin)
	var phone string = ""
	this.Phone = *utils.NewNullableString(&phone)
	var phoneRegionCode string = ""
	this.PhoneRegionCode = *utils.NewNullableString(&phoneRegionCode)
	var region string = ""
	this.Region = *utils.NewNullableString(&region)
	var weComId string = ""
	this.WeComId = *utils.NewNullableString(&weComId)
	return &this
}

// GetAvatar returns the Avatar field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrentUser) GetAvatar() string {
	if o == nil || utils.IsNil(o.Avatar.Get()) {
		var ret string
		return ret
	}
	return *o.Avatar.Get()
}

// GetAvatarOk returns a tuple with the Avatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrentUser) GetAvatarOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Avatar.Get(), o.Avatar.IsSet()
}

// HasAvatar returns a boolean if a field has been set.
func (o *CurrentUser) HasAvatar() bool {
	if o != nil && o.Avatar.IsSet() {
		return true
	}

	return false
}

// SetAvatar gets a reference to the given utils.NullableString and assigns it to the Avatar field.
func (o *CurrentUser) SetAvatar(v string) {
	o.Avatar.Set(&v)
}
// SetAvatarNil sets the value for Avatar to be an explicit nil
func (o *CurrentUser) SetAvatarNil() {
	o.Avatar.Set(nil)
}

// UnsetAvatar ensures that no value is present for Avatar, not even an explicit nil
func (o *CurrentUser) UnsetAvatar() {
	o.Avatar.Unset()
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrentUser) GetEmail() string {
	if o == nil || utils.IsNil(o.Email.Get()) {
		var ret string
		return ret
	}
	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrentUser) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// HasEmail returns a boolean if a field has been set.
func (o *CurrentUser) HasEmail() bool {
	if o != nil && o.Email.IsSet() {
		return true
	}

	return false
}

// SetEmail gets a reference to the given utils.NullableString and assigns it to the Email field.
func (o *CurrentUser) SetEmail(v string) {
	o.Email.Set(&v)
}
// SetEmailNil sets the value for Email to be an explicit nil
func (o *CurrentUser) SetEmailNil() {
	o.Email.Set(nil)
}

// UnsetEmail ensures that no value is present for Email, not even an explicit nil
func (o *CurrentUser) UnsetEmail() {
	o.Email.Unset()
}

// GetEmailValidation returns the EmailValidation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrentUser) GetEmailValidation() int64 {
	if o == nil || utils.IsNil(o.EmailValidation.Get()) {
		var ret int64
		return ret
	}
	return *o.EmailValidation.Get()
}

// GetEmailValidationOk returns a tuple with the EmailValidation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrentUser) GetEmailValidationOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmailValidation.Get(), o.EmailValidation.IsSet()
}

// HasEmailValidation returns a boolean if a field has been set.
func (o *CurrentUser) HasEmailValidation() bool {
	if o != nil && o.EmailValidation.IsSet() {
		return true
	}

	return false
}

// SetEmailValidation gets a reference to the given utils.NullableInt64 and assigns it to the EmailValidation field.
func (o *CurrentUser) SetEmailValidation(v int64) {
	o.EmailValidation.Set(&v)
}
// SetEmailValidationNil sets the value for EmailValidation to be an explicit nil
func (o *CurrentUser) SetEmailValidationNil() {
	o.EmailValidation.Set(nil)
}

// UnsetEmailValidation ensures that no value is present for EmailValidation, not even an explicit nil
func (o *CurrentUser) UnsetEmailValidation() {
	o.EmailValidation.Unset()
}

// GetGlobalKey returns the GlobalKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrentUser) GetGlobalKey() string {
	if o == nil || utils.IsNil(o.GlobalKey.Get()) {
		var ret string
		return ret
	}
	return *o.GlobalKey.Get()
}

// GetGlobalKeyOk returns a tuple with the GlobalKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrentUser) GetGlobalKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GlobalKey.Get(), o.GlobalKey.IsSet()
}

// HasGlobalKey returns a boolean if a field has been set.
func (o *CurrentUser) HasGlobalKey() bool {
	if o != nil && o.GlobalKey.IsSet() {
		return true
	}

	return false
}

// SetGlobalKey gets a reference to the given utils.NullableString and assigns it to the GlobalKey field.
func (o *CurrentUser) SetGlobalKey(v string) {
	o.GlobalKey.Set(&v)
}
// SetGlobalKeyNil sets the value for GlobalKey to be an explicit nil
func (o *CurrentUser) SetGlobalKeyNil() {
	o.GlobalKey.Set(nil)
}

// UnsetGlobalKey ensures that no value is present for GlobalKey, not even an explicit nil
func (o *CurrentUser) UnsetGlobalKey() {
	o.GlobalKey.Unset()
}

// GetGravatar returns the Gravatar field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrentUser) GetGravatar() string {
	if o == nil || utils.IsNil(o.Gravatar.Get()) {
		var ret string
		return ret
	}
	return *o.Gravatar.Get()
}

// GetGravatarOk returns a tuple with the Gravatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrentUser) GetGravatarOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Gravatar.Get(), o.Gravatar.IsSet()
}

// HasGravatar returns a boolean if a field has been set.
func (o *CurrentUser) HasGravatar() bool {
	if o != nil && o.Gravatar.IsSet() {
		return true
	}

	return false
}

// SetGravatar gets a reference to the given utils.NullableString and assigns it to the Gravatar field.
func (o *CurrentUser) SetGravatar(v string) {
	o.Gravatar.Set(&v)
}
// SetGravatarNil sets the value for Gravatar to be an explicit nil
func (o *CurrentUser) SetGravatarNil() {
	o.Gravatar.Set(nil)
}

// UnsetGravatar ensures that no value is present for Gravatar, not even an explicit nil
func (o *CurrentUser) UnsetGravatar() {
	o.Gravatar.Unset()
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CurrentUser) GetId() int64 {
	if o == nil || utils.IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentUser) GetIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CurrentUser) HasId() bool {
	if o != nil && !utils.IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *CurrentUser) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrentUser) GetName() string {
	if o == nil || utils.IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrentUser) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *CurrentUser) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given utils.NullableString and assigns it to the Name field.
func (o *CurrentUser) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *CurrentUser) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *CurrentUser) UnsetName() {
	o.Name.Unset()
}

// GetNamePinYin returns the NamePinYin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrentUser) GetNamePinYin() string {
	if o == nil || utils.IsNil(o.NamePinYin.Get()) {
		var ret string
		return ret
	}
	return *o.NamePinYin.Get()
}

// GetNamePinYinOk returns a tuple with the NamePinYin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrentUser) GetNamePinYinOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NamePinYin.Get(), o.NamePinYin.IsSet()
}

// HasNamePinYin returns a boolean if a field has been set.
func (o *CurrentUser) HasNamePinYin() bool {
	if o != nil && o.NamePinYin.IsSet() {
		return true
	}

	return false
}

// SetNamePinYin gets a reference to the given utils.NullableString and assigns it to the NamePinYin field.
func (o *CurrentUser) SetNamePinYin(v string) {
	o.NamePinYin.Set(&v)
}
// SetNamePinYinNil sets the value for NamePinYin to be an explicit nil
func (o *CurrentUser) SetNamePinYinNil() {
	o.NamePinYin.Set(nil)
}

// UnsetNamePinYin ensures that no value is present for NamePinYin, not even an explicit nil
func (o *CurrentUser) UnsetNamePinYin() {
	o.NamePinYin.Unset()
}

// GetPhone returns the Phone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrentUser) GetPhone() string {
	if o == nil || utils.IsNil(o.Phone.Get()) {
		var ret string
		return ret
	}
	return *o.Phone.Get()
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrentUser) GetPhoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Phone.Get(), o.Phone.IsSet()
}

// HasPhone returns a boolean if a field has been set.
func (o *CurrentUser) HasPhone() bool {
	if o != nil && o.Phone.IsSet() {
		return true
	}

	return false
}

// SetPhone gets a reference to the given utils.NullableString and assigns it to the Phone field.
func (o *CurrentUser) SetPhone(v string) {
	o.Phone.Set(&v)
}
// SetPhoneNil sets the value for Phone to be an explicit nil
func (o *CurrentUser) SetPhoneNil() {
	o.Phone.Set(nil)
}

// UnsetPhone ensures that no value is present for Phone, not even an explicit nil
func (o *CurrentUser) UnsetPhone() {
	o.Phone.Unset()
}

// GetPhoneRegionCode returns the PhoneRegionCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrentUser) GetPhoneRegionCode() string {
	if o == nil || utils.IsNil(o.PhoneRegionCode.Get()) {
		var ret string
		return ret
	}
	return *o.PhoneRegionCode.Get()
}

// GetPhoneRegionCodeOk returns a tuple with the PhoneRegionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrentUser) GetPhoneRegionCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PhoneRegionCode.Get(), o.PhoneRegionCode.IsSet()
}

// HasPhoneRegionCode returns a boolean if a field has been set.
func (o *CurrentUser) HasPhoneRegionCode() bool {
	if o != nil && o.PhoneRegionCode.IsSet() {
		return true
	}

	return false
}

// SetPhoneRegionCode gets a reference to the given utils.NullableString and assigns it to the PhoneRegionCode field.
func (o *CurrentUser) SetPhoneRegionCode(v string) {
	o.PhoneRegionCode.Set(&v)
}
// SetPhoneRegionCodeNil sets the value for PhoneRegionCode to be an explicit nil
func (o *CurrentUser) SetPhoneRegionCodeNil() {
	o.PhoneRegionCode.Set(nil)
}

// UnsetPhoneRegionCode ensures that no value is present for PhoneRegionCode, not even an explicit nil
func (o *CurrentUser) UnsetPhoneRegionCode() {
	o.PhoneRegionCode.Unset()
}

// GetPhoneValidation returns the PhoneValidation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrentUser) GetPhoneValidation() int64 {
	if o == nil || utils.IsNil(o.PhoneValidation.Get()) {
		var ret int64
		return ret
	}
	return *o.PhoneValidation.Get()
}

// GetPhoneValidationOk returns a tuple with the PhoneValidation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrentUser) GetPhoneValidationOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.PhoneValidation.Get(), o.PhoneValidation.IsSet()
}

// HasPhoneValidation returns a boolean if a field has been set.
func (o *CurrentUser) HasPhoneValidation() bool {
	if o != nil && o.PhoneValidation.IsSet() {
		return true
	}

	return false
}

// SetPhoneValidation gets a reference to the given utils.NullableInt64 and assigns it to the PhoneValidation field.
func (o *CurrentUser) SetPhoneValidation(v int64) {
	o.PhoneValidation.Set(&v)
}
// SetPhoneValidationNil sets the value for PhoneValidation to be an explicit nil
func (o *CurrentUser) SetPhoneValidationNil() {
	o.PhoneValidation.Set(nil)
}

// UnsetPhoneValidation ensures that no value is present for PhoneValidation, not even an explicit nil
func (o *CurrentUser) UnsetPhoneValidation() {
	o.PhoneValidation.Unset()
}

// GetRegion returns the Region field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrentUser) GetRegion() string {
	if o == nil || utils.IsNil(o.Region.Get()) {
		var ret string
		return ret
	}
	return *o.Region.Get()
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrentUser) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Region.Get(), o.Region.IsSet()
}

// HasRegion returns a boolean if a field has been set.
func (o *CurrentUser) HasRegion() bool {
	if o != nil && o.Region.IsSet() {
		return true
	}

	return false
}

// SetRegion gets a reference to the given utils.NullableString and assigns it to the Region field.
func (o *CurrentUser) SetRegion(v string) {
	o.Region.Set(&v)
}
// SetRegionNil sets the value for Region to be an explicit nil
func (o *CurrentUser) SetRegionNil() {
	o.Region.Set(nil)
}

// UnsetRegion ensures that no value is present for Region, not even an explicit nil
func (o *CurrentUser) UnsetRegion() {
	o.Region.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrentUser) GetStatus() int64 {
	if o == nil || utils.IsNil(o.Status.Get()) {
		var ret int64
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrentUser) GetStatusOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *CurrentUser) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given utils.NullableInt64 and assigns it to the Status field.
func (o *CurrentUser) SetStatus(v int64) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *CurrentUser) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *CurrentUser) UnsetStatus() {
	o.Status.Unset()
}

// GetTeamId returns the TeamId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrentUser) GetTeamId() int64 {
	if o == nil || utils.IsNil(o.TeamId.Get()) {
		var ret int64
		return ret
	}
	return *o.TeamId.Get()
}

// GetTeamIdOk returns a tuple with the TeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrentUser) GetTeamIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TeamId.Get(), o.TeamId.IsSet()
}

// HasTeamId returns a boolean if a field has been set.
func (o *CurrentUser) HasTeamId() bool {
	if o != nil && o.TeamId.IsSet() {
		return true
	}

	return false
}

// SetTeamId gets a reference to the given utils.NullableInt64 and assigns it to the TeamId field.
func (o *CurrentUser) SetTeamId(v int64) {
	o.TeamId.Set(&v)
}
// SetTeamIdNil sets the value for TeamId to be an explicit nil
func (o *CurrentUser) SetTeamIdNil() {
	o.TeamId.Set(nil)
}

// UnsetTeamId ensures that no value is present for TeamId, not even an explicit nil
func (o *CurrentUser) UnsetTeamId() {
	o.TeamId.Unset()
}

// GetWeComId returns the WeComId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrentUser) GetWeComId() string {
	if o == nil || utils.IsNil(o.WeComId.Get()) {
		var ret string
		return ret
	}
	return *o.WeComId.Get()
}

// GetWeComIdOk returns a tuple with the WeComId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrentUser) GetWeComIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WeComId.Get(), o.WeComId.IsSet()
}

// HasWeComId returns a boolean if a field has been set.
func (o *CurrentUser) HasWeComId() bool {
	if o != nil && o.WeComId.IsSet() {
		return true
	}

	return false
}

// SetWeComId gets a reference to the given utils.NullableString and assigns it to the WeComId field.
func (o *CurrentUser) SetWeComId(v string) {
	o.WeComId.Set(&v)
}
// SetWeComIdNil sets the value for WeComId to be an explicit nil
func (o *CurrentUser) SetWeComIdNil() {
	o.WeComId.Set(nil)
}

// UnsetWeComId ensures that no value is present for WeComId, not even an explicit nil
func (o *CurrentUser) UnsetWeComId() {
	o.WeComId.Unset()
}

func (o CurrentUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CurrentUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Avatar.IsSet() {
		toSerialize["Avatar"] = o.Avatar.Get()
	}
	if o.Email.IsSet() {
		toSerialize["Email"] = o.Email.Get()
	}
	if o.EmailValidation.IsSet() {
		toSerialize["EmailValidation"] = o.EmailValidation.Get()
	}
	if o.GlobalKey.IsSet() {
		toSerialize["GlobalKey"] = o.GlobalKey.Get()
	}
	if o.Gravatar.IsSet() {
		toSerialize["Gravatar"] = o.Gravatar.Get()
	}
	if !utils.IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if o.Name.IsSet() {
		toSerialize["Name"] = o.Name.Get()
	}
	if o.NamePinYin.IsSet() {
		toSerialize["NamePinYin"] = o.NamePinYin.Get()
	}
	if o.Phone.IsSet() {
		toSerialize["Phone"] = o.Phone.Get()
	}
	if o.PhoneRegionCode.IsSet() {
		toSerialize["PhoneRegionCode"] = o.PhoneRegionCode.Get()
	}
	if o.PhoneValidation.IsSet() {
		toSerialize["PhoneValidation"] = o.PhoneValidation.Get()
	}
	if o.Region.IsSet() {
		toSerialize["Region"] = o.Region.Get()
	}
	if o.Status.IsSet() {
		toSerialize["Status"] = o.Status.Get()
	}
	if o.TeamId.IsSet() {
		toSerialize["TeamId"] = o.TeamId.Get()
	}
	if o.WeComId.IsSet() {
		toSerialize["WeComId"] = o.WeComId.Get()
	}
	return toSerialize, nil
}

type NullableCurrentUser struct {
	value *CurrentUser
	isSet bool
}

func (v NullableCurrentUser) Get() *CurrentUser {
	return v.value
}

func (v *NullableCurrentUser) Set(val *CurrentUser) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrentUser) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrentUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrentUser(val *CurrentUser) *NullableCurrentUser {
	return &NullableCurrentUser{value: val, isSet: true}
}

func (v NullableCurrentUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrentUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


