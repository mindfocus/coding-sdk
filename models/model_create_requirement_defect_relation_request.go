/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the CreateRequirementDefectRelationRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CreateRequirementDefectRelationRequest{}

// CreateRequirementDefectRelationRequest struct for CreateRequirementDefectRelationRequest
type CreateRequirementDefectRelationRequest struct {
	// 缺陷 Code
	DefectCode int64 `json:"DefectCode"`
	// 项目名称
	ProjectName string `json:"ProjectName"`
	// 需求 Code
	RequirementCode int64 `json:"RequirementCode"`
}

type _CreateRequirementDefectRelationRequest CreateRequirementDefectRelationRequest

// NewCreateRequirementDefectRelationRequest instantiates a new CreateRequirementDefectRelationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateRequirementDefectRelationRequest(defectCode int64, projectName string, requirementCode int64) *CreateRequirementDefectRelationRequest {
	this := CreateRequirementDefectRelationRequest{}
	this.DefectCode = defectCode
	this.ProjectName = projectName
	this.RequirementCode = requirementCode
	return &this
}

// NewCreateRequirementDefectRelationRequestWithDefaults instantiates a new CreateRequirementDefectRelationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateRequirementDefectRelationRequestWithDefaults() *CreateRequirementDefectRelationRequest {
	this := CreateRequirementDefectRelationRequest{}
	return &this
}

// GetDefectCode returns the DefectCode field value
func (o *CreateRequirementDefectRelationRequest) GetDefectCode() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DefectCode
}

// GetDefectCodeOk returns a tuple with the DefectCode field value
// and a boolean to check if the value has been set.
func (o *CreateRequirementDefectRelationRequest) GetDefectCodeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefectCode, true
}

// SetDefectCode sets field value
func (o *CreateRequirementDefectRelationRequest) SetDefectCode(v int64) {
	o.DefectCode = v
}

// GetProjectName returns the ProjectName field value
func (o *CreateRequirementDefectRelationRequest) GetProjectName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value
// and a boolean to check if the value has been set.
func (o *CreateRequirementDefectRelationRequest) GetProjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectName, true
}

// SetProjectName sets field value
func (o *CreateRequirementDefectRelationRequest) SetProjectName(v string) {
	o.ProjectName = v
}

// GetRequirementCode returns the RequirementCode field value
func (o *CreateRequirementDefectRelationRequest) GetRequirementCode() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.RequirementCode
}

// GetRequirementCodeOk returns a tuple with the RequirementCode field value
// and a boolean to check if the value has been set.
func (o *CreateRequirementDefectRelationRequest) GetRequirementCodeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequirementCode, true
}

// SetRequirementCode sets field value
func (o *CreateRequirementDefectRelationRequest) SetRequirementCode(v int64) {
	o.RequirementCode = v
}

func (o CreateRequirementDefectRelationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateRequirementDefectRelationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["DefectCode"] = o.DefectCode
	toSerialize["ProjectName"] = o.ProjectName
	toSerialize["RequirementCode"] = o.RequirementCode
	return toSerialize, nil
}

func (o *CreateRequirementDefectRelationRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"DefectCode",
		"ProjectName",
		"RequirementCode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateRequirementDefectRelationRequest := _CreateRequirementDefectRelationRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateRequirementDefectRelationRequest)

	if err != nil {
		return err
	}

	*o = CreateRequirementDefectRelationRequest(varCreateRequirementDefectRelationRequest)

	return err
}

type NullableCreateRequirementDefectRelationRequest struct {
	value *CreateRequirementDefectRelationRequest
	isSet bool
}

func (v NullableCreateRequirementDefectRelationRequest) Get() *CreateRequirementDefectRelationRequest {
	return v.value
}

func (v *NullableCreateRequirementDefectRelationRequest) Set(val *CreateRequirementDefectRelationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRequirementDefectRelationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRequirementDefectRelationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRequirementDefectRelationRequest(val *CreateRequirementDefectRelationRequest) *NullableCreateRequirementDefectRelationRequest {
	return &NullableCreateRequirementDefectRelationRequest{value: val, isSet: true}
}

func (v NullableCreateRequirementDefectRelationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRequirementDefectRelationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


