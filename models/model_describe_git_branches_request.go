/*
CODING OPEN API

  

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DescribeGitBranchesRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DescribeGitBranchesRequest{}

// DescribeGitBranchesRequest struct for DescribeGitBranchesRequest
type DescribeGitBranchesRequest struct {
	// 仓库id
	DepotId int64 `json:"DepotId"`
	// 仓库路径，与DepotId二选一即可
	DepotPath *string `json:"DepotPath,omitempty"`
	// 查询的关键词
	KeyWord *string `json:"KeyWord,omitempty"`
	// 分页页码
	PageNumber *int64 `json:"PageNumber,omitempty"`
	// 分页页距,默认为10
	PageSize *int64 `json:"PageSize,omitempty"`
}

type _DescribeGitBranchesRequest DescribeGitBranchesRequest

// NewDescribeGitBranchesRequest instantiates a new DescribeGitBranchesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeGitBranchesRequest(depotId int64) *DescribeGitBranchesRequest {
	this := DescribeGitBranchesRequest{}
	this.DepotId = depotId
	return &this
}

// NewDescribeGitBranchesRequestWithDefaults instantiates a new DescribeGitBranchesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeGitBranchesRequestWithDefaults() *DescribeGitBranchesRequest {
	this := DescribeGitBranchesRequest{}
	return &this
}

// GetDepotId returns the DepotId field value
func (o *DescribeGitBranchesRequest) GetDepotId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DepotId
}

// GetDepotIdOk returns a tuple with the DepotId field value
// and a boolean to check if the value has been set.
func (o *DescribeGitBranchesRequest) GetDepotIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepotId, true
}

// SetDepotId sets field value
func (o *DescribeGitBranchesRequest) SetDepotId(v int64) {
	o.DepotId = v
}

// GetDepotPath returns the DepotPath field value if set, zero value otherwise.
func (o *DescribeGitBranchesRequest) GetDepotPath() string {
	if o == nil || utils.IsNil(o.DepotPath) {
		var ret string
		return ret
	}
	return *o.DepotPath
}

// GetDepotPathOk returns a tuple with the DepotPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeGitBranchesRequest) GetDepotPathOk() (*string, bool) {
	if o == nil || utils.IsNil(o.DepotPath) {
		return nil, false
	}
	return o.DepotPath, true
}

// HasDepotPath returns a boolean if a field has been set.
func (o *DescribeGitBranchesRequest) HasDepotPath() bool {
	if o != nil && !utils.IsNil(o.DepotPath) {
		return true
	}

	return false
}

// SetDepotPath gets a reference to the given string and assigns it to the DepotPath field.
func (o *DescribeGitBranchesRequest) SetDepotPath(v string) {
	o.DepotPath = &v
}

// GetKeyWord returns the KeyWord field value if set, zero value otherwise.
func (o *DescribeGitBranchesRequest) GetKeyWord() string {
	if o == nil || utils.IsNil(o.KeyWord) {
		var ret string
		return ret
	}
	return *o.KeyWord
}

// GetKeyWordOk returns a tuple with the KeyWord field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeGitBranchesRequest) GetKeyWordOk() (*string, bool) {
	if o == nil || utils.IsNil(o.KeyWord) {
		return nil, false
	}
	return o.KeyWord, true
}

// HasKeyWord returns a boolean if a field has been set.
func (o *DescribeGitBranchesRequest) HasKeyWord() bool {
	if o != nil && !utils.IsNil(o.KeyWord) {
		return true
	}

	return false
}

// SetKeyWord gets a reference to the given string and assigns it to the KeyWord field.
func (o *DescribeGitBranchesRequest) SetKeyWord(v string) {
	o.KeyWord = &v
}

// GetPageNumber returns the PageNumber field value if set, zero value otherwise.
func (o *DescribeGitBranchesRequest) GetPageNumber() int64 {
	if o == nil || utils.IsNil(o.PageNumber) {
		var ret int64
		return ret
	}
	return *o.PageNumber
}

// GetPageNumberOk returns a tuple with the PageNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeGitBranchesRequest) GetPageNumberOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.PageNumber) {
		return nil, false
	}
	return o.PageNumber, true
}

// HasPageNumber returns a boolean if a field has been set.
func (o *DescribeGitBranchesRequest) HasPageNumber() bool {
	if o != nil && !utils.IsNil(o.PageNumber) {
		return true
	}

	return false
}

// SetPageNumber gets a reference to the given int64 and assigns it to the PageNumber field.
func (o *DescribeGitBranchesRequest) SetPageNumber(v int64) {
	o.PageNumber = &v
}

// GetPageSize returns the PageSize field value if set, zero value otherwise.
func (o *DescribeGitBranchesRequest) GetPageSize() int64 {
	if o == nil || utils.IsNil(o.PageSize) {
		var ret int64
		return ret
	}
	return *o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeGitBranchesRequest) GetPageSizeOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.PageSize) {
		return nil, false
	}
	return o.PageSize, true
}

// HasPageSize returns a boolean if a field has been set.
func (o *DescribeGitBranchesRequest) HasPageSize() bool {
	if o != nil && !utils.IsNil(o.PageSize) {
		return true
	}

	return false
}

// SetPageSize gets a reference to the given int64 and assigns it to the PageSize field.
func (o *DescribeGitBranchesRequest) SetPageSize(v int64) {
	o.PageSize = &v
}

func (o DescribeGitBranchesRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeGitBranchesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["DepotId"] = o.DepotId
	if !utils.IsNil(o.DepotPath) {
		toSerialize["DepotPath"] = o.DepotPath
	}
	if !utils.IsNil(o.KeyWord) {
		toSerialize["KeyWord"] = o.KeyWord
	}
	if !utils.IsNil(o.PageNumber) {
		toSerialize["PageNumber"] = o.PageNumber
	}
	if !utils.IsNil(o.PageSize) {
		toSerialize["PageSize"] = o.PageSize
	}
	return toSerialize, nil
}

func (o *DescribeGitBranchesRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"DepotId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescribeGitBranchesRequest := _DescribeGitBranchesRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDescribeGitBranchesRequest)

	if err != nil {
		return err
	}

	*o = DescribeGitBranchesRequest(varDescribeGitBranchesRequest)

	return err
}

type NullableDescribeGitBranchesRequest struct {
	value *DescribeGitBranchesRequest
	isSet bool
}

func (v NullableDescribeGitBranchesRequest) Get() *DescribeGitBranchesRequest {
	return v.value
}

func (v *NullableDescribeGitBranchesRequest) Set(val *DescribeGitBranchesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeGitBranchesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeGitBranchesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeGitBranchesRequest(val *DescribeGitBranchesRequest) *NullableDescribeGitBranchesRequest {
	return &NullableDescribeGitBranchesRequest{value: val, isSet: true}
}

func (v NullableDescribeGitBranchesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeGitBranchesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


