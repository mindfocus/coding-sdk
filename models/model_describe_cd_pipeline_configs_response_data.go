/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DescribeCdPipelineConfigsResponseData type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DescribeCdPipelineConfigsResponseData{}

// DescribeCdPipelineConfigsResponseData DescribeCdPipelineConfigsResponseData 结构
type DescribeCdPipelineConfigsResponseData struct {
	// 部署流程 JSON 配置列表
	PipelineConfigs []PipelineConfig `json:"PipelineConfigs,omitempty"`
}

// NewDescribeCdPipelineConfigsResponseData instantiates a new DescribeCdPipelineConfigsResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeCdPipelineConfigsResponseData() *DescribeCdPipelineConfigsResponseData {
	this := DescribeCdPipelineConfigsResponseData{}
	return &this
}

// NewDescribeCdPipelineConfigsResponseDataWithDefaults instantiates a new DescribeCdPipelineConfigsResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeCdPipelineConfigsResponseDataWithDefaults() *DescribeCdPipelineConfigsResponseData {
	this := DescribeCdPipelineConfigsResponseData{}
	return &this
}

// GetPipelineConfigs returns the PipelineConfigs field value if set, zero value otherwise.
func (o *DescribeCdPipelineConfigsResponseData) GetPipelineConfigs() []PipelineConfig {
	if o == nil || utils.IsNil(o.PipelineConfigs) {
		var ret []PipelineConfig
		return ret
	}
	return o.PipelineConfigs
}

// GetPipelineConfigsOk returns a tuple with the PipelineConfigs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeCdPipelineConfigsResponseData) GetPipelineConfigsOk() ([]PipelineConfig, bool) {
	if o == nil || utils.IsNil(o.PipelineConfigs) {
		return nil, false
	}
	return o.PipelineConfigs, true
}

// HasPipelineConfigs returns a boolean if a field has been set.
func (o *DescribeCdPipelineConfigsResponseData) HasPipelineConfigs() bool {
	if o != nil && !utils.IsNil(o.PipelineConfigs) {
		return true
	}

	return false
}

// SetPipelineConfigs gets a reference to the given []PipelineConfig and assigns it to the PipelineConfigs field.
func (o *DescribeCdPipelineConfigsResponseData) SetPipelineConfigs(v []PipelineConfig) {
	o.PipelineConfigs = v
}

func (o DescribeCdPipelineConfigsResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeCdPipelineConfigsResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.PipelineConfigs) {
		toSerialize["PipelineConfigs"] = o.PipelineConfigs
	}
	return toSerialize, nil
}

type NullableDescribeCdPipelineConfigsResponseData struct {
	value *DescribeCdPipelineConfigsResponseData
	isSet bool
}

func (v NullableDescribeCdPipelineConfigsResponseData) Get() *DescribeCdPipelineConfigsResponseData {
	return v.value
}

func (v *NullableDescribeCdPipelineConfigsResponseData) Set(val *DescribeCdPipelineConfigsResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeCdPipelineConfigsResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeCdPipelineConfigsResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeCdPipelineConfigsResponseData(val *DescribeCdPipelineConfigsResponseData) *NullableDescribeCdPipelineConfigsResponseData {
	return &NullableDescribeCdPipelineConfigsResponseData{value: val, isSet: true}
}

func (v NullableDescribeCdPipelineConfigsResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeCdPipelineConfigsResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


