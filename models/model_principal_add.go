/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the PrincipalAdd type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &PrincipalAdd{}

// PrincipalAdd 添加项目成员主体 成员对象
type PrincipalAdd struct {
	// 权限组ID
	PolicyIds []int64 `json:"PolicyIds"`
	// 主体ID
	PrincipalId string `json:"PrincipalId"`
	// 主体类型
	PrincipalType string `json:"PrincipalType"`
}

type _PrincipalAdd PrincipalAdd

// NewPrincipalAdd instantiates a new PrincipalAdd object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrincipalAdd(policyIds []int64, principalId string, principalType string) *PrincipalAdd {
	this := PrincipalAdd{}
	this.PolicyIds = policyIds
	this.PrincipalId = principalId
	this.PrincipalType = principalType
	return &this
}

// NewPrincipalAddWithDefaults instantiates a new PrincipalAdd object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrincipalAddWithDefaults() *PrincipalAdd {
	this := PrincipalAdd{}
	var principalId string = ""
	this.PrincipalId = principalId
	var principalType string = ""
	this.PrincipalType = principalType
	return &this
}

// GetPolicyIds returns the PolicyIds field value
func (o *PrincipalAdd) GetPolicyIds() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}

	return o.PolicyIds
}

// GetPolicyIdsOk returns a tuple with the PolicyIds field value
// and a boolean to check if the value has been set.
func (o *PrincipalAdd) GetPolicyIdsOk() ([]int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.PolicyIds, true
}

// SetPolicyIds sets field value
func (o *PrincipalAdd) SetPolicyIds(v []int64) {
	o.PolicyIds = v
}

// GetPrincipalId returns the PrincipalId field value
func (o *PrincipalAdd) GetPrincipalId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrincipalId
}

// GetPrincipalIdOk returns a tuple with the PrincipalId field value
// and a boolean to check if the value has been set.
func (o *PrincipalAdd) GetPrincipalIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrincipalId, true
}

// SetPrincipalId sets field value
func (o *PrincipalAdd) SetPrincipalId(v string) {
	o.PrincipalId = v
}

// GetPrincipalType returns the PrincipalType field value
func (o *PrincipalAdd) GetPrincipalType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrincipalType
}

// GetPrincipalTypeOk returns a tuple with the PrincipalType field value
// and a boolean to check if the value has been set.
func (o *PrincipalAdd) GetPrincipalTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrincipalType, true
}

// SetPrincipalType sets field value
func (o *PrincipalAdd) SetPrincipalType(v string) {
	o.PrincipalType = v
}

func (o PrincipalAdd) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrincipalAdd) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["PolicyIds"] = o.PolicyIds
	toSerialize["PrincipalId"] = o.PrincipalId
	toSerialize["PrincipalType"] = o.PrincipalType
	return toSerialize, nil
}

func (o *PrincipalAdd) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"PolicyIds",
		"PrincipalId",
		"PrincipalType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPrincipalAdd := _PrincipalAdd{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPrincipalAdd)

	if err != nil {
		return err
	}

	*o = PrincipalAdd(varPrincipalAdd)

	return err
}

type NullablePrincipalAdd struct {
	value *PrincipalAdd
	isSet bool
}

func (v NullablePrincipalAdd) Get() *PrincipalAdd {
	return v.value
}

func (v *NullablePrincipalAdd) Set(val *PrincipalAdd) {
	v.value = val
	v.isSet = true
}

func (v NullablePrincipalAdd) IsSet() bool {
	return v.isSet
}

func (v *NullablePrincipalAdd) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrincipalAdd(val *PrincipalAdd) *NullablePrincipalAdd {
	return &NullablePrincipalAdd{value: val, isSet: true}
}

func (v NullablePrincipalAdd) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrincipalAdd) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


