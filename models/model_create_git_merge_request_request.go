/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the CreateGitMergeRequestRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CreateGitMergeRequestRequest{}

// CreateGitMergeRequestRequest struct for CreateGitMergeRequestRequest
type CreateGitMergeRequestRequest struct {
	// 描述内容
	Content string `json:"Content"`
	// 仓库 ID
	DepotId int32 `json:"DepotId"`
	// 仓库路径，与仓库ID二选一  
	DepotPath *string `json:"DepotPath,omitempty"`
	// 目标分支名
	DestBranch string `json:"DestBranch"`
	// 源分支名
	SrcBranch string `json:"SrcBranch"`
	// 标题
	Title string `json:"Title"`
}

type _CreateGitMergeRequestRequest CreateGitMergeRequestRequest

// NewCreateGitMergeRequestRequest instantiates a new CreateGitMergeRequestRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateGitMergeRequestRequest(content string, depotId int32, destBranch string, srcBranch string, title string) *CreateGitMergeRequestRequest {
	this := CreateGitMergeRequestRequest{}
	this.Content = content
	this.DepotId = depotId
	this.DestBranch = destBranch
	this.SrcBranch = srcBranch
	this.Title = title
	return &this
}

// NewCreateGitMergeRequestRequestWithDefaults instantiates a new CreateGitMergeRequestRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateGitMergeRequestRequestWithDefaults() *CreateGitMergeRequestRequest {
	this := CreateGitMergeRequestRequest{}
	return &this
}

// GetContent returns the Content field value
func (o *CreateGitMergeRequestRequest) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *CreateGitMergeRequestRequest) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *CreateGitMergeRequestRequest) SetContent(v string) {
	o.Content = v
}

// GetDepotId returns the DepotId field value
func (o *CreateGitMergeRequestRequest) GetDepotId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DepotId
}

// GetDepotIdOk returns a tuple with the DepotId field value
// and a boolean to check if the value has been set.
func (o *CreateGitMergeRequestRequest) GetDepotIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepotId, true
}

// SetDepotId sets field value
func (o *CreateGitMergeRequestRequest) SetDepotId(v int32) {
	o.DepotId = v
}

// GetDepotPath returns the DepotPath field value if set, zero value otherwise.
func (o *CreateGitMergeRequestRequest) GetDepotPath() string {
	if o == nil || utils.IsNil(o.DepotPath) {
		var ret string
		return ret
	}
	return *o.DepotPath
}

// GetDepotPathOk returns a tuple with the DepotPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateGitMergeRequestRequest) GetDepotPathOk() (*string, bool) {
	if o == nil || utils.IsNil(o.DepotPath) {
		return nil, false
	}
	return o.DepotPath, true
}

// HasDepotPath returns a boolean if a field has been set.
func (o *CreateGitMergeRequestRequest) HasDepotPath() bool {
	if o != nil && !utils.IsNil(o.DepotPath) {
		return true
	}

	return false
}

// SetDepotPath gets a reference to the given string and assigns it to the DepotPath field.
func (o *CreateGitMergeRequestRequest) SetDepotPath(v string) {
	o.DepotPath = &v
}

// GetDestBranch returns the DestBranch field value
func (o *CreateGitMergeRequestRequest) GetDestBranch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestBranch
}

// GetDestBranchOk returns a tuple with the DestBranch field value
// and a boolean to check if the value has been set.
func (o *CreateGitMergeRequestRequest) GetDestBranchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestBranch, true
}

// SetDestBranch sets field value
func (o *CreateGitMergeRequestRequest) SetDestBranch(v string) {
	o.DestBranch = v
}

// GetSrcBranch returns the SrcBranch field value
func (o *CreateGitMergeRequestRequest) GetSrcBranch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SrcBranch
}

// GetSrcBranchOk returns a tuple with the SrcBranch field value
// and a boolean to check if the value has been set.
func (o *CreateGitMergeRequestRequest) GetSrcBranchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SrcBranch, true
}

// SetSrcBranch sets field value
func (o *CreateGitMergeRequestRequest) SetSrcBranch(v string) {
	o.SrcBranch = v
}

// GetTitle returns the Title field value
func (o *CreateGitMergeRequestRequest) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *CreateGitMergeRequestRequest) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *CreateGitMergeRequestRequest) SetTitle(v string) {
	o.Title = v
}

func (o CreateGitMergeRequestRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateGitMergeRequestRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Content"] = o.Content
	toSerialize["DepotId"] = o.DepotId
	if !utils.IsNil(o.DepotPath) {
		toSerialize["DepotPath"] = o.DepotPath
	}
	toSerialize["DestBranch"] = o.DestBranch
	toSerialize["SrcBranch"] = o.SrcBranch
	toSerialize["Title"] = o.Title
	return toSerialize, nil
}

func (o *CreateGitMergeRequestRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Content",
		"DepotId",
		"DestBranch",
		"SrcBranch",
		"Title",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateGitMergeRequestRequest := _CreateGitMergeRequestRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateGitMergeRequestRequest)

	if err != nil {
		return err
	}

	*o = CreateGitMergeRequestRequest(varCreateGitMergeRequestRequest)

	return err
}

type NullableCreateGitMergeRequestRequest struct {
	value *CreateGitMergeRequestRequest
	isSet bool
}

func (v NullableCreateGitMergeRequestRequest) Get() *CreateGitMergeRequestRequest {
	return v.value
}

func (v *NullableCreateGitMergeRequestRequest) Set(val *CreateGitMergeRequestRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateGitMergeRequestRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateGitMergeRequestRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateGitMergeRequestRequest(val *CreateGitMergeRequestRequest) *NullableCreateGitMergeRequestRequest {
	return &NullableCreateGitMergeRequestRequest{value: val, isSet: true}
}

func (v NullableCreateGitMergeRequestRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateGitMergeRequestRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


