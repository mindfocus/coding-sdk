/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DescribeReleaseIssueListRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DescribeReleaseIssueListRequest{}

// DescribeReleaseIssueListRequest struct for DescribeReleaseIssueListRequest
type DescribeReleaseIssueListRequest struct {
	// 处理人ID数组
	Assignees []int64 `json:"Assignees,omitempty"`
	// 事项类型ID数组 
	IssueTypeIds []int64 `json:"IssueTypeIds,omitempty"`
	// 事项类型数组
	IssueTypes []string `json:"IssueTypes,omitempty"`
	// 关键字
	Keywords *string `json:"Keywords,omitempty"`
	// 分页查询中的页数,page从1开始计数 
	Page *int64 `json:"Page,omitempty"`
	// 分页查询中每页的大小 
	PageSize *int64 `json:"PageSize,omitempty"`
	// 项目名称
	ProjectName string `json:"ProjectName"`
	// 页面上版本ID
	ReleaseCode int64 `json:"ReleaseCode"`
	// 是否展示描述中外部可访问的地址
	ShowImageOutUrl *bool `json:"ShowImageOutUrl,omitempty"`
	// 是否显示字事项，和页面开关对应 
	ShowSubIssues *bool `json:"ShowSubIssues,omitempty"`
	// 排序，取值如\"ID:ASC\" 
	SortBy *string `json:"SortBy,omitempty"`
	// 事项状态类型数组 
	StatusTypes []int64 `json:"StatusTypes,omitempty"`
	// 关注人ID数组 
	Watchers []int64 `json:"Watchers,omitempty"`
}

type _DescribeReleaseIssueListRequest DescribeReleaseIssueListRequest

// NewDescribeReleaseIssueListRequest instantiates a new DescribeReleaseIssueListRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeReleaseIssueListRequest(projectName string, releaseCode int64) *DescribeReleaseIssueListRequest {
	this := DescribeReleaseIssueListRequest{}
	this.ProjectName = projectName
	this.ReleaseCode = releaseCode
	return &this
}

// NewDescribeReleaseIssueListRequestWithDefaults instantiates a new DescribeReleaseIssueListRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeReleaseIssueListRequestWithDefaults() *DescribeReleaseIssueListRequest {
	this := DescribeReleaseIssueListRequest{}
	return &this
}

// GetAssignees returns the Assignees field value if set, zero value otherwise.
func (o *DescribeReleaseIssueListRequest) GetAssignees() []int64 {
	if o == nil || utils.IsNil(o.Assignees) {
		var ret []int64
		return ret
	}
	return o.Assignees
}

// GetAssigneesOk returns a tuple with the Assignees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeReleaseIssueListRequest) GetAssigneesOk() ([]int64, bool) {
	if o == nil || utils.IsNil(o.Assignees) {
		return nil, false
	}
	return o.Assignees, true
}

// HasAssignees returns a boolean if a field has been set.
func (o *DescribeReleaseIssueListRequest) HasAssignees() bool {
	if o != nil && !utils.IsNil(o.Assignees) {
		return true
	}

	return false
}

// SetAssignees gets a reference to the given []int64 and assigns it to the Assignees field.
func (o *DescribeReleaseIssueListRequest) SetAssignees(v []int64) {
	o.Assignees = v
}

// GetIssueTypeIds returns the IssueTypeIds field value if set, zero value otherwise.
func (o *DescribeReleaseIssueListRequest) GetIssueTypeIds() []int64 {
	if o == nil || utils.IsNil(o.IssueTypeIds) {
		var ret []int64
		return ret
	}
	return o.IssueTypeIds
}

// GetIssueTypeIdsOk returns a tuple with the IssueTypeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeReleaseIssueListRequest) GetIssueTypeIdsOk() ([]int64, bool) {
	if o == nil || utils.IsNil(o.IssueTypeIds) {
		return nil, false
	}
	return o.IssueTypeIds, true
}

// HasIssueTypeIds returns a boolean if a field has been set.
func (o *DescribeReleaseIssueListRequest) HasIssueTypeIds() bool {
	if o != nil && !utils.IsNil(o.IssueTypeIds) {
		return true
	}

	return false
}

// SetIssueTypeIds gets a reference to the given []int64 and assigns it to the IssueTypeIds field.
func (o *DescribeReleaseIssueListRequest) SetIssueTypeIds(v []int64) {
	o.IssueTypeIds = v
}

// GetIssueTypes returns the IssueTypes field value if set, zero value otherwise.
func (o *DescribeReleaseIssueListRequest) GetIssueTypes() []string {
	if o == nil || utils.IsNil(o.IssueTypes) {
		var ret []string
		return ret
	}
	return o.IssueTypes
}

// GetIssueTypesOk returns a tuple with the IssueTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeReleaseIssueListRequest) GetIssueTypesOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.IssueTypes) {
		return nil, false
	}
	return o.IssueTypes, true
}

// HasIssueTypes returns a boolean if a field has been set.
func (o *DescribeReleaseIssueListRequest) HasIssueTypes() bool {
	if o != nil && !utils.IsNil(o.IssueTypes) {
		return true
	}

	return false
}

// SetIssueTypes gets a reference to the given []string and assigns it to the IssueTypes field.
func (o *DescribeReleaseIssueListRequest) SetIssueTypes(v []string) {
	o.IssueTypes = v
}

// GetKeywords returns the Keywords field value if set, zero value otherwise.
func (o *DescribeReleaseIssueListRequest) GetKeywords() string {
	if o == nil || utils.IsNil(o.Keywords) {
		var ret string
		return ret
	}
	return *o.Keywords
}

// GetKeywordsOk returns a tuple with the Keywords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeReleaseIssueListRequest) GetKeywordsOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Keywords) {
		return nil, false
	}
	return o.Keywords, true
}

// HasKeywords returns a boolean if a field has been set.
func (o *DescribeReleaseIssueListRequest) HasKeywords() bool {
	if o != nil && !utils.IsNil(o.Keywords) {
		return true
	}

	return false
}

// SetKeywords gets a reference to the given string and assigns it to the Keywords field.
func (o *DescribeReleaseIssueListRequest) SetKeywords(v string) {
	o.Keywords = &v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *DescribeReleaseIssueListRequest) GetPage() int64 {
	if o == nil || utils.IsNil(o.Page) {
		var ret int64
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeReleaseIssueListRequest) GetPageOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Page) {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *DescribeReleaseIssueListRequest) HasPage() bool {
	if o != nil && !utils.IsNil(o.Page) {
		return true
	}

	return false
}

// SetPage gets a reference to the given int64 and assigns it to the Page field.
func (o *DescribeReleaseIssueListRequest) SetPage(v int64) {
	o.Page = &v
}

// GetPageSize returns the PageSize field value if set, zero value otherwise.
func (o *DescribeReleaseIssueListRequest) GetPageSize() int64 {
	if o == nil || utils.IsNil(o.PageSize) {
		var ret int64
		return ret
	}
	return *o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeReleaseIssueListRequest) GetPageSizeOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.PageSize) {
		return nil, false
	}
	return o.PageSize, true
}

// HasPageSize returns a boolean if a field has been set.
func (o *DescribeReleaseIssueListRequest) HasPageSize() bool {
	if o != nil && !utils.IsNil(o.PageSize) {
		return true
	}

	return false
}

// SetPageSize gets a reference to the given int64 and assigns it to the PageSize field.
func (o *DescribeReleaseIssueListRequest) SetPageSize(v int64) {
	o.PageSize = &v
}

// GetProjectName returns the ProjectName field value
func (o *DescribeReleaseIssueListRequest) GetProjectName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value
// and a boolean to check if the value has been set.
func (o *DescribeReleaseIssueListRequest) GetProjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectName, true
}

// SetProjectName sets field value
func (o *DescribeReleaseIssueListRequest) SetProjectName(v string) {
	o.ProjectName = v
}

// GetReleaseCode returns the ReleaseCode field value
func (o *DescribeReleaseIssueListRequest) GetReleaseCode() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ReleaseCode
}

// GetReleaseCodeOk returns a tuple with the ReleaseCode field value
// and a boolean to check if the value has been set.
func (o *DescribeReleaseIssueListRequest) GetReleaseCodeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReleaseCode, true
}

// SetReleaseCode sets field value
func (o *DescribeReleaseIssueListRequest) SetReleaseCode(v int64) {
	o.ReleaseCode = v
}

// GetShowImageOutUrl returns the ShowImageOutUrl field value if set, zero value otherwise.
func (o *DescribeReleaseIssueListRequest) GetShowImageOutUrl() bool {
	if o == nil || utils.IsNil(o.ShowImageOutUrl) {
		var ret bool
		return ret
	}
	return *o.ShowImageOutUrl
}

// GetShowImageOutUrlOk returns a tuple with the ShowImageOutUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeReleaseIssueListRequest) GetShowImageOutUrlOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.ShowImageOutUrl) {
		return nil, false
	}
	return o.ShowImageOutUrl, true
}

// HasShowImageOutUrl returns a boolean if a field has been set.
func (o *DescribeReleaseIssueListRequest) HasShowImageOutUrl() bool {
	if o != nil && !utils.IsNil(o.ShowImageOutUrl) {
		return true
	}

	return false
}

// SetShowImageOutUrl gets a reference to the given bool and assigns it to the ShowImageOutUrl field.
func (o *DescribeReleaseIssueListRequest) SetShowImageOutUrl(v bool) {
	o.ShowImageOutUrl = &v
}

// GetShowSubIssues returns the ShowSubIssues field value if set, zero value otherwise.
func (o *DescribeReleaseIssueListRequest) GetShowSubIssues() bool {
	if o == nil || utils.IsNil(o.ShowSubIssues) {
		var ret bool
		return ret
	}
	return *o.ShowSubIssues
}

// GetShowSubIssuesOk returns a tuple with the ShowSubIssues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeReleaseIssueListRequest) GetShowSubIssuesOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.ShowSubIssues) {
		return nil, false
	}
	return o.ShowSubIssues, true
}

// HasShowSubIssues returns a boolean if a field has been set.
func (o *DescribeReleaseIssueListRequest) HasShowSubIssues() bool {
	if o != nil && !utils.IsNil(o.ShowSubIssues) {
		return true
	}

	return false
}

// SetShowSubIssues gets a reference to the given bool and assigns it to the ShowSubIssues field.
func (o *DescribeReleaseIssueListRequest) SetShowSubIssues(v bool) {
	o.ShowSubIssues = &v
}

// GetSortBy returns the SortBy field value if set, zero value otherwise.
func (o *DescribeReleaseIssueListRequest) GetSortBy() string {
	if o == nil || utils.IsNil(o.SortBy) {
		var ret string
		return ret
	}
	return *o.SortBy
}

// GetSortByOk returns a tuple with the SortBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeReleaseIssueListRequest) GetSortByOk() (*string, bool) {
	if o == nil || utils.IsNil(o.SortBy) {
		return nil, false
	}
	return o.SortBy, true
}

// HasSortBy returns a boolean if a field has been set.
func (o *DescribeReleaseIssueListRequest) HasSortBy() bool {
	if o != nil && !utils.IsNil(o.SortBy) {
		return true
	}

	return false
}

// SetSortBy gets a reference to the given string and assigns it to the SortBy field.
func (o *DescribeReleaseIssueListRequest) SetSortBy(v string) {
	o.SortBy = &v
}

// GetStatusTypes returns the StatusTypes field value if set, zero value otherwise.
func (o *DescribeReleaseIssueListRequest) GetStatusTypes() []int64 {
	if o == nil || utils.IsNil(o.StatusTypes) {
		var ret []int64
		return ret
	}
	return o.StatusTypes
}

// GetStatusTypesOk returns a tuple with the StatusTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeReleaseIssueListRequest) GetStatusTypesOk() ([]int64, bool) {
	if o == nil || utils.IsNil(o.StatusTypes) {
		return nil, false
	}
	return o.StatusTypes, true
}

// HasStatusTypes returns a boolean if a field has been set.
func (o *DescribeReleaseIssueListRequest) HasStatusTypes() bool {
	if o != nil && !utils.IsNil(o.StatusTypes) {
		return true
	}

	return false
}

// SetStatusTypes gets a reference to the given []int64 and assigns it to the StatusTypes field.
func (o *DescribeReleaseIssueListRequest) SetStatusTypes(v []int64) {
	o.StatusTypes = v
}

// GetWatchers returns the Watchers field value if set, zero value otherwise.
func (o *DescribeReleaseIssueListRequest) GetWatchers() []int64 {
	if o == nil || utils.IsNil(o.Watchers) {
		var ret []int64
		return ret
	}
	return o.Watchers
}

// GetWatchersOk returns a tuple with the Watchers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeReleaseIssueListRequest) GetWatchersOk() ([]int64, bool) {
	if o == nil || utils.IsNil(o.Watchers) {
		return nil, false
	}
	return o.Watchers, true
}

// HasWatchers returns a boolean if a field has been set.
func (o *DescribeReleaseIssueListRequest) HasWatchers() bool {
	if o != nil && !utils.IsNil(o.Watchers) {
		return true
	}

	return false
}

// SetWatchers gets a reference to the given []int64 and assigns it to the Watchers field.
func (o *DescribeReleaseIssueListRequest) SetWatchers(v []int64) {
	o.Watchers = v
}

func (o DescribeReleaseIssueListRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeReleaseIssueListRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Assignees) {
		toSerialize["Assignees"] = o.Assignees
	}
	if !utils.IsNil(o.IssueTypeIds) {
		toSerialize["IssueTypeIds"] = o.IssueTypeIds
	}
	if !utils.IsNil(o.IssueTypes) {
		toSerialize["IssueTypes"] = o.IssueTypes
	}
	if !utils.IsNil(o.Keywords) {
		toSerialize["Keywords"] = o.Keywords
	}
	if !utils.IsNil(o.Page) {
		toSerialize["Page"] = o.Page
	}
	if !utils.IsNil(o.PageSize) {
		toSerialize["PageSize"] = o.PageSize
	}
	toSerialize["ProjectName"] = o.ProjectName
	toSerialize["ReleaseCode"] = o.ReleaseCode
	if !utils.IsNil(o.ShowImageOutUrl) {
		toSerialize["ShowImageOutUrl"] = o.ShowImageOutUrl
	}
	if !utils.IsNil(o.ShowSubIssues) {
		toSerialize["ShowSubIssues"] = o.ShowSubIssues
	}
	if !utils.IsNil(o.SortBy) {
		toSerialize["SortBy"] = o.SortBy
	}
	if !utils.IsNil(o.StatusTypes) {
		toSerialize["StatusTypes"] = o.StatusTypes
	}
	if !utils.IsNil(o.Watchers) {
		toSerialize["Watchers"] = o.Watchers
	}
	return toSerialize, nil
}

func (o *DescribeReleaseIssueListRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ProjectName",
		"ReleaseCode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescribeReleaseIssueListRequest := _DescribeReleaseIssueListRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDescribeReleaseIssueListRequest)

	if err != nil {
		return err
	}

	*o = DescribeReleaseIssueListRequest(varDescribeReleaseIssueListRequest)

	return err
}

type NullableDescribeReleaseIssueListRequest struct {
	value *DescribeReleaseIssueListRequest
	isSet bool
}

func (v NullableDescribeReleaseIssueListRequest) Get() *DescribeReleaseIssueListRequest {
	return v.value
}

func (v *NullableDescribeReleaseIssueListRequest) Set(val *DescribeReleaseIssueListRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeReleaseIssueListRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeReleaseIssueListRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeReleaseIssueListRequest(val *DescribeReleaseIssueListRequest) *NullableDescribeReleaseIssueListRequest {
	return &NullableDescribeReleaseIssueListRequest{value: val, isSet: true}
}

func (v NullableDescribeReleaseIssueListRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeReleaseIssueListRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


