/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DiffFileInfo type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DiffFileInfo{}

// DiffFileInfo 文件差异信息汇总详情
type DiffFileInfo struct {
	// 总删除行数
	Deletions *int64 `json:"Deletions,omitempty"`
	// 差异信息
	DifferentLines []DifferentLine `json:"DifferentLines,omitempty"`
	// 总新增行数
	Insertions *int64 `json:"Insertions,omitempty"`
}

// NewDiffFileInfo instantiates a new DiffFileInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiffFileInfo() *DiffFileInfo {
	this := DiffFileInfo{}
	return &this
}

// NewDiffFileInfoWithDefaults instantiates a new DiffFileInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiffFileInfoWithDefaults() *DiffFileInfo {
	this := DiffFileInfo{}
	return &this
}

// GetDeletions returns the Deletions field value if set, zero value otherwise.
func (o *DiffFileInfo) GetDeletions() int64 {
	if o == nil || utils.IsNil(o.Deletions) {
		var ret int64
		return ret
	}
	return *o.Deletions
}

// GetDeletionsOk returns a tuple with the Deletions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiffFileInfo) GetDeletionsOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Deletions) {
		return nil, false
	}
	return o.Deletions, true
}

// HasDeletions returns a boolean if a field has been set.
func (o *DiffFileInfo) HasDeletions() bool {
	if o != nil && !utils.IsNil(o.Deletions) {
		return true
	}

	return false
}

// SetDeletions gets a reference to the given int64 and assigns it to the Deletions field.
func (o *DiffFileInfo) SetDeletions(v int64) {
	o.Deletions = &v
}

// GetDifferentLines returns the DifferentLines field value if set, zero value otherwise.
func (o *DiffFileInfo) GetDifferentLines() []DifferentLine {
	if o == nil || utils.IsNil(o.DifferentLines) {
		var ret []DifferentLine
		return ret
	}
	return o.DifferentLines
}

// GetDifferentLinesOk returns a tuple with the DifferentLines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiffFileInfo) GetDifferentLinesOk() ([]DifferentLine, bool) {
	if o == nil || utils.IsNil(o.DifferentLines) {
		return nil, false
	}
	return o.DifferentLines, true
}

// HasDifferentLines returns a boolean if a field has been set.
func (o *DiffFileInfo) HasDifferentLines() bool {
	if o != nil && !utils.IsNil(o.DifferentLines) {
		return true
	}

	return false
}

// SetDifferentLines gets a reference to the given []DifferentLine and assigns it to the DifferentLines field.
func (o *DiffFileInfo) SetDifferentLines(v []DifferentLine) {
	o.DifferentLines = v
}

// GetInsertions returns the Insertions field value if set, zero value otherwise.
func (o *DiffFileInfo) GetInsertions() int64 {
	if o == nil || utils.IsNil(o.Insertions) {
		var ret int64
		return ret
	}
	return *o.Insertions
}

// GetInsertionsOk returns a tuple with the Insertions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiffFileInfo) GetInsertionsOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Insertions) {
		return nil, false
	}
	return o.Insertions, true
}

// HasInsertions returns a boolean if a field has been set.
func (o *DiffFileInfo) HasInsertions() bool {
	if o != nil && !utils.IsNil(o.Insertions) {
		return true
	}

	return false
}

// SetInsertions gets a reference to the given int64 and assigns it to the Insertions field.
func (o *DiffFileInfo) SetInsertions(v int64) {
	o.Insertions = &v
}

func (o DiffFileInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiffFileInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Deletions) {
		toSerialize["Deletions"] = o.Deletions
	}
	if !utils.IsNil(o.DifferentLines) {
		toSerialize["DifferentLines"] = o.DifferentLines
	}
	if !utils.IsNil(o.Insertions) {
		toSerialize["Insertions"] = o.Insertions
	}
	return toSerialize, nil
}

type NullableDiffFileInfo struct {
	value *DiffFileInfo
	isSet bool
}

func (v NullableDiffFileInfo) Get() *DiffFileInfo {
	return v.value
}

func (v *NullableDiffFileInfo) Set(val *DiffFileInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDiffFileInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDiffFileInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiffFileInfo(val *DiffFileInfo) *NullableDiffFileInfo {
	return &NullableDiffFileInfo{value: val, isSet: true}
}

func (v NullableDiffFileInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiffFileInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


