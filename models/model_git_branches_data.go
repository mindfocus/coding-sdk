/*
CODING OPEN API

  

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the GitBranchesData type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &GitBranchesData{}

// GitBranchesData 用于描述分支列表信息
type GitBranchesData struct {
	// 分支列表
	Branches []GitBranchInfo `json:"Branches,omitempty"`
	// Branches的总条数
	TotalCount *int64 `json:"TotalCount,omitempty"`
}

// NewGitBranchesData instantiates a new GitBranchesData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitBranchesData() *GitBranchesData {
	this := GitBranchesData{}
	return &this
}

// NewGitBranchesDataWithDefaults instantiates a new GitBranchesData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitBranchesDataWithDefaults() *GitBranchesData {
	this := GitBranchesData{}
	return &this
}

// GetBranches returns the Branches field value if set, zero value otherwise.
func (o *GitBranchesData) GetBranches() []GitBranchInfo {
	if o == nil || utils.IsNil(o.Branches) {
		var ret []GitBranchInfo
		return ret
	}
	return o.Branches
}

// GetBranchesOk returns a tuple with the Branches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitBranchesData) GetBranchesOk() ([]GitBranchInfo, bool) {
	if o == nil || utils.IsNil(o.Branches) {
		return nil, false
	}
	return o.Branches, true
}

// HasBranches returns a boolean if a field has been set.
func (o *GitBranchesData) HasBranches() bool {
	if o != nil && !utils.IsNil(o.Branches) {
		return true
	}

	return false
}

// SetBranches gets a reference to the given []GitBranchInfo and assigns it to the Branches field.
func (o *GitBranchesData) SetBranches(v []GitBranchInfo) {
	o.Branches = v
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *GitBranchesData) GetTotalCount() int64 {
	if o == nil || utils.IsNil(o.TotalCount) {
		var ret int64
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitBranchesData) GetTotalCountOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.TotalCount) {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *GitBranchesData) HasTotalCount() bool {
	if o != nil && !utils.IsNil(o.TotalCount) {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int64 and assigns it to the TotalCount field.
func (o *GitBranchesData) SetTotalCount(v int64) {
	o.TotalCount = &v
}

func (o GitBranchesData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitBranchesData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Branches) {
		toSerialize["Branches"] = o.Branches
	}
	if !utils.IsNil(o.TotalCount) {
		toSerialize["TotalCount"] = o.TotalCount
	}
	return toSerialize, nil
}

type NullableGitBranchesData struct {
	value *GitBranchesData
	isSet bool
}

func (v NullableGitBranchesData) Get() *GitBranchesData {
	return v.value
}

func (v *NullableGitBranchesData) Set(val *GitBranchesData) {
	v.value = val
	v.isSet = true
}

func (v NullableGitBranchesData) IsSet() bool {
	return v.isSet
}

func (v *NullableGitBranchesData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitBranchesData(val *GitBranchesData) *NullableGitBranchesData {
	return &NullableGitBranchesData{value: val, isSet: true}
}

func (v NullableGitBranchesData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitBranchesData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


