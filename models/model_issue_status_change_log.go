/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the IssueStatusChangeLog type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &IssueStatusChangeLog{}

// IssueStatusChangeLog 事项状态修改日志结构体
type IssueStatusChangeLog struct {
	// 创建时间
	CreatedAt utils.NullableInt64 `json:"CreatedAt,omitempty"`
	// 事项code
	IssueCode utils.NullableInt64 `json:"IssueCode,omitempty"`
	IssueStatus *IssueStatus `json:"IssueStatus,omitempty"`
	// 状态ID
	StatusId utils.NullableInt64 `json:"StatusId,omitempty"`
	// 事项章台名称
	StatusName utils.NullableString `json:"StatusName,omitempty"`
}

// NewIssueStatusChangeLog instantiates a new IssueStatusChangeLog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueStatusChangeLog() *IssueStatusChangeLog {
	this := IssueStatusChangeLog{}
	var statusName string = ""
	this.StatusName = *utils.NewNullableString(&statusName)
	return &this
}

// NewIssueStatusChangeLogWithDefaults instantiates a new IssueStatusChangeLog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueStatusChangeLogWithDefaults() *IssueStatusChangeLog {
	this := IssueStatusChangeLog{}
	var statusName string = ""
	this.StatusName = *utils.NewNullableString(&statusName)
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssueStatusChangeLog) GetCreatedAt() int64 {
	if o == nil || utils.IsNil(o.CreatedAt.Get()) {
		var ret int64
		return ret
	}
	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssueStatusChangeLog) GetCreatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *IssueStatusChangeLog) HasCreatedAt() bool {
	if o != nil && o.CreatedAt.IsSet() {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given utils.NullableInt64 and assigns it to the CreatedAt field.
func (o *IssueStatusChangeLog) SetCreatedAt(v int64) {
	o.CreatedAt.Set(&v)
}
// SetCreatedAtNil sets the value for CreatedAt to be an explicit nil
func (o *IssueStatusChangeLog) SetCreatedAtNil() {
	o.CreatedAt.Set(nil)
}

// UnsetCreatedAt ensures that no value is present for CreatedAt, not even an explicit nil
func (o *IssueStatusChangeLog) UnsetCreatedAt() {
	o.CreatedAt.Unset()
}

// GetIssueCode returns the IssueCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssueStatusChangeLog) GetIssueCode() int64 {
	if o == nil || utils.IsNil(o.IssueCode.Get()) {
		var ret int64
		return ret
	}
	return *o.IssueCode.Get()
}

// GetIssueCodeOk returns a tuple with the IssueCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssueStatusChangeLog) GetIssueCodeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.IssueCode.Get(), o.IssueCode.IsSet()
}

// HasIssueCode returns a boolean if a field has been set.
func (o *IssueStatusChangeLog) HasIssueCode() bool {
	if o != nil && o.IssueCode.IsSet() {
		return true
	}

	return false
}

// SetIssueCode gets a reference to the given utils.NullableInt64 and assigns it to the IssueCode field.
func (o *IssueStatusChangeLog) SetIssueCode(v int64) {
	o.IssueCode.Set(&v)
}
// SetIssueCodeNil sets the value for IssueCode to be an explicit nil
func (o *IssueStatusChangeLog) SetIssueCodeNil() {
	o.IssueCode.Set(nil)
}

// UnsetIssueCode ensures that no value is present for IssueCode, not even an explicit nil
func (o *IssueStatusChangeLog) UnsetIssueCode() {
	o.IssueCode.Unset()
}

// GetIssueStatus returns the IssueStatus field value if set, zero value otherwise.
func (o *IssueStatusChangeLog) GetIssueStatus() IssueStatus {
	if o == nil || utils.IsNil(o.IssueStatus) {
		var ret IssueStatus
		return ret
	}
	return *o.IssueStatus
}

// GetIssueStatusOk returns a tuple with the IssueStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueStatusChangeLog) GetIssueStatusOk() (*IssueStatus, bool) {
	if o == nil || utils.IsNil(o.IssueStatus) {
		return nil, false
	}
	return o.IssueStatus, true
}

// HasIssueStatus returns a boolean if a field has been set.
func (o *IssueStatusChangeLog) HasIssueStatus() bool {
	if o != nil && !utils.IsNil(o.IssueStatus) {
		return true
	}

	return false
}

// SetIssueStatus gets a reference to the given IssueStatus and assigns it to the IssueStatus field.
func (o *IssueStatusChangeLog) SetIssueStatus(v IssueStatus) {
	o.IssueStatus = &v
}

// GetStatusId returns the StatusId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssueStatusChangeLog) GetStatusId() int64 {
	if o == nil || utils.IsNil(o.StatusId.Get()) {
		var ret int64
		return ret
	}
	return *o.StatusId.Get()
}

// GetStatusIdOk returns a tuple with the StatusId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssueStatusChangeLog) GetStatusIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.StatusId.Get(), o.StatusId.IsSet()
}

// HasStatusId returns a boolean if a field has been set.
func (o *IssueStatusChangeLog) HasStatusId() bool {
	if o != nil && o.StatusId.IsSet() {
		return true
	}

	return false
}

// SetStatusId gets a reference to the given utils.NullableInt64 and assigns it to the StatusId field.
func (o *IssueStatusChangeLog) SetStatusId(v int64) {
	o.StatusId.Set(&v)
}
// SetStatusIdNil sets the value for StatusId to be an explicit nil
func (o *IssueStatusChangeLog) SetStatusIdNil() {
	o.StatusId.Set(nil)
}

// UnsetStatusId ensures that no value is present for StatusId, not even an explicit nil
func (o *IssueStatusChangeLog) UnsetStatusId() {
	o.StatusId.Unset()
}

// GetStatusName returns the StatusName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssueStatusChangeLog) GetStatusName() string {
	if o == nil || utils.IsNil(o.StatusName.Get()) {
		var ret string
		return ret
	}
	return *o.StatusName.Get()
}

// GetStatusNameOk returns a tuple with the StatusName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssueStatusChangeLog) GetStatusNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StatusName.Get(), o.StatusName.IsSet()
}

// HasStatusName returns a boolean if a field has been set.
func (o *IssueStatusChangeLog) HasStatusName() bool {
	if o != nil && o.StatusName.IsSet() {
		return true
	}

	return false
}

// SetStatusName gets a reference to the given utils.NullableString and assigns it to the StatusName field.
func (o *IssueStatusChangeLog) SetStatusName(v string) {
	o.StatusName.Set(&v)
}
// SetStatusNameNil sets the value for StatusName to be an explicit nil
func (o *IssueStatusChangeLog) SetStatusNameNil() {
	o.StatusName.Set(nil)
}

// UnsetStatusName ensures that no value is present for StatusName, not even an explicit nil
func (o *IssueStatusChangeLog) UnsetStatusName() {
	o.StatusName.Unset()
}

func (o IssueStatusChangeLog) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IssueStatusChangeLog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedAt.IsSet() {
		toSerialize["CreatedAt"] = o.CreatedAt.Get()
	}
	if o.IssueCode.IsSet() {
		toSerialize["IssueCode"] = o.IssueCode.Get()
	}
	if !utils.IsNil(o.IssueStatus) {
		toSerialize["IssueStatus"] = o.IssueStatus
	}
	if o.StatusId.IsSet() {
		toSerialize["StatusId"] = o.StatusId.Get()
	}
	if o.StatusName.IsSet() {
		toSerialize["StatusName"] = o.StatusName.Get()
	}
	return toSerialize, nil
}

type NullableIssueStatusChangeLog struct {
	value *IssueStatusChangeLog
	isSet bool
}

func (v NullableIssueStatusChangeLog) Get() *IssueStatusChangeLog {
	return v.value
}

func (v *NullableIssueStatusChangeLog) Set(val *IssueStatusChangeLog) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueStatusChangeLog) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueStatusChangeLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueStatusChangeLog(val *IssueStatusChangeLog) *NullableIssueStatusChangeLog {
	return &NullableIssueStatusChangeLog{value: val, isSet: true}
}

func (v NullableIssueStatusChangeLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueStatusChangeLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


