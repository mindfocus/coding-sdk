/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the CreateReleaseRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CreateReleaseRequest{}

// CreateReleaseRequest struct for CreateReleaseRequest
type CreateReleaseRequest struct {
	// 版本处理人ID
	Assignee *int64 `json:"Assignee,omitempty"`
	// 版本描述
	Description *string `json:"Description,omitempty"`
	// 关联迭代code列表
	IterationCodes []int64 `json:"IterationCodes,omitempty"`
	// 标签ID列表
	LabelIds []int64 `json:"LabelIds,omitempty"`
	// 版本名称
	Name string `json:"Name"`
	// 项目名称
	ProjectName string `json:"ProjectName"`
	// 版本发布日期
	ReleaseDate *string `json:"ReleaseDate,omitempty"`
	// 版本开始时间
	StartDate *string `json:"StartDate,omitempty"`
}

type _CreateReleaseRequest CreateReleaseRequest

// NewCreateReleaseRequest instantiates a new CreateReleaseRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateReleaseRequest(name string, projectName string) *CreateReleaseRequest {
	this := CreateReleaseRequest{}
	this.Name = name
	this.ProjectName = projectName
	return &this
}

// NewCreateReleaseRequestWithDefaults instantiates a new CreateReleaseRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateReleaseRequestWithDefaults() *CreateReleaseRequest {
	this := CreateReleaseRequest{}
	return &this
}

// GetAssignee returns the Assignee field value if set, zero value otherwise.
func (o *CreateReleaseRequest) GetAssignee() int64 {
	if o == nil || utils.IsNil(o.Assignee) {
		var ret int64
		return ret
	}
	return *o.Assignee
}

// GetAssigneeOk returns a tuple with the Assignee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateReleaseRequest) GetAssigneeOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Assignee) {
		return nil, false
	}
	return o.Assignee, true
}

// HasAssignee returns a boolean if a field has been set.
func (o *CreateReleaseRequest) HasAssignee() bool {
	if o != nil && !utils.IsNil(o.Assignee) {
		return true
	}

	return false
}

// SetAssignee gets a reference to the given int64 and assigns it to the Assignee field.
func (o *CreateReleaseRequest) SetAssignee(v int64) {
	o.Assignee = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateReleaseRequest) GetDescription() string {
	if o == nil || utils.IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateReleaseRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateReleaseRequest) HasDescription() bool {
	if o != nil && !utils.IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateReleaseRequest) SetDescription(v string) {
	o.Description = &v
}

// GetIterationCodes returns the IterationCodes field value if set, zero value otherwise.
func (o *CreateReleaseRequest) GetIterationCodes() []int64 {
	if o == nil || utils.IsNil(o.IterationCodes) {
		var ret []int64
		return ret
	}
	return o.IterationCodes
}

// GetIterationCodesOk returns a tuple with the IterationCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateReleaseRequest) GetIterationCodesOk() ([]int64, bool) {
	if o == nil || utils.IsNil(o.IterationCodes) {
		return nil, false
	}
	return o.IterationCodes, true
}

// HasIterationCodes returns a boolean if a field has been set.
func (o *CreateReleaseRequest) HasIterationCodes() bool {
	if o != nil && !utils.IsNil(o.IterationCodes) {
		return true
	}

	return false
}

// SetIterationCodes gets a reference to the given []int64 and assigns it to the IterationCodes field.
func (o *CreateReleaseRequest) SetIterationCodes(v []int64) {
	o.IterationCodes = v
}

// GetLabelIds returns the LabelIds field value if set, zero value otherwise.
func (o *CreateReleaseRequest) GetLabelIds() []int64 {
	if o == nil || utils.IsNil(o.LabelIds) {
		var ret []int64
		return ret
	}
	return o.LabelIds
}

// GetLabelIdsOk returns a tuple with the LabelIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateReleaseRequest) GetLabelIdsOk() ([]int64, bool) {
	if o == nil || utils.IsNil(o.LabelIds) {
		return nil, false
	}
	return o.LabelIds, true
}

// HasLabelIds returns a boolean if a field has been set.
func (o *CreateReleaseRequest) HasLabelIds() bool {
	if o != nil && !utils.IsNil(o.LabelIds) {
		return true
	}

	return false
}

// SetLabelIds gets a reference to the given []int64 and assigns it to the LabelIds field.
func (o *CreateReleaseRequest) SetLabelIds(v []int64) {
	o.LabelIds = v
}

// GetName returns the Name field value
func (o *CreateReleaseRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateReleaseRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateReleaseRequest) SetName(v string) {
	o.Name = v
}

// GetProjectName returns the ProjectName field value
func (o *CreateReleaseRequest) GetProjectName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value
// and a boolean to check if the value has been set.
func (o *CreateReleaseRequest) GetProjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectName, true
}

// SetProjectName sets field value
func (o *CreateReleaseRequest) SetProjectName(v string) {
	o.ProjectName = v
}

// GetReleaseDate returns the ReleaseDate field value if set, zero value otherwise.
func (o *CreateReleaseRequest) GetReleaseDate() string {
	if o == nil || utils.IsNil(o.ReleaseDate) {
		var ret string
		return ret
	}
	return *o.ReleaseDate
}

// GetReleaseDateOk returns a tuple with the ReleaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateReleaseRequest) GetReleaseDateOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ReleaseDate) {
		return nil, false
	}
	return o.ReleaseDate, true
}

// HasReleaseDate returns a boolean if a field has been set.
func (o *CreateReleaseRequest) HasReleaseDate() bool {
	if o != nil && !utils.IsNil(o.ReleaseDate) {
		return true
	}

	return false
}

// SetReleaseDate gets a reference to the given string and assigns it to the ReleaseDate field.
func (o *CreateReleaseRequest) SetReleaseDate(v string) {
	o.ReleaseDate = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *CreateReleaseRequest) GetStartDate() string {
	if o == nil || utils.IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateReleaseRequest) GetStartDateOk() (*string, bool) {
	if o == nil || utils.IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *CreateReleaseRequest) HasStartDate() bool {
	if o != nil && !utils.IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *CreateReleaseRequest) SetStartDate(v string) {
	o.StartDate = &v
}

func (o CreateReleaseRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateReleaseRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Assignee) {
		toSerialize["Assignee"] = o.Assignee
	}
	if !utils.IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !utils.IsNil(o.IterationCodes) {
		toSerialize["IterationCodes"] = o.IterationCodes
	}
	if !utils.IsNil(o.LabelIds) {
		toSerialize["LabelIds"] = o.LabelIds
	}
	toSerialize["Name"] = o.Name
	toSerialize["ProjectName"] = o.ProjectName
	if !utils.IsNil(o.ReleaseDate) {
		toSerialize["ReleaseDate"] = o.ReleaseDate
	}
	if !utils.IsNil(o.StartDate) {
		toSerialize["StartDate"] = o.StartDate
	}
	return toSerialize, nil
}

func (o *CreateReleaseRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Name",
		"ProjectName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateReleaseRequest := _CreateReleaseRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateReleaseRequest)

	if err != nil {
		return err
	}

	*o = CreateReleaseRequest(varCreateReleaseRequest)

	return err
}

type NullableCreateReleaseRequest struct {
	value *CreateReleaseRequest
	isSet bool
}

func (v NullableCreateReleaseRequest) Get() *CreateReleaseRequest {
	return v.value
}

func (v *NullableCreateReleaseRequest) Set(val *CreateReleaseRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateReleaseRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateReleaseRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateReleaseRequest(val *CreateReleaseRequest) *NullableCreateReleaseRequest {
	return &NullableCreateReleaseRequest{value: val, isSet: true}
}

func (v NullableCreateReleaseRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateReleaseRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


