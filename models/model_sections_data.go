/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the SectionsData type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &SectionsData{}

// SectionsData 分组列表
type SectionsData struct {
	// 分组列表
	Sections []Section `json:"Sections,omitempty"`
}

// NewSectionsData instantiates a new SectionsData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSectionsData() *SectionsData {
	this := SectionsData{}
	return &this
}

// NewSectionsDataWithDefaults instantiates a new SectionsData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSectionsDataWithDefaults() *SectionsData {
	this := SectionsData{}
	return &this
}

// GetSections returns the Sections field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SectionsData) GetSections() []Section {
	if o == nil {
		var ret []Section
		return ret
	}
	return o.Sections
}

// GetSectionsOk returns a tuple with the Sections field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SectionsData) GetSectionsOk() ([]Section, bool) {
	if o == nil || utils.IsNil(o.Sections) {
		return nil, false
	}
	return o.Sections, true
}

// HasSections returns a boolean if a field has been set.
func (o *SectionsData) HasSections() bool {
	if o != nil && !utils.IsNil(o.Sections) {
		return true
	}

	return false
}

// SetSections gets a reference to the given []Section and assigns it to the Sections field.
func (o *SectionsData) SetSections(v []Section) {
	o.Sections = v
}

func (o SectionsData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SectionsData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Sections != nil {
		toSerialize["Sections"] = o.Sections
	}
	return toSerialize, nil
}

type NullableSectionsData struct {
	value *SectionsData
	isSet bool
}

func (v NullableSectionsData) Get() *SectionsData {
	return v.value
}

func (v *NullableSectionsData) Set(val *SectionsData) {
	v.value = val
	v.isSet = true
}

func (v NullableSectionsData) IsSet() bool {
	return v.isSet
}

func (v *NullableSectionsData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSectionsData(val *SectionsData) *NullableSectionsData {
	return &NullableSectionsData{value: val, isSet: true}
}

func (v NullableSectionsData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSectionsData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


