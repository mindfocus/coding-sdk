/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the UserGroupUserInfos type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &UserGroupUserInfos{}

// UserGroupUserInfos 用户组用户信息
type UserGroupUserInfos struct {
	// 用户组id
	GroupId utils.NullableInt64 `json:"GroupId"`
	// 用户id
	UserId utils.NullableInt64 `json:"UserId"`
}

type _UserGroupUserInfos UserGroupUserInfos

// NewUserGroupUserInfos instantiates a new UserGroupUserInfos object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserGroupUserInfos(groupId utils.NullableInt64, userId utils.NullableInt64) *UserGroupUserInfos {
	this := UserGroupUserInfos{}
	this.GroupId = groupId
	this.UserId = userId
	return &this
}

// NewUserGroupUserInfosWithDefaults instantiates a new UserGroupUserInfos object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserGroupUserInfosWithDefaults() *UserGroupUserInfos {
	this := UserGroupUserInfos{}
	return &this
}

// GetGroupId returns the GroupId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *UserGroupUserInfos) GetGroupId() int64 {
	if o == nil || o.GroupId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.GroupId.Get()
}

// GetGroupIdOk returns a tuple with the GroupId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserGroupUserInfos) GetGroupIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.GroupId.Get(), o.GroupId.IsSet()
}

// SetGroupId sets field value
func (o *UserGroupUserInfos) SetGroupId(v int64) {
	o.GroupId.Set(&v)
}

// GetUserId returns the UserId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *UserGroupUserInfos) GetUserId() int64 {
	if o == nil || o.UserId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.UserId.Get()
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserGroupUserInfos) GetUserIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserId.Get(), o.UserId.IsSet()
}

// SetUserId sets field value
func (o *UserGroupUserInfos) SetUserId(v int64) {
	o.UserId.Set(&v)
}

func (o UserGroupUserInfos) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserGroupUserInfos) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["GroupId"] = o.GroupId.Get()
	toSerialize["UserId"] = o.UserId.Get()
	return toSerialize, nil
}

func (o *UserGroupUserInfos) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"GroupId",
		"UserId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserGroupUserInfos := _UserGroupUserInfos{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserGroupUserInfos)

	if err != nil {
		return err
	}

	*o = UserGroupUserInfos(varUserGroupUserInfos)

	return err
}

type NullableUserGroupUserInfos struct {
	value *UserGroupUserInfos
	isSet bool
}

func (v NullableUserGroupUserInfos) Get() *UserGroupUserInfos {
	return v.value
}

func (v *NullableUserGroupUserInfos) Set(val *UserGroupUserInfos) {
	v.value = val
	v.isSet = true
}

func (v NullableUserGroupUserInfos) IsSet() bool {
	return v.isSet
}

func (v *NullableUserGroupUserInfos) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserGroupUserInfos(val *UserGroupUserInfos) *NullableUserGroupUserInfos {
	return &NullableUserGroupUserInfos{value: val, isSet: true}
}

func (v NullableUserGroupUserInfos) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserGroupUserInfos) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


