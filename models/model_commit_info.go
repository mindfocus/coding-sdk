/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the CommitInfo type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CommitInfo{}

// CommitInfo 仓库文件每一行提交详细信息
type CommitInfo struct {
	// 提交日期
	CommitDate utils.NullableInt64 `json:"CommitDate,omitempty"`
	// 提交信息
	CommitSha utils.NullableString `json:"CommitSha,omitempty"`
	Committer *CodingUser `json:"Committer,omitempty"`
	// 行数
	LineNumber utils.NullableInt64 `json:"LineNumber,omitempty"`
}

// NewCommitInfo instantiates a new CommitInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommitInfo() *CommitInfo {
	this := CommitInfo{}
	var commitSha string = ""
	this.CommitSha = *utils.NewNullableString(&commitSha)
	return &this
}

// NewCommitInfoWithDefaults instantiates a new CommitInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitInfoWithDefaults() *CommitInfo {
	this := CommitInfo{}
	var commitSha string = ""
	this.CommitSha = *utils.NewNullableString(&commitSha)
	return &this
}

// GetCommitDate returns the CommitDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommitInfo) GetCommitDate() int64 {
	if o == nil || utils.IsNil(o.CommitDate.Get()) {
		var ret int64
		return ret
	}
	return *o.CommitDate.Get()
}

// GetCommitDateOk returns a tuple with the CommitDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommitInfo) GetCommitDateOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CommitDate.Get(), o.CommitDate.IsSet()
}

// HasCommitDate returns a boolean if a field has been set.
func (o *CommitInfo) HasCommitDate() bool {
	if o != nil && o.CommitDate.IsSet() {
		return true
	}

	return false
}

// SetCommitDate gets a reference to the given utils.NullableInt64 and assigns it to the CommitDate field.
func (o *CommitInfo) SetCommitDate(v int64) {
	o.CommitDate.Set(&v)
}
// SetCommitDateNil sets the value for CommitDate to be an explicit nil
func (o *CommitInfo) SetCommitDateNil() {
	o.CommitDate.Set(nil)
}

// UnsetCommitDate ensures that no value is present for CommitDate, not even an explicit nil
func (o *CommitInfo) UnsetCommitDate() {
	o.CommitDate.Unset()
}

// GetCommitSha returns the CommitSha field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommitInfo) GetCommitSha() string {
	if o == nil || utils.IsNil(o.CommitSha.Get()) {
		var ret string
		return ret
	}
	return *o.CommitSha.Get()
}

// GetCommitShaOk returns a tuple with the CommitSha field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommitInfo) GetCommitShaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CommitSha.Get(), o.CommitSha.IsSet()
}

// HasCommitSha returns a boolean if a field has been set.
func (o *CommitInfo) HasCommitSha() bool {
	if o != nil && o.CommitSha.IsSet() {
		return true
	}

	return false
}

// SetCommitSha gets a reference to the given utils.NullableString and assigns it to the CommitSha field.
func (o *CommitInfo) SetCommitSha(v string) {
	o.CommitSha.Set(&v)
}
// SetCommitShaNil sets the value for CommitSha to be an explicit nil
func (o *CommitInfo) SetCommitShaNil() {
	o.CommitSha.Set(nil)
}

// UnsetCommitSha ensures that no value is present for CommitSha, not even an explicit nil
func (o *CommitInfo) UnsetCommitSha() {
	o.CommitSha.Unset()
}

// GetCommitter returns the Committer field value if set, zero value otherwise.
func (o *CommitInfo) GetCommitter() CodingUser {
	if o == nil || utils.IsNil(o.Committer) {
		var ret CodingUser
		return ret
	}
	return *o.Committer
}

// GetCommitterOk returns a tuple with the Committer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitInfo) GetCommitterOk() (*CodingUser, bool) {
	if o == nil || utils.IsNil(o.Committer) {
		return nil, false
	}
	return o.Committer, true
}

// HasCommitter returns a boolean if a field has been set.
func (o *CommitInfo) HasCommitter() bool {
	if o != nil && !utils.IsNil(o.Committer) {
		return true
	}

	return false
}

// SetCommitter gets a reference to the given CodingUser and assigns it to the Committer field.
func (o *CommitInfo) SetCommitter(v CodingUser) {
	o.Committer = &v
}

// GetLineNumber returns the LineNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommitInfo) GetLineNumber() int64 {
	if o == nil || utils.IsNil(o.LineNumber.Get()) {
		var ret int64
		return ret
	}
	return *o.LineNumber.Get()
}

// GetLineNumberOk returns a tuple with the LineNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommitInfo) GetLineNumberOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LineNumber.Get(), o.LineNumber.IsSet()
}

// HasLineNumber returns a boolean if a field has been set.
func (o *CommitInfo) HasLineNumber() bool {
	if o != nil && o.LineNumber.IsSet() {
		return true
	}

	return false
}

// SetLineNumber gets a reference to the given utils.NullableInt64 and assigns it to the LineNumber field.
func (o *CommitInfo) SetLineNumber(v int64) {
	o.LineNumber.Set(&v)
}
// SetLineNumberNil sets the value for LineNumber to be an explicit nil
func (o *CommitInfo) SetLineNumberNil() {
	o.LineNumber.Set(nil)
}

// UnsetLineNumber ensures that no value is present for LineNumber, not even an explicit nil
func (o *CommitInfo) UnsetLineNumber() {
	o.LineNumber.Unset()
}

func (o CommitInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommitInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CommitDate.IsSet() {
		toSerialize["CommitDate"] = o.CommitDate.Get()
	}
	if o.CommitSha.IsSet() {
		toSerialize["CommitSha"] = o.CommitSha.Get()
	}
	if !utils.IsNil(o.Committer) {
		toSerialize["Committer"] = o.Committer
	}
	if o.LineNumber.IsSet() {
		toSerialize["LineNumber"] = o.LineNumber.Get()
	}
	return toSerialize, nil
}

type NullableCommitInfo struct {
	value *CommitInfo
	isSet bool
}

func (v NullableCommitInfo) Get() *CommitInfo {
	return v.value
}

func (v *NullableCommitInfo) Set(val *CommitInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCommitInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCommitInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommitInfo(val *CommitInfo) *NullableCommitInfo {
	return &NullableCommitInfo{value: val, isSet: true}
}

func (v NullableCommitInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommitInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


