/*
CODING OPEN API

  

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the ResourceReferenceResourceInfo type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ResourceReferenceResourceInfo{}

// ResourceReferenceResourceInfo 资源相关信息
type ResourceReferenceResourceInfo struct {
	Scope ResourceReferenceResourceScope `json:"Scope"`
	Resource ResourceReferenceResource `json:"Resource"`
}

type _ResourceReferenceResourceInfo ResourceReferenceResourceInfo

// NewResourceReferenceResourceInfo instantiates a new ResourceReferenceResourceInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceReferenceResourceInfo(scope ResourceReferenceResourceScope, resource ResourceReferenceResource) *ResourceReferenceResourceInfo {
	this := ResourceReferenceResourceInfo{}
	this.Scope = scope
	this.Resource = resource
	return &this
}

// NewResourceReferenceResourceInfoWithDefaults instantiates a new ResourceReferenceResourceInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceReferenceResourceInfoWithDefaults() *ResourceReferenceResourceInfo {
	this := ResourceReferenceResourceInfo{}
	return &this
}

// GetScope returns the Scope field value
func (o *ResourceReferenceResourceInfo) GetScope() ResourceReferenceResourceScope {
	if o == nil {
		var ret ResourceReferenceResourceScope
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *ResourceReferenceResourceInfo) GetScopeOk() (*ResourceReferenceResourceScope, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *ResourceReferenceResourceInfo) SetScope(v ResourceReferenceResourceScope) {
	o.Scope = v
}

// GetResource returns the Resource field value
func (o *ResourceReferenceResourceInfo) GetResource() ResourceReferenceResource {
	if o == nil {
		var ret ResourceReferenceResource
		return ret
	}

	return o.Resource
}

// GetResourceOk returns a tuple with the Resource field value
// and a boolean to check if the value has been set.
func (o *ResourceReferenceResourceInfo) GetResourceOk() (*ResourceReferenceResource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Resource, true
}

// SetResource sets field value
func (o *ResourceReferenceResourceInfo) SetResource(v ResourceReferenceResource) {
	o.Resource = v
}

func (o ResourceReferenceResourceInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceReferenceResourceInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Scope"] = o.Scope
	toSerialize["Resource"] = o.Resource
	return toSerialize, nil
}

func (o *ResourceReferenceResourceInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Scope",
		"Resource",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceReferenceResourceInfo := _ResourceReferenceResourceInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResourceReferenceResourceInfo)

	if err != nil {
		return err
	}

	*o = ResourceReferenceResourceInfo(varResourceReferenceResourceInfo)

	return err
}

type NullableResourceReferenceResourceInfo struct {
	value *ResourceReferenceResourceInfo
	isSet bool
}

func (v NullableResourceReferenceResourceInfo) Get() *ResourceReferenceResourceInfo {
	return v.value
}

func (v *NullableResourceReferenceResourceInfo) Set(val *ResourceReferenceResourceInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceReferenceResourceInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceReferenceResourceInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceReferenceResourceInfo(val *ResourceReferenceResourceInfo) *NullableResourceReferenceResourceInfo {
	return &NullableResourceReferenceResourceInfo{value: val, isSet: true}
}

func (v NullableResourceReferenceResourceInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceReferenceResourceInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


