/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the CreateProgramProjectsRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CreateProgramProjectsRequest{}

// CreateProgramProjectsRequest struct for CreateProgramProjectsRequest
type CreateProgramProjectsRequest struct {
	// 项目集 ID
	ProgramId int64 `json:"ProgramId"`
	// 项目 ID
	ProjectId []int64 `json:"ProjectId"`
}

type _CreateProgramProjectsRequest CreateProgramProjectsRequest

// NewCreateProgramProjectsRequest instantiates a new CreateProgramProjectsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateProgramProjectsRequest(programId int64, projectId []int64) *CreateProgramProjectsRequest {
	this := CreateProgramProjectsRequest{}
	this.ProgramId = programId
	this.ProjectId = projectId
	return &this
}

// NewCreateProgramProjectsRequestWithDefaults instantiates a new CreateProgramProjectsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateProgramProjectsRequestWithDefaults() *CreateProgramProjectsRequest {
	this := CreateProgramProjectsRequest{}
	var programId int64 = 0
	this.ProgramId = programId
	return &this
}

// GetProgramId returns the ProgramId field value
func (o *CreateProgramProjectsRequest) GetProgramId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ProgramId
}

// GetProgramIdOk returns a tuple with the ProgramId field value
// and a boolean to check if the value has been set.
func (o *CreateProgramProjectsRequest) GetProgramIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProgramId, true
}

// SetProgramId sets field value
func (o *CreateProgramProjectsRequest) SetProgramId(v int64) {
	o.ProgramId = v
}

// GetProjectId returns the ProjectId field value
func (o *CreateProgramProjectsRequest) GetProjectId() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *CreateProgramProjectsRequest) GetProjectIdOk() ([]int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProjectId, true
}

// SetProjectId sets field value
func (o *CreateProgramProjectsRequest) SetProjectId(v []int64) {
	o.ProjectId = v
}

func (o CreateProgramProjectsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateProgramProjectsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ProgramId"] = o.ProgramId
	toSerialize["ProjectId"] = o.ProjectId
	return toSerialize, nil
}

func (o *CreateProgramProjectsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ProgramId",
		"ProjectId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateProgramProjectsRequest := _CreateProgramProjectsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateProgramProjectsRequest)

	if err != nil {
		return err
	}

	*o = CreateProgramProjectsRequest(varCreateProgramProjectsRequest)

	return err
}

type NullableCreateProgramProjectsRequest struct {
	value *CreateProgramProjectsRequest
	isSet bool
}

func (v NullableCreateProgramProjectsRequest) Get() *CreateProgramProjectsRequest {
	return v.value
}

func (v *NullableCreateProgramProjectsRequest) Set(val *CreateProgramProjectsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateProgramProjectsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateProgramProjectsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateProgramProjectsRequest(val *CreateProgramProjectsRequest) *NullableCreateProgramProjectsRequest {
	return &NullableCreateProgramProjectsRequest{value: val, isSet: true}
}

func (v NullableCreateProgramProjectsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateProgramProjectsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


