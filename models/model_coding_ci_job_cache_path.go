/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the CodingCIJobCachePath type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CodingCIJobCachePath{}

// CodingCIJobCachePath CI 任务缓存目录配置
type CodingCIJobCachePath struct {
	// 绝对路径
	AbsolutePath string `json:"AbsolutePath"`
	// 是否启用
	Enabled bool `json:"Enabled"`
}

type _CodingCIJobCachePath CodingCIJobCachePath

// NewCodingCIJobCachePath instantiates a new CodingCIJobCachePath object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCodingCIJobCachePath(absolutePath string, enabled bool) *CodingCIJobCachePath {
	this := CodingCIJobCachePath{}
	this.AbsolutePath = absolutePath
	this.Enabled = enabled
	return &this
}

// NewCodingCIJobCachePathWithDefaults instantiates a new CodingCIJobCachePath object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCodingCIJobCachePathWithDefaults() *CodingCIJobCachePath {
	this := CodingCIJobCachePath{}
	var absolutePath string = ""
	this.AbsolutePath = absolutePath
	var enabled bool = false
	this.Enabled = enabled
	return &this
}

// GetAbsolutePath returns the AbsolutePath field value
func (o *CodingCIJobCachePath) GetAbsolutePath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AbsolutePath
}

// GetAbsolutePathOk returns a tuple with the AbsolutePath field value
// and a boolean to check if the value has been set.
func (o *CodingCIJobCachePath) GetAbsolutePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AbsolutePath, true
}

// SetAbsolutePath sets field value
func (o *CodingCIJobCachePath) SetAbsolutePath(v string) {
	o.AbsolutePath = v
}

// GetEnabled returns the Enabled field value
func (o *CodingCIJobCachePath) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *CodingCIJobCachePath) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *CodingCIJobCachePath) SetEnabled(v bool) {
	o.Enabled = v
}

func (o CodingCIJobCachePath) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CodingCIJobCachePath) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["AbsolutePath"] = o.AbsolutePath
	toSerialize["Enabled"] = o.Enabled
	return toSerialize, nil
}

func (o *CodingCIJobCachePath) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"AbsolutePath",
		"Enabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCodingCIJobCachePath := _CodingCIJobCachePath{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCodingCIJobCachePath)

	if err != nil {
		return err
	}

	*o = CodingCIJobCachePath(varCodingCIJobCachePath)

	return err
}

type NullableCodingCIJobCachePath struct {
	value *CodingCIJobCachePath
	isSet bool
}

func (v NullableCodingCIJobCachePath) Get() *CodingCIJobCachePath {
	return v.value
}

func (v *NullableCodingCIJobCachePath) Set(val *CodingCIJobCachePath) {
	v.value = val
	v.isSet = true
}

func (v NullableCodingCIJobCachePath) IsSet() bool {
	return v.isSet
}

func (v *NullableCodingCIJobCachePath) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCodingCIJobCachePath(val *CodingCIJobCachePath) *NullableCodingCIJobCachePath {
	return &NullableCodingCIJobCachePath{value: val, isSet: true}
}

func (v NullableCodingCIJobCachePath) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCodingCIJobCachePath) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


