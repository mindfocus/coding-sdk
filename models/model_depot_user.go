/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DepotUser type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DepotUser{}

// DepotUser 仓库返回user信息
type DepotUser struct {
	// 用户头像
	Avatar utils.NullableString `json:"Avatar,omitempty"`
	// 邮箱
	Email *string `json:"Email,omitempty"`
	// 用户GlobalKey
	GlobalKey utils.NullableString `json:"GlobalKey,omitempty"`
	// 用户id
	Id utils.NullableInt64 `json:"Id,omitempty"`
	// 姓名
	Name *string `json:"Name,omitempty"`
	// 用户状态
	Status utils.NullableString `json:"Status,omitempty"`
	// 团队id
	TeamId utils.NullableInt64 `json:"TeamId,omitempty"`
}

// NewDepotUser instantiates a new DepotUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDepotUser() *DepotUser {
	this := DepotUser{}
	var avatar string = ""
	this.Avatar = *utils.NewNullableString(&avatar)
	var email string = ""
	this.Email = &email
	var globalKey string = ""
	this.GlobalKey = *utils.NewNullableString(&globalKey)
	var name string = ""
	this.Name = &name
	var status string = ""
	this.Status = *utils.NewNullableString(&status)
	return &this
}

// NewDepotUserWithDefaults instantiates a new DepotUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDepotUserWithDefaults() *DepotUser {
	this := DepotUser{}
	var avatar string = ""
	this.Avatar = *utils.NewNullableString(&avatar)
	var email string = ""
	this.Email = &email
	var globalKey string = ""
	this.GlobalKey = *utils.NewNullableString(&globalKey)
	var name string = ""
	this.Name = &name
	var status string = ""
	this.Status = *utils.NewNullableString(&status)
	return &this
}

// GetAvatar returns the Avatar field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DepotUser) GetAvatar() string {
	if o == nil || utils.IsNil(o.Avatar.Get()) {
		var ret string
		return ret
	}
	return *o.Avatar.Get()
}

// GetAvatarOk returns a tuple with the Avatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DepotUser) GetAvatarOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Avatar.Get(), o.Avatar.IsSet()
}

// HasAvatar returns a boolean if a field has been set.
func (o *DepotUser) HasAvatar() bool {
	if o != nil && o.Avatar.IsSet() {
		return true
	}

	return false
}

// SetAvatar gets a reference to the given utils.NullableString and assigns it to the Avatar field.
func (o *DepotUser) SetAvatar(v string) {
	o.Avatar.Set(&v)
}
// SetAvatarNil sets the value for Avatar to be an explicit nil
func (o *DepotUser) SetAvatarNil() {
	o.Avatar.Set(nil)
}

// UnsetAvatar ensures that no value is present for Avatar, not even an explicit nil
func (o *DepotUser) UnsetAvatar() {
	o.Avatar.Unset()
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *DepotUser) GetEmail() string {
	if o == nil || utils.IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepotUser) GetEmailOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *DepotUser) HasEmail() bool {
	if o != nil && !utils.IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *DepotUser) SetEmail(v string) {
	o.Email = &v
}

// GetGlobalKey returns the GlobalKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DepotUser) GetGlobalKey() string {
	if o == nil || utils.IsNil(o.GlobalKey.Get()) {
		var ret string
		return ret
	}
	return *o.GlobalKey.Get()
}

// GetGlobalKeyOk returns a tuple with the GlobalKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DepotUser) GetGlobalKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GlobalKey.Get(), o.GlobalKey.IsSet()
}

// HasGlobalKey returns a boolean if a field has been set.
func (o *DepotUser) HasGlobalKey() bool {
	if o != nil && o.GlobalKey.IsSet() {
		return true
	}

	return false
}

// SetGlobalKey gets a reference to the given utils.NullableString and assigns it to the GlobalKey field.
func (o *DepotUser) SetGlobalKey(v string) {
	o.GlobalKey.Set(&v)
}
// SetGlobalKeyNil sets the value for GlobalKey to be an explicit nil
func (o *DepotUser) SetGlobalKeyNil() {
	o.GlobalKey.Set(nil)
}

// UnsetGlobalKey ensures that no value is present for GlobalKey, not even an explicit nil
func (o *DepotUser) UnsetGlobalKey() {
	o.GlobalKey.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DepotUser) GetId() int64 {
	if o == nil || utils.IsNil(o.Id.Get()) {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DepotUser) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *DepotUser) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given utils.NullableInt64 and assigns it to the Id field.
func (o *DepotUser) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *DepotUser) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *DepotUser) UnsetId() {
	o.Id.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DepotUser) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepotUser) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DepotUser) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DepotUser) SetName(v string) {
	o.Name = &v
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DepotUser) GetStatus() string {
	if o == nil || utils.IsNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DepotUser) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *DepotUser) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given utils.NullableString and assigns it to the Status field.
func (o *DepotUser) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *DepotUser) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *DepotUser) UnsetStatus() {
	o.Status.Unset()
}

// GetTeamId returns the TeamId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DepotUser) GetTeamId() int64 {
	if o == nil || utils.IsNil(o.TeamId.Get()) {
		var ret int64
		return ret
	}
	return *o.TeamId.Get()
}

// GetTeamIdOk returns a tuple with the TeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DepotUser) GetTeamIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TeamId.Get(), o.TeamId.IsSet()
}

// HasTeamId returns a boolean if a field has been set.
func (o *DepotUser) HasTeamId() bool {
	if o != nil && o.TeamId.IsSet() {
		return true
	}

	return false
}

// SetTeamId gets a reference to the given utils.NullableInt64 and assigns it to the TeamId field.
func (o *DepotUser) SetTeamId(v int64) {
	o.TeamId.Set(&v)
}
// SetTeamIdNil sets the value for TeamId to be an explicit nil
func (o *DepotUser) SetTeamIdNil() {
	o.TeamId.Set(nil)
}

// UnsetTeamId ensures that no value is present for TeamId, not even an explicit nil
func (o *DepotUser) UnsetTeamId() {
	o.TeamId.Unset()
}

func (o DepotUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DepotUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Avatar.IsSet() {
		toSerialize["Avatar"] = o.Avatar.Get()
	}
	if !utils.IsNil(o.Email) {
		toSerialize["Email"] = o.Email
	}
	if o.GlobalKey.IsSet() {
		toSerialize["GlobalKey"] = o.GlobalKey.Get()
	}
	if o.Id.IsSet() {
		toSerialize["Id"] = o.Id.Get()
	}
	if !utils.IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if o.Status.IsSet() {
		toSerialize["Status"] = o.Status.Get()
	}
	if o.TeamId.IsSet() {
		toSerialize["TeamId"] = o.TeamId.Get()
	}
	return toSerialize, nil
}

type NullableDepotUser struct {
	value *DepotUser
	isSet bool
}

func (v NullableDepotUser) Get() *DepotUser {
	return v.value
}

func (v *NullableDepotUser) Set(val *DepotUser) {
	v.value = val
	v.isSet = true
}

func (v NullableDepotUser) IsSet() bool {
	return v.isSet
}

func (v *NullableDepotUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDepotUser(val *DepotUser) *NullableDepotUser {
	return &NullableDepotUser{value: val, isSet: true}
}

func (v NullableDepotUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDepotUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


