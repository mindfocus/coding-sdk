/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DepotSpecDetail type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DepotSpecDetail{}

// DepotSpecDetail 分支规范详细信息
type DepotSpecDetail struct {
	// 允许创建规定分支类型以外的分支
	AllowPushWildRef utils.NullableBool `json:"AllowPushWildRef,omitempty"`
	// 分支类型列表
	DepotBranchTypeList []DepotBranchType `json:"DepotBranchTypeList,omitempty"`
	// 合并方向规则列表
	DepotMergeRequestRuleList []DepotMergeRequestRule `json:"DepotMergeRequestRuleList,omitempty"`
	// 仓库规范描述信息
	Description utils.NullableString `json:"Description,omitempty"`
	// 仓库规范名字
	Name utils.NullableString `json:"Name,omitempty"`
	// system：系统级别的规范；team：团队级别的规范
	Type utils.NullableString `json:"Type,omitempty"`
	// 使用的是系统/团队级别的仓库规范（这个字段只在使用仓库路径查询时有用）
	UseExistingSolution utils.NullableBool `json:"UseExistingSolution,omitempty"`
}

// NewDepotSpecDetail instantiates a new DepotSpecDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDepotSpecDetail() *DepotSpecDetail {
	this := DepotSpecDetail{}
	var allowPushWildRef bool = false
	this.AllowPushWildRef = *utils.NewNullableBool(&allowPushWildRef)
	var description string = ""
	this.Description = *utils.NewNullableString(&description)
	var name string = ""
	this.Name = *utils.NewNullableString(&name)
	var type_ string = ""
	this.Type = *utils.NewNullableString(&type_)
	var useExistingSolution bool = false
	this.UseExistingSolution = *utils.NewNullableBool(&useExistingSolution)
	return &this
}

// NewDepotSpecDetailWithDefaults instantiates a new DepotSpecDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDepotSpecDetailWithDefaults() *DepotSpecDetail {
	this := DepotSpecDetail{}
	var allowPushWildRef bool = false
	this.AllowPushWildRef = *utils.NewNullableBool(&allowPushWildRef)
	var description string = ""
	this.Description = *utils.NewNullableString(&description)
	var name string = ""
	this.Name = *utils.NewNullableString(&name)
	var type_ string = ""
	this.Type = *utils.NewNullableString(&type_)
	var useExistingSolution bool = false
	this.UseExistingSolution = *utils.NewNullableBool(&useExistingSolution)
	return &this
}

// GetAllowPushWildRef returns the AllowPushWildRef field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DepotSpecDetail) GetAllowPushWildRef() bool {
	if o == nil || utils.IsNil(o.AllowPushWildRef.Get()) {
		var ret bool
		return ret
	}
	return *o.AllowPushWildRef.Get()
}

// GetAllowPushWildRefOk returns a tuple with the AllowPushWildRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DepotSpecDetail) GetAllowPushWildRefOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowPushWildRef.Get(), o.AllowPushWildRef.IsSet()
}

// HasAllowPushWildRef returns a boolean if a field has been set.
func (o *DepotSpecDetail) HasAllowPushWildRef() bool {
	if o != nil && o.AllowPushWildRef.IsSet() {
		return true
	}

	return false
}

// SetAllowPushWildRef gets a reference to the given utils.NullableBool and assigns it to the AllowPushWildRef field.
func (o *DepotSpecDetail) SetAllowPushWildRef(v bool) {
	o.AllowPushWildRef.Set(&v)
}
// SetAllowPushWildRefNil sets the value for AllowPushWildRef to be an explicit nil
func (o *DepotSpecDetail) SetAllowPushWildRefNil() {
	o.AllowPushWildRef.Set(nil)
}

// UnsetAllowPushWildRef ensures that no value is present for AllowPushWildRef, not even an explicit nil
func (o *DepotSpecDetail) UnsetAllowPushWildRef() {
	o.AllowPushWildRef.Unset()
}

// GetDepotBranchTypeList returns the DepotBranchTypeList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DepotSpecDetail) GetDepotBranchTypeList() []DepotBranchType {
	if o == nil {
		var ret []DepotBranchType
		return ret
	}
	return o.DepotBranchTypeList
}

// GetDepotBranchTypeListOk returns a tuple with the DepotBranchTypeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DepotSpecDetail) GetDepotBranchTypeListOk() ([]DepotBranchType, bool) {
	if o == nil || utils.IsNil(o.DepotBranchTypeList) {
		return nil, false
	}
	return o.DepotBranchTypeList, true
}

// HasDepotBranchTypeList returns a boolean if a field has been set.
func (o *DepotSpecDetail) HasDepotBranchTypeList() bool {
	if o != nil && !utils.IsNil(o.DepotBranchTypeList) {
		return true
	}

	return false
}

// SetDepotBranchTypeList gets a reference to the given []DepotBranchType and assigns it to the DepotBranchTypeList field.
func (o *DepotSpecDetail) SetDepotBranchTypeList(v []DepotBranchType) {
	o.DepotBranchTypeList = v
}

// GetDepotMergeRequestRuleList returns the DepotMergeRequestRuleList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DepotSpecDetail) GetDepotMergeRequestRuleList() []DepotMergeRequestRule {
	if o == nil {
		var ret []DepotMergeRequestRule
		return ret
	}
	return o.DepotMergeRequestRuleList
}

// GetDepotMergeRequestRuleListOk returns a tuple with the DepotMergeRequestRuleList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DepotSpecDetail) GetDepotMergeRequestRuleListOk() ([]DepotMergeRequestRule, bool) {
	if o == nil || utils.IsNil(o.DepotMergeRequestRuleList) {
		return nil, false
	}
	return o.DepotMergeRequestRuleList, true
}

// HasDepotMergeRequestRuleList returns a boolean if a field has been set.
func (o *DepotSpecDetail) HasDepotMergeRequestRuleList() bool {
	if o != nil && !utils.IsNil(o.DepotMergeRequestRuleList) {
		return true
	}

	return false
}

// SetDepotMergeRequestRuleList gets a reference to the given []DepotMergeRequestRule and assigns it to the DepotMergeRequestRuleList field.
func (o *DepotSpecDetail) SetDepotMergeRequestRuleList(v []DepotMergeRequestRule) {
	o.DepotMergeRequestRuleList = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DepotSpecDetail) GetDescription() string {
	if o == nil || utils.IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DepotSpecDetail) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *DepotSpecDetail) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given utils.NullableString and assigns it to the Description field.
func (o *DepotSpecDetail) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *DepotSpecDetail) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *DepotSpecDetail) UnsetDescription() {
	o.Description.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DepotSpecDetail) GetName() string {
	if o == nil || utils.IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DepotSpecDetail) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *DepotSpecDetail) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given utils.NullableString and assigns it to the Name field.
func (o *DepotSpecDetail) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *DepotSpecDetail) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *DepotSpecDetail) UnsetName() {
	o.Name.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DepotSpecDetail) GetType() string {
	if o == nil || utils.IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DepotSpecDetail) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *DepotSpecDetail) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given utils.NullableString and assigns it to the Type field.
func (o *DepotSpecDetail) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *DepotSpecDetail) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *DepotSpecDetail) UnsetType() {
	o.Type.Unset()
}

// GetUseExistingSolution returns the UseExistingSolution field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DepotSpecDetail) GetUseExistingSolution() bool {
	if o == nil || utils.IsNil(o.UseExistingSolution.Get()) {
		var ret bool
		return ret
	}
	return *o.UseExistingSolution.Get()
}

// GetUseExistingSolutionOk returns a tuple with the UseExistingSolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DepotSpecDetail) GetUseExistingSolutionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UseExistingSolution.Get(), o.UseExistingSolution.IsSet()
}

// HasUseExistingSolution returns a boolean if a field has been set.
func (o *DepotSpecDetail) HasUseExistingSolution() bool {
	if o != nil && o.UseExistingSolution.IsSet() {
		return true
	}

	return false
}

// SetUseExistingSolution gets a reference to the given utils.NullableBool and assigns it to the UseExistingSolution field.
func (o *DepotSpecDetail) SetUseExistingSolution(v bool) {
	o.UseExistingSolution.Set(&v)
}
// SetUseExistingSolutionNil sets the value for UseExistingSolution to be an explicit nil
func (o *DepotSpecDetail) SetUseExistingSolutionNil() {
	o.UseExistingSolution.Set(nil)
}

// UnsetUseExistingSolution ensures that no value is present for UseExistingSolution, not even an explicit nil
func (o *DepotSpecDetail) UnsetUseExistingSolution() {
	o.UseExistingSolution.Unset()
}

func (o DepotSpecDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DepotSpecDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowPushWildRef.IsSet() {
		toSerialize["AllowPushWildRef"] = o.AllowPushWildRef.Get()
	}
	if o.DepotBranchTypeList != nil {
		toSerialize["DepotBranchTypeList"] = o.DepotBranchTypeList
	}
	if o.DepotMergeRequestRuleList != nil {
		toSerialize["DepotMergeRequestRuleList"] = o.DepotMergeRequestRuleList
	}
	if o.Description.IsSet() {
		toSerialize["Description"] = o.Description.Get()
	}
	if o.Name.IsSet() {
		toSerialize["Name"] = o.Name.Get()
	}
	if o.Type.IsSet() {
		toSerialize["Type"] = o.Type.Get()
	}
	if o.UseExistingSolution.IsSet() {
		toSerialize["UseExistingSolution"] = o.UseExistingSolution.Get()
	}
	return toSerialize, nil
}

type NullableDepotSpecDetail struct {
	value *DepotSpecDetail
	isSet bool
}

func (v NullableDepotSpecDetail) Get() *DepotSpecDetail {
	return v.value
}

func (v *NullableDepotSpecDetail) Set(val *DepotSpecDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableDepotSpecDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableDepotSpecDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDepotSpecDetail(val *DepotSpecDetail) *NullableDepotSpecDetail {
	return &NullableDepotSpecDetail{value: val, isSet: true}
}

func (v NullableDepotSpecDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDepotSpecDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


