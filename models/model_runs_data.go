/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the RunsData type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &RunsData{}

// RunsData 测试计划列表
type RunsData struct {
	// 测试计划列表
	Runs []Run `json:"Runs,omitempty"`
}

// NewRunsData instantiates a new RunsData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunsData() *RunsData {
	this := RunsData{}
	return &this
}

// NewRunsDataWithDefaults instantiates a new RunsData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunsDataWithDefaults() *RunsData {
	this := RunsData{}
	return &this
}

// GetRuns returns the Runs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RunsData) GetRuns() []Run {
	if o == nil {
		var ret []Run
		return ret
	}
	return o.Runs
}

// GetRunsOk returns a tuple with the Runs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RunsData) GetRunsOk() ([]Run, bool) {
	if o == nil || utils.IsNil(o.Runs) {
		return nil, false
	}
	return o.Runs, true
}

// HasRuns returns a boolean if a field has been set.
func (o *RunsData) HasRuns() bool {
	if o != nil && !utils.IsNil(o.Runs) {
		return true
	}

	return false
}

// SetRuns gets a reference to the given []Run and assigns it to the Runs field.
func (o *RunsData) SetRuns(v []Run) {
	o.Runs = v
}

func (o RunsData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunsData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Runs != nil {
		toSerialize["Runs"] = o.Runs
	}
	return toSerialize, nil
}

type NullableRunsData struct {
	value *RunsData
	isSet bool
}

func (v NullableRunsData) Get() *RunsData {
	return v.value
}

func (v *NullableRunsData) Set(val *RunsData) {
	v.value = val
	v.isSet = true
}

func (v NullableRunsData) IsSet() bool {
	return v.isSet
}

func (v *NullableRunsData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunsData(val *RunsData) *NullableRunsData {
	return &NullableRunsData{value: val, isSet: true}
}

func (v NullableRunsData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunsData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


