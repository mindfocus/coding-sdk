/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the CaseData type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CaseData{}

// CaseData 测试用例数据
type CaseData struct {
	Case *Case `json:"Case,omitempty"`
}

// NewCaseData instantiates a new CaseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCaseData() *CaseData {
	this := CaseData{}
	return &this
}

// NewCaseDataWithDefaults instantiates a new CaseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCaseDataWithDefaults() *CaseData {
	this := CaseData{}
	return &this
}

// GetCase returns the Case field value if set, zero value otherwise.
func (o *CaseData) GetCase() Case {
	if o == nil || utils.IsNil(o.Case) {
		var ret Case
		return ret
	}
	return *o.Case
}

// GetCaseOk returns a tuple with the Case field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaseData) GetCaseOk() (*Case, bool) {
	if o == nil || utils.IsNil(o.Case) {
		return nil, false
	}
	return o.Case, true
}

// HasCase returns a boolean if a field has been set.
func (o *CaseData) HasCase() bool {
	if o != nil && !utils.IsNil(o.Case) {
		return true
	}

	return false
}

// SetCase gets a reference to the given Case and assigns it to the Case field.
func (o *CaseData) SetCase(v Case) {
	o.Case = &v
}

func (o CaseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CaseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Case) {
		toSerialize["Case"] = o.Case
	}
	return toSerialize, nil
}

type NullableCaseData struct {
	value *CaseData
	isSet bool
}

func (v NullableCaseData) Get() *CaseData {
	return v.value
}

func (v *NullableCaseData) Set(val *CaseData) {
	v.value = val
	v.isSet = true
}

func (v NullableCaseData) IsSet() bool {
	return v.isSet
}

func (v *NullableCaseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCaseData(val *CaseData) *NullableCaseData {
	return &NullableCaseData{value: val, isSet: true}
}

func (v NullableCaseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCaseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


