/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the GitCommit type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &GitCommit{}

// GitCommit 提交信息
type GitCommit struct {
	// 作者邮箱
	AuthorEmail *string `json:"AuthorEmail,omitempty"`
	// 作者姓名
	AuthorName *string `json:"AuthorName,omitempty"`
	// 提交日期
	CommitDate *int64 `json:"CommitDate,omitempty"`
	Committer *Committer `json:"Committer,omitempty"`
	// 提交日期
	CreatedAt *int64 `json:"CreatedAt,omitempty"`
	// 父提交
	Parents []string `json:"Parents,omitempty"`
	// 提交 ID
	Sha *string `json:"Sha,omitempty"`
	// 提交信息
	ShortMessage *string `json:"ShortMessage,omitempty"`
}

// NewGitCommit instantiates a new GitCommit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitCommit() *GitCommit {
	this := GitCommit{}
	var authorEmail string = ""
	this.AuthorEmail = &authorEmail
	var authorName string = ""
	this.AuthorName = &authorName
	var sha string = ""
	this.Sha = &sha
	var shortMessage string = ""
	this.ShortMessage = &shortMessage
	return &this
}

// NewGitCommitWithDefaults instantiates a new GitCommit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitCommitWithDefaults() *GitCommit {
	this := GitCommit{}
	var authorEmail string = ""
	this.AuthorEmail = &authorEmail
	var authorName string = ""
	this.AuthorName = &authorName
	var sha string = ""
	this.Sha = &sha
	var shortMessage string = ""
	this.ShortMessage = &shortMessage
	return &this
}

// GetAuthorEmail returns the AuthorEmail field value if set, zero value otherwise.
func (o *GitCommit) GetAuthorEmail() string {
	if o == nil || utils.IsNil(o.AuthorEmail) {
		var ret string
		return ret
	}
	return *o.AuthorEmail
}

// GetAuthorEmailOk returns a tuple with the AuthorEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitCommit) GetAuthorEmailOk() (*string, bool) {
	if o == nil || utils.IsNil(o.AuthorEmail) {
		return nil, false
	}
	return o.AuthorEmail, true
}

// HasAuthorEmail returns a boolean if a field has been set.
func (o *GitCommit) HasAuthorEmail() bool {
	if o != nil && !utils.IsNil(o.AuthorEmail) {
		return true
	}

	return false
}

// SetAuthorEmail gets a reference to the given string and assigns it to the AuthorEmail field.
func (o *GitCommit) SetAuthorEmail(v string) {
	o.AuthorEmail = &v
}

// GetAuthorName returns the AuthorName field value if set, zero value otherwise.
func (o *GitCommit) GetAuthorName() string {
	if o == nil || utils.IsNil(o.AuthorName) {
		var ret string
		return ret
	}
	return *o.AuthorName
}

// GetAuthorNameOk returns a tuple with the AuthorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitCommit) GetAuthorNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.AuthorName) {
		return nil, false
	}
	return o.AuthorName, true
}

// HasAuthorName returns a boolean if a field has been set.
func (o *GitCommit) HasAuthorName() bool {
	if o != nil && !utils.IsNil(o.AuthorName) {
		return true
	}

	return false
}

// SetAuthorName gets a reference to the given string and assigns it to the AuthorName field.
func (o *GitCommit) SetAuthorName(v string) {
	o.AuthorName = &v
}

// GetCommitDate returns the CommitDate field value if set, zero value otherwise.
func (o *GitCommit) GetCommitDate() int64 {
	if o == nil || utils.IsNil(o.CommitDate) {
		var ret int64
		return ret
	}
	return *o.CommitDate
}

// GetCommitDateOk returns a tuple with the CommitDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitCommit) GetCommitDateOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.CommitDate) {
		return nil, false
	}
	return o.CommitDate, true
}

// HasCommitDate returns a boolean if a field has been set.
func (o *GitCommit) HasCommitDate() bool {
	if o != nil && !utils.IsNil(o.CommitDate) {
		return true
	}

	return false
}

// SetCommitDate gets a reference to the given int64 and assigns it to the CommitDate field.
func (o *GitCommit) SetCommitDate(v int64) {
	o.CommitDate = &v
}

// GetCommitter returns the Committer field value if set, zero value otherwise.
func (o *GitCommit) GetCommitter() Committer {
	if o == nil || utils.IsNil(o.Committer) {
		var ret Committer
		return ret
	}
	return *o.Committer
}

// GetCommitterOk returns a tuple with the Committer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitCommit) GetCommitterOk() (*Committer, bool) {
	if o == nil || utils.IsNil(o.Committer) {
		return nil, false
	}
	return o.Committer, true
}

// HasCommitter returns a boolean if a field has been set.
func (o *GitCommit) HasCommitter() bool {
	if o != nil && !utils.IsNil(o.Committer) {
		return true
	}

	return false
}

// SetCommitter gets a reference to the given Committer and assigns it to the Committer field.
func (o *GitCommit) SetCommitter(v Committer) {
	o.Committer = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *GitCommit) GetCreatedAt() int64 {
	if o == nil || utils.IsNil(o.CreatedAt) {
		var ret int64
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitCommit) GetCreatedAtOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *GitCommit) HasCreatedAt() bool {
	if o != nil && !utils.IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int64 and assigns it to the CreatedAt field.
func (o *GitCommit) SetCreatedAt(v int64) {
	o.CreatedAt = &v
}

// GetParents returns the Parents field value if set, zero value otherwise.
func (o *GitCommit) GetParents() []string {
	if o == nil || utils.IsNil(o.Parents) {
		var ret []string
		return ret
	}
	return o.Parents
}

// GetParentsOk returns a tuple with the Parents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitCommit) GetParentsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Parents) {
		return nil, false
	}
	return o.Parents, true
}

// HasParents returns a boolean if a field has been set.
func (o *GitCommit) HasParents() bool {
	if o != nil && !utils.IsNil(o.Parents) {
		return true
	}

	return false
}

// SetParents gets a reference to the given []string and assigns it to the Parents field.
func (o *GitCommit) SetParents(v []string) {
	o.Parents = v
}

// GetSha returns the Sha field value if set, zero value otherwise.
func (o *GitCommit) GetSha() string {
	if o == nil || utils.IsNil(o.Sha) {
		var ret string
		return ret
	}
	return *o.Sha
}

// GetShaOk returns a tuple with the Sha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitCommit) GetShaOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Sha) {
		return nil, false
	}
	return o.Sha, true
}

// HasSha returns a boolean if a field has been set.
func (o *GitCommit) HasSha() bool {
	if o != nil && !utils.IsNil(o.Sha) {
		return true
	}

	return false
}

// SetSha gets a reference to the given string and assigns it to the Sha field.
func (o *GitCommit) SetSha(v string) {
	o.Sha = &v
}

// GetShortMessage returns the ShortMessage field value if set, zero value otherwise.
func (o *GitCommit) GetShortMessage() string {
	if o == nil || utils.IsNil(o.ShortMessage) {
		var ret string
		return ret
	}
	return *o.ShortMessage
}

// GetShortMessageOk returns a tuple with the ShortMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitCommit) GetShortMessageOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ShortMessage) {
		return nil, false
	}
	return o.ShortMessage, true
}

// HasShortMessage returns a boolean if a field has been set.
func (o *GitCommit) HasShortMessage() bool {
	if o != nil && !utils.IsNil(o.ShortMessage) {
		return true
	}

	return false
}

// SetShortMessage gets a reference to the given string and assigns it to the ShortMessage field.
func (o *GitCommit) SetShortMessage(v string) {
	o.ShortMessage = &v
}

func (o GitCommit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitCommit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.AuthorEmail) {
		toSerialize["AuthorEmail"] = o.AuthorEmail
	}
	if !utils.IsNil(o.AuthorName) {
		toSerialize["AuthorName"] = o.AuthorName
	}
	if !utils.IsNil(o.CommitDate) {
		toSerialize["CommitDate"] = o.CommitDate
	}
	if !utils.IsNil(o.Committer) {
		toSerialize["Committer"] = o.Committer
	}
	if !utils.IsNil(o.CreatedAt) {
		toSerialize["CreatedAt"] = o.CreatedAt
	}
	if !utils.IsNil(o.Parents) {
		toSerialize["Parents"] = o.Parents
	}
	if !utils.IsNil(o.Sha) {
		toSerialize["Sha"] = o.Sha
	}
	if !utils.IsNil(o.ShortMessage) {
		toSerialize["ShortMessage"] = o.ShortMessage
	}
	return toSerialize, nil
}

type NullableGitCommit struct {
	value *GitCommit
	isSet bool
}

func (v NullableGitCommit) Get() *GitCommit {
	return v.value
}

func (v *NullableGitCommit) Set(val *GitCommit) {
	v.value = val
	v.isSet = true
}

func (v NullableGitCommit) IsSet() bool {
	return v.isSet
}

func (v *NullableGitCommit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitCommit(val *GitCommit) *NullableGitCommit {
	return &NullableGitCommit{value: val, isSet: true}
}

func (v NullableGitCommit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitCommit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


