/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DepartmentDepartmentMemberRef type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DepartmentDepartmentMemberRef{}

// DepartmentDepartmentMemberRef 关联的 部门等信息
type DepartmentDepartmentMemberRef struct {
	// 是否部门负责人
	Assignee bool `json:"Assignee"`
	// 部门ID
	DepartmentId int64 `json:"DepartmentId"`
	// 部门成员ID
	DepartmentMemberId int64 `json:"DepartmentMemberId"`
	// 部门名
	DepartmentName string `json:"DepartmentName"`
	// 部门描述ID
	DescribeId string `json:"DescribeId"`
	// 是否是当前查询部门的直接成员
	Pointer bool `json:"Pointer"`
	// 部门用户的refId
	RefId int64 `json:"RefId"`
}

type _DepartmentDepartmentMemberRef DepartmentDepartmentMemberRef

// NewDepartmentDepartmentMemberRef instantiates a new DepartmentDepartmentMemberRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDepartmentDepartmentMemberRef(assignee bool, departmentId int64, departmentMemberId int64, departmentName string, describeId string, pointer bool, refId int64) *DepartmentDepartmentMemberRef {
	this := DepartmentDepartmentMemberRef{}
	this.Assignee = assignee
	this.DepartmentId = departmentId
	this.DepartmentMemberId = departmentMemberId
	this.DepartmentName = departmentName
	this.DescribeId = describeId
	this.Pointer = pointer
	this.RefId = refId
	return &this
}

// NewDepartmentDepartmentMemberRefWithDefaults instantiates a new DepartmentDepartmentMemberRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDepartmentDepartmentMemberRefWithDefaults() *DepartmentDepartmentMemberRef {
	this := DepartmentDepartmentMemberRef{}
	var assignee bool = false
	this.Assignee = assignee
	var departmentId int64 = 0
	this.DepartmentId = departmentId
	var departmentMemberId int64 = 0
	this.DepartmentMemberId = departmentMemberId
	var departmentName string = ""
	this.DepartmentName = departmentName
	var describeId string = ""
	this.DescribeId = describeId
	var pointer bool = false
	this.Pointer = pointer
	var refId int64 = 0
	this.RefId = refId
	return &this
}

// GetAssignee returns the Assignee field value
func (o *DepartmentDepartmentMemberRef) GetAssignee() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Assignee
}

// GetAssigneeOk returns a tuple with the Assignee field value
// and a boolean to check if the value has been set.
func (o *DepartmentDepartmentMemberRef) GetAssigneeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Assignee, true
}

// SetAssignee sets field value
func (o *DepartmentDepartmentMemberRef) SetAssignee(v bool) {
	o.Assignee = v
}

// GetDepartmentId returns the DepartmentId field value
func (o *DepartmentDepartmentMemberRef) GetDepartmentId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DepartmentId
}

// GetDepartmentIdOk returns a tuple with the DepartmentId field value
// and a boolean to check if the value has been set.
func (o *DepartmentDepartmentMemberRef) GetDepartmentIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepartmentId, true
}

// SetDepartmentId sets field value
func (o *DepartmentDepartmentMemberRef) SetDepartmentId(v int64) {
	o.DepartmentId = v
}

// GetDepartmentMemberId returns the DepartmentMemberId field value
func (o *DepartmentDepartmentMemberRef) GetDepartmentMemberId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DepartmentMemberId
}

// GetDepartmentMemberIdOk returns a tuple with the DepartmentMemberId field value
// and a boolean to check if the value has been set.
func (o *DepartmentDepartmentMemberRef) GetDepartmentMemberIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepartmentMemberId, true
}

// SetDepartmentMemberId sets field value
func (o *DepartmentDepartmentMemberRef) SetDepartmentMemberId(v int64) {
	o.DepartmentMemberId = v
}

// GetDepartmentName returns the DepartmentName field value
func (o *DepartmentDepartmentMemberRef) GetDepartmentName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DepartmentName
}

// GetDepartmentNameOk returns a tuple with the DepartmentName field value
// and a boolean to check if the value has been set.
func (o *DepartmentDepartmentMemberRef) GetDepartmentNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepartmentName, true
}

// SetDepartmentName sets field value
func (o *DepartmentDepartmentMemberRef) SetDepartmentName(v string) {
	o.DepartmentName = v
}

// GetDescribeId returns the DescribeId field value
func (o *DepartmentDepartmentMemberRef) GetDescribeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DescribeId
}

// GetDescribeIdOk returns a tuple with the DescribeId field value
// and a boolean to check if the value has been set.
func (o *DepartmentDepartmentMemberRef) GetDescribeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DescribeId, true
}

// SetDescribeId sets field value
func (o *DepartmentDepartmentMemberRef) SetDescribeId(v string) {
	o.DescribeId = v
}

// GetPointer returns the Pointer field value
func (o *DepartmentDepartmentMemberRef) GetPointer() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Pointer
}

// GetPointerOk returns a tuple with the Pointer field value
// and a boolean to check if the value has been set.
func (o *DepartmentDepartmentMemberRef) GetPointerOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pointer, true
}

// SetPointer sets field value
func (o *DepartmentDepartmentMemberRef) SetPointer(v bool) {
	o.Pointer = v
}

// GetRefId returns the RefId field value
func (o *DepartmentDepartmentMemberRef) GetRefId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.RefId
}

// GetRefIdOk returns a tuple with the RefId field value
// and a boolean to check if the value has been set.
func (o *DepartmentDepartmentMemberRef) GetRefIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RefId, true
}

// SetRefId sets field value
func (o *DepartmentDepartmentMemberRef) SetRefId(v int64) {
	o.RefId = v
}

func (o DepartmentDepartmentMemberRef) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DepartmentDepartmentMemberRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Assignee"] = o.Assignee
	toSerialize["DepartmentId"] = o.DepartmentId
	toSerialize["DepartmentMemberId"] = o.DepartmentMemberId
	toSerialize["DepartmentName"] = o.DepartmentName
	toSerialize["DescribeId"] = o.DescribeId
	toSerialize["Pointer"] = o.Pointer
	toSerialize["RefId"] = o.RefId
	return toSerialize, nil
}

func (o *DepartmentDepartmentMemberRef) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Assignee",
		"DepartmentId",
		"DepartmentMemberId",
		"DepartmentName",
		"DescribeId",
		"Pointer",
		"RefId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDepartmentDepartmentMemberRef := _DepartmentDepartmentMemberRef{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDepartmentDepartmentMemberRef)

	if err != nil {
		return err
	}

	*o = DepartmentDepartmentMemberRef(varDepartmentDepartmentMemberRef)

	return err
}

type NullableDepartmentDepartmentMemberRef struct {
	value *DepartmentDepartmentMemberRef
	isSet bool
}

func (v NullableDepartmentDepartmentMemberRef) Get() *DepartmentDepartmentMemberRef {
	return v.value
}

func (v *NullableDepartmentDepartmentMemberRef) Set(val *DepartmentDepartmentMemberRef) {
	v.value = val
	v.isSet = true
}

func (v NullableDepartmentDepartmentMemberRef) IsSet() bool {
	return v.isSet
}

func (v *NullableDepartmentDepartmentMemberRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDepartmentDepartmentMemberRef(val *DepartmentDepartmentMemberRef) *NullableDepartmentDepartmentMemberRef {
	return &NullableDepartmentDepartmentMemberRef{value: val, isSet: true}
}

func (v NullableDepartmentDepartmentMemberRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDepartmentDepartmentMemberRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


