/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the ModifyGitMergeBranchData type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ModifyGitMergeBranchData{}

// ModifyGitMergeBranchData 合并请求数据
type ModifyGitMergeBranchData struct {
	MergeCommit *GitCommit `json:"MergeCommit,omitempty"`
	// 合并状态 MERGED 合并成功 FAILED 合并失败，异常原因 NOT_MERGEABLE 不可合并，有代码冲突 ALREADY_MERGED 两个分支已经合并，两个分支是一样的或者目标分支的已经合并进当前分支了
	MergeStatus utils.NullableString `json:"MergeStatus,omitempty"`
}

// NewModifyGitMergeBranchData instantiates a new ModifyGitMergeBranchData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModifyGitMergeBranchData() *ModifyGitMergeBranchData {
	this := ModifyGitMergeBranchData{}
	var mergeStatus string = ""
	this.MergeStatus = *utils.NewNullableString(&mergeStatus)
	return &this
}

// NewModifyGitMergeBranchDataWithDefaults instantiates a new ModifyGitMergeBranchData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModifyGitMergeBranchDataWithDefaults() *ModifyGitMergeBranchData {
	this := ModifyGitMergeBranchData{}
	var mergeStatus string = ""
	this.MergeStatus = *utils.NewNullableString(&mergeStatus)
	return &this
}

// GetMergeCommit returns the MergeCommit field value if set, zero value otherwise.
func (o *ModifyGitMergeBranchData) GetMergeCommit() GitCommit {
	if o == nil || utils.IsNil(o.MergeCommit) {
		var ret GitCommit
		return ret
	}
	return *o.MergeCommit
}

// GetMergeCommitOk returns a tuple with the MergeCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifyGitMergeBranchData) GetMergeCommitOk() (*GitCommit, bool) {
	if o == nil || utils.IsNil(o.MergeCommit) {
		return nil, false
	}
	return o.MergeCommit, true
}

// HasMergeCommit returns a boolean if a field has been set.
func (o *ModifyGitMergeBranchData) HasMergeCommit() bool {
	if o != nil && !utils.IsNil(o.MergeCommit) {
		return true
	}

	return false
}

// SetMergeCommit gets a reference to the given GitCommit and assigns it to the MergeCommit field.
func (o *ModifyGitMergeBranchData) SetMergeCommit(v GitCommit) {
	o.MergeCommit = &v
}

// GetMergeStatus returns the MergeStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModifyGitMergeBranchData) GetMergeStatus() string {
	if o == nil || utils.IsNil(o.MergeStatus.Get()) {
		var ret string
		return ret
	}
	return *o.MergeStatus.Get()
}

// GetMergeStatusOk returns a tuple with the MergeStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModifyGitMergeBranchData) GetMergeStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MergeStatus.Get(), o.MergeStatus.IsSet()
}

// HasMergeStatus returns a boolean if a field has been set.
func (o *ModifyGitMergeBranchData) HasMergeStatus() bool {
	if o != nil && o.MergeStatus.IsSet() {
		return true
	}

	return false
}

// SetMergeStatus gets a reference to the given utils.NullableString and assigns it to the MergeStatus field.
func (o *ModifyGitMergeBranchData) SetMergeStatus(v string) {
	o.MergeStatus.Set(&v)
}
// SetMergeStatusNil sets the value for MergeStatus to be an explicit nil
func (o *ModifyGitMergeBranchData) SetMergeStatusNil() {
	o.MergeStatus.Set(nil)
}

// UnsetMergeStatus ensures that no value is present for MergeStatus, not even an explicit nil
func (o *ModifyGitMergeBranchData) UnsetMergeStatus() {
	o.MergeStatus.Unset()
}

func (o ModifyGitMergeBranchData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModifyGitMergeBranchData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.MergeCommit) {
		toSerialize["MergeCommit"] = o.MergeCommit
	}
	if o.MergeStatus.IsSet() {
		toSerialize["MergeStatus"] = o.MergeStatus.Get()
	}
	return toSerialize, nil
}

type NullableModifyGitMergeBranchData struct {
	value *ModifyGitMergeBranchData
	isSet bool
}

func (v NullableModifyGitMergeBranchData) Get() *ModifyGitMergeBranchData {
	return v.value
}

func (v *NullableModifyGitMergeBranchData) Set(val *ModifyGitMergeBranchData) {
	v.value = val
	v.isSet = true
}

func (v NullableModifyGitMergeBranchData) IsSet() bool {
	return v.isSet
}

func (v *NullableModifyGitMergeBranchData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModifyGitMergeBranchData(val *ModifyGitMergeBranchData) *NullableModifyGitMergeBranchData {
	return &NullableModifyGitMergeBranchData{value: val, isSet: true}
}

func (v NullableModifyGitMergeBranchData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModifyGitMergeBranchData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


