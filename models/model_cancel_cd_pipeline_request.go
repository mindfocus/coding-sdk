/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the CancelCdPipelineRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CancelCdPipelineRequest{}

// CancelCdPipelineRequest struct for CancelCdPipelineRequest
type CancelCdPipelineRequest struct {
	// 部署流程执行记录 ID
	PipelineExecutionId string `json:"PipelineExecutionId"`
	// 取消原因
	Reason *string `json:"Reason,omitempty"`
}

type _CancelCdPipelineRequest CancelCdPipelineRequest

// NewCancelCdPipelineRequest instantiates a new CancelCdPipelineRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCancelCdPipelineRequest(pipelineExecutionId string) *CancelCdPipelineRequest {
	this := CancelCdPipelineRequest{}
	this.PipelineExecutionId = pipelineExecutionId
	return &this
}

// NewCancelCdPipelineRequestWithDefaults instantiates a new CancelCdPipelineRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCancelCdPipelineRequestWithDefaults() *CancelCdPipelineRequest {
	this := CancelCdPipelineRequest{}
	return &this
}

// GetPipelineExecutionId returns the PipelineExecutionId field value
func (o *CancelCdPipelineRequest) GetPipelineExecutionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PipelineExecutionId
}

// GetPipelineExecutionIdOk returns a tuple with the PipelineExecutionId field value
// and a boolean to check if the value has been set.
func (o *CancelCdPipelineRequest) GetPipelineExecutionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PipelineExecutionId, true
}

// SetPipelineExecutionId sets field value
func (o *CancelCdPipelineRequest) SetPipelineExecutionId(v string) {
	o.PipelineExecutionId = v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *CancelCdPipelineRequest) GetReason() string {
	if o == nil || utils.IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelCdPipelineRequest) GetReasonOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *CancelCdPipelineRequest) HasReason() bool {
	if o != nil && !utils.IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *CancelCdPipelineRequest) SetReason(v string) {
	o.Reason = &v
}

func (o CancelCdPipelineRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CancelCdPipelineRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["PipelineExecutionId"] = o.PipelineExecutionId
	if !utils.IsNil(o.Reason) {
		toSerialize["Reason"] = o.Reason
	}
	return toSerialize, nil
}

func (o *CancelCdPipelineRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"PipelineExecutionId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCancelCdPipelineRequest := _CancelCdPipelineRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCancelCdPipelineRequest)

	if err != nil {
		return err
	}

	*o = CancelCdPipelineRequest(varCancelCdPipelineRequest)

	return err
}

type NullableCancelCdPipelineRequest struct {
	value *CancelCdPipelineRequest
	isSet bool
}

func (v NullableCancelCdPipelineRequest) Get() *CancelCdPipelineRequest {
	return v.value
}

func (v *NullableCancelCdPipelineRequest) Set(val *CancelCdPipelineRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCancelCdPipelineRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCancelCdPipelineRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancelCdPipelineRequest(val *CancelCdPipelineRequest) *NullableCancelCdPipelineRequest {
	return &NullableCancelCdPipelineRequest{value: val, isSet: true}
}

func (v NullableCancelCdPipelineRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancelCdPipelineRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


