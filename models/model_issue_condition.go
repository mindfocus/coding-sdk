/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the IssueCondition type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &IssueCondition{}

// IssueCondition 事项筛选条件
type IssueCondition struct {
	// 常量值  \"UNSPECIFIC\" 表示未指定，例如：处理人、需求类型、标签等字段，使用此值来筛选未指定处理人、需求类型或标签的事项。
	ConstValue *string `json:"ConstValue,omitempty"`
	// 自定义字段 Id，Key 为 \"CUSTOM\" 时需设置该值，常规字段无需设置。
	CustomFieldId *int64 `json:"CustomFieldId,omitempty"`
	// 自定义字段名称
	CustomFieldName *string `json:"CustomFieldName,omitempty"`
	// 筛选字段 KEY，可选值如下。  DEFECT_TYPE：缺陷类型，多选  REQUIREMENT_TYPE：需求类型，多选  MISSION_TYPE：任务类型，多选  PRIORITY：优先级，多选  DUE_DATE：截止日期，日期范围  UPDATED_AT：更新时间，日期范围  CREATED_AT：创建时间，日期范围  START_DATE：开始日期，日期范围  ASSIGNEE：处理人ID，多选  CREATOR：创建者ID，多选  WATCHER：关注者ID，多选  MODULE：模块，多选  LABEL：标签，多选  STATUS：状态，多选  STATUS_TYPE：状态类型，多选  KEYWORD：事项名称、CODE 模糊搜索  ISSUE_TYPE：事项类型，多选  ISSUE_SUB_TYPE：事项的子项类型，多选  WORKING_HOURS：预估工时，数值范围  ITERATION：迭代，多选  PARENT：父需求，多选  CUSTOM：自定义字段，同时需指定 CustomFieldId
	Key string `json:"Key"`
	// 筛选值，多选值用逗号隔开。  日期格式: 2020-08-01，日期时间格式: 2020-08-01 12:00:00  整数、小数、日期、日期时间类型的字段值应为一个范围，前后闭区间，范围开始值与结束值之间使用\"_\"连接，例如：\"0.1_5.0\"、\"2020-08-01_2020-08-31\"。
	Value *string `json:"Value,omitempty"`
}

type _IssueCondition IssueCondition

// NewIssueCondition instantiates a new IssueCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueCondition(key string) *IssueCondition {
	this := IssueCondition{}
	var constValue string = ""
	this.ConstValue = &constValue
	var customFieldName string = ""
	this.CustomFieldName = &customFieldName
	this.Key = key
	var value string = ""
	this.Value = &value
	return &this
}

// NewIssueConditionWithDefaults instantiates a new IssueCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueConditionWithDefaults() *IssueCondition {
	this := IssueCondition{}
	var constValue string = ""
	this.ConstValue = &constValue
	var customFieldName string = ""
	this.CustomFieldName = &customFieldName
	var key string = ""
	this.Key = key
	var value string = ""
	this.Value = &value
	return &this
}

// GetConstValue returns the ConstValue field value if set, zero value otherwise.
func (o *IssueCondition) GetConstValue() string {
	if o == nil || utils.IsNil(o.ConstValue) {
		var ret string
		return ret
	}
	return *o.ConstValue
}

// GetConstValueOk returns a tuple with the ConstValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueCondition) GetConstValueOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ConstValue) {
		return nil, false
	}
	return o.ConstValue, true
}

// HasConstValue returns a boolean if a field has been set.
func (o *IssueCondition) HasConstValue() bool {
	if o != nil && !utils.IsNil(o.ConstValue) {
		return true
	}

	return false
}

// SetConstValue gets a reference to the given string and assigns it to the ConstValue field.
func (o *IssueCondition) SetConstValue(v string) {
	o.ConstValue = &v
}

// GetCustomFieldId returns the CustomFieldId field value if set, zero value otherwise.
func (o *IssueCondition) GetCustomFieldId() int64 {
	if o == nil || utils.IsNil(o.CustomFieldId) {
		var ret int64
		return ret
	}
	return *o.CustomFieldId
}

// GetCustomFieldIdOk returns a tuple with the CustomFieldId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueCondition) GetCustomFieldIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.CustomFieldId) {
		return nil, false
	}
	return o.CustomFieldId, true
}

// HasCustomFieldId returns a boolean if a field has been set.
func (o *IssueCondition) HasCustomFieldId() bool {
	if o != nil && !utils.IsNil(o.CustomFieldId) {
		return true
	}

	return false
}

// SetCustomFieldId gets a reference to the given int64 and assigns it to the CustomFieldId field.
func (o *IssueCondition) SetCustomFieldId(v int64) {
	o.CustomFieldId = &v
}

// GetCustomFieldName returns the CustomFieldName field value if set, zero value otherwise.
func (o *IssueCondition) GetCustomFieldName() string {
	if o == nil || utils.IsNil(o.CustomFieldName) {
		var ret string
		return ret
	}
	return *o.CustomFieldName
}

// GetCustomFieldNameOk returns a tuple with the CustomFieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueCondition) GetCustomFieldNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.CustomFieldName) {
		return nil, false
	}
	return o.CustomFieldName, true
}

// HasCustomFieldName returns a boolean if a field has been set.
func (o *IssueCondition) HasCustomFieldName() bool {
	if o != nil && !utils.IsNil(o.CustomFieldName) {
		return true
	}

	return false
}

// SetCustomFieldName gets a reference to the given string and assigns it to the CustomFieldName field.
func (o *IssueCondition) SetCustomFieldName(v string) {
	o.CustomFieldName = &v
}

// GetKey returns the Key field value
func (o *IssueCondition) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *IssueCondition) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *IssueCondition) SetKey(v string) {
	o.Key = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *IssueCondition) GetValue() string {
	if o == nil || utils.IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueCondition) GetValueOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *IssueCondition) HasValue() bool {
	if o != nil && !utils.IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *IssueCondition) SetValue(v string) {
	o.Value = &v
}

func (o IssueCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IssueCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.ConstValue) {
		toSerialize["ConstValue"] = o.ConstValue
	}
	if !utils.IsNil(o.CustomFieldId) {
		toSerialize["CustomFieldId"] = o.CustomFieldId
	}
	if !utils.IsNil(o.CustomFieldName) {
		toSerialize["CustomFieldName"] = o.CustomFieldName
	}
	toSerialize["Key"] = o.Key
	if !utils.IsNil(o.Value) {
		toSerialize["Value"] = o.Value
	}
	return toSerialize, nil
}

func (o *IssueCondition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIssueCondition := _IssueCondition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIssueCondition)

	if err != nil {
		return err
	}

	*o = IssueCondition(varIssueCondition)

	return err
}

type NullableIssueCondition struct {
	value *IssueCondition
	isSet bool
}

func (v NullableIssueCondition) Get() *IssueCondition {
	return v.value
}

func (v *NullableIssueCondition) Set(val *IssueCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueCondition(val *IssueCondition) *NullableIssueCondition {
	return &NullableIssueCondition{value: val, isSet: true}
}

func (v NullableIssueCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


