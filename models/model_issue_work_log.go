/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the IssueWorkLog type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &IssueWorkLog{}

// IssueWorkLog 事项工时日志信息
type IssueWorkLog struct {
	// 创建时间戳
	CreatedAt *int64 `json:"CreatedAt,omitempty"`
	// 工时日志 Id
	Id *int64 `json:"Id,omitempty"`
	// 事项编号
	IssueCode *int64 `json:"IssueCode,omitempty"`
	// 事项 Id
	IssueId *int64 `json:"IssueId,omitempty"`
	// 项目名称
	ProjectName *string `json:"ProjectName,omitempty"`
	// 使用工时
	RecordHours *float32 `json:"RecordHours,omitempty"`
	// 剩余工时
	RemainingHours *float32 `json:"RemainingHours,omitempty"`
	// 开始时间
	StartAt *int64 `json:"StartAt,omitempty"`
	// 更新时间
	UpdatedAt utils.NullableInt64 `json:"UpdatedAt,omitempty"`
	// 用户 Id
	UserId *int64 `json:"UserId,omitempty"`
	// 工作描述
	WorkingDesc *string `json:"WorkingDesc,omitempty"`
}

// NewIssueWorkLog instantiates a new IssueWorkLog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueWorkLog() *IssueWorkLog {
	this := IssueWorkLog{}
	var projectName string = ""
	this.ProjectName = &projectName
	var workingDesc string = ""
	this.WorkingDesc = &workingDesc
	return &this
}

// NewIssueWorkLogWithDefaults instantiates a new IssueWorkLog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueWorkLogWithDefaults() *IssueWorkLog {
	this := IssueWorkLog{}
	var projectName string = ""
	this.ProjectName = &projectName
	var workingDesc string = ""
	this.WorkingDesc = &workingDesc
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *IssueWorkLog) GetCreatedAt() int64 {
	if o == nil || utils.IsNil(o.CreatedAt) {
		var ret int64
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueWorkLog) GetCreatedAtOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *IssueWorkLog) HasCreatedAt() bool {
	if o != nil && !utils.IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int64 and assigns it to the CreatedAt field.
func (o *IssueWorkLog) SetCreatedAt(v int64) {
	o.CreatedAt = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IssueWorkLog) GetId() int64 {
	if o == nil || utils.IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueWorkLog) GetIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IssueWorkLog) HasId() bool {
	if o != nil && !utils.IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *IssueWorkLog) SetId(v int64) {
	o.Id = &v
}

// GetIssueCode returns the IssueCode field value if set, zero value otherwise.
func (o *IssueWorkLog) GetIssueCode() int64 {
	if o == nil || utils.IsNil(o.IssueCode) {
		var ret int64
		return ret
	}
	return *o.IssueCode
}

// GetIssueCodeOk returns a tuple with the IssueCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueWorkLog) GetIssueCodeOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.IssueCode) {
		return nil, false
	}
	return o.IssueCode, true
}

// HasIssueCode returns a boolean if a field has been set.
func (o *IssueWorkLog) HasIssueCode() bool {
	if o != nil && !utils.IsNil(o.IssueCode) {
		return true
	}

	return false
}

// SetIssueCode gets a reference to the given int64 and assigns it to the IssueCode field.
func (o *IssueWorkLog) SetIssueCode(v int64) {
	o.IssueCode = &v
}

// GetIssueId returns the IssueId field value if set, zero value otherwise.
func (o *IssueWorkLog) GetIssueId() int64 {
	if o == nil || utils.IsNil(o.IssueId) {
		var ret int64
		return ret
	}
	return *o.IssueId
}

// GetIssueIdOk returns a tuple with the IssueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueWorkLog) GetIssueIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.IssueId) {
		return nil, false
	}
	return o.IssueId, true
}

// HasIssueId returns a boolean if a field has been set.
func (o *IssueWorkLog) HasIssueId() bool {
	if o != nil && !utils.IsNil(o.IssueId) {
		return true
	}

	return false
}

// SetIssueId gets a reference to the given int64 and assigns it to the IssueId field.
func (o *IssueWorkLog) SetIssueId(v int64) {
	o.IssueId = &v
}

// GetProjectName returns the ProjectName field value if set, zero value otherwise.
func (o *IssueWorkLog) GetProjectName() string {
	if o == nil || utils.IsNil(o.ProjectName) {
		var ret string
		return ret
	}
	return *o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueWorkLog) GetProjectNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ProjectName) {
		return nil, false
	}
	return o.ProjectName, true
}

// HasProjectName returns a boolean if a field has been set.
func (o *IssueWorkLog) HasProjectName() bool {
	if o != nil && !utils.IsNil(o.ProjectName) {
		return true
	}

	return false
}

// SetProjectName gets a reference to the given string and assigns it to the ProjectName field.
func (o *IssueWorkLog) SetProjectName(v string) {
	o.ProjectName = &v
}

// GetRecordHours returns the RecordHours field value if set, zero value otherwise.
func (o *IssueWorkLog) GetRecordHours() float32 {
	if o == nil || utils.IsNil(o.RecordHours) {
		var ret float32
		return ret
	}
	return *o.RecordHours
}

// GetRecordHoursOk returns a tuple with the RecordHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueWorkLog) GetRecordHoursOk() (*float32, bool) {
	if o == nil || utils.IsNil(o.RecordHours) {
		return nil, false
	}
	return o.RecordHours, true
}

// HasRecordHours returns a boolean if a field has been set.
func (o *IssueWorkLog) HasRecordHours() bool {
	if o != nil && !utils.IsNil(o.RecordHours) {
		return true
	}

	return false
}

// SetRecordHours gets a reference to the given float32 and assigns it to the RecordHours field.
func (o *IssueWorkLog) SetRecordHours(v float32) {
	o.RecordHours = &v
}

// GetRemainingHours returns the RemainingHours field value if set, zero value otherwise.
func (o *IssueWorkLog) GetRemainingHours() float32 {
	if o == nil || utils.IsNil(o.RemainingHours) {
		var ret float32
		return ret
	}
	return *o.RemainingHours
}

// GetRemainingHoursOk returns a tuple with the RemainingHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueWorkLog) GetRemainingHoursOk() (*float32, bool) {
	if o == nil || utils.IsNil(o.RemainingHours) {
		return nil, false
	}
	return o.RemainingHours, true
}

// HasRemainingHours returns a boolean if a field has been set.
func (o *IssueWorkLog) HasRemainingHours() bool {
	if o != nil && !utils.IsNil(o.RemainingHours) {
		return true
	}

	return false
}

// SetRemainingHours gets a reference to the given float32 and assigns it to the RemainingHours field.
func (o *IssueWorkLog) SetRemainingHours(v float32) {
	o.RemainingHours = &v
}

// GetStartAt returns the StartAt field value if set, zero value otherwise.
func (o *IssueWorkLog) GetStartAt() int64 {
	if o == nil || utils.IsNil(o.StartAt) {
		var ret int64
		return ret
	}
	return *o.StartAt
}

// GetStartAtOk returns a tuple with the StartAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueWorkLog) GetStartAtOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.StartAt) {
		return nil, false
	}
	return o.StartAt, true
}

// HasStartAt returns a boolean if a field has been set.
func (o *IssueWorkLog) HasStartAt() bool {
	if o != nil && !utils.IsNil(o.StartAt) {
		return true
	}

	return false
}

// SetStartAt gets a reference to the given int64 and assigns it to the StartAt field.
func (o *IssueWorkLog) SetStartAt(v int64) {
	o.StartAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssueWorkLog) GetUpdatedAt() int64 {
	if o == nil || utils.IsNil(o.UpdatedAt.Get()) {
		var ret int64
		return ret
	}
	return *o.UpdatedAt.Get()
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssueWorkLog) GetUpdatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedAt.Get(), o.UpdatedAt.IsSet()
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *IssueWorkLog) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt.IsSet() {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given utils.NullableInt64 and assigns it to the UpdatedAt field.
func (o *IssueWorkLog) SetUpdatedAt(v int64) {
	o.UpdatedAt.Set(&v)
}
// SetUpdatedAtNil sets the value for UpdatedAt to be an explicit nil
func (o *IssueWorkLog) SetUpdatedAtNil() {
	o.UpdatedAt.Set(nil)
}

// UnsetUpdatedAt ensures that no value is present for UpdatedAt, not even an explicit nil
func (o *IssueWorkLog) UnsetUpdatedAt() {
	o.UpdatedAt.Unset()
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *IssueWorkLog) GetUserId() int64 {
	if o == nil || utils.IsNil(o.UserId) {
		var ret int64
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueWorkLog) GetUserIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *IssueWorkLog) HasUserId() bool {
	if o != nil && !utils.IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int64 and assigns it to the UserId field.
func (o *IssueWorkLog) SetUserId(v int64) {
	o.UserId = &v
}

// GetWorkingDesc returns the WorkingDesc field value if set, zero value otherwise.
func (o *IssueWorkLog) GetWorkingDesc() string {
	if o == nil || utils.IsNil(o.WorkingDesc) {
		var ret string
		return ret
	}
	return *o.WorkingDesc
}

// GetWorkingDescOk returns a tuple with the WorkingDesc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueWorkLog) GetWorkingDescOk() (*string, bool) {
	if o == nil || utils.IsNil(o.WorkingDesc) {
		return nil, false
	}
	return o.WorkingDesc, true
}

// HasWorkingDesc returns a boolean if a field has been set.
func (o *IssueWorkLog) HasWorkingDesc() bool {
	if o != nil && !utils.IsNil(o.WorkingDesc) {
		return true
	}

	return false
}

// SetWorkingDesc gets a reference to the given string and assigns it to the WorkingDesc field.
func (o *IssueWorkLog) SetWorkingDesc(v string) {
	o.WorkingDesc = &v
}

func (o IssueWorkLog) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IssueWorkLog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.CreatedAt) {
		toSerialize["CreatedAt"] = o.CreatedAt
	}
	if !utils.IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !utils.IsNil(o.IssueCode) {
		toSerialize["IssueCode"] = o.IssueCode
	}
	if !utils.IsNil(o.IssueId) {
		toSerialize["IssueId"] = o.IssueId
	}
	if !utils.IsNil(o.ProjectName) {
		toSerialize["ProjectName"] = o.ProjectName
	}
	if !utils.IsNil(o.RecordHours) {
		toSerialize["RecordHours"] = o.RecordHours
	}
	if !utils.IsNil(o.RemainingHours) {
		toSerialize["RemainingHours"] = o.RemainingHours
	}
	if !utils.IsNil(o.StartAt) {
		toSerialize["StartAt"] = o.StartAt
	}
	if o.UpdatedAt.IsSet() {
		toSerialize["UpdatedAt"] = o.UpdatedAt.Get()
	}
	if !utils.IsNil(o.UserId) {
		toSerialize["UserId"] = o.UserId
	}
	if !utils.IsNil(o.WorkingDesc) {
		toSerialize["WorkingDesc"] = o.WorkingDesc
	}
	return toSerialize, nil
}

type NullableIssueWorkLog struct {
	value *IssueWorkLog
	isSet bool
}

func (v NullableIssueWorkLog) Get() *IssueWorkLog {
	return v.value
}

func (v *NullableIssueWorkLog) Set(val *IssueWorkLog) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueWorkLog) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueWorkLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueWorkLog(val *IssueWorkLog) *NullableIssueWorkLog {
	return &NullableIssueWorkLog{value: val, isSet: true}
}

func (v NullableIssueWorkLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueWorkLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


