/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the CommitComment type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CommitComment{}

// CommitComment 提交评论的信息
type CommitComment struct {
	Author *CodingUser `json:"Author,omitempty"`
	// 提交 ID
	CommitSha *string `json:"CommitSha,omitempty"`
	// 评论内容
	Content *string `json:"Content,omitempty"`
	// 创建时间
	CreatedAt *int64 `json:"CreatedAt,omitempty"`
	// 仓库 ID
	DepotId *int64 `json:"DepotId,omitempty"`
	// 提交评论 ID
	Id *int64 `json:"Id,omitempty"`
	// git diff 信息的第几行
	Index *int64 `json:"Index,omitempty"`
	// 评论的文件路径
	Path *string `json:"Path,omitempty"`
}

// NewCommitComment instantiates a new CommitComment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommitComment() *CommitComment {
	this := CommitComment{}
	var commitSha string = ""
	this.CommitSha = &commitSha
	var content string = ""
	this.Content = &content
	var path string = ""
	this.Path = &path
	return &this
}

// NewCommitCommentWithDefaults instantiates a new CommitComment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitCommentWithDefaults() *CommitComment {
	this := CommitComment{}
	var commitSha string = ""
	this.CommitSha = &commitSha
	var content string = ""
	this.Content = &content
	var path string = ""
	this.Path = &path
	return &this
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *CommitComment) GetAuthor() CodingUser {
	if o == nil || utils.IsNil(o.Author) {
		var ret CodingUser
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitComment) GetAuthorOk() (*CodingUser, bool) {
	if o == nil || utils.IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *CommitComment) HasAuthor() bool {
	if o != nil && !utils.IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given CodingUser and assigns it to the Author field.
func (o *CommitComment) SetAuthor(v CodingUser) {
	o.Author = &v
}

// GetCommitSha returns the CommitSha field value if set, zero value otherwise.
func (o *CommitComment) GetCommitSha() string {
	if o == nil || utils.IsNil(o.CommitSha) {
		var ret string
		return ret
	}
	return *o.CommitSha
}

// GetCommitShaOk returns a tuple with the CommitSha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitComment) GetCommitShaOk() (*string, bool) {
	if o == nil || utils.IsNil(o.CommitSha) {
		return nil, false
	}
	return o.CommitSha, true
}

// HasCommitSha returns a boolean if a field has been set.
func (o *CommitComment) HasCommitSha() bool {
	if o != nil && !utils.IsNil(o.CommitSha) {
		return true
	}

	return false
}

// SetCommitSha gets a reference to the given string and assigns it to the CommitSha field.
func (o *CommitComment) SetCommitSha(v string) {
	o.CommitSha = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *CommitComment) GetContent() string {
	if o == nil || utils.IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitComment) GetContentOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *CommitComment) HasContent() bool {
	if o != nil && !utils.IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *CommitComment) SetContent(v string) {
	o.Content = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *CommitComment) GetCreatedAt() int64 {
	if o == nil || utils.IsNil(o.CreatedAt) {
		var ret int64
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitComment) GetCreatedAtOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *CommitComment) HasCreatedAt() bool {
	if o != nil && !utils.IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int64 and assigns it to the CreatedAt field.
func (o *CommitComment) SetCreatedAt(v int64) {
	o.CreatedAt = &v
}

// GetDepotId returns the DepotId field value if set, zero value otherwise.
func (o *CommitComment) GetDepotId() int64 {
	if o == nil || utils.IsNil(o.DepotId) {
		var ret int64
		return ret
	}
	return *o.DepotId
}

// GetDepotIdOk returns a tuple with the DepotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitComment) GetDepotIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.DepotId) {
		return nil, false
	}
	return o.DepotId, true
}

// HasDepotId returns a boolean if a field has been set.
func (o *CommitComment) HasDepotId() bool {
	if o != nil && !utils.IsNil(o.DepotId) {
		return true
	}

	return false
}

// SetDepotId gets a reference to the given int64 and assigns it to the DepotId field.
func (o *CommitComment) SetDepotId(v int64) {
	o.DepotId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CommitComment) GetId() int64 {
	if o == nil || utils.IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitComment) GetIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CommitComment) HasId() bool {
	if o != nil && !utils.IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *CommitComment) SetId(v int64) {
	o.Id = &v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *CommitComment) GetIndex() int64 {
	if o == nil || utils.IsNil(o.Index) {
		var ret int64
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitComment) GetIndexOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *CommitComment) HasIndex() bool {
	if o != nil && !utils.IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given int64 and assigns it to the Index field.
func (o *CommitComment) SetIndex(v int64) {
	o.Index = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *CommitComment) GetPath() string {
	if o == nil || utils.IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitComment) GetPathOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *CommitComment) HasPath() bool {
	if o != nil && !utils.IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *CommitComment) SetPath(v string) {
	o.Path = &v
}

func (o CommitComment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommitComment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Author) {
		toSerialize["Author"] = o.Author
	}
	if !utils.IsNil(o.CommitSha) {
		toSerialize["CommitSha"] = o.CommitSha
	}
	if !utils.IsNil(o.Content) {
		toSerialize["Content"] = o.Content
	}
	if !utils.IsNil(o.CreatedAt) {
		toSerialize["CreatedAt"] = o.CreatedAt
	}
	if !utils.IsNil(o.DepotId) {
		toSerialize["DepotId"] = o.DepotId
	}
	if !utils.IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !utils.IsNil(o.Index) {
		toSerialize["Index"] = o.Index
	}
	if !utils.IsNil(o.Path) {
		toSerialize["Path"] = o.Path
	}
	return toSerialize, nil
}

type NullableCommitComment struct {
	value *CommitComment
	isSet bool
}

func (v NullableCommitComment) Get() *CommitComment {
	return v.value
}

func (v *NullableCommitComment) Set(val *CommitComment) {
	v.value = val
	v.isSet = true
}

func (v NullableCommitComment) IsSet() bool {
	return v.isSet
}

func (v *NullableCommitComment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommitComment(val *CommitComment) *NullableCommitComment {
	return &NullableCommitComment{value: val, isSet: true}
}

func (v NullableCommitComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommitComment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


