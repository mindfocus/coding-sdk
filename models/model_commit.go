/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the Commit type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Commit{}

// Commit 代码仓库的提交信息
type Commit struct {
	Author *Committer `json:"Author,omitempty"`
	// 作者邮箱
	AuthorEmail *string `json:"AuthorEmail,omitempty"`
	// 作者姓名
	AuthorName *string `json:"AuthorName,omitempty"`
	// 提交时间的时间戳
	CommitDate *int64 `json:"CommitDate,omitempty"`
	Committer *Committer `json:"Committer,omitempty"`
	// 提交时间的时间戳
	CreatedAt *int64 `json:"CreatedAt,omitempty"`
	// 提交附带的全部信息
	FullMessage *string `json:"FullMessage,omitempty"`
	// 父提交
	Parents []string `json:"Parents,omitempty"`
	// 提交的sha值(commitId)
	Sha *string `json:"Sha,omitempty"`
	// 提交附带的message
	ShortMessage *string `json:"ShortMessage,omitempty"`
}

// NewCommit instantiates a new Commit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommit() *Commit {
	this := Commit{}
	var authorEmail string = ""
	this.AuthorEmail = &authorEmail
	var authorName string = ""
	this.AuthorName = &authorName
	var fullMessage string = ""
	this.FullMessage = &fullMessage
	var sha string = ""
	this.Sha = &sha
	var shortMessage string = ""
	this.ShortMessage = &shortMessage
	return &this
}

// NewCommitWithDefaults instantiates a new Commit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitWithDefaults() *Commit {
	this := Commit{}
	var authorEmail string = ""
	this.AuthorEmail = &authorEmail
	var authorName string = ""
	this.AuthorName = &authorName
	var fullMessage string = ""
	this.FullMessage = &fullMessage
	var sha string = ""
	this.Sha = &sha
	var shortMessage string = ""
	this.ShortMessage = &shortMessage
	return &this
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *Commit) GetAuthor() Committer {
	if o == nil || utils.IsNil(o.Author) {
		var ret Committer
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commit) GetAuthorOk() (*Committer, bool) {
	if o == nil || utils.IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *Commit) HasAuthor() bool {
	if o != nil && !utils.IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given Committer and assigns it to the Author field.
func (o *Commit) SetAuthor(v Committer) {
	o.Author = &v
}

// GetAuthorEmail returns the AuthorEmail field value if set, zero value otherwise.
func (o *Commit) GetAuthorEmail() string {
	if o == nil || utils.IsNil(o.AuthorEmail) {
		var ret string
		return ret
	}
	return *o.AuthorEmail
}

// GetAuthorEmailOk returns a tuple with the AuthorEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commit) GetAuthorEmailOk() (*string, bool) {
	if o == nil || utils.IsNil(o.AuthorEmail) {
		return nil, false
	}
	return o.AuthorEmail, true
}

// HasAuthorEmail returns a boolean if a field has been set.
func (o *Commit) HasAuthorEmail() bool {
	if o != nil && !utils.IsNil(o.AuthorEmail) {
		return true
	}

	return false
}

// SetAuthorEmail gets a reference to the given string and assigns it to the AuthorEmail field.
func (o *Commit) SetAuthorEmail(v string) {
	o.AuthorEmail = &v
}

// GetAuthorName returns the AuthorName field value if set, zero value otherwise.
func (o *Commit) GetAuthorName() string {
	if o == nil || utils.IsNil(o.AuthorName) {
		var ret string
		return ret
	}
	return *o.AuthorName
}

// GetAuthorNameOk returns a tuple with the AuthorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commit) GetAuthorNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.AuthorName) {
		return nil, false
	}
	return o.AuthorName, true
}

// HasAuthorName returns a boolean if a field has been set.
func (o *Commit) HasAuthorName() bool {
	if o != nil && !utils.IsNil(o.AuthorName) {
		return true
	}

	return false
}

// SetAuthorName gets a reference to the given string and assigns it to the AuthorName field.
func (o *Commit) SetAuthorName(v string) {
	o.AuthorName = &v
}

// GetCommitDate returns the CommitDate field value if set, zero value otherwise.
func (o *Commit) GetCommitDate() int64 {
	if o == nil || utils.IsNil(o.CommitDate) {
		var ret int64
		return ret
	}
	return *o.CommitDate
}

// GetCommitDateOk returns a tuple with the CommitDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commit) GetCommitDateOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.CommitDate) {
		return nil, false
	}
	return o.CommitDate, true
}

// HasCommitDate returns a boolean if a field has been set.
func (o *Commit) HasCommitDate() bool {
	if o != nil && !utils.IsNil(o.CommitDate) {
		return true
	}

	return false
}

// SetCommitDate gets a reference to the given int64 and assigns it to the CommitDate field.
func (o *Commit) SetCommitDate(v int64) {
	o.CommitDate = &v
}

// GetCommitter returns the Committer field value if set, zero value otherwise.
func (o *Commit) GetCommitter() Committer {
	if o == nil || utils.IsNil(o.Committer) {
		var ret Committer
		return ret
	}
	return *o.Committer
}

// GetCommitterOk returns a tuple with the Committer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commit) GetCommitterOk() (*Committer, bool) {
	if o == nil || utils.IsNil(o.Committer) {
		return nil, false
	}
	return o.Committer, true
}

// HasCommitter returns a boolean if a field has been set.
func (o *Commit) HasCommitter() bool {
	if o != nil && !utils.IsNil(o.Committer) {
		return true
	}

	return false
}

// SetCommitter gets a reference to the given Committer and assigns it to the Committer field.
func (o *Commit) SetCommitter(v Committer) {
	o.Committer = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Commit) GetCreatedAt() int64 {
	if o == nil || utils.IsNil(o.CreatedAt) {
		var ret int64
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commit) GetCreatedAtOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Commit) HasCreatedAt() bool {
	if o != nil && !utils.IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int64 and assigns it to the CreatedAt field.
func (o *Commit) SetCreatedAt(v int64) {
	o.CreatedAt = &v
}

// GetFullMessage returns the FullMessage field value if set, zero value otherwise.
func (o *Commit) GetFullMessage() string {
	if o == nil || utils.IsNil(o.FullMessage) {
		var ret string
		return ret
	}
	return *o.FullMessage
}

// GetFullMessageOk returns a tuple with the FullMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commit) GetFullMessageOk() (*string, bool) {
	if o == nil || utils.IsNil(o.FullMessage) {
		return nil, false
	}
	return o.FullMessage, true
}

// HasFullMessage returns a boolean if a field has been set.
func (o *Commit) HasFullMessage() bool {
	if o != nil && !utils.IsNil(o.FullMessage) {
		return true
	}

	return false
}

// SetFullMessage gets a reference to the given string and assigns it to the FullMessage field.
func (o *Commit) SetFullMessage(v string) {
	o.FullMessage = &v
}

// GetParents returns the Parents field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Commit) GetParents() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Parents
}

// GetParentsOk returns a tuple with the Parents field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Commit) GetParentsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Parents) {
		return nil, false
	}
	return o.Parents, true
}

// HasParents returns a boolean if a field has been set.
func (o *Commit) HasParents() bool {
	if o != nil && !utils.IsNil(o.Parents) {
		return true
	}

	return false
}

// SetParents gets a reference to the given []string and assigns it to the Parents field.
func (o *Commit) SetParents(v []string) {
	o.Parents = v
}

// GetSha returns the Sha field value if set, zero value otherwise.
func (o *Commit) GetSha() string {
	if o == nil || utils.IsNil(o.Sha) {
		var ret string
		return ret
	}
	return *o.Sha
}

// GetShaOk returns a tuple with the Sha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commit) GetShaOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Sha) {
		return nil, false
	}
	return o.Sha, true
}

// HasSha returns a boolean if a field has been set.
func (o *Commit) HasSha() bool {
	if o != nil && !utils.IsNil(o.Sha) {
		return true
	}

	return false
}

// SetSha gets a reference to the given string and assigns it to the Sha field.
func (o *Commit) SetSha(v string) {
	o.Sha = &v
}

// GetShortMessage returns the ShortMessage field value if set, zero value otherwise.
func (o *Commit) GetShortMessage() string {
	if o == nil || utils.IsNil(o.ShortMessage) {
		var ret string
		return ret
	}
	return *o.ShortMessage
}

// GetShortMessageOk returns a tuple with the ShortMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commit) GetShortMessageOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ShortMessage) {
		return nil, false
	}
	return o.ShortMessage, true
}

// HasShortMessage returns a boolean if a field has been set.
func (o *Commit) HasShortMessage() bool {
	if o != nil && !utils.IsNil(o.ShortMessage) {
		return true
	}

	return false
}

// SetShortMessage gets a reference to the given string and assigns it to the ShortMessage field.
func (o *Commit) SetShortMessage(v string) {
	o.ShortMessage = &v
}

func (o Commit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Commit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Author) {
		toSerialize["Author"] = o.Author
	}
	if !utils.IsNil(o.AuthorEmail) {
		toSerialize["AuthorEmail"] = o.AuthorEmail
	}
	if !utils.IsNil(o.AuthorName) {
		toSerialize["AuthorName"] = o.AuthorName
	}
	if !utils.IsNil(o.CommitDate) {
		toSerialize["CommitDate"] = o.CommitDate
	}
	if !utils.IsNil(o.Committer) {
		toSerialize["Committer"] = o.Committer
	}
	if !utils.IsNil(o.CreatedAt) {
		toSerialize["CreatedAt"] = o.CreatedAt
	}
	if !utils.IsNil(o.FullMessage) {
		toSerialize["FullMessage"] = o.FullMessage
	}
	if o.Parents != nil {
		toSerialize["Parents"] = o.Parents
	}
	if !utils.IsNil(o.Sha) {
		toSerialize["Sha"] = o.Sha
	}
	if !utils.IsNil(o.ShortMessage) {
		toSerialize["ShortMessage"] = o.ShortMessage
	}
	return toSerialize, nil
}

type NullableCommit struct {
	value *Commit
	isSet bool
}

func (v NullableCommit) Get() *Commit {
	return v.value
}

func (v *NullableCommit) Set(val *Commit) {
	v.value = val
	v.isSet = true
}

func (v NullableCommit) IsSet() bool {
	return v.isSet
}

func (v *NullableCommit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommit(val *Commit) *NullableCommit {
	return &NullableCommit{value: val, isSet: true}
}

func (v NullableCommit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


