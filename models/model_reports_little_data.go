/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the ReportsLittleData type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ReportsLittleData{}

// ReportsLittleData 测试报告详情
type ReportsLittleData struct {
	// 测试报告详情
	Reports []ReportLittle `json:"Reports,omitempty"`
}

// NewReportsLittleData instantiates a new ReportsLittleData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportsLittleData() *ReportsLittleData {
	this := ReportsLittleData{}
	return &this
}

// NewReportsLittleDataWithDefaults instantiates a new ReportsLittleData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportsLittleDataWithDefaults() *ReportsLittleData {
	this := ReportsLittleData{}
	return &this
}

// GetReports returns the Reports field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReportsLittleData) GetReports() []ReportLittle {
	if o == nil {
		var ret []ReportLittle
		return ret
	}
	return o.Reports
}

// GetReportsOk returns a tuple with the Reports field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReportsLittleData) GetReportsOk() ([]ReportLittle, bool) {
	if o == nil || utils.IsNil(o.Reports) {
		return nil, false
	}
	return o.Reports, true
}

// HasReports returns a boolean if a field has been set.
func (o *ReportsLittleData) HasReports() bool {
	if o != nil && !utils.IsNil(o.Reports) {
		return true
	}

	return false
}

// SetReports gets a reference to the given []ReportLittle and assigns it to the Reports field.
func (o *ReportsLittleData) SetReports(v []ReportLittle) {
	o.Reports = v
}

func (o ReportsLittleData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportsLittleData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Reports != nil {
		toSerialize["Reports"] = o.Reports
	}
	return toSerialize, nil
}

type NullableReportsLittleData struct {
	value *ReportsLittleData
	isSet bool
}

func (v NullableReportsLittleData) Get() *ReportsLittleData {
	return v.value
}

func (v *NullableReportsLittleData) Set(val *ReportsLittleData) {
	v.value = val
	v.isSet = true
}

func (v NullableReportsLittleData) IsSet() bool {
	return v.isSet
}

func (v *NullableReportsLittleData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportsLittleData(val *ReportsLittleData) *NullableReportsLittleData {
	return &NullableReportsLittleData{value: val, isSet: true}
}

func (v NullableReportsLittleData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportsLittleData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


