/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DeleteTestCaseRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DeleteTestCaseRequest{}

// DeleteTestCaseRequest struct for DeleteTestCaseRequest
type DeleteTestCaseRequest struct {
	// 用例 ID
	CaseId int32 `json:"CaseId"`
	// 项目名称
	ProjectName string `json:"ProjectName"`
}

type _DeleteTestCaseRequest DeleteTestCaseRequest

// NewDeleteTestCaseRequest instantiates a new DeleteTestCaseRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteTestCaseRequest(caseId int32, projectName string) *DeleteTestCaseRequest {
	this := DeleteTestCaseRequest{}
	this.CaseId = caseId
	this.ProjectName = projectName
	return &this
}

// NewDeleteTestCaseRequestWithDefaults instantiates a new DeleteTestCaseRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteTestCaseRequestWithDefaults() *DeleteTestCaseRequest {
	this := DeleteTestCaseRequest{}
	return &this
}

// GetCaseId returns the CaseId field value
func (o *DeleteTestCaseRequest) GetCaseId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CaseId
}

// GetCaseIdOk returns a tuple with the CaseId field value
// and a boolean to check if the value has been set.
func (o *DeleteTestCaseRequest) GetCaseIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CaseId, true
}

// SetCaseId sets field value
func (o *DeleteTestCaseRequest) SetCaseId(v int32) {
	o.CaseId = v
}

// GetProjectName returns the ProjectName field value
func (o *DeleteTestCaseRequest) GetProjectName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value
// and a boolean to check if the value has been set.
func (o *DeleteTestCaseRequest) GetProjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectName, true
}

// SetProjectName sets field value
func (o *DeleteTestCaseRequest) SetProjectName(v string) {
	o.ProjectName = v
}

func (o DeleteTestCaseRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteTestCaseRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["CaseId"] = o.CaseId
	toSerialize["ProjectName"] = o.ProjectName
	return toSerialize, nil
}

func (o *DeleteTestCaseRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"CaseId",
		"ProjectName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeleteTestCaseRequest := _DeleteTestCaseRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeleteTestCaseRequest)

	if err != nil {
		return err
	}

	*o = DeleteTestCaseRequest(varDeleteTestCaseRequest)

	return err
}

type NullableDeleteTestCaseRequest struct {
	value *DeleteTestCaseRequest
	isSet bool
}

func (v NullableDeleteTestCaseRequest) Get() *DeleteTestCaseRequest {
	return v.value
}

func (v *NullableDeleteTestCaseRequest) Set(val *DeleteTestCaseRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteTestCaseRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteTestCaseRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteTestCaseRequest(val *DeleteTestCaseRequest) *NullableDeleteTestCaseRequest {
	return &NullableDeleteTestCaseRequest{value: val, isSet: true}
}

func (v NullableDeleteTestCaseRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteTestCaseRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


