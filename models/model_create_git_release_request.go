/*
CODING OPEN API

  

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the CreateGitReleaseRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CreateGitReleaseRequest{}

// CreateGitReleaseRequest struct for CreateGitReleaseRequest
type CreateGitReleaseRequest struct {
	// 提交 Sha 值
	CommitSha string `json:"CommitSha"`
	// 仓库id
	DepotId int64 `json:"DepotId"`
	// 仓库路径，与仓库ID二选一
	DepotPath *string `json:"DepotPath,omitempty"`
	// 版本描述信息
	Description string `json:"Description"`
	// 是否为预发布版本
	Pre bool `json:"Pre"`
	// 创建来源的分支名称或者commitId
	TagName string `json:"TagName"`
	// 目标提交 Sha 值
	TargetCommitBranch string `json:"TargetCommitBranch"`
	// 版本标题
	Title string `json:"Title"`
	// 分支名称
	UserId int64 `json:"UserId"`
}

type _CreateGitReleaseRequest CreateGitReleaseRequest

// NewCreateGitReleaseRequest instantiates a new CreateGitReleaseRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateGitReleaseRequest(commitSha string, depotId int64, description string, pre bool, tagName string, targetCommitBranch string, title string, userId int64) *CreateGitReleaseRequest {
	this := CreateGitReleaseRequest{}
	this.CommitSha = commitSha
	this.DepotId = depotId
	this.Description = description
	this.Pre = pre
	this.TagName = tagName
	this.TargetCommitBranch = targetCommitBranch
	this.Title = title
	this.UserId = userId
	return &this
}

// NewCreateGitReleaseRequestWithDefaults instantiates a new CreateGitReleaseRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateGitReleaseRequestWithDefaults() *CreateGitReleaseRequest {
	this := CreateGitReleaseRequest{}
	return &this
}

// GetCommitSha returns the CommitSha field value
func (o *CreateGitReleaseRequest) GetCommitSha() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommitSha
}

// GetCommitShaOk returns a tuple with the CommitSha field value
// and a boolean to check if the value has been set.
func (o *CreateGitReleaseRequest) GetCommitShaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommitSha, true
}

// SetCommitSha sets field value
func (o *CreateGitReleaseRequest) SetCommitSha(v string) {
	o.CommitSha = v
}

// GetDepotId returns the DepotId field value
func (o *CreateGitReleaseRequest) GetDepotId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DepotId
}

// GetDepotIdOk returns a tuple with the DepotId field value
// and a boolean to check if the value has been set.
func (o *CreateGitReleaseRequest) GetDepotIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepotId, true
}

// SetDepotId sets field value
func (o *CreateGitReleaseRequest) SetDepotId(v int64) {
	o.DepotId = v
}

// GetDepotPath returns the DepotPath field value if set, zero value otherwise.
func (o *CreateGitReleaseRequest) GetDepotPath() string {
	if o == nil || utils.IsNil(o.DepotPath) {
		var ret string
		return ret
	}
	return *o.DepotPath
}

// GetDepotPathOk returns a tuple with the DepotPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateGitReleaseRequest) GetDepotPathOk() (*string, bool) {
	if o == nil || utils.IsNil(o.DepotPath) {
		return nil, false
	}
	return o.DepotPath, true
}

// HasDepotPath returns a boolean if a field has been set.
func (o *CreateGitReleaseRequest) HasDepotPath() bool {
	if o != nil && !utils.IsNil(o.DepotPath) {
		return true
	}

	return false
}

// SetDepotPath gets a reference to the given string and assigns it to the DepotPath field.
func (o *CreateGitReleaseRequest) SetDepotPath(v string) {
	o.DepotPath = &v
}

// GetDescription returns the Description field value
func (o *CreateGitReleaseRequest) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *CreateGitReleaseRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *CreateGitReleaseRequest) SetDescription(v string) {
	o.Description = v
}

// GetPre returns the Pre field value
func (o *CreateGitReleaseRequest) GetPre() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Pre
}

// GetPreOk returns a tuple with the Pre field value
// and a boolean to check if the value has been set.
func (o *CreateGitReleaseRequest) GetPreOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pre, true
}

// SetPre sets field value
func (o *CreateGitReleaseRequest) SetPre(v bool) {
	o.Pre = v
}

// GetTagName returns the TagName field value
func (o *CreateGitReleaseRequest) GetTagName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TagName
}

// GetTagNameOk returns a tuple with the TagName field value
// and a boolean to check if the value has been set.
func (o *CreateGitReleaseRequest) GetTagNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TagName, true
}

// SetTagName sets field value
func (o *CreateGitReleaseRequest) SetTagName(v string) {
	o.TagName = v
}

// GetTargetCommitBranch returns the TargetCommitBranch field value
func (o *CreateGitReleaseRequest) GetTargetCommitBranch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetCommitBranch
}

// GetTargetCommitBranchOk returns a tuple with the TargetCommitBranch field value
// and a boolean to check if the value has been set.
func (o *CreateGitReleaseRequest) GetTargetCommitBranchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetCommitBranch, true
}

// SetTargetCommitBranch sets field value
func (o *CreateGitReleaseRequest) SetTargetCommitBranch(v string) {
	o.TargetCommitBranch = v
}

// GetTitle returns the Title field value
func (o *CreateGitReleaseRequest) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *CreateGitReleaseRequest) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *CreateGitReleaseRequest) SetTitle(v string) {
	o.Title = v
}

// GetUserId returns the UserId field value
func (o *CreateGitReleaseRequest) GetUserId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *CreateGitReleaseRequest) GetUserIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *CreateGitReleaseRequest) SetUserId(v int64) {
	o.UserId = v
}

func (o CreateGitReleaseRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateGitReleaseRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["CommitSha"] = o.CommitSha
	toSerialize["DepotId"] = o.DepotId
	if !utils.IsNil(o.DepotPath) {
		toSerialize["DepotPath"] = o.DepotPath
	}
	toSerialize["Description"] = o.Description
	toSerialize["Pre"] = o.Pre
	toSerialize["TagName"] = o.TagName
	toSerialize["TargetCommitBranch"] = o.TargetCommitBranch
	toSerialize["Title"] = o.Title
	toSerialize["UserId"] = o.UserId
	return toSerialize, nil
}

func (o *CreateGitReleaseRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"CommitSha",
		"DepotId",
		"Description",
		"Pre",
		"TagName",
		"TargetCommitBranch",
		"Title",
		"UserId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateGitReleaseRequest := _CreateGitReleaseRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateGitReleaseRequest)

	if err != nil {
		return err
	}

	*o = CreateGitReleaseRequest(varCreateGitReleaseRequest)

	return err
}

type NullableCreateGitReleaseRequest struct {
	value *CreateGitReleaseRequest
	isSet bool
}

func (v NullableCreateGitReleaseRequest) Get() *CreateGitReleaseRequest {
	return v.value
}

func (v *NullableCreateGitReleaseRequest) Set(val *CreateGitReleaseRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateGitReleaseRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateGitReleaseRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateGitReleaseRequest(val *CreateGitReleaseRequest) *NullableCreateGitReleaseRequest {
	return &NullableCreateGitReleaseRequest{value: val, isSet: true}
}

func (v NullableCreateGitReleaseRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateGitReleaseRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


