/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the WikiJobStatus type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &WikiJobStatus{}

// WikiJobStatus 查询wiki导入状态信息
type WikiJobStatus struct {
	// 任务Id
	JobId *string `json:"JobId,omitempty"`
	// 任务状态
	Status *string `json:"Status,omitempty"`
}

// NewWikiJobStatus instantiates a new WikiJobStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWikiJobStatus() *WikiJobStatus {
	this := WikiJobStatus{}
	var jobId string = ""
	this.JobId = &jobId
	var status string = ""
	this.Status = &status
	return &this
}

// NewWikiJobStatusWithDefaults instantiates a new WikiJobStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWikiJobStatusWithDefaults() *WikiJobStatus {
	this := WikiJobStatus{}
	var jobId string = ""
	this.JobId = &jobId
	var status string = ""
	this.Status = &status
	return &this
}

// GetJobId returns the JobId field value if set, zero value otherwise.
func (o *WikiJobStatus) GetJobId() string {
	if o == nil || utils.IsNil(o.JobId) {
		var ret string
		return ret
	}
	return *o.JobId
}

// GetJobIdOk returns a tuple with the JobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WikiJobStatus) GetJobIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.JobId) {
		return nil, false
	}
	return o.JobId, true
}

// HasJobId returns a boolean if a field has been set.
func (o *WikiJobStatus) HasJobId() bool {
	if o != nil && !utils.IsNil(o.JobId) {
		return true
	}

	return false
}

// SetJobId gets a reference to the given string and assigns it to the JobId field.
func (o *WikiJobStatus) SetJobId(v string) {
	o.JobId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *WikiJobStatus) GetStatus() string {
	if o == nil || utils.IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WikiJobStatus) GetStatusOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *WikiJobStatus) HasStatus() bool {
	if o != nil && !utils.IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *WikiJobStatus) SetStatus(v string) {
	o.Status = &v
}

func (o WikiJobStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WikiJobStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.JobId) {
		toSerialize["JobId"] = o.JobId
	}
	if !utils.IsNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	return toSerialize, nil
}

type NullableWikiJobStatus struct {
	value *WikiJobStatus
	isSet bool
}

func (v NullableWikiJobStatus) Get() *WikiJobStatus {
	return v.value
}

func (v *NullableWikiJobStatus) Set(val *WikiJobStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableWikiJobStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableWikiJobStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWikiJobStatus(val *WikiJobStatus) *NullableWikiJobStatus {
	return &NullableWikiJobStatus{value: val, isSet: true}
}

func (v NullableWikiJobStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWikiJobStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


