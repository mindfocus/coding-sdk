/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the ModifyProjectRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ModifyProjectRequest{}

// ModifyProjectRequest struct for ModifyProjectRequest
type ModifyProjectRequest struct {
	// 项目描述
	Description *string `json:"Description,omitempty"`
	// 项目名称
	DisplayName string `json:"DisplayName"`
	// 结束时间
	EndDate *string `json:"EndDate,omitempty"`
	// 项目标识
	Name string `json:"Name"`
	// 项目编号
	ProjectId int64 `json:"ProjectId"`
	// 开始时间
	StartDate *string `json:"StartDate,omitempty"`
}

type _ModifyProjectRequest ModifyProjectRequest

// NewModifyProjectRequest instantiates a new ModifyProjectRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModifyProjectRequest(displayName string, name string, projectId int64) *ModifyProjectRequest {
	this := ModifyProjectRequest{}
	this.DisplayName = displayName
	this.Name = name
	this.ProjectId = projectId
	return &this
}

// NewModifyProjectRequestWithDefaults instantiates a new ModifyProjectRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModifyProjectRequestWithDefaults() *ModifyProjectRequest {
	this := ModifyProjectRequest{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ModifyProjectRequest) GetDescription() string {
	if o == nil || utils.IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifyProjectRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ModifyProjectRequest) HasDescription() bool {
	if o != nil && !utils.IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ModifyProjectRequest) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value
func (o *ModifyProjectRequest) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *ModifyProjectRequest) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *ModifyProjectRequest) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *ModifyProjectRequest) GetEndDate() string {
	if o == nil || utils.IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifyProjectRequest) GetEndDateOk() (*string, bool) {
	if o == nil || utils.IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *ModifyProjectRequest) HasEndDate() bool {
	if o != nil && !utils.IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *ModifyProjectRequest) SetEndDate(v string) {
	o.EndDate = &v
}

// GetName returns the Name field value
func (o *ModifyProjectRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ModifyProjectRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ModifyProjectRequest) SetName(v string) {
	o.Name = v
}

// GetProjectId returns the ProjectId field value
func (o *ModifyProjectRequest) GetProjectId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *ModifyProjectRequest) GetProjectIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *ModifyProjectRequest) SetProjectId(v int64) {
	o.ProjectId = v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *ModifyProjectRequest) GetStartDate() string {
	if o == nil || utils.IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifyProjectRequest) GetStartDateOk() (*string, bool) {
	if o == nil || utils.IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *ModifyProjectRequest) HasStartDate() bool {
	if o != nil && !utils.IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *ModifyProjectRequest) SetStartDate(v string) {
	o.StartDate = &v
}

func (o ModifyProjectRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModifyProjectRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	toSerialize["DisplayName"] = o.DisplayName
	if !utils.IsNil(o.EndDate) {
		toSerialize["EndDate"] = o.EndDate
	}
	toSerialize["Name"] = o.Name
	toSerialize["ProjectId"] = o.ProjectId
	if !utils.IsNil(o.StartDate) {
		toSerialize["StartDate"] = o.StartDate
	}
	return toSerialize, nil
}

func (o *ModifyProjectRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"DisplayName",
		"Name",
		"ProjectId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModifyProjectRequest := _ModifyProjectRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModifyProjectRequest)

	if err != nil {
		return err
	}

	*o = ModifyProjectRequest(varModifyProjectRequest)

	return err
}

type NullableModifyProjectRequest struct {
	value *ModifyProjectRequest
	isSet bool
}

func (v NullableModifyProjectRequest) Get() *ModifyProjectRequest {
	return v.value
}

func (v *NullableModifyProjectRequest) Set(val *ModifyProjectRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableModifyProjectRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableModifyProjectRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModifyProjectRequest(val *ModifyProjectRequest) *NullableModifyProjectRequest {
	return &NullableModifyProjectRequest{value: val, isSet: true}
}

func (v NullableModifyProjectRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModifyProjectRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


