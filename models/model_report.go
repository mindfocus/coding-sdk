/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the Report type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Report{}

// Report 测试报告信息
type Report struct {
	// 附件列表
	Attachments []Attachment `json:"Attachments,omitempty"`
	// 创建时间
	CreatedAt utils.NullableString `json:"CreatedAt,omitempty"`
	// 创建人
	CreatedBy utils.NullableInt32 `json:"CreatedBy,omitempty"`
	// ID 主键
	Id utils.NullableInt32 `json:"Id,omitempty"`
	// 迭代 ID
	IterationId utils.NullableString `json:"IterationId,omitempty"`
	// 迭代名称
	IterationName utils.NullableString `json:"IterationName,omitempty"`
	// 报告名称
	Name utils.NullableString `json:"Name,omitempty"`
	// 项目名称
	ProjectName utils.NullableString `json:"ProjectName,omitempty"`
	ReportOverview *ReportOverview `json:"ReportOverview,omitempty"`
	// 测试计划 ID
	RunIds []string `json:"RunIds,omitempty"`
	// 测试计划名称
	RunNames []string `json:"RunNames,omitempty"`
	// 数据统计结束时间
	StatisticsEndTime utils.NullableString `json:"StatisticsEndTime,omitempty"`
	// 数据统计开始时间
	StatisticsStartTime utils.NullableString `json:"StatisticsStartTime,omitempty"`
	// 报告状态：CREATING 创建中，AVAILABLE 可用，UNAVAILABLE 不可用
	Status utils.NullableString `json:"Status,omitempty"`
	// 报告总结
	Summary utils.NullableString `json:"Summary,omitempty"`
	// 模板 ID
	TemplateId utils.NullableInt32 `json:"TemplateId,omitempty"`
}

// NewReport instantiates a new Report object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReport() *Report {
	this := Report{}
	var createdAt string = ""
	this.CreatedAt = *utils.NewNullableString(&createdAt)
	var iterationId string = ""
	this.IterationId = *utils.NewNullableString(&iterationId)
	var iterationName string = ""
	this.IterationName = *utils.NewNullableString(&iterationName)
	var name string = ""
	this.Name = *utils.NewNullableString(&name)
	var projectName string = ""
	this.ProjectName = *utils.NewNullableString(&projectName)
	var statisticsEndTime string = ""
	this.StatisticsEndTime = *utils.NewNullableString(&statisticsEndTime)
	var statisticsStartTime string = ""
	this.StatisticsStartTime = *utils.NewNullableString(&statisticsStartTime)
	var status string = ""
	this.Status = *utils.NewNullableString(&status)
	var summary string = ""
	this.Summary = *utils.NewNullableString(&summary)
	return &this
}

// NewReportWithDefaults instantiates a new Report object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportWithDefaults() *Report {
	this := Report{}
	var createdAt string = ""
	this.CreatedAt = *utils.NewNullableString(&createdAt)
	var iterationId string = ""
	this.IterationId = *utils.NewNullableString(&iterationId)
	var iterationName string = ""
	this.IterationName = *utils.NewNullableString(&iterationName)
	var name string = ""
	this.Name = *utils.NewNullableString(&name)
	var projectName string = ""
	this.ProjectName = *utils.NewNullableString(&projectName)
	var statisticsEndTime string = ""
	this.StatisticsEndTime = *utils.NewNullableString(&statisticsEndTime)
	var statisticsStartTime string = ""
	this.StatisticsStartTime = *utils.NewNullableString(&statisticsStartTime)
	var status string = ""
	this.Status = *utils.NewNullableString(&status)
	var summary string = ""
	this.Summary = *utils.NewNullableString(&summary)
	return &this
}

// GetAttachments returns the Attachments field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Report) GetAttachments() []Attachment {
	if o == nil {
		var ret []Attachment
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Report) GetAttachmentsOk() ([]Attachment, bool) {
	if o == nil || utils.IsNil(o.Attachments) {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *Report) HasAttachments() bool {
	if o != nil && !utils.IsNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []Attachment and assigns it to the Attachments field.
func (o *Report) SetAttachments(v []Attachment) {
	o.Attachments = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Report) GetCreatedAt() string {
	if o == nil || utils.IsNil(o.CreatedAt.Get()) {
		var ret string
		return ret
	}
	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Report) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Report) HasCreatedAt() bool {
	if o != nil && o.CreatedAt.IsSet() {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given utils.NullableString and assigns it to the CreatedAt field.
func (o *Report) SetCreatedAt(v string) {
	o.CreatedAt.Set(&v)
}
// SetCreatedAtNil sets the value for CreatedAt to be an explicit nil
func (o *Report) SetCreatedAtNil() {
	o.CreatedAt.Set(nil)
}

// UnsetCreatedAt ensures that no value is present for CreatedAt, not even an explicit nil
func (o *Report) UnsetCreatedAt() {
	o.CreatedAt.Unset()
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Report) GetCreatedBy() int32 {
	if o == nil || utils.IsNil(o.CreatedBy.Get()) {
		var ret int32
		return ret
	}
	return *o.CreatedBy.Get()
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Report) GetCreatedByOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedBy.Get(), o.CreatedBy.IsSet()
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *Report) HasCreatedBy() bool {
	if o != nil && o.CreatedBy.IsSet() {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given utils.NullableInt32 and assigns it to the CreatedBy field.
func (o *Report) SetCreatedBy(v int32) {
	o.CreatedBy.Set(&v)
}
// SetCreatedByNil sets the value for CreatedBy to be an explicit nil
func (o *Report) SetCreatedByNil() {
	o.CreatedBy.Set(nil)
}

// UnsetCreatedBy ensures that no value is present for CreatedBy, not even an explicit nil
func (o *Report) UnsetCreatedBy() {
	o.CreatedBy.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Report) GetId() int32 {
	if o == nil || utils.IsNil(o.Id.Get()) {
		var ret int32
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Report) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *Report) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given utils.NullableInt32 and assigns it to the Id field.
func (o *Report) SetId(v int32) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *Report) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *Report) UnsetId() {
	o.Id.Unset()
}

// GetIterationId returns the IterationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Report) GetIterationId() string {
	if o == nil || utils.IsNil(o.IterationId.Get()) {
		var ret string
		return ret
	}
	return *o.IterationId.Get()
}

// GetIterationIdOk returns a tuple with the IterationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Report) GetIterationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IterationId.Get(), o.IterationId.IsSet()
}

// HasIterationId returns a boolean if a field has been set.
func (o *Report) HasIterationId() bool {
	if o != nil && o.IterationId.IsSet() {
		return true
	}

	return false
}

// SetIterationId gets a reference to the given utils.NullableString and assigns it to the IterationId field.
func (o *Report) SetIterationId(v string) {
	o.IterationId.Set(&v)
}
// SetIterationIdNil sets the value for IterationId to be an explicit nil
func (o *Report) SetIterationIdNil() {
	o.IterationId.Set(nil)
}

// UnsetIterationId ensures that no value is present for IterationId, not even an explicit nil
func (o *Report) UnsetIterationId() {
	o.IterationId.Unset()
}

// GetIterationName returns the IterationName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Report) GetIterationName() string {
	if o == nil || utils.IsNil(o.IterationName.Get()) {
		var ret string
		return ret
	}
	return *o.IterationName.Get()
}

// GetIterationNameOk returns a tuple with the IterationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Report) GetIterationNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IterationName.Get(), o.IterationName.IsSet()
}

// HasIterationName returns a boolean if a field has been set.
func (o *Report) HasIterationName() bool {
	if o != nil && o.IterationName.IsSet() {
		return true
	}

	return false
}

// SetIterationName gets a reference to the given utils.NullableString and assigns it to the IterationName field.
func (o *Report) SetIterationName(v string) {
	o.IterationName.Set(&v)
}
// SetIterationNameNil sets the value for IterationName to be an explicit nil
func (o *Report) SetIterationNameNil() {
	o.IterationName.Set(nil)
}

// UnsetIterationName ensures that no value is present for IterationName, not even an explicit nil
func (o *Report) UnsetIterationName() {
	o.IterationName.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Report) GetName() string {
	if o == nil || utils.IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Report) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *Report) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given utils.NullableString and assigns it to the Name field.
func (o *Report) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *Report) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *Report) UnsetName() {
	o.Name.Unset()
}

// GetProjectName returns the ProjectName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Report) GetProjectName() string {
	if o == nil || utils.IsNil(o.ProjectName.Get()) {
		var ret string
		return ret
	}
	return *o.ProjectName.Get()
}

// GetProjectNameOk returns a tuple with the ProjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Report) GetProjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProjectName.Get(), o.ProjectName.IsSet()
}

// HasProjectName returns a boolean if a field has been set.
func (o *Report) HasProjectName() bool {
	if o != nil && o.ProjectName.IsSet() {
		return true
	}

	return false
}

// SetProjectName gets a reference to the given utils.NullableString and assigns it to the ProjectName field.
func (o *Report) SetProjectName(v string) {
	o.ProjectName.Set(&v)
}
// SetProjectNameNil sets the value for ProjectName to be an explicit nil
func (o *Report) SetProjectNameNil() {
	o.ProjectName.Set(nil)
}

// UnsetProjectName ensures that no value is present for ProjectName, not even an explicit nil
func (o *Report) UnsetProjectName() {
	o.ProjectName.Unset()
}

// GetReportOverview returns the ReportOverview field value if set, zero value otherwise.
func (o *Report) GetReportOverview() ReportOverview {
	if o == nil || utils.IsNil(o.ReportOverview) {
		var ret ReportOverview
		return ret
	}
	return *o.ReportOverview
}

// GetReportOverviewOk returns a tuple with the ReportOverview field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetReportOverviewOk() (*ReportOverview, bool) {
	if o == nil || utils.IsNil(o.ReportOverview) {
		return nil, false
	}
	return o.ReportOverview, true
}

// HasReportOverview returns a boolean if a field has been set.
func (o *Report) HasReportOverview() bool {
	if o != nil && !utils.IsNil(o.ReportOverview) {
		return true
	}

	return false
}

// SetReportOverview gets a reference to the given ReportOverview and assigns it to the ReportOverview field.
func (o *Report) SetReportOverview(v ReportOverview) {
	o.ReportOverview = &v
}

// GetRunIds returns the RunIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Report) GetRunIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.RunIds
}

// GetRunIdsOk returns a tuple with the RunIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Report) GetRunIdsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.RunIds) {
		return nil, false
	}
	return o.RunIds, true
}

// HasRunIds returns a boolean if a field has been set.
func (o *Report) HasRunIds() bool {
	if o != nil && !utils.IsNil(o.RunIds) {
		return true
	}

	return false
}

// SetRunIds gets a reference to the given []string and assigns it to the RunIds field.
func (o *Report) SetRunIds(v []string) {
	o.RunIds = v
}

// GetRunNames returns the RunNames field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Report) GetRunNames() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.RunNames
}

// GetRunNamesOk returns a tuple with the RunNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Report) GetRunNamesOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.RunNames) {
		return nil, false
	}
	return o.RunNames, true
}

// HasRunNames returns a boolean if a field has been set.
func (o *Report) HasRunNames() bool {
	if o != nil && !utils.IsNil(o.RunNames) {
		return true
	}

	return false
}

// SetRunNames gets a reference to the given []string and assigns it to the RunNames field.
func (o *Report) SetRunNames(v []string) {
	o.RunNames = v
}

// GetStatisticsEndTime returns the StatisticsEndTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Report) GetStatisticsEndTime() string {
	if o == nil || utils.IsNil(o.StatisticsEndTime.Get()) {
		var ret string
		return ret
	}
	return *o.StatisticsEndTime.Get()
}

// GetStatisticsEndTimeOk returns a tuple with the StatisticsEndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Report) GetStatisticsEndTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StatisticsEndTime.Get(), o.StatisticsEndTime.IsSet()
}

// HasStatisticsEndTime returns a boolean if a field has been set.
func (o *Report) HasStatisticsEndTime() bool {
	if o != nil && o.StatisticsEndTime.IsSet() {
		return true
	}

	return false
}

// SetStatisticsEndTime gets a reference to the given utils.NullableString and assigns it to the StatisticsEndTime field.
func (o *Report) SetStatisticsEndTime(v string) {
	o.StatisticsEndTime.Set(&v)
}
// SetStatisticsEndTimeNil sets the value for StatisticsEndTime to be an explicit nil
func (o *Report) SetStatisticsEndTimeNil() {
	o.StatisticsEndTime.Set(nil)
}

// UnsetStatisticsEndTime ensures that no value is present for StatisticsEndTime, not even an explicit nil
func (o *Report) UnsetStatisticsEndTime() {
	o.StatisticsEndTime.Unset()
}

// GetStatisticsStartTime returns the StatisticsStartTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Report) GetStatisticsStartTime() string {
	if o == nil || utils.IsNil(o.StatisticsStartTime.Get()) {
		var ret string
		return ret
	}
	return *o.StatisticsStartTime.Get()
}

// GetStatisticsStartTimeOk returns a tuple with the StatisticsStartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Report) GetStatisticsStartTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StatisticsStartTime.Get(), o.StatisticsStartTime.IsSet()
}

// HasStatisticsStartTime returns a boolean if a field has been set.
func (o *Report) HasStatisticsStartTime() bool {
	if o != nil && o.StatisticsStartTime.IsSet() {
		return true
	}

	return false
}

// SetStatisticsStartTime gets a reference to the given utils.NullableString and assigns it to the StatisticsStartTime field.
func (o *Report) SetStatisticsStartTime(v string) {
	o.StatisticsStartTime.Set(&v)
}
// SetStatisticsStartTimeNil sets the value for StatisticsStartTime to be an explicit nil
func (o *Report) SetStatisticsStartTimeNil() {
	o.StatisticsStartTime.Set(nil)
}

// UnsetStatisticsStartTime ensures that no value is present for StatisticsStartTime, not even an explicit nil
func (o *Report) UnsetStatisticsStartTime() {
	o.StatisticsStartTime.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Report) GetStatus() string {
	if o == nil || utils.IsNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Report) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *Report) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given utils.NullableString and assigns it to the Status field.
func (o *Report) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *Report) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *Report) UnsetStatus() {
	o.Status.Unset()
}

// GetSummary returns the Summary field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Report) GetSummary() string {
	if o == nil || utils.IsNil(o.Summary.Get()) {
		var ret string
		return ret
	}
	return *o.Summary.Get()
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Report) GetSummaryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Summary.Get(), o.Summary.IsSet()
}

// HasSummary returns a boolean if a field has been set.
func (o *Report) HasSummary() bool {
	if o != nil && o.Summary.IsSet() {
		return true
	}

	return false
}

// SetSummary gets a reference to the given utils.NullableString and assigns it to the Summary field.
func (o *Report) SetSummary(v string) {
	o.Summary.Set(&v)
}
// SetSummaryNil sets the value for Summary to be an explicit nil
func (o *Report) SetSummaryNil() {
	o.Summary.Set(nil)
}

// UnsetSummary ensures that no value is present for Summary, not even an explicit nil
func (o *Report) UnsetSummary() {
	o.Summary.Unset()
}

// GetTemplateId returns the TemplateId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Report) GetTemplateId() int32 {
	if o == nil || utils.IsNil(o.TemplateId.Get()) {
		var ret int32
		return ret
	}
	return *o.TemplateId.Get()
}

// GetTemplateIdOk returns a tuple with the TemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Report) GetTemplateIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TemplateId.Get(), o.TemplateId.IsSet()
}

// HasTemplateId returns a boolean if a field has been set.
func (o *Report) HasTemplateId() bool {
	if o != nil && o.TemplateId.IsSet() {
		return true
	}

	return false
}

// SetTemplateId gets a reference to the given utils.NullableInt32 and assigns it to the TemplateId field.
func (o *Report) SetTemplateId(v int32) {
	o.TemplateId.Set(&v)
}
// SetTemplateIdNil sets the value for TemplateId to be an explicit nil
func (o *Report) SetTemplateIdNil() {
	o.TemplateId.Set(nil)
}

// UnsetTemplateId ensures that no value is present for TemplateId, not even an explicit nil
func (o *Report) UnsetTemplateId() {
	o.TemplateId.Unset()
}

func (o Report) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Report) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Attachments != nil {
		toSerialize["Attachments"] = o.Attachments
	}
	if o.CreatedAt.IsSet() {
		toSerialize["CreatedAt"] = o.CreatedAt.Get()
	}
	if o.CreatedBy.IsSet() {
		toSerialize["CreatedBy"] = o.CreatedBy.Get()
	}
	if o.Id.IsSet() {
		toSerialize["Id"] = o.Id.Get()
	}
	if o.IterationId.IsSet() {
		toSerialize["IterationId"] = o.IterationId.Get()
	}
	if o.IterationName.IsSet() {
		toSerialize["IterationName"] = o.IterationName.Get()
	}
	if o.Name.IsSet() {
		toSerialize["Name"] = o.Name.Get()
	}
	if o.ProjectName.IsSet() {
		toSerialize["ProjectName"] = o.ProjectName.Get()
	}
	if !utils.IsNil(o.ReportOverview) {
		toSerialize["ReportOverview"] = o.ReportOverview
	}
	if o.RunIds != nil {
		toSerialize["RunIds"] = o.RunIds
	}
	if o.RunNames != nil {
		toSerialize["RunNames"] = o.RunNames
	}
	if o.StatisticsEndTime.IsSet() {
		toSerialize["StatisticsEndTime"] = o.StatisticsEndTime.Get()
	}
	if o.StatisticsStartTime.IsSet() {
		toSerialize["StatisticsStartTime"] = o.StatisticsStartTime.Get()
	}
	if o.Status.IsSet() {
		toSerialize["Status"] = o.Status.Get()
	}
	if o.Summary.IsSet() {
		toSerialize["Summary"] = o.Summary.Get()
	}
	if o.TemplateId.IsSet() {
		toSerialize["TemplateId"] = o.TemplateId.Get()
	}
	return toSerialize, nil
}

type NullableReport struct {
	value *Report
	isSet bool
}

func (v NullableReport) Get() *Report {
	return v.value
}

func (v *NullableReport) Set(val *Report) {
	v.value = val
	v.isSet = true
}

func (v NullableReport) IsSet() bool {
	return v.isSet
}

func (v *NullableReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReport(val *Report) *NullableReport {
	return &NullableReport{value: val, isSet: true}
}

func (v NullableReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


