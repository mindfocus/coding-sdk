/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DescribeGitFileStatPayload type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DescribeGitFileStatPayload{}

// DescribeGitFileStatPayload 检查仓库文件是否存在
type DescribeGitFileStatPayload struct {
	// 文件是否存在
	IsExist *bool `json:"IsExist,omitempty"`
}

// NewDescribeGitFileStatPayload instantiates a new DescribeGitFileStatPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeGitFileStatPayload() *DescribeGitFileStatPayload {
	this := DescribeGitFileStatPayload{}
	var isExist bool = false
	this.IsExist = &isExist
	return &this
}

// NewDescribeGitFileStatPayloadWithDefaults instantiates a new DescribeGitFileStatPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeGitFileStatPayloadWithDefaults() *DescribeGitFileStatPayload {
	this := DescribeGitFileStatPayload{}
	var isExist bool = false
	this.IsExist = &isExist
	return &this
}

// GetIsExist returns the IsExist field value if set, zero value otherwise.
func (o *DescribeGitFileStatPayload) GetIsExist() bool {
	if o == nil || utils.IsNil(o.IsExist) {
		var ret bool
		return ret
	}
	return *o.IsExist
}

// GetIsExistOk returns a tuple with the IsExist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeGitFileStatPayload) GetIsExistOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IsExist) {
		return nil, false
	}
	return o.IsExist, true
}

// HasIsExist returns a boolean if a field has been set.
func (o *DescribeGitFileStatPayload) HasIsExist() bool {
	if o != nil && !utils.IsNil(o.IsExist) {
		return true
	}

	return false
}

// SetIsExist gets a reference to the given bool and assigns it to the IsExist field.
func (o *DescribeGitFileStatPayload) SetIsExist(v bool) {
	o.IsExist = &v
}

func (o DescribeGitFileStatPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeGitFileStatPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.IsExist) {
		toSerialize["IsExist"] = o.IsExist
	}
	return toSerialize, nil
}

type NullableDescribeGitFileStatPayload struct {
	value *DescribeGitFileStatPayload
	isSet bool
}

func (v NullableDescribeGitFileStatPayload) Get() *DescribeGitFileStatPayload {
	return v.value
}

func (v *NullableDescribeGitFileStatPayload) Set(val *DescribeGitFileStatPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeGitFileStatPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeGitFileStatPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeGitFileStatPayload(val *DescribeGitFileStatPayload) *NullableDescribeGitFileStatPayload {
	return &NullableDescribeGitFileStatPayload{value: val, isSet: true}
}

func (v NullableDescribeGitFileStatPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeGitFileStatPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


