/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the GitAllTagCommit type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &GitAllTagCommit{}

// GitAllTagCommit 请求标签的commit信息
type GitAllTagCommit struct {
	// 作者邮箱
	AuthorEmail utils.NullableString `json:"AuthorEmail,omitempty"`
	// 作者姓名
	AuthorName utils.NullableString `json:"AuthorName,omitempty"`
	// 提交时间
	CommitDate utils.NullableInt64 `json:"CommitDate,omitempty"`
	// 提交者邮箱
	CommitterEmail utils.NullableString `json:"CommitterEmail,omitempty"`
	// 提交者姓名
	CommitterName utils.NullableString `json:"CommitterName,omitempty"`
	// 创建时间
	CreatedAt utils.NullableInt64 `json:"CreatedAt,omitempty"`
	// 父提交
	Parents []string `json:"Parents,omitempty"`
	// 提交sha
	Sha utils.NullableString `json:"Sha,omitempty"`
	// 短描述
	ShortMessage utils.NullableString `json:"ShortMessage,omitempty"`
}

// NewGitAllTagCommit instantiates a new GitAllTagCommit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitAllTagCommit() *GitAllTagCommit {
	this := GitAllTagCommit{}
	var authorEmail string = ""
	this.AuthorEmail = *utils.NewNullableString(&authorEmail)
	var authorName string = ""
	this.AuthorName = *utils.NewNullableString(&authorName)
	var committerEmail string = ""
	this.CommitterEmail = *utils.NewNullableString(&committerEmail)
	var committerName string = ""
	this.CommitterName = *utils.NewNullableString(&committerName)
	var sha string = ""
	this.Sha = *utils.NewNullableString(&sha)
	var shortMessage string = ""
	this.ShortMessage = *utils.NewNullableString(&shortMessage)
	return &this
}

// NewGitAllTagCommitWithDefaults instantiates a new GitAllTagCommit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitAllTagCommitWithDefaults() *GitAllTagCommit {
	this := GitAllTagCommit{}
	var authorEmail string = ""
	this.AuthorEmail = *utils.NewNullableString(&authorEmail)
	var authorName string = ""
	this.AuthorName = *utils.NewNullableString(&authorName)
	var committerEmail string = ""
	this.CommitterEmail = *utils.NewNullableString(&committerEmail)
	var committerName string = ""
	this.CommitterName = *utils.NewNullableString(&committerName)
	var sha string = ""
	this.Sha = *utils.NewNullableString(&sha)
	var shortMessage string = ""
	this.ShortMessage = *utils.NewNullableString(&shortMessage)
	return &this
}

// GetAuthorEmail returns the AuthorEmail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GitAllTagCommit) GetAuthorEmail() string {
	if o == nil || utils.IsNil(o.AuthorEmail.Get()) {
		var ret string
		return ret
	}
	return *o.AuthorEmail.Get()
}

// GetAuthorEmailOk returns a tuple with the AuthorEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GitAllTagCommit) GetAuthorEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthorEmail.Get(), o.AuthorEmail.IsSet()
}

// HasAuthorEmail returns a boolean if a field has been set.
func (o *GitAllTagCommit) HasAuthorEmail() bool {
	if o != nil && o.AuthorEmail.IsSet() {
		return true
	}

	return false
}

// SetAuthorEmail gets a reference to the given utils.NullableString and assigns it to the AuthorEmail field.
func (o *GitAllTagCommit) SetAuthorEmail(v string) {
	o.AuthorEmail.Set(&v)
}
// SetAuthorEmailNil sets the value for AuthorEmail to be an explicit nil
func (o *GitAllTagCommit) SetAuthorEmailNil() {
	o.AuthorEmail.Set(nil)
}

// UnsetAuthorEmail ensures that no value is present for AuthorEmail, not even an explicit nil
func (o *GitAllTagCommit) UnsetAuthorEmail() {
	o.AuthorEmail.Unset()
}

// GetAuthorName returns the AuthorName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GitAllTagCommit) GetAuthorName() string {
	if o == nil || utils.IsNil(o.AuthorName.Get()) {
		var ret string
		return ret
	}
	return *o.AuthorName.Get()
}

// GetAuthorNameOk returns a tuple with the AuthorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GitAllTagCommit) GetAuthorNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthorName.Get(), o.AuthorName.IsSet()
}

// HasAuthorName returns a boolean if a field has been set.
func (o *GitAllTagCommit) HasAuthorName() bool {
	if o != nil && o.AuthorName.IsSet() {
		return true
	}

	return false
}

// SetAuthorName gets a reference to the given utils.NullableString and assigns it to the AuthorName field.
func (o *GitAllTagCommit) SetAuthorName(v string) {
	o.AuthorName.Set(&v)
}
// SetAuthorNameNil sets the value for AuthorName to be an explicit nil
func (o *GitAllTagCommit) SetAuthorNameNil() {
	o.AuthorName.Set(nil)
}

// UnsetAuthorName ensures that no value is present for AuthorName, not even an explicit nil
func (o *GitAllTagCommit) UnsetAuthorName() {
	o.AuthorName.Unset()
}

// GetCommitDate returns the CommitDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GitAllTagCommit) GetCommitDate() int64 {
	if o == nil || utils.IsNil(o.CommitDate.Get()) {
		var ret int64
		return ret
	}
	return *o.CommitDate.Get()
}

// GetCommitDateOk returns a tuple with the CommitDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GitAllTagCommit) GetCommitDateOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CommitDate.Get(), o.CommitDate.IsSet()
}

// HasCommitDate returns a boolean if a field has been set.
func (o *GitAllTagCommit) HasCommitDate() bool {
	if o != nil && o.CommitDate.IsSet() {
		return true
	}

	return false
}

// SetCommitDate gets a reference to the given utils.NullableInt64 and assigns it to the CommitDate field.
func (o *GitAllTagCommit) SetCommitDate(v int64) {
	o.CommitDate.Set(&v)
}
// SetCommitDateNil sets the value for CommitDate to be an explicit nil
func (o *GitAllTagCommit) SetCommitDateNil() {
	o.CommitDate.Set(nil)
}

// UnsetCommitDate ensures that no value is present for CommitDate, not even an explicit nil
func (o *GitAllTagCommit) UnsetCommitDate() {
	o.CommitDate.Unset()
}

// GetCommitterEmail returns the CommitterEmail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GitAllTagCommit) GetCommitterEmail() string {
	if o == nil || utils.IsNil(o.CommitterEmail.Get()) {
		var ret string
		return ret
	}
	return *o.CommitterEmail.Get()
}

// GetCommitterEmailOk returns a tuple with the CommitterEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GitAllTagCommit) GetCommitterEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CommitterEmail.Get(), o.CommitterEmail.IsSet()
}

// HasCommitterEmail returns a boolean if a field has been set.
func (o *GitAllTagCommit) HasCommitterEmail() bool {
	if o != nil && o.CommitterEmail.IsSet() {
		return true
	}

	return false
}

// SetCommitterEmail gets a reference to the given utils.NullableString and assigns it to the CommitterEmail field.
func (o *GitAllTagCommit) SetCommitterEmail(v string) {
	o.CommitterEmail.Set(&v)
}
// SetCommitterEmailNil sets the value for CommitterEmail to be an explicit nil
func (o *GitAllTagCommit) SetCommitterEmailNil() {
	o.CommitterEmail.Set(nil)
}

// UnsetCommitterEmail ensures that no value is present for CommitterEmail, not even an explicit nil
func (o *GitAllTagCommit) UnsetCommitterEmail() {
	o.CommitterEmail.Unset()
}

// GetCommitterName returns the CommitterName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GitAllTagCommit) GetCommitterName() string {
	if o == nil || utils.IsNil(o.CommitterName.Get()) {
		var ret string
		return ret
	}
	return *o.CommitterName.Get()
}

// GetCommitterNameOk returns a tuple with the CommitterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GitAllTagCommit) GetCommitterNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CommitterName.Get(), o.CommitterName.IsSet()
}

// HasCommitterName returns a boolean if a field has been set.
func (o *GitAllTagCommit) HasCommitterName() bool {
	if o != nil && o.CommitterName.IsSet() {
		return true
	}

	return false
}

// SetCommitterName gets a reference to the given utils.NullableString and assigns it to the CommitterName field.
func (o *GitAllTagCommit) SetCommitterName(v string) {
	o.CommitterName.Set(&v)
}
// SetCommitterNameNil sets the value for CommitterName to be an explicit nil
func (o *GitAllTagCommit) SetCommitterNameNil() {
	o.CommitterName.Set(nil)
}

// UnsetCommitterName ensures that no value is present for CommitterName, not even an explicit nil
func (o *GitAllTagCommit) UnsetCommitterName() {
	o.CommitterName.Unset()
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GitAllTagCommit) GetCreatedAt() int64 {
	if o == nil || utils.IsNil(o.CreatedAt.Get()) {
		var ret int64
		return ret
	}
	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GitAllTagCommit) GetCreatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *GitAllTagCommit) HasCreatedAt() bool {
	if o != nil && o.CreatedAt.IsSet() {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given utils.NullableInt64 and assigns it to the CreatedAt field.
func (o *GitAllTagCommit) SetCreatedAt(v int64) {
	o.CreatedAt.Set(&v)
}
// SetCreatedAtNil sets the value for CreatedAt to be an explicit nil
func (o *GitAllTagCommit) SetCreatedAtNil() {
	o.CreatedAt.Set(nil)
}

// UnsetCreatedAt ensures that no value is present for CreatedAt, not even an explicit nil
func (o *GitAllTagCommit) UnsetCreatedAt() {
	o.CreatedAt.Unset()
}

// GetParents returns the Parents field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GitAllTagCommit) GetParents() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Parents
}

// GetParentsOk returns a tuple with the Parents field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GitAllTagCommit) GetParentsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Parents) {
		return nil, false
	}
	return o.Parents, true
}

// HasParents returns a boolean if a field has been set.
func (o *GitAllTagCommit) HasParents() bool {
	if o != nil && !utils.IsNil(o.Parents) {
		return true
	}

	return false
}

// SetParents gets a reference to the given []string and assigns it to the Parents field.
func (o *GitAllTagCommit) SetParents(v []string) {
	o.Parents = v
}

// GetSha returns the Sha field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GitAllTagCommit) GetSha() string {
	if o == nil || utils.IsNil(o.Sha.Get()) {
		var ret string
		return ret
	}
	return *o.Sha.Get()
}

// GetShaOk returns a tuple with the Sha field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GitAllTagCommit) GetShaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sha.Get(), o.Sha.IsSet()
}

// HasSha returns a boolean if a field has been set.
func (o *GitAllTagCommit) HasSha() bool {
	if o != nil && o.Sha.IsSet() {
		return true
	}

	return false
}

// SetSha gets a reference to the given utils.NullableString and assigns it to the Sha field.
func (o *GitAllTagCommit) SetSha(v string) {
	o.Sha.Set(&v)
}
// SetShaNil sets the value for Sha to be an explicit nil
func (o *GitAllTagCommit) SetShaNil() {
	o.Sha.Set(nil)
}

// UnsetSha ensures that no value is present for Sha, not even an explicit nil
func (o *GitAllTagCommit) UnsetSha() {
	o.Sha.Unset()
}

// GetShortMessage returns the ShortMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GitAllTagCommit) GetShortMessage() string {
	if o == nil || utils.IsNil(o.ShortMessage.Get()) {
		var ret string
		return ret
	}
	return *o.ShortMessage.Get()
}

// GetShortMessageOk returns a tuple with the ShortMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GitAllTagCommit) GetShortMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShortMessage.Get(), o.ShortMessage.IsSet()
}

// HasShortMessage returns a boolean if a field has been set.
func (o *GitAllTagCommit) HasShortMessage() bool {
	if o != nil && o.ShortMessage.IsSet() {
		return true
	}

	return false
}

// SetShortMessage gets a reference to the given utils.NullableString and assigns it to the ShortMessage field.
func (o *GitAllTagCommit) SetShortMessage(v string) {
	o.ShortMessage.Set(&v)
}
// SetShortMessageNil sets the value for ShortMessage to be an explicit nil
func (o *GitAllTagCommit) SetShortMessageNil() {
	o.ShortMessage.Set(nil)
}

// UnsetShortMessage ensures that no value is present for ShortMessage, not even an explicit nil
func (o *GitAllTagCommit) UnsetShortMessage() {
	o.ShortMessage.Unset()
}

func (o GitAllTagCommit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitAllTagCommit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AuthorEmail.IsSet() {
		toSerialize["AuthorEmail"] = o.AuthorEmail.Get()
	}
	if o.AuthorName.IsSet() {
		toSerialize["AuthorName"] = o.AuthorName.Get()
	}
	if o.CommitDate.IsSet() {
		toSerialize["CommitDate"] = o.CommitDate.Get()
	}
	if o.CommitterEmail.IsSet() {
		toSerialize["CommitterEmail"] = o.CommitterEmail.Get()
	}
	if o.CommitterName.IsSet() {
		toSerialize["CommitterName"] = o.CommitterName.Get()
	}
	if o.CreatedAt.IsSet() {
		toSerialize["CreatedAt"] = o.CreatedAt.Get()
	}
	if o.Parents != nil {
		toSerialize["Parents"] = o.Parents
	}
	if o.Sha.IsSet() {
		toSerialize["Sha"] = o.Sha.Get()
	}
	if o.ShortMessage.IsSet() {
		toSerialize["ShortMessage"] = o.ShortMessage.Get()
	}
	return toSerialize, nil
}

type NullableGitAllTagCommit struct {
	value *GitAllTagCommit
	isSet bool
}

func (v NullableGitAllTagCommit) Get() *GitAllTagCommit {
	return v.value
}

func (v *NullableGitAllTagCommit) Set(val *GitAllTagCommit) {
	v.value = val
	v.isSet = true
}

func (v NullableGitAllTagCommit) IsSet() bool {
	return v.isSet
}

func (v *NullableGitAllTagCommit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitAllTagCommit(val *GitAllTagCommit) *NullableGitAllTagCommit {
	return &NullableGitAllTagCommit{value: val, isSet: true}
}

func (v NullableGitAllTagCommit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitAllTagCommit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


