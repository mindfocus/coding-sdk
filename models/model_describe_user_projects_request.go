/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DescribeUserProjectsRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DescribeUserProjectsRequest{}

// DescribeUserProjectsRequest struct for DescribeUserProjectsRequest
type DescribeUserProjectsRequest struct {
	// 项目名称
	ProjectName *string `json:"ProjectName,omitempty"`
	// 用户编号
	UserId int64 `json:"UserId"`
}

type _DescribeUserProjectsRequest DescribeUserProjectsRequest

// NewDescribeUserProjectsRequest instantiates a new DescribeUserProjectsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeUserProjectsRequest(userId int64) *DescribeUserProjectsRequest {
	this := DescribeUserProjectsRequest{}
	this.UserId = userId
	return &this
}

// NewDescribeUserProjectsRequestWithDefaults instantiates a new DescribeUserProjectsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeUserProjectsRequestWithDefaults() *DescribeUserProjectsRequest {
	this := DescribeUserProjectsRequest{}
	return &this
}

// GetProjectName returns the ProjectName field value if set, zero value otherwise.
func (o *DescribeUserProjectsRequest) GetProjectName() string {
	if o == nil || utils.IsNil(o.ProjectName) {
		var ret string
		return ret
	}
	return *o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeUserProjectsRequest) GetProjectNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ProjectName) {
		return nil, false
	}
	return o.ProjectName, true
}

// HasProjectName returns a boolean if a field has been set.
func (o *DescribeUserProjectsRequest) HasProjectName() bool {
	if o != nil && !utils.IsNil(o.ProjectName) {
		return true
	}

	return false
}

// SetProjectName gets a reference to the given string and assigns it to the ProjectName field.
func (o *DescribeUserProjectsRequest) SetProjectName(v string) {
	o.ProjectName = &v
}

// GetUserId returns the UserId field value
func (o *DescribeUserProjectsRequest) GetUserId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *DescribeUserProjectsRequest) GetUserIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *DescribeUserProjectsRequest) SetUserId(v int64) {
	o.UserId = v
}

func (o DescribeUserProjectsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeUserProjectsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.ProjectName) {
		toSerialize["ProjectName"] = o.ProjectName
	}
	toSerialize["UserId"] = o.UserId
	return toSerialize, nil
}

func (o *DescribeUserProjectsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"UserId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescribeUserProjectsRequest := _DescribeUserProjectsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDescribeUserProjectsRequest)

	if err != nil {
		return err
	}

	*o = DescribeUserProjectsRequest(varDescribeUserProjectsRequest)

	return err
}

type NullableDescribeUserProjectsRequest struct {
	value *DescribeUserProjectsRequest
	isSet bool
}

func (v NullableDescribeUserProjectsRequest) Get() *DescribeUserProjectsRequest {
	return v.value
}

func (v *NullableDescribeUserProjectsRequest) Set(val *DescribeUserProjectsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeUserProjectsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeUserProjectsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeUserProjectsRequest(val *DescribeUserProjectsRequest) *NullableDescribeUserProjectsRequest {
	return &NullableDescribeUserProjectsRequest{value: val, isSet: true}
}

func (v NullableDescribeUserProjectsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeUserProjectsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


