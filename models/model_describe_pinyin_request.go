/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DescribePinyinRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DescribePinyinRequest{}

// DescribePinyinRequest struct for DescribePinyinRequest
type DescribePinyinRequest struct {
	// 多音字
	Heteronym bool `json:"Heteronym"`
	// 风格
	Style string `json:"Style"`
	// 汉字
	Value string `json:"Value"`
}

type _DescribePinyinRequest DescribePinyinRequest

// NewDescribePinyinRequest instantiates a new DescribePinyinRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribePinyinRequest(heteronym bool, style string, value string) *DescribePinyinRequest {
	this := DescribePinyinRequest{}
	this.Heteronym = heteronym
	this.Style = style
	this.Value = value
	return &this
}

// NewDescribePinyinRequestWithDefaults instantiates a new DescribePinyinRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribePinyinRequestWithDefaults() *DescribePinyinRequest {
	this := DescribePinyinRequest{}
	var heteronym bool = false
	this.Heteronym = heteronym
	var value string = ""
	this.Value = value
	return &this
}

// GetHeteronym returns the Heteronym field value
func (o *DescribePinyinRequest) GetHeteronym() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Heteronym
}

// GetHeteronymOk returns a tuple with the Heteronym field value
// and a boolean to check if the value has been set.
func (o *DescribePinyinRequest) GetHeteronymOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Heteronym, true
}

// SetHeteronym sets field value
func (o *DescribePinyinRequest) SetHeteronym(v bool) {
	o.Heteronym = v
}

// GetStyle returns the Style field value
func (o *DescribePinyinRequest) GetStyle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Style
}

// GetStyleOk returns a tuple with the Style field value
// and a boolean to check if the value has been set.
func (o *DescribePinyinRequest) GetStyleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Style, true
}

// SetStyle sets field value
func (o *DescribePinyinRequest) SetStyle(v string) {
	o.Style = v
}

// GetValue returns the Value field value
func (o *DescribePinyinRequest) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *DescribePinyinRequest) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *DescribePinyinRequest) SetValue(v string) {
	o.Value = v
}

func (o DescribePinyinRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribePinyinRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Heteronym"] = o.Heteronym
	toSerialize["Style"] = o.Style
	toSerialize["Value"] = o.Value
	return toSerialize, nil
}

func (o *DescribePinyinRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Heteronym",
		"Style",
		"Value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescribePinyinRequest := _DescribePinyinRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDescribePinyinRequest)

	if err != nil {
		return err
	}

	*o = DescribePinyinRequest(varDescribePinyinRequest)

	return err
}

type NullableDescribePinyinRequest struct {
	value *DescribePinyinRequest
	isSet bool
}

func (v NullableDescribePinyinRequest) Get() *DescribePinyinRequest {
	return v.value
}

func (v *NullableDescribePinyinRequest) Set(val *DescribePinyinRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribePinyinRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribePinyinRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribePinyinRequest(val *DescribePinyinRequest) *NullableDescribePinyinRequest {
	return &NullableDescribePinyinRequest{value: val, isSet: true}
}

func (v NullableDescribePinyinRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribePinyinRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


