/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the ProgramProgram type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ProgramProgram{}

// ProgramProgram struct for ProgramProgram
type ProgramProgram struct {
	// 创建时间
	CreatedAt int64 `json:"CreatedAt"`
	// 描述信息
	Description string `json:"Description"`
	// 展示名
	DisplayName string `json:"DisplayName"`
	// 截止时间
	EndDate int64 `json:"EndDate"`
	// 图标
	Icon string `json:"Icon"`
	// 项目集ID
	Id int64 `json:"Id"`
	// 项目集名
	Name string `json:"Name"`
	// 项目集名-拼音
	NamePinyin string `json:"NamePinyin"`
	// 开始时间
	StartDate int64 `json:"StartDate"`
	// 更新时间
	UpdatedAt int64 `json:"UpdatedAt"`
}

type _ProgramProgram ProgramProgram

// NewProgramProgram instantiates a new ProgramProgram object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProgramProgram(createdAt int64, description string, displayName string, endDate int64, icon string, id int64, name string, namePinyin string, startDate int64, updatedAt int64) *ProgramProgram {
	this := ProgramProgram{}
	this.CreatedAt = createdAt
	this.Description = description
	this.DisplayName = displayName
	this.EndDate = endDate
	this.Icon = icon
	this.Id = id
	this.Name = name
	this.NamePinyin = namePinyin
	this.StartDate = startDate
	this.UpdatedAt = updatedAt
	return &this
}

// NewProgramProgramWithDefaults instantiates a new ProgramProgram object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProgramProgramWithDefaults() *ProgramProgram {
	this := ProgramProgram{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *ProgramProgram) GetCreatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ProgramProgram) GetCreatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ProgramProgram) SetCreatedAt(v int64) {
	o.CreatedAt = v
}

// GetDescription returns the Description field value
func (o *ProgramProgram) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *ProgramProgram) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *ProgramProgram) SetDescription(v string) {
	o.Description = v
}

// GetDisplayName returns the DisplayName field value
func (o *ProgramProgram) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *ProgramProgram) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *ProgramProgram) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetEndDate returns the EndDate field value
func (o *ProgramProgram) GetEndDate() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value
// and a boolean to check if the value has been set.
func (o *ProgramProgram) GetEndDateOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndDate, true
}

// SetEndDate sets field value
func (o *ProgramProgram) SetEndDate(v int64) {
	o.EndDate = v
}

// GetIcon returns the Icon field value
func (o *ProgramProgram) GetIcon() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Icon
}

// GetIconOk returns a tuple with the Icon field value
// and a boolean to check if the value has been set.
func (o *ProgramProgram) GetIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Icon, true
}

// SetIcon sets field value
func (o *ProgramProgram) SetIcon(v string) {
	o.Icon = v
}

// GetId returns the Id field value
func (o *ProgramProgram) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ProgramProgram) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ProgramProgram) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ProgramProgram) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProgramProgram) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProgramProgram) SetName(v string) {
	o.Name = v
}

// GetNamePinyin returns the NamePinyin field value
func (o *ProgramProgram) GetNamePinyin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NamePinyin
}

// GetNamePinyinOk returns a tuple with the NamePinyin field value
// and a boolean to check if the value has been set.
func (o *ProgramProgram) GetNamePinyinOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NamePinyin, true
}

// SetNamePinyin sets field value
func (o *ProgramProgram) SetNamePinyin(v string) {
	o.NamePinyin = v
}

// GetStartDate returns the StartDate field value
func (o *ProgramProgram) GetStartDate() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value
// and a boolean to check if the value has been set.
func (o *ProgramProgram) GetStartDateOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDate, true
}

// SetStartDate sets field value
func (o *ProgramProgram) SetStartDate(v int64) {
	o.StartDate = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *ProgramProgram) GetUpdatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *ProgramProgram) GetUpdatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *ProgramProgram) SetUpdatedAt(v int64) {
	o.UpdatedAt = v
}

func (o ProgramProgram) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProgramProgram) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["CreatedAt"] = o.CreatedAt
	toSerialize["Description"] = o.Description
	toSerialize["DisplayName"] = o.DisplayName
	toSerialize["EndDate"] = o.EndDate
	toSerialize["Icon"] = o.Icon
	toSerialize["Id"] = o.Id
	toSerialize["Name"] = o.Name
	toSerialize["NamePinyin"] = o.NamePinyin
	toSerialize["StartDate"] = o.StartDate
	toSerialize["UpdatedAt"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *ProgramProgram) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"CreatedAt",
		"Description",
		"DisplayName",
		"EndDate",
		"Icon",
		"Id",
		"Name",
		"NamePinyin",
		"StartDate",
		"UpdatedAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProgramProgram := _ProgramProgram{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProgramProgram)

	if err != nil {
		return err
	}

	*o = ProgramProgram(varProgramProgram)

	return err
}

type NullableProgramProgram struct {
	value *ProgramProgram
	isSet bool
}

func (v NullableProgramProgram) Get() *ProgramProgram {
	return v.value
}

func (v *NullableProgramProgram) Set(val *ProgramProgram) {
	v.value = val
	v.isSet = true
}

func (v NullableProgramProgram) IsSet() bool {
	return v.isSet
}

func (v *NullableProgramProgram) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProgramProgram(val *ProgramProgram) *NullableProgramProgram {
	return &NullableProgramProgram{value: val, isSet: true}
}

func (v NullableProgramProgram) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProgramProgram) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


