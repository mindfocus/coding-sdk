/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the GitBranchInfo type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &GitBranchInfo{}

// GitBranchInfo 分支简略信息
type GitBranchInfo struct {
	// 分支名称
	BranchName *string `json:"BranchName,omitempty"`
	// 是否禁止强制推送
	DenyForcePush utils.NullableBool `json:"DenyForcePush,omitempty"`
	// 是否可以ForceSquash
	ForceSquash utils.NullableBool `json:"ForceSquash,omitempty"`
	// 是否默认分支
	IsDefaultBranch *bool `json:"IsDefaultBranch,omitempty"`
	// 是否保护分支
	IsProtected *bool `json:"IsProtected,omitempty"`
	// 是否只读
	IsReadOnly utils.NullableBool `json:"IsReadOnly,omitempty"`
	// 最后提交时间
	LastCommitDate utils.NullableInt64 `json:"LastCommitDate,omitempty"`
	// 分支sha值
	Sha *string `json:"Sha,omitempty"`
	// 仓库规范类型
	SpecBranchType utils.NullableString `json:"SpecBranchType,omitempty"`
}

// NewGitBranchInfo instantiates a new GitBranchInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitBranchInfo() *GitBranchInfo {
	this := GitBranchInfo{}
	var branchName string = ""
	this.BranchName = &branchName
	var denyForcePush bool = false
	this.DenyForcePush = *utils.NewNullableBool(&denyForcePush)
	var forceSquash bool = false
	this.ForceSquash = *utils.NewNullableBool(&forceSquash)
	var isDefaultBranch bool = false
	this.IsDefaultBranch = &isDefaultBranch
	var isProtected bool = false
	this.IsProtected = &isProtected
	var isReadOnly bool = false
	this.IsReadOnly = *utils.NewNullableBool(&isReadOnly)
	var sha string = ""
	this.Sha = &sha
	var specBranchType string = ""
	this.SpecBranchType = *utils.NewNullableString(&specBranchType)
	return &this
}

// NewGitBranchInfoWithDefaults instantiates a new GitBranchInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitBranchInfoWithDefaults() *GitBranchInfo {
	this := GitBranchInfo{}
	var branchName string = ""
	this.BranchName = &branchName
	var denyForcePush bool = false
	this.DenyForcePush = *utils.NewNullableBool(&denyForcePush)
	var forceSquash bool = false
	this.ForceSquash = *utils.NewNullableBool(&forceSquash)
	var isDefaultBranch bool = false
	this.IsDefaultBranch = &isDefaultBranch
	var isProtected bool = false
	this.IsProtected = &isProtected
	var isReadOnly bool = false
	this.IsReadOnly = *utils.NewNullableBool(&isReadOnly)
	var sha string = ""
	this.Sha = &sha
	var specBranchType string = ""
	this.SpecBranchType = *utils.NewNullableString(&specBranchType)
	return &this
}

// GetBranchName returns the BranchName field value if set, zero value otherwise.
func (o *GitBranchInfo) GetBranchName() string {
	if o == nil || utils.IsNil(o.BranchName) {
		var ret string
		return ret
	}
	return *o.BranchName
}

// GetBranchNameOk returns a tuple with the BranchName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitBranchInfo) GetBranchNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.BranchName) {
		return nil, false
	}
	return o.BranchName, true
}

// HasBranchName returns a boolean if a field has been set.
func (o *GitBranchInfo) HasBranchName() bool {
	if o != nil && !utils.IsNil(o.BranchName) {
		return true
	}

	return false
}

// SetBranchName gets a reference to the given string and assigns it to the BranchName field.
func (o *GitBranchInfo) SetBranchName(v string) {
	o.BranchName = &v
}

// GetDenyForcePush returns the DenyForcePush field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GitBranchInfo) GetDenyForcePush() bool {
	if o == nil || utils.IsNil(o.DenyForcePush.Get()) {
		var ret bool
		return ret
	}
	return *o.DenyForcePush.Get()
}

// GetDenyForcePushOk returns a tuple with the DenyForcePush field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GitBranchInfo) GetDenyForcePushOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DenyForcePush.Get(), o.DenyForcePush.IsSet()
}

// HasDenyForcePush returns a boolean if a field has been set.
func (o *GitBranchInfo) HasDenyForcePush() bool {
	if o != nil && o.DenyForcePush.IsSet() {
		return true
	}

	return false
}

// SetDenyForcePush gets a reference to the given utils.NullableBool and assigns it to the DenyForcePush field.
func (o *GitBranchInfo) SetDenyForcePush(v bool) {
	o.DenyForcePush.Set(&v)
}
// SetDenyForcePushNil sets the value for DenyForcePush to be an explicit nil
func (o *GitBranchInfo) SetDenyForcePushNil() {
	o.DenyForcePush.Set(nil)
}

// UnsetDenyForcePush ensures that no value is present for DenyForcePush, not even an explicit nil
func (o *GitBranchInfo) UnsetDenyForcePush() {
	o.DenyForcePush.Unset()
}

// GetForceSquash returns the ForceSquash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GitBranchInfo) GetForceSquash() bool {
	if o == nil || utils.IsNil(o.ForceSquash.Get()) {
		var ret bool
		return ret
	}
	return *o.ForceSquash.Get()
}

// GetForceSquashOk returns a tuple with the ForceSquash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GitBranchInfo) GetForceSquashOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ForceSquash.Get(), o.ForceSquash.IsSet()
}

// HasForceSquash returns a boolean if a field has been set.
func (o *GitBranchInfo) HasForceSquash() bool {
	if o != nil && o.ForceSquash.IsSet() {
		return true
	}

	return false
}

// SetForceSquash gets a reference to the given utils.NullableBool and assigns it to the ForceSquash field.
func (o *GitBranchInfo) SetForceSquash(v bool) {
	o.ForceSquash.Set(&v)
}
// SetForceSquashNil sets the value for ForceSquash to be an explicit nil
func (o *GitBranchInfo) SetForceSquashNil() {
	o.ForceSquash.Set(nil)
}

// UnsetForceSquash ensures that no value is present for ForceSquash, not even an explicit nil
func (o *GitBranchInfo) UnsetForceSquash() {
	o.ForceSquash.Unset()
}

// GetIsDefaultBranch returns the IsDefaultBranch field value if set, zero value otherwise.
func (o *GitBranchInfo) GetIsDefaultBranch() bool {
	if o == nil || utils.IsNil(o.IsDefaultBranch) {
		var ret bool
		return ret
	}
	return *o.IsDefaultBranch
}

// GetIsDefaultBranchOk returns a tuple with the IsDefaultBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitBranchInfo) GetIsDefaultBranchOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IsDefaultBranch) {
		return nil, false
	}
	return o.IsDefaultBranch, true
}

// HasIsDefaultBranch returns a boolean if a field has been set.
func (o *GitBranchInfo) HasIsDefaultBranch() bool {
	if o != nil && !utils.IsNil(o.IsDefaultBranch) {
		return true
	}

	return false
}

// SetIsDefaultBranch gets a reference to the given bool and assigns it to the IsDefaultBranch field.
func (o *GitBranchInfo) SetIsDefaultBranch(v bool) {
	o.IsDefaultBranch = &v
}

// GetIsProtected returns the IsProtected field value if set, zero value otherwise.
func (o *GitBranchInfo) GetIsProtected() bool {
	if o == nil || utils.IsNil(o.IsProtected) {
		var ret bool
		return ret
	}
	return *o.IsProtected
}

// GetIsProtectedOk returns a tuple with the IsProtected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitBranchInfo) GetIsProtectedOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IsProtected) {
		return nil, false
	}
	return o.IsProtected, true
}

// HasIsProtected returns a boolean if a field has been set.
func (o *GitBranchInfo) HasIsProtected() bool {
	if o != nil && !utils.IsNil(o.IsProtected) {
		return true
	}

	return false
}

// SetIsProtected gets a reference to the given bool and assigns it to the IsProtected field.
func (o *GitBranchInfo) SetIsProtected(v bool) {
	o.IsProtected = &v
}

// GetIsReadOnly returns the IsReadOnly field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GitBranchInfo) GetIsReadOnly() bool {
	if o == nil || utils.IsNil(o.IsReadOnly.Get()) {
		var ret bool
		return ret
	}
	return *o.IsReadOnly.Get()
}

// GetIsReadOnlyOk returns a tuple with the IsReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GitBranchInfo) GetIsReadOnlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsReadOnly.Get(), o.IsReadOnly.IsSet()
}

// HasIsReadOnly returns a boolean if a field has been set.
func (o *GitBranchInfo) HasIsReadOnly() bool {
	if o != nil && o.IsReadOnly.IsSet() {
		return true
	}

	return false
}

// SetIsReadOnly gets a reference to the given utils.NullableBool and assigns it to the IsReadOnly field.
func (o *GitBranchInfo) SetIsReadOnly(v bool) {
	o.IsReadOnly.Set(&v)
}
// SetIsReadOnlyNil sets the value for IsReadOnly to be an explicit nil
func (o *GitBranchInfo) SetIsReadOnlyNil() {
	o.IsReadOnly.Set(nil)
}

// UnsetIsReadOnly ensures that no value is present for IsReadOnly, not even an explicit nil
func (o *GitBranchInfo) UnsetIsReadOnly() {
	o.IsReadOnly.Unset()
}

// GetLastCommitDate returns the LastCommitDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GitBranchInfo) GetLastCommitDate() int64 {
	if o == nil || utils.IsNil(o.LastCommitDate.Get()) {
		var ret int64
		return ret
	}
	return *o.LastCommitDate.Get()
}

// GetLastCommitDateOk returns a tuple with the LastCommitDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GitBranchInfo) GetLastCommitDateOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastCommitDate.Get(), o.LastCommitDate.IsSet()
}

// HasLastCommitDate returns a boolean if a field has been set.
func (o *GitBranchInfo) HasLastCommitDate() bool {
	if o != nil && o.LastCommitDate.IsSet() {
		return true
	}

	return false
}

// SetLastCommitDate gets a reference to the given utils.NullableInt64 and assigns it to the LastCommitDate field.
func (o *GitBranchInfo) SetLastCommitDate(v int64) {
	o.LastCommitDate.Set(&v)
}
// SetLastCommitDateNil sets the value for LastCommitDate to be an explicit nil
func (o *GitBranchInfo) SetLastCommitDateNil() {
	o.LastCommitDate.Set(nil)
}

// UnsetLastCommitDate ensures that no value is present for LastCommitDate, not even an explicit nil
func (o *GitBranchInfo) UnsetLastCommitDate() {
	o.LastCommitDate.Unset()
}

// GetSha returns the Sha field value if set, zero value otherwise.
func (o *GitBranchInfo) GetSha() string {
	if o == nil || utils.IsNil(o.Sha) {
		var ret string
		return ret
	}
	return *o.Sha
}

// GetShaOk returns a tuple with the Sha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitBranchInfo) GetShaOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Sha) {
		return nil, false
	}
	return o.Sha, true
}

// HasSha returns a boolean if a field has been set.
func (o *GitBranchInfo) HasSha() bool {
	if o != nil && !utils.IsNil(o.Sha) {
		return true
	}

	return false
}

// SetSha gets a reference to the given string and assigns it to the Sha field.
func (o *GitBranchInfo) SetSha(v string) {
	o.Sha = &v
}

// GetSpecBranchType returns the SpecBranchType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GitBranchInfo) GetSpecBranchType() string {
	if o == nil || utils.IsNil(o.SpecBranchType.Get()) {
		var ret string
		return ret
	}
	return *o.SpecBranchType.Get()
}

// GetSpecBranchTypeOk returns a tuple with the SpecBranchType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GitBranchInfo) GetSpecBranchTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SpecBranchType.Get(), o.SpecBranchType.IsSet()
}

// HasSpecBranchType returns a boolean if a field has been set.
func (o *GitBranchInfo) HasSpecBranchType() bool {
	if o != nil && o.SpecBranchType.IsSet() {
		return true
	}

	return false
}

// SetSpecBranchType gets a reference to the given utils.NullableString and assigns it to the SpecBranchType field.
func (o *GitBranchInfo) SetSpecBranchType(v string) {
	o.SpecBranchType.Set(&v)
}
// SetSpecBranchTypeNil sets the value for SpecBranchType to be an explicit nil
func (o *GitBranchInfo) SetSpecBranchTypeNil() {
	o.SpecBranchType.Set(nil)
}

// UnsetSpecBranchType ensures that no value is present for SpecBranchType, not even an explicit nil
func (o *GitBranchInfo) UnsetSpecBranchType() {
	o.SpecBranchType.Unset()
}

func (o GitBranchInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitBranchInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.BranchName) {
		toSerialize["BranchName"] = o.BranchName
	}
	if o.DenyForcePush.IsSet() {
		toSerialize["DenyForcePush"] = o.DenyForcePush.Get()
	}
	if o.ForceSquash.IsSet() {
		toSerialize["ForceSquash"] = o.ForceSquash.Get()
	}
	if !utils.IsNil(o.IsDefaultBranch) {
		toSerialize["IsDefaultBranch"] = o.IsDefaultBranch
	}
	if !utils.IsNil(o.IsProtected) {
		toSerialize["IsProtected"] = o.IsProtected
	}
	if o.IsReadOnly.IsSet() {
		toSerialize["IsReadOnly"] = o.IsReadOnly.Get()
	}
	if o.LastCommitDate.IsSet() {
		toSerialize["LastCommitDate"] = o.LastCommitDate.Get()
	}
	if !utils.IsNil(o.Sha) {
		toSerialize["Sha"] = o.Sha
	}
	if o.SpecBranchType.IsSet() {
		toSerialize["SpecBranchType"] = o.SpecBranchType.Get()
	}
	return toSerialize, nil
}

type NullableGitBranchInfo struct {
	value *GitBranchInfo
	isSet bool
}

func (v NullableGitBranchInfo) Get() *GitBranchInfo {
	return v.value
}

func (v *NullableGitBranchInfo) Set(val *GitBranchInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableGitBranchInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableGitBranchInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitBranchInfo(val *GitBranchInfo) *NullableGitBranchInfo {
	return &NullableGitBranchInfo{value: val, isSet: true}
}

func (v NullableGitBranchInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitBranchInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


