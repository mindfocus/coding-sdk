/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the TeamArtifact type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &TeamArtifact{}

// TeamArtifact 制品完整信息
type TeamArtifact struct {
	// 制品类型（1-generic;2-docker;3-maven;4-npm;5-pypi;6-helm;7-composer;8-nuget;9-conan;10-cocoapods;11-rpm）
	ArtifactType *int64 `json:"ArtifactType,omitempty"`
	// 推送时间
	CreatedAt *int64 `json:"CreatedAt,omitempty"`
	// 制品描述
	Description *string `json:"Description,omitempty"`
	// 下载次数
	DownloadCount *string `json:"DownloadCount,omitempty"`
	// 制品hash
	Hash *string `json:"Hash,omitempty"`
	// 制品名称
	Package *string `json:"Package,omitempty"`
	// 制品版本
	PackageVersion *string `json:"PackageVersion,omitempty"`
	// 制品包ID
	PkgId *int64 `json:"PkgId,omitempty"`
	// 项目ID
	ProjectId *int64 `json:"ProjectId,omitempty"`
	// 项目名称
	ProjectName *bool `json:"ProjectName,omitempty"`
	// 发布状态（1=未发布，2=已发布）
	ReleaseStatus *int64 `json:"ReleaseStatus,omitempty"`
	// 制品仓库ID
	RepoId *int64 `json:"RepoId,omitempty"`
	// 制品仓库名称
	Repository *string `json:"Repository,omitempty"`
	// 制品代销
	Size *float32 `json:"Size,omitempty"`
	// 制品版本ID
	VersionId *int64 `json:"VersionId,omitempty"`
}

// NewTeamArtifact instantiates a new TeamArtifact object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamArtifact() *TeamArtifact {
	this := TeamArtifact{}
	var description string = ""
	this.Description = &description
	var downloadCount string = ""
	this.DownloadCount = &downloadCount
	var hash string = ""
	this.Hash = &hash
	var package_ string = ""
	this.Package = &package_
	var packageVersion string = ""
	this.PackageVersion = &packageVersion
	var projectName bool = false
	this.ProjectName = &projectName
	var repository string = ""
	this.Repository = &repository
	return &this
}

// NewTeamArtifactWithDefaults instantiates a new TeamArtifact object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamArtifactWithDefaults() *TeamArtifact {
	this := TeamArtifact{}
	var description string = ""
	this.Description = &description
	var downloadCount string = ""
	this.DownloadCount = &downloadCount
	var hash string = ""
	this.Hash = &hash
	var package_ string = ""
	this.Package = &package_
	var packageVersion string = ""
	this.PackageVersion = &packageVersion
	var projectName bool = false
	this.ProjectName = &projectName
	var repository string = ""
	this.Repository = &repository
	return &this
}

// GetArtifactType returns the ArtifactType field value if set, zero value otherwise.
func (o *TeamArtifact) GetArtifactType() int64 {
	if o == nil || utils.IsNil(o.ArtifactType) {
		var ret int64
		return ret
	}
	return *o.ArtifactType
}

// GetArtifactTypeOk returns a tuple with the ArtifactType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamArtifact) GetArtifactTypeOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.ArtifactType) {
		return nil, false
	}
	return o.ArtifactType, true
}

// HasArtifactType returns a boolean if a field has been set.
func (o *TeamArtifact) HasArtifactType() bool {
	if o != nil && !utils.IsNil(o.ArtifactType) {
		return true
	}

	return false
}

// SetArtifactType gets a reference to the given int64 and assigns it to the ArtifactType field.
func (o *TeamArtifact) SetArtifactType(v int64) {
	o.ArtifactType = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *TeamArtifact) GetCreatedAt() int64 {
	if o == nil || utils.IsNil(o.CreatedAt) {
		var ret int64
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamArtifact) GetCreatedAtOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *TeamArtifact) HasCreatedAt() bool {
	if o != nil && !utils.IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int64 and assigns it to the CreatedAt field.
func (o *TeamArtifact) SetCreatedAt(v int64) {
	o.CreatedAt = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TeamArtifact) GetDescription() string {
	if o == nil || utils.IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamArtifact) GetDescriptionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TeamArtifact) HasDescription() bool {
	if o != nil && !utils.IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TeamArtifact) SetDescription(v string) {
	o.Description = &v
}

// GetDownloadCount returns the DownloadCount field value if set, zero value otherwise.
func (o *TeamArtifact) GetDownloadCount() string {
	if o == nil || utils.IsNil(o.DownloadCount) {
		var ret string
		return ret
	}
	return *o.DownloadCount
}

// GetDownloadCountOk returns a tuple with the DownloadCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamArtifact) GetDownloadCountOk() (*string, bool) {
	if o == nil || utils.IsNil(o.DownloadCount) {
		return nil, false
	}
	return o.DownloadCount, true
}

// HasDownloadCount returns a boolean if a field has been set.
func (o *TeamArtifact) HasDownloadCount() bool {
	if o != nil && !utils.IsNil(o.DownloadCount) {
		return true
	}

	return false
}

// SetDownloadCount gets a reference to the given string and assigns it to the DownloadCount field.
func (o *TeamArtifact) SetDownloadCount(v string) {
	o.DownloadCount = &v
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *TeamArtifact) GetHash() string {
	if o == nil || utils.IsNil(o.Hash) {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamArtifact) GetHashOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Hash) {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *TeamArtifact) HasHash() bool {
	if o != nil && !utils.IsNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *TeamArtifact) SetHash(v string) {
	o.Hash = &v
}

// GetPackage returns the Package field value if set, zero value otherwise.
func (o *TeamArtifact) GetPackage() string {
	if o == nil || utils.IsNil(o.Package) {
		var ret string
		return ret
	}
	return *o.Package
}

// GetPackageOk returns a tuple with the Package field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamArtifact) GetPackageOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Package) {
		return nil, false
	}
	return o.Package, true
}

// HasPackage returns a boolean if a field has been set.
func (o *TeamArtifact) HasPackage() bool {
	if o != nil && !utils.IsNil(o.Package) {
		return true
	}

	return false
}

// SetPackage gets a reference to the given string and assigns it to the Package field.
func (o *TeamArtifact) SetPackage(v string) {
	o.Package = &v
}

// GetPackageVersion returns the PackageVersion field value if set, zero value otherwise.
func (o *TeamArtifact) GetPackageVersion() string {
	if o == nil || utils.IsNil(o.PackageVersion) {
		var ret string
		return ret
	}
	return *o.PackageVersion
}

// GetPackageVersionOk returns a tuple with the PackageVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamArtifact) GetPackageVersionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.PackageVersion) {
		return nil, false
	}
	return o.PackageVersion, true
}

// HasPackageVersion returns a boolean if a field has been set.
func (o *TeamArtifact) HasPackageVersion() bool {
	if o != nil && !utils.IsNil(o.PackageVersion) {
		return true
	}

	return false
}

// SetPackageVersion gets a reference to the given string and assigns it to the PackageVersion field.
func (o *TeamArtifact) SetPackageVersion(v string) {
	o.PackageVersion = &v
}

// GetPkgId returns the PkgId field value if set, zero value otherwise.
func (o *TeamArtifact) GetPkgId() int64 {
	if o == nil || utils.IsNil(o.PkgId) {
		var ret int64
		return ret
	}
	return *o.PkgId
}

// GetPkgIdOk returns a tuple with the PkgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamArtifact) GetPkgIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.PkgId) {
		return nil, false
	}
	return o.PkgId, true
}

// HasPkgId returns a boolean if a field has been set.
func (o *TeamArtifact) HasPkgId() bool {
	if o != nil && !utils.IsNil(o.PkgId) {
		return true
	}

	return false
}

// SetPkgId gets a reference to the given int64 and assigns it to the PkgId field.
func (o *TeamArtifact) SetPkgId(v int64) {
	o.PkgId = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *TeamArtifact) GetProjectId() int64 {
	if o == nil || utils.IsNil(o.ProjectId) {
		var ret int64
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamArtifact) GetProjectIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *TeamArtifact) HasProjectId() bool {
	if o != nil && !utils.IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given int64 and assigns it to the ProjectId field.
func (o *TeamArtifact) SetProjectId(v int64) {
	o.ProjectId = &v
}

// GetProjectName returns the ProjectName field value if set, zero value otherwise.
func (o *TeamArtifact) GetProjectName() bool {
	if o == nil || utils.IsNil(o.ProjectName) {
		var ret bool
		return ret
	}
	return *o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamArtifact) GetProjectNameOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.ProjectName) {
		return nil, false
	}
	return o.ProjectName, true
}

// HasProjectName returns a boolean if a field has been set.
func (o *TeamArtifact) HasProjectName() bool {
	if o != nil && !utils.IsNil(o.ProjectName) {
		return true
	}

	return false
}

// SetProjectName gets a reference to the given bool and assigns it to the ProjectName field.
func (o *TeamArtifact) SetProjectName(v bool) {
	o.ProjectName = &v
}

// GetReleaseStatus returns the ReleaseStatus field value if set, zero value otherwise.
func (o *TeamArtifact) GetReleaseStatus() int64 {
	if o == nil || utils.IsNil(o.ReleaseStatus) {
		var ret int64
		return ret
	}
	return *o.ReleaseStatus
}

// GetReleaseStatusOk returns a tuple with the ReleaseStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamArtifact) GetReleaseStatusOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.ReleaseStatus) {
		return nil, false
	}
	return o.ReleaseStatus, true
}

// HasReleaseStatus returns a boolean if a field has been set.
func (o *TeamArtifact) HasReleaseStatus() bool {
	if o != nil && !utils.IsNil(o.ReleaseStatus) {
		return true
	}

	return false
}

// SetReleaseStatus gets a reference to the given int64 and assigns it to the ReleaseStatus field.
func (o *TeamArtifact) SetReleaseStatus(v int64) {
	o.ReleaseStatus = &v
}

// GetRepoId returns the RepoId field value if set, zero value otherwise.
func (o *TeamArtifact) GetRepoId() int64 {
	if o == nil || utils.IsNil(o.RepoId) {
		var ret int64
		return ret
	}
	return *o.RepoId
}

// GetRepoIdOk returns a tuple with the RepoId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamArtifact) GetRepoIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.RepoId) {
		return nil, false
	}
	return o.RepoId, true
}

// HasRepoId returns a boolean if a field has been set.
func (o *TeamArtifact) HasRepoId() bool {
	if o != nil && !utils.IsNil(o.RepoId) {
		return true
	}

	return false
}

// SetRepoId gets a reference to the given int64 and assigns it to the RepoId field.
func (o *TeamArtifact) SetRepoId(v int64) {
	o.RepoId = &v
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *TeamArtifact) GetRepository() string {
	if o == nil || utils.IsNil(o.Repository) {
		var ret string
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamArtifact) GetRepositoryOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Repository) {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *TeamArtifact) HasRepository() bool {
	if o != nil && !utils.IsNil(o.Repository) {
		return true
	}

	return false
}

// SetRepository gets a reference to the given string and assigns it to the Repository field.
func (o *TeamArtifact) SetRepository(v string) {
	o.Repository = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *TeamArtifact) GetSize() float32 {
	if o == nil || utils.IsNil(o.Size) {
		var ret float32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamArtifact) GetSizeOk() (*float32, bool) {
	if o == nil || utils.IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *TeamArtifact) HasSize() bool {
	if o != nil && !utils.IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given float32 and assigns it to the Size field.
func (o *TeamArtifact) SetSize(v float32) {
	o.Size = &v
}

// GetVersionId returns the VersionId field value if set, zero value otherwise.
func (o *TeamArtifact) GetVersionId() int64 {
	if o == nil || utils.IsNil(o.VersionId) {
		var ret int64
		return ret
	}
	return *o.VersionId
}

// GetVersionIdOk returns a tuple with the VersionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamArtifact) GetVersionIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.VersionId) {
		return nil, false
	}
	return o.VersionId, true
}

// HasVersionId returns a boolean if a field has been set.
func (o *TeamArtifact) HasVersionId() bool {
	if o != nil && !utils.IsNil(o.VersionId) {
		return true
	}

	return false
}

// SetVersionId gets a reference to the given int64 and assigns it to the VersionId field.
func (o *TeamArtifact) SetVersionId(v int64) {
	o.VersionId = &v
}

func (o TeamArtifact) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamArtifact) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.ArtifactType) {
		toSerialize["ArtifactType"] = o.ArtifactType
	}
	if !utils.IsNil(o.CreatedAt) {
		toSerialize["CreatedAt"] = o.CreatedAt
	}
	if !utils.IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !utils.IsNil(o.DownloadCount) {
		toSerialize["DownloadCount"] = o.DownloadCount
	}
	if !utils.IsNil(o.Hash) {
		toSerialize["Hash"] = o.Hash
	}
	if !utils.IsNil(o.Package) {
		toSerialize["Package"] = o.Package
	}
	if !utils.IsNil(o.PackageVersion) {
		toSerialize["PackageVersion"] = o.PackageVersion
	}
	if !utils.IsNil(o.PkgId) {
		toSerialize["PkgId"] = o.PkgId
	}
	if !utils.IsNil(o.ProjectId) {
		toSerialize["ProjectId"] = o.ProjectId
	}
	if !utils.IsNil(o.ProjectName) {
		toSerialize["ProjectName"] = o.ProjectName
	}
	if !utils.IsNil(o.ReleaseStatus) {
		toSerialize["ReleaseStatus"] = o.ReleaseStatus
	}
	if !utils.IsNil(o.RepoId) {
		toSerialize["RepoId"] = o.RepoId
	}
	if !utils.IsNil(o.Repository) {
		toSerialize["Repository"] = o.Repository
	}
	if !utils.IsNil(o.Size) {
		toSerialize["Size"] = o.Size
	}
	if !utils.IsNil(o.VersionId) {
		toSerialize["VersionId"] = o.VersionId
	}
	return toSerialize, nil
}

type NullableTeamArtifact struct {
	value *TeamArtifact
	isSet bool
}

func (v NullableTeamArtifact) Get() *TeamArtifact {
	return v.value
}

func (v *NullableTeamArtifact) Set(val *TeamArtifact) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamArtifact) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamArtifact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamArtifact(val *TeamArtifact) *NullableTeamArtifact {
	return &NullableTeamArtifact{value: val, isSet: true}
}

func (v NullableTeamArtifact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamArtifact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


