/*
CODING OPEN API

  

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DescribeIterationListRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DescribeIterationListRequest{}

// DescribeIterationListRequest struct for DescribeIterationListRequest
type DescribeIterationListRequest struct {
	// 处理人 ID 列表
	Assignee []int64 `json:"Assignee,omitempty"`
	// 通过结束时间过滤，时间格式：2020-12-12
	EndDate map[string]interface{} `json:"EndDate,omitempty"`
	// 通过关键字搜索
	Keywords *string `json:"Keywords,omitempty"`
	// 偏移量，默认 0
	Limit *int64 `json:"Limit,omitempty"`
	// 每页数量，默认 20
	Offset *int64 `json:"Offset,omitempty"`
	// 项目名称
	ProjectName string `json:"ProjectName"`
	// 通过开始时间过滤，时间格式：2020-12-12
	StartDate map[string]interface{} `json:"StartDate,omitempty"`
	// 迭代状态,  WAIT_PROCESS,PROCESSING,COMPLETED
	Status []string `json:"Status,omitempty"`
}

type _DescribeIterationListRequest DescribeIterationListRequest

// NewDescribeIterationListRequest instantiates a new DescribeIterationListRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeIterationListRequest(projectName string) *DescribeIterationListRequest {
	this := DescribeIterationListRequest{}
	this.ProjectName = projectName
	return &this
}

// NewDescribeIterationListRequestWithDefaults instantiates a new DescribeIterationListRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeIterationListRequestWithDefaults() *DescribeIterationListRequest {
	this := DescribeIterationListRequest{}
	return &this
}

// GetAssignee returns the Assignee field value if set, zero value otherwise.
func (o *DescribeIterationListRequest) GetAssignee() []int64 {
	if o == nil || utils.IsNil(o.Assignee) {
		var ret []int64
		return ret
	}
	return o.Assignee
}

// GetAssigneeOk returns a tuple with the Assignee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeIterationListRequest) GetAssigneeOk() ([]int64, bool) {
	if o == nil || utils.IsNil(o.Assignee) {
		return nil, false
	}
	return o.Assignee, true
}

// HasAssignee returns a boolean if a field has been set.
func (o *DescribeIterationListRequest) HasAssignee() bool {
	if o != nil && !utils.IsNil(o.Assignee) {
		return true
	}

	return false
}

// SetAssignee gets a reference to the given []int64 and assigns it to the Assignee field.
func (o *DescribeIterationListRequest) SetAssignee(v []int64) {
	o.Assignee = v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *DescribeIterationListRequest) GetEndDate() map[string]interface{} {
	if o == nil || utils.IsNil(o.EndDate) {
		var ret map[string]interface{}
		return ret
	}
	return o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeIterationListRequest) GetEndDateOk() (map[string]interface{}, bool) {
	if o == nil || utils.IsNil(o.EndDate) {
		return map[string]interface{}{}, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *DescribeIterationListRequest) HasEndDate() bool {
	if o != nil && !utils.IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given map[string]interface{} and assigns it to the EndDate field.
func (o *DescribeIterationListRequest) SetEndDate(v map[string]interface{}) {
	o.EndDate = v
}

// GetKeywords returns the Keywords field value if set, zero value otherwise.
func (o *DescribeIterationListRequest) GetKeywords() string {
	if o == nil || utils.IsNil(o.Keywords) {
		var ret string
		return ret
	}
	return *o.Keywords
}

// GetKeywordsOk returns a tuple with the Keywords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeIterationListRequest) GetKeywordsOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Keywords) {
		return nil, false
	}
	return o.Keywords, true
}

// HasKeywords returns a boolean if a field has been set.
func (o *DescribeIterationListRequest) HasKeywords() bool {
	if o != nil && !utils.IsNil(o.Keywords) {
		return true
	}

	return false
}

// SetKeywords gets a reference to the given string and assigns it to the Keywords field.
func (o *DescribeIterationListRequest) SetKeywords(v string) {
	o.Keywords = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *DescribeIterationListRequest) GetLimit() int64 {
	if o == nil || utils.IsNil(o.Limit) {
		var ret int64
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeIterationListRequest) GetLimitOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *DescribeIterationListRequest) HasLimit() bool {
	if o != nil && !utils.IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int64 and assigns it to the Limit field.
func (o *DescribeIterationListRequest) SetLimit(v int64) {
	o.Limit = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *DescribeIterationListRequest) GetOffset() int64 {
	if o == nil || utils.IsNil(o.Offset) {
		var ret int64
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeIterationListRequest) GetOffsetOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *DescribeIterationListRequest) HasOffset() bool {
	if o != nil && !utils.IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int64 and assigns it to the Offset field.
func (o *DescribeIterationListRequest) SetOffset(v int64) {
	o.Offset = &v
}

// GetProjectName returns the ProjectName field value
func (o *DescribeIterationListRequest) GetProjectName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value
// and a boolean to check if the value has been set.
func (o *DescribeIterationListRequest) GetProjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectName, true
}

// SetProjectName sets field value
func (o *DescribeIterationListRequest) SetProjectName(v string) {
	o.ProjectName = v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *DescribeIterationListRequest) GetStartDate() map[string]interface{} {
	if o == nil || utils.IsNil(o.StartDate) {
		var ret map[string]interface{}
		return ret
	}
	return o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeIterationListRequest) GetStartDateOk() (map[string]interface{}, bool) {
	if o == nil || utils.IsNil(o.StartDate) {
		return map[string]interface{}{}, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *DescribeIterationListRequest) HasStartDate() bool {
	if o != nil && !utils.IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given map[string]interface{} and assigns it to the StartDate field.
func (o *DescribeIterationListRequest) SetStartDate(v map[string]interface{}) {
	o.StartDate = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DescribeIterationListRequest) GetStatus() []string {
	if o == nil || utils.IsNil(o.Status) {
		var ret []string
		return ret
	}
	return o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeIterationListRequest) GetStatusOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DescribeIterationListRequest) HasStatus() bool {
	if o != nil && !utils.IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given []string and assigns it to the Status field.
func (o *DescribeIterationListRequest) SetStatus(v []string) {
	o.Status = v
}

func (o DescribeIterationListRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeIterationListRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Assignee) {
		toSerialize["Assignee"] = o.Assignee
	}
	if !utils.IsNil(o.EndDate) {
		toSerialize["EndDate"] = o.EndDate
	}
	if !utils.IsNil(o.Keywords) {
		toSerialize["Keywords"] = o.Keywords
	}
	if !utils.IsNil(o.Limit) {
		toSerialize["Limit"] = o.Limit
	}
	if !utils.IsNil(o.Offset) {
		toSerialize["Offset"] = o.Offset
	}
	toSerialize["ProjectName"] = o.ProjectName
	if !utils.IsNil(o.StartDate) {
		toSerialize["StartDate"] = o.StartDate
	}
	if !utils.IsNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	return toSerialize, nil
}

func (o *DescribeIterationListRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ProjectName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescribeIterationListRequest := _DescribeIterationListRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDescribeIterationListRequest)

	if err != nil {
		return err
	}

	*o = DescribeIterationListRequest(varDescribeIterationListRequest)

	return err
}

type NullableDescribeIterationListRequest struct {
	value *DescribeIterationListRequest
	isSet bool
}

func (v NullableDescribeIterationListRequest) Get() *DescribeIterationListRequest {
	return v.value
}

func (v *NullableDescribeIterationListRequest) Set(val *DescribeIterationListRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeIterationListRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeIterationListRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeIterationListRequest(val *DescribeIterationListRequest) *NullableDescribeIterationListRequest {
	return &NullableDescribeIterationListRequest{value: val, isSet: true}
}

func (v NullableDescribeIterationListRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeIterationListRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


