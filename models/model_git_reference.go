/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the GitReference type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &GitReference{}

// GitReference Git 标签/分支的信息
type GitReference struct {
	// 分支或标签的名字
	Name *string `json:"Name,omitempty"`
	// all：全部，branch：分支，tag：标签
	Type *string `json:"Type,omitempty"`
}

// NewGitReference instantiates a new GitReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitReference() *GitReference {
	this := GitReference{}
	var name string = ""
	this.Name = &name
	var type_ string = ""
	this.Type = &type_
	return &this
}

// NewGitReferenceWithDefaults instantiates a new GitReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitReferenceWithDefaults() *GitReference {
	this := GitReference{}
	var name string = ""
	this.Name = &name
	var type_ string = ""
	this.Type = &type_
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GitReference) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitReference) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GitReference) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GitReference) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GitReference) GetType() string {
	if o == nil || utils.IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitReference) GetTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GitReference) HasType() bool {
	if o != nil && !utils.IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GitReference) SetType(v string) {
	o.Type = &v
}

func (o GitReference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !utils.IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	return toSerialize, nil
}

type NullableGitReference struct {
	value *GitReference
	isSet bool
}

func (v NullableGitReference) Get() *GitReference {
	return v.value
}

func (v *NullableGitReference) Set(val *GitReference) {
	v.value = val
	v.isSet = true
}

func (v NullableGitReference) IsSet() bool {
	return v.isSet
}

func (v *NullableGitReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitReference(val *GitReference) *NullableGitReference {
	return &NullableGitReference{value: val, isSet: true}
}

func (v NullableGitReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


