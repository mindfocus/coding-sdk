/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the ApiUserRole type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ApiUserRole{}

// ApiUserRole struct for ApiUserRole
type ApiUserRole struct {
	// 用户组Id
	RoleId *int32 `json:"RoleId,omitempty"`
	// 用户组类型： UserDefined 用户自定义的角色， EnterpriseOwner 企业所有者，EnterpriseAdmin 企业管理员， EnterpriseMember 企业普通成员， ProjectAdmin 项目管理员， ProjectMember 项目成员-> 新的权限系统里面叫\"开发\"，ProjectGuest 项目受限成员 -> 新的权限系统里面叫\"测试\"，ProjectManager 项目经理，ProductManager 产品经理，ProjectOperation 运维 ProgramOwner 项目集负责人，ProgramAdmin 项目集管理员，ProgramMember 项目集成员， ProgramProjectMember 项目集-项目成员
	RoleType *string `json:"RoleType,omitempty"`
	// 用户组类型名称
	RoleTypeName *string `json:"RoleTypeName,omitempty"`
}

// NewApiUserRole instantiates a new ApiUserRole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiUserRole() *ApiUserRole {
	this := ApiUserRole{}
	var roleId int32 = 0
	this.RoleId = &roleId
	var roleType string = ""
	this.RoleType = &roleType
	var roleTypeName string = ""
	this.RoleTypeName = &roleTypeName
	return &this
}

// NewApiUserRoleWithDefaults instantiates a new ApiUserRole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiUserRoleWithDefaults() *ApiUserRole {
	this := ApiUserRole{}
	var roleId int32 = 0
	this.RoleId = &roleId
	var roleType string = ""
	this.RoleType = &roleType
	var roleTypeName string = ""
	this.RoleTypeName = &roleTypeName
	return &this
}

// GetRoleId returns the RoleId field value if set, zero value otherwise.
func (o *ApiUserRole) GetRoleId() int32 {
	if o == nil || utils.IsNil(o.RoleId) {
		var ret int32
		return ret
	}
	return *o.RoleId
}

// GetRoleIdOk returns a tuple with the RoleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiUserRole) GetRoleIdOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.RoleId) {
		return nil, false
	}
	return o.RoleId, true
}

// HasRoleId returns a boolean if a field has been set.
func (o *ApiUserRole) HasRoleId() bool {
	if o != nil && !utils.IsNil(o.RoleId) {
		return true
	}

	return false
}

// SetRoleId gets a reference to the given int32 and assigns it to the RoleId field.
func (o *ApiUserRole) SetRoleId(v int32) {
	o.RoleId = &v
}

// GetRoleType returns the RoleType field value if set, zero value otherwise.
func (o *ApiUserRole) GetRoleType() string {
	if o == nil || utils.IsNil(o.RoleType) {
		var ret string
		return ret
	}
	return *o.RoleType
}

// GetRoleTypeOk returns a tuple with the RoleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiUserRole) GetRoleTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.RoleType) {
		return nil, false
	}
	return o.RoleType, true
}

// HasRoleType returns a boolean if a field has been set.
func (o *ApiUserRole) HasRoleType() bool {
	if o != nil && !utils.IsNil(o.RoleType) {
		return true
	}

	return false
}

// SetRoleType gets a reference to the given string and assigns it to the RoleType field.
func (o *ApiUserRole) SetRoleType(v string) {
	o.RoleType = &v
}

// GetRoleTypeName returns the RoleTypeName field value if set, zero value otherwise.
func (o *ApiUserRole) GetRoleTypeName() string {
	if o == nil || utils.IsNil(o.RoleTypeName) {
		var ret string
		return ret
	}
	return *o.RoleTypeName
}

// GetRoleTypeNameOk returns a tuple with the RoleTypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiUserRole) GetRoleTypeNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.RoleTypeName) {
		return nil, false
	}
	return o.RoleTypeName, true
}

// HasRoleTypeName returns a boolean if a field has been set.
func (o *ApiUserRole) HasRoleTypeName() bool {
	if o != nil && !utils.IsNil(o.RoleTypeName) {
		return true
	}

	return false
}

// SetRoleTypeName gets a reference to the given string and assigns it to the RoleTypeName field.
func (o *ApiUserRole) SetRoleTypeName(v string) {
	o.RoleTypeName = &v
}

func (o ApiUserRole) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiUserRole) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.RoleId) {
		toSerialize["RoleId"] = o.RoleId
	}
	if !utils.IsNil(o.RoleType) {
		toSerialize["RoleType"] = o.RoleType
	}
	if !utils.IsNil(o.RoleTypeName) {
		toSerialize["RoleTypeName"] = o.RoleTypeName
	}
	return toSerialize, nil
}

type NullableApiUserRole struct {
	value *ApiUserRole
	isSet bool
}

func (v NullableApiUserRole) Get() *ApiUserRole {
	return v.value
}

func (v *NullableApiUserRole) Set(val *ApiUserRole) {
	v.value = val
	v.isSet = true
}

func (v NullableApiUserRole) IsSet() bool {
	return v.isSet
}

func (v *NullableApiUserRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiUserRole(val *ApiUserRole) *NullableApiUserRole {
	return &NullableApiUserRole{value: val, isSet: true}
}

func (v NullableApiUserRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiUserRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


