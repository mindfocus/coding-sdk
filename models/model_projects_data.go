/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the ProjectsData type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ProjectsData{}

// ProjectsData 查询团队内所有项目
type ProjectsData struct {
	// 第几页
	PageNumber *int32 `json:"PageNumber,omitempty"`
	// 每页条数
	PageSize *int32 `json:"PageSize,omitempty"`
	// 项目集合
	ProjectList []Project `json:"ProjectList,omitempty"`
	// 总条数
	TotalCount *int32 `json:"TotalCount,omitempty"`
}

// NewProjectsData instantiates a new ProjectsData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectsData() *ProjectsData {
	this := ProjectsData{}
	return &this
}

// NewProjectsDataWithDefaults instantiates a new ProjectsData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectsDataWithDefaults() *ProjectsData {
	this := ProjectsData{}
	return &this
}

// GetPageNumber returns the PageNumber field value if set, zero value otherwise.
func (o *ProjectsData) GetPageNumber() int32 {
	if o == nil || utils.IsNil(o.PageNumber) {
		var ret int32
		return ret
	}
	return *o.PageNumber
}

// GetPageNumberOk returns a tuple with the PageNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectsData) GetPageNumberOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.PageNumber) {
		return nil, false
	}
	return o.PageNumber, true
}

// HasPageNumber returns a boolean if a field has been set.
func (o *ProjectsData) HasPageNumber() bool {
	if o != nil && !utils.IsNil(o.PageNumber) {
		return true
	}

	return false
}

// SetPageNumber gets a reference to the given int32 and assigns it to the PageNumber field.
func (o *ProjectsData) SetPageNumber(v int32) {
	o.PageNumber = &v
}

// GetPageSize returns the PageSize field value if set, zero value otherwise.
func (o *ProjectsData) GetPageSize() int32 {
	if o == nil || utils.IsNil(o.PageSize) {
		var ret int32
		return ret
	}
	return *o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectsData) GetPageSizeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.PageSize) {
		return nil, false
	}
	return o.PageSize, true
}

// HasPageSize returns a boolean if a field has been set.
func (o *ProjectsData) HasPageSize() bool {
	if o != nil && !utils.IsNil(o.PageSize) {
		return true
	}

	return false
}

// SetPageSize gets a reference to the given int32 and assigns it to the PageSize field.
func (o *ProjectsData) SetPageSize(v int32) {
	o.PageSize = &v
}

// GetProjectList returns the ProjectList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectsData) GetProjectList() []Project {
	if o == nil {
		var ret []Project
		return ret
	}
	return o.ProjectList
}

// GetProjectListOk returns a tuple with the ProjectList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectsData) GetProjectListOk() ([]Project, bool) {
	if o == nil || utils.IsNil(o.ProjectList) {
		return nil, false
	}
	return o.ProjectList, true
}

// HasProjectList returns a boolean if a field has been set.
func (o *ProjectsData) HasProjectList() bool {
	if o != nil && !utils.IsNil(o.ProjectList) {
		return true
	}

	return false
}

// SetProjectList gets a reference to the given []Project and assigns it to the ProjectList field.
func (o *ProjectsData) SetProjectList(v []Project) {
	o.ProjectList = v
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *ProjectsData) GetTotalCount() int32 {
	if o == nil || utils.IsNil(o.TotalCount) {
		var ret int32
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectsData) GetTotalCountOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.TotalCount) {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *ProjectsData) HasTotalCount() bool {
	if o != nil && !utils.IsNil(o.TotalCount) {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int32 and assigns it to the TotalCount field.
func (o *ProjectsData) SetTotalCount(v int32) {
	o.TotalCount = &v
}

func (o ProjectsData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectsData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.PageNumber) {
		toSerialize["PageNumber"] = o.PageNumber
	}
	if !utils.IsNil(o.PageSize) {
		toSerialize["PageSize"] = o.PageSize
	}
	if o.ProjectList != nil {
		toSerialize["ProjectList"] = o.ProjectList
	}
	if !utils.IsNil(o.TotalCount) {
		toSerialize["TotalCount"] = o.TotalCount
	}
	return toSerialize, nil
}

type NullableProjectsData struct {
	value *ProjectsData
	isSet bool
}

func (v NullableProjectsData) Get() *ProjectsData {
	return v.value
}

func (v *NullableProjectsData) Set(val *ProjectsData) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectsData) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectsData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectsData(val *ProjectsData) *NullableProjectsData {
	return &NullableProjectsData{value: val, isSet: true}
}

func (v NullableProjectsData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectsData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


