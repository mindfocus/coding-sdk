/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the PrincipalResp type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &PrincipalResp{}

// PrincipalResp 成员主体返回信息
type PrincipalResp struct {
	// 添加时间
	CreatedAt *int64 `json:"CreatedAt,omitempty"`
	// 权限组Id
	Policies []Policy `json:"Policies,omitempty"`
	// 成员主体Id
	PrincipalId *string `json:"PrincipalId,omitempty"`
	// 成员主体名称
	PrincipalName *string `json:"PrincipalName,omitempty"`
	// 成员主体类型
	PrincipalType *string `json:"PrincipalType,omitempty"`
}

// NewPrincipalResp instantiates a new PrincipalResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrincipalResp() *PrincipalResp {
	this := PrincipalResp{}
	var principalId string = ""
	this.PrincipalId = &principalId
	var principalName string = ""
	this.PrincipalName = &principalName
	var principalType string = ""
	this.PrincipalType = &principalType
	return &this
}

// NewPrincipalRespWithDefaults instantiates a new PrincipalResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrincipalRespWithDefaults() *PrincipalResp {
	this := PrincipalResp{}
	var principalId string = ""
	this.PrincipalId = &principalId
	var principalName string = ""
	this.PrincipalName = &principalName
	var principalType string = ""
	this.PrincipalType = &principalType
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *PrincipalResp) GetCreatedAt() int64 {
	if o == nil || utils.IsNil(o.CreatedAt) {
		var ret int64
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrincipalResp) GetCreatedAtOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *PrincipalResp) HasCreatedAt() bool {
	if o != nil && !utils.IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int64 and assigns it to the CreatedAt field.
func (o *PrincipalResp) SetCreatedAt(v int64) {
	o.CreatedAt = &v
}

// GetPolicies returns the Policies field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PrincipalResp) GetPolicies() []Policy {
	if o == nil {
		var ret []Policy
		return ret
	}
	return o.Policies
}

// GetPoliciesOk returns a tuple with the Policies field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PrincipalResp) GetPoliciesOk() ([]Policy, bool) {
	if o == nil || utils.IsNil(o.Policies) {
		return nil, false
	}
	return o.Policies, true
}

// HasPolicies returns a boolean if a field has been set.
func (o *PrincipalResp) HasPolicies() bool {
	if o != nil && !utils.IsNil(o.Policies) {
		return true
	}

	return false
}

// SetPolicies gets a reference to the given []Policy and assigns it to the Policies field.
func (o *PrincipalResp) SetPolicies(v []Policy) {
	o.Policies = v
}

// GetPrincipalId returns the PrincipalId field value if set, zero value otherwise.
func (o *PrincipalResp) GetPrincipalId() string {
	if o == nil || utils.IsNil(o.PrincipalId) {
		var ret string
		return ret
	}
	return *o.PrincipalId
}

// GetPrincipalIdOk returns a tuple with the PrincipalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrincipalResp) GetPrincipalIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.PrincipalId) {
		return nil, false
	}
	return o.PrincipalId, true
}

// HasPrincipalId returns a boolean if a field has been set.
func (o *PrincipalResp) HasPrincipalId() bool {
	if o != nil && !utils.IsNil(o.PrincipalId) {
		return true
	}

	return false
}

// SetPrincipalId gets a reference to the given string and assigns it to the PrincipalId field.
func (o *PrincipalResp) SetPrincipalId(v string) {
	o.PrincipalId = &v
}

// GetPrincipalName returns the PrincipalName field value if set, zero value otherwise.
func (o *PrincipalResp) GetPrincipalName() string {
	if o == nil || utils.IsNil(o.PrincipalName) {
		var ret string
		return ret
	}
	return *o.PrincipalName
}

// GetPrincipalNameOk returns a tuple with the PrincipalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrincipalResp) GetPrincipalNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.PrincipalName) {
		return nil, false
	}
	return o.PrincipalName, true
}

// HasPrincipalName returns a boolean if a field has been set.
func (o *PrincipalResp) HasPrincipalName() bool {
	if o != nil && !utils.IsNil(o.PrincipalName) {
		return true
	}

	return false
}

// SetPrincipalName gets a reference to the given string and assigns it to the PrincipalName field.
func (o *PrincipalResp) SetPrincipalName(v string) {
	o.PrincipalName = &v
}

// GetPrincipalType returns the PrincipalType field value if set, zero value otherwise.
func (o *PrincipalResp) GetPrincipalType() string {
	if o == nil || utils.IsNil(o.PrincipalType) {
		var ret string
		return ret
	}
	return *o.PrincipalType
}

// GetPrincipalTypeOk returns a tuple with the PrincipalType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrincipalResp) GetPrincipalTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.PrincipalType) {
		return nil, false
	}
	return o.PrincipalType, true
}

// HasPrincipalType returns a boolean if a field has been set.
func (o *PrincipalResp) HasPrincipalType() bool {
	if o != nil && !utils.IsNil(o.PrincipalType) {
		return true
	}

	return false
}

// SetPrincipalType gets a reference to the given string and assigns it to the PrincipalType field.
func (o *PrincipalResp) SetPrincipalType(v string) {
	o.PrincipalType = &v
}

func (o PrincipalResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrincipalResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.CreatedAt) {
		toSerialize["CreatedAt"] = o.CreatedAt
	}
	if o.Policies != nil {
		toSerialize["Policies"] = o.Policies
	}
	if !utils.IsNil(o.PrincipalId) {
		toSerialize["PrincipalId"] = o.PrincipalId
	}
	if !utils.IsNil(o.PrincipalName) {
		toSerialize["PrincipalName"] = o.PrincipalName
	}
	if !utils.IsNil(o.PrincipalType) {
		toSerialize["PrincipalType"] = o.PrincipalType
	}
	return toSerialize, nil
}

type NullablePrincipalResp struct {
	value *PrincipalResp
	isSet bool
}

func (v NullablePrincipalResp) Get() *PrincipalResp {
	return v.value
}

func (v *NullablePrincipalResp) Set(val *PrincipalResp) {
	v.value = val
	v.isSet = true
}

func (v NullablePrincipalResp) IsSet() bool {
	return v.isSet
}

func (v *NullablePrincipalResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrincipalResp(val *PrincipalResp) *NullablePrincipalResp {
	return &NullablePrincipalResp{value: val, isSet: true}
}

func (v NullablePrincipalResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrincipalResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


