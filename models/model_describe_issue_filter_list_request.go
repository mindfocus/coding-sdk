/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DescribeIssueFilterListRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DescribeIssueFilterListRequest{}

// DescribeIssueFilterListRequest struct for DescribeIssueFilterListRequest
type DescribeIssueFilterListRequest struct {
	// 事项类型  ALL - 全部事项  DEFECT - 缺陷  REQUIREMENT - 需求  MISSION - 任务  EPIC - 史诗
	IssueType string `json:"IssueType"`
	// 项目名称
	ProjectName string `json:"ProjectName"`
}

type _DescribeIssueFilterListRequest DescribeIssueFilterListRequest

// NewDescribeIssueFilterListRequest instantiates a new DescribeIssueFilterListRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeIssueFilterListRequest(issueType string, projectName string) *DescribeIssueFilterListRequest {
	this := DescribeIssueFilterListRequest{}
	this.IssueType = issueType
	this.ProjectName = projectName
	return &this
}

// NewDescribeIssueFilterListRequestWithDefaults instantiates a new DescribeIssueFilterListRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeIssueFilterListRequestWithDefaults() *DescribeIssueFilterListRequest {
	this := DescribeIssueFilterListRequest{}
	return &this
}

// GetIssueType returns the IssueType field value
func (o *DescribeIssueFilterListRequest) GetIssueType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IssueType
}

// GetIssueTypeOk returns a tuple with the IssueType field value
// and a boolean to check if the value has been set.
func (o *DescribeIssueFilterListRequest) GetIssueTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssueType, true
}

// SetIssueType sets field value
func (o *DescribeIssueFilterListRequest) SetIssueType(v string) {
	o.IssueType = v
}

// GetProjectName returns the ProjectName field value
func (o *DescribeIssueFilterListRequest) GetProjectName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value
// and a boolean to check if the value has been set.
func (o *DescribeIssueFilterListRequest) GetProjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectName, true
}

// SetProjectName sets field value
func (o *DescribeIssueFilterListRequest) SetProjectName(v string) {
	o.ProjectName = v
}

func (o DescribeIssueFilterListRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeIssueFilterListRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["IssueType"] = o.IssueType
	toSerialize["ProjectName"] = o.ProjectName
	return toSerialize, nil
}

func (o *DescribeIssueFilterListRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"IssueType",
		"ProjectName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescribeIssueFilterListRequest := _DescribeIssueFilterListRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDescribeIssueFilterListRequest)

	if err != nil {
		return err
	}

	*o = DescribeIssueFilterListRequest(varDescribeIssueFilterListRequest)

	return err
}

type NullableDescribeIssueFilterListRequest struct {
	value *DescribeIssueFilterListRequest
	isSet bool
}

func (v NullableDescribeIssueFilterListRequest) Get() *DescribeIssueFilterListRequest {
	return v.value
}

func (v *NullableDescribeIssueFilterListRequest) Set(val *DescribeIssueFilterListRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeIssueFilterListRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeIssueFilterListRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeIssueFilterListRequest(val *DescribeIssueFilterListRequest) *NullableDescribeIssueFilterListRequest {
	return &NullableDescribeIssueFilterListRequest{value: val, isSet: true}
}

func (v NullableDescribeIssueFilterListRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeIssueFilterListRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


