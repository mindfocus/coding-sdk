/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the GitFile type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &GitFile{}

// GitFile git 文件
type GitFile struct {
	// 文件内容
	Content string `json:"Content"`
	// 是否创建一个新路径文件
	NewPath *string `json:"NewPath,omitempty"`
	// 文件路径
	Path string `json:"Path"`
}

type _GitFile GitFile

// NewGitFile instantiates a new GitFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitFile(content string, path string) *GitFile {
	this := GitFile{}
	this.Content = content
	var newPath string = ""
	this.NewPath = &newPath
	this.Path = path
	return &this
}

// NewGitFileWithDefaults instantiates a new GitFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitFileWithDefaults() *GitFile {
	this := GitFile{}
	var content string = ""
	this.Content = content
	var newPath string = ""
	this.NewPath = &newPath
	var path string = ""
	this.Path = path
	return &this
}

// GetContent returns the Content field value
func (o *GitFile) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *GitFile) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *GitFile) SetContent(v string) {
	o.Content = v
}

// GetNewPath returns the NewPath field value if set, zero value otherwise.
func (o *GitFile) GetNewPath() string {
	if o == nil || utils.IsNil(o.NewPath) {
		var ret string
		return ret
	}
	return *o.NewPath
}

// GetNewPathOk returns a tuple with the NewPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitFile) GetNewPathOk() (*string, bool) {
	if o == nil || utils.IsNil(o.NewPath) {
		return nil, false
	}
	return o.NewPath, true
}

// HasNewPath returns a boolean if a field has been set.
func (o *GitFile) HasNewPath() bool {
	if o != nil && !utils.IsNil(o.NewPath) {
		return true
	}

	return false
}

// SetNewPath gets a reference to the given string and assigns it to the NewPath field.
func (o *GitFile) SetNewPath(v string) {
	o.NewPath = &v
}

// GetPath returns the Path field value
func (o *GitFile) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *GitFile) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *GitFile) SetPath(v string) {
	o.Path = v
}

func (o GitFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Content"] = o.Content
	if !utils.IsNil(o.NewPath) {
		toSerialize["NewPath"] = o.NewPath
	}
	toSerialize["Path"] = o.Path
	return toSerialize, nil
}

func (o *GitFile) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Content",
		"Path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGitFile := _GitFile{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGitFile)

	if err != nil {
		return err
	}

	*o = GitFile(varGitFile)

	return err
}

type NullableGitFile struct {
	value *GitFile
	isSet bool
}

func (v NullableGitFile) Get() *GitFile {
	return v.value
}

func (v *NullableGitFile) Set(val *GitFile) {
	v.value = val
	v.isSet = true
}

func (v NullableGitFile) IsSet() bool {
	return v.isSet
}

func (v *NullableGitFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitFile(val *GitFile) *NullableGitFile {
	return &NullableGitFile{value: val, isSet: true}
}

func (v NullableGitFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


