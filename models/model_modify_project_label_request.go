/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the ModifyProjectLabelRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ModifyProjectLabelRequest{}

// ModifyProjectLabelRequest struct for ModifyProjectLabelRequest
type ModifyProjectLabelRequest struct {
	// 项目ID
	ProjectId int64 `json:"ProjectId"`
	// 标签Id
	LabelId int64 `json:"LabelId"`
	// 标签名
	Name string `json:"Name"`
	// 颜色
	Color string `json:"Color"`
}

type _ModifyProjectLabelRequest ModifyProjectLabelRequest

// NewModifyProjectLabelRequest instantiates a new ModifyProjectLabelRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModifyProjectLabelRequest(projectId int64, labelId int64, name string, color string) *ModifyProjectLabelRequest {
	this := ModifyProjectLabelRequest{}
	this.ProjectId = projectId
	this.LabelId = labelId
	this.Name = name
	this.Color = color
	return &this
}

// NewModifyProjectLabelRequestWithDefaults instantiates a new ModifyProjectLabelRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModifyProjectLabelRequestWithDefaults() *ModifyProjectLabelRequest {
	this := ModifyProjectLabelRequest{}
	var projectId int64 = 0
	this.ProjectId = projectId
	var labelId int64 = 0
	this.LabelId = labelId
	var name string = ""
	this.Name = name
	var color string = ""
	this.Color = color
	return &this
}

// GetProjectId returns the ProjectId field value
func (o *ModifyProjectLabelRequest) GetProjectId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *ModifyProjectLabelRequest) GetProjectIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *ModifyProjectLabelRequest) SetProjectId(v int64) {
	o.ProjectId = v
}

// GetLabelId returns the LabelId field value
func (o *ModifyProjectLabelRequest) GetLabelId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.LabelId
}

// GetLabelIdOk returns a tuple with the LabelId field value
// and a boolean to check if the value has been set.
func (o *ModifyProjectLabelRequest) GetLabelIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LabelId, true
}

// SetLabelId sets field value
func (o *ModifyProjectLabelRequest) SetLabelId(v int64) {
	o.LabelId = v
}

// GetName returns the Name field value
func (o *ModifyProjectLabelRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ModifyProjectLabelRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ModifyProjectLabelRequest) SetName(v string) {
	o.Name = v
}

// GetColor returns the Color field value
func (o *ModifyProjectLabelRequest) GetColor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Color
}

// GetColorOk returns a tuple with the Color field value
// and a boolean to check if the value has been set.
func (o *ModifyProjectLabelRequest) GetColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Color, true
}

// SetColor sets field value
func (o *ModifyProjectLabelRequest) SetColor(v string) {
	o.Color = v
}

func (o ModifyProjectLabelRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModifyProjectLabelRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ProjectId"] = o.ProjectId
	toSerialize["LabelId"] = o.LabelId
	toSerialize["Name"] = o.Name
	toSerialize["Color"] = o.Color
	return toSerialize, nil
}

func (o *ModifyProjectLabelRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ProjectId",
		"LabelId",
		"Name",
		"Color",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModifyProjectLabelRequest := _ModifyProjectLabelRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModifyProjectLabelRequest)

	if err != nil {
		return err
	}

	*o = ModifyProjectLabelRequest(varModifyProjectLabelRequest)

	return err
}

type NullableModifyProjectLabelRequest struct {
	value *ModifyProjectLabelRequest
	isSet bool
}

func (v NullableModifyProjectLabelRequest) Get() *ModifyProjectLabelRequest {
	return v.value
}

func (v *NullableModifyProjectLabelRequest) Set(val *ModifyProjectLabelRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableModifyProjectLabelRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableModifyProjectLabelRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModifyProjectLabelRequest(val *ModifyProjectLabelRequest) *NullableModifyProjectLabelRequest {
	return &NullableModifyProjectLabelRequest{value: val, isSet: true}
}

func (v NullableModifyProjectLabelRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModifyProjectLabelRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


