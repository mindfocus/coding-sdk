/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the IssueFilter type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &IssueFilter{}

// IssueFilter 事项过滤器
type IssueFilter struct {
	// 筛选组合，JSON 字符串<br />例如：`{\"filterIssueType\":\"ALL\",\"sort\":{\"key\":\"PRIORITY\",\"value\":\"DESC\"},\"conditions\":[{\"value\":[\"TODO\",\"PROCESSING\"],\"key\":\"STATUS_TYPE\",\"fixed\":true,\"filterIssueType\":\"ALL\",\"projectId\":1},{\"value\":[],\"key\":\"ASSIGNEE\",\"fixed\":true,\"constValue\":[\"UNSPECIFIC\"],\"filterIssueType\":\"ALL\",\"projectId\":1}]}`
	ContentString *string `json:"ContentString,omitempty"`
	// 创建时间戳
	CreatedAt *int64 `json:"CreatedAt,omitempty"`
	// 创建人 ID
	CreatorId *int64 `json:"CreatorId,omitempty"`
	// 过滤器 ID
	Id *int64 `json:"Id,omitempty"`
	// 默认筛选器
	IsDefault *bool `json:"IsDefault,omitempty"`
	// 是否是系统自带
	IsSystem *bool `json:"IsSystem,omitempty"`
	// 事项类型
	IssueType *string `json:"IssueType,omitempty"`
	// 名称
	Name *string `json:"Name,omitempty"`
	// 是否是团队筛选器
	SharedTeam *bool `json:"SharedTeam,omitempty"`
	// 修改时间戳
	UpdatedAt *int64 `json:"UpdatedAt,omitempty"`
}

// NewIssueFilter instantiates a new IssueFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueFilter() *IssueFilter {
	this := IssueFilter{}
	var contentString string = ""
	this.ContentString = &contentString
	var isDefault bool = false
	this.IsDefault = &isDefault
	var isSystem bool = false
	this.IsSystem = &isSystem
	var issueType string = ""
	this.IssueType = &issueType
	var name string = ""
	this.Name = &name
	var sharedTeam bool = false
	this.SharedTeam = &sharedTeam
	return &this
}

// NewIssueFilterWithDefaults instantiates a new IssueFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueFilterWithDefaults() *IssueFilter {
	this := IssueFilter{}
	var contentString string = ""
	this.ContentString = &contentString
	var isDefault bool = false
	this.IsDefault = &isDefault
	var isSystem bool = false
	this.IsSystem = &isSystem
	var issueType string = ""
	this.IssueType = &issueType
	var name string = ""
	this.Name = &name
	var sharedTeam bool = false
	this.SharedTeam = &sharedTeam
	return &this
}

// GetContentString returns the ContentString field value if set, zero value otherwise.
func (o *IssueFilter) GetContentString() string {
	if o == nil || utils.IsNil(o.ContentString) {
		var ret string
		return ret
	}
	return *o.ContentString
}

// GetContentStringOk returns a tuple with the ContentString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueFilter) GetContentStringOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ContentString) {
		return nil, false
	}
	return o.ContentString, true
}

// HasContentString returns a boolean if a field has been set.
func (o *IssueFilter) HasContentString() bool {
	if o != nil && !utils.IsNil(o.ContentString) {
		return true
	}

	return false
}

// SetContentString gets a reference to the given string and assigns it to the ContentString field.
func (o *IssueFilter) SetContentString(v string) {
	o.ContentString = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *IssueFilter) GetCreatedAt() int64 {
	if o == nil || utils.IsNil(o.CreatedAt) {
		var ret int64
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueFilter) GetCreatedAtOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *IssueFilter) HasCreatedAt() bool {
	if o != nil && !utils.IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int64 and assigns it to the CreatedAt field.
func (o *IssueFilter) SetCreatedAt(v int64) {
	o.CreatedAt = &v
}

// GetCreatorId returns the CreatorId field value if set, zero value otherwise.
func (o *IssueFilter) GetCreatorId() int64 {
	if o == nil || utils.IsNil(o.CreatorId) {
		var ret int64
		return ret
	}
	return *o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueFilter) GetCreatorIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.CreatorId) {
		return nil, false
	}
	return o.CreatorId, true
}

// HasCreatorId returns a boolean if a field has been set.
func (o *IssueFilter) HasCreatorId() bool {
	if o != nil && !utils.IsNil(o.CreatorId) {
		return true
	}

	return false
}

// SetCreatorId gets a reference to the given int64 and assigns it to the CreatorId field.
func (o *IssueFilter) SetCreatorId(v int64) {
	o.CreatorId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IssueFilter) GetId() int64 {
	if o == nil || utils.IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueFilter) GetIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IssueFilter) HasId() bool {
	if o != nil && !utils.IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *IssueFilter) SetId(v int64) {
	o.Id = &v
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise.
func (o *IssueFilter) GetIsDefault() bool {
	if o == nil || utils.IsNil(o.IsDefault) {
		var ret bool
		return ret
	}
	return *o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueFilter) GetIsDefaultOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IsDefault) {
		return nil, false
	}
	return o.IsDefault, true
}

// HasIsDefault returns a boolean if a field has been set.
func (o *IssueFilter) HasIsDefault() bool {
	if o != nil && !utils.IsNil(o.IsDefault) {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given bool and assigns it to the IsDefault field.
func (o *IssueFilter) SetIsDefault(v bool) {
	o.IsDefault = &v
}

// GetIsSystem returns the IsSystem field value if set, zero value otherwise.
func (o *IssueFilter) GetIsSystem() bool {
	if o == nil || utils.IsNil(o.IsSystem) {
		var ret bool
		return ret
	}
	return *o.IsSystem
}

// GetIsSystemOk returns a tuple with the IsSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueFilter) GetIsSystemOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IsSystem) {
		return nil, false
	}
	return o.IsSystem, true
}

// HasIsSystem returns a boolean if a field has been set.
func (o *IssueFilter) HasIsSystem() bool {
	if o != nil && !utils.IsNil(o.IsSystem) {
		return true
	}

	return false
}

// SetIsSystem gets a reference to the given bool and assigns it to the IsSystem field.
func (o *IssueFilter) SetIsSystem(v bool) {
	o.IsSystem = &v
}

// GetIssueType returns the IssueType field value if set, zero value otherwise.
func (o *IssueFilter) GetIssueType() string {
	if o == nil || utils.IsNil(o.IssueType) {
		var ret string
		return ret
	}
	return *o.IssueType
}

// GetIssueTypeOk returns a tuple with the IssueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueFilter) GetIssueTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.IssueType) {
		return nil, false
	}
	return o.IssueType, true
}

// HasIssueType returns a boolean if a field has been set.
func (o *IssueFilter) HasIssueType() bool {
	if o != nil && !utils.IsNil(o.IssueType) {
		return true
	}

	return false
}

// SetIssueType gets a reference to the given string and assigns it to the IssueType field.
func (o *IssueFilter) SetIssueType(v string) {
	o.IssueType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IssueFilter) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueFilter) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IssueFilter) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IssueFilter) SetName(v string) {
	o.Name = &v
}

// GetSharedTeam returns the SharedTeam field value if set, zero value otherwise.
func (o *IssueFilter) GetSharedTeam() bool {
	if o == nil || utils.IsNil(o.SharedTeam) {
		var ret bool
		return ret
	}
	return *o.SharedTeam
}

// GetSharedTeamOk returns a tuple with the SharedTeam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueFilter) GetSharedTeamOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.SharedTeam) {
		return nil, false
	}
	return o.SharedTeam, true
}

// HasSharedTeam returns a boolean if a field has been set.
func (o *IssueFilter) HasSharedTeam() bool {
	if o != nil && !utils.IsNil(o.SharedTeam) {
		return true
	}

	return false
}

// SetSharedTeam gets a reference to the given bool and assigns it to the SharedTeam field.
func (o *IssueFilter) SetSharedTeam(v bool) {
	o.SharedTeam = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *IssueFilter) GetUpdatedAt() int64 {
	if o == nil || utils.IsNil(o.UpdatedAt) {
		var ret int64
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueFilter) GetUpdatedAtOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *IssueFilter) HasUpdatedAt() bool {
	if o != nil && !utils.IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given int64 and assigns it to the UpdatedAt field.
func (o *IssueFilter) SetUpdatedAt(v int64) {
	o.UpdatedAt = &v
}

func (o IssueFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IssueFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.ContentString) {
		toSerialize["ContentString"] = o.ContentString
	}
	if !utils.IsNil(o.CreatedAt) {
		toSerialize["CreatedAt"] = o.CreatedAt
	}
	if !utils.IsNil(o.CreatorId) {
		toSerialize["CreatorId"] = o.CreatorId
	}
	if !utils.IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !utils.IsNil(o.IsDefault) {
		toSerialize["IsDefault"] = o.IsDefault
	}
	if !utils.IsNil(o.IsSystem) {
		toSerialize["IsSystem"] = o.IsSystem
	}
	if !utils.IsNil(o.IssueType) {
		toSerialize["IssueType"] = o.IssueType
	}
	if !utils.IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !utils.IsNil(o.SharedTeam) {
		toSerialize["SharedTeam"] = o.SharedTeam
	}
	if !utils.IsNil(o.UpdatedAt) {
		toSerialize["UpdatedAt"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableIssueFilter struct {
	value *IssueFilter
	isSet bool
}

func (v NullableIssueFilter) Get() *IssueFilter {
	return v.value
}

func (v *NullableIssueFilter) Set(val *IssueFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueFilter(val *IssueFilter) *NullableIssueFilter {
	return &NullableIssueFilter{value: val, isSet: true}
}

func (v NullableIssueFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


