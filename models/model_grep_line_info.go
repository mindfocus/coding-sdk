/*
CODING OPEN API

  

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the GrepLineInfo type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &GrepLineInfo{}

// GrepLineInfo 代码片段搜索信息详细列表
type GrepLineInfo struct {
	// 分支名称
	BranchName utils.NullableString `json:"BranchName,omitempty"`
	// 提交Id
	CommitId utils.NullableString `json:"CommitId,omitempty"`
	// 文件内容
	Contents []string `json:"Contents,omitempty"`
	// 文件最大行数
	FileMaxLine utils.NullableInt64 `json:"FileMaxLine,omitempty"`
	// 代码片段的行数
	LineNum utils.NullableInt64 `json:"LineNum,omitempty"`
	// 页面上展现的最大行数
	MaxNum utils.NullableInt64 `json:"MaxNum,omitempty"`
	// 页面上展现的最小行数
	MinNum utils.NullableInt64 `json:"MinNum,omitempty"`
	// 代码片段对应的文件路径
	Path utils.NullableString `json:"Path,omitempty"`
	// 查询代码片段的文本
	Text utils.NullableString `json:"Text,omitempty"`
}

// NewGrepLineInfo instantiates a new GrepLineInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGrepLineInfo() *GrepLineInfo {
	this := GrepLineInfo{}
	var branchName string = ""
	this.BranchName = *utils.NewNullableString(&branchName)
	var commitId string = ""
	this.CommitId = *utils.NewNullableString(&commitId)
	var path string = ""
	this.Path = *utils.NewNullableString(&path)
	var text string = ""
	this.Text = *utils.NewNullableString(&text)
	return &this
}

// NewGrepLineInfoWithDefaults instantiates a new GrepLineInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGrepLineInfoWithDefaults() *GrepLineInfo {
	this := GrepLineInfo{}
	var branchName string = ""
	this.BranchName = *utils.NewNullableString(&branchName)
	var commitId string = ""
	this.CommitId = *utils.NewNullableString(&commitId)
	var path string = ""
	this.Path = *utils.NewNullableString(&path)
	var text string = ""
	this.Text = *utils.NewNullableString(&text)
	return &this
}

// GetBranchName returns the BranchName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GrepLineInfo) GetBranchName() string {
	if o == nil || utils.IsNil(o.BranchName.Get()) {
		var ret string
		return ret
	}
	return *o.BranchName.Get()
}

// GetBranchNameOk returns a tuple with the BranchName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GrepLineInfo) GetBranchNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BranchName.Get(), o.BranchName.IsSet()
}

// HasBranchName returns a boolean if a field has been set.
func (o *GrepLineInfo) HasBranchName() bool {
	if o != nil && o.BranchName.IsSet() {
		return true
	}

	return false
}

// SetBranchName gets a reference to the given utils.NullableString and assigns it to the BranchName field.
func (o *GrepLineInfo) SetBranchName(v string) {
	o.BranchName.Set(&v)
}
// SetBranchNameNil sets the value for BranchName to be an explicit nil
func (o *GrepLineInfo) SetBranchNameNil() {
	o.BranchName.Set(nil)
}

// UnsetBranchName ensures that no value is present for BranchName, not even an explicit nil
func (o *GrepLineInfo) UnsetBranchName() {
	o.BranchName.Unset()
}

// GetCommitId returns the CommitId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GrepLineInfo) GetCommitId() string {
	if o == nil || utils.IsNil(o.CommitId.Get()) {
		var ret string
		return ret
	}
	return *o.CommitId.Get()
}

// GetCommitIdOk returns a tuple with the CommitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GrepLineInfo) GetCommitIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CommitId.Get(), o.CommitId.IsSet()
}

// HasCommitId returns a boolean if a field has been set.
func (o *GrepLineInfo) HasCommitId() bool {
	if o != nil && o.CommitId.IsSet() {
		return true
	}

	return false
}

// SetCommitId gets a reference to the given utils.NullableString and assigns it to the CommitId field.
func (o *GrepLineInfo) SetCommitId(v string) {
	o.CommitId.Set(&v)
}
// SetCommitIdNil sets the value for CommitId to be an explicit nil
func (o *GrepLineInfo) SetCommitIdNil() {
	o.CommitId.Set(nil)
}

// UnsetCommitId ensures that no value is present for CommitId, not even an explicit nil
func (o *GrepLineInfo) UnsetCommitId() {
	o.CommitId.Unset()
}

// GetContents returns the Contents field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GrepLineInfo) GetContents() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Contents
}

// GetContentsOk returns a tuple with the Contents field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GrepLineInfo) GetContentsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Contents) {
		return nil, false
	}
	return o.Contents, true
}

// HasContents returns a boolean if a field has been set.
func (o *GrepLineInfo) HasContents() bool {
	if o != nil && !utils.IsNil(o.Contents) {
		return true
	}

	return false
}

// SetContents gets a reference to the given []string and assigns it to the Contents field.
func (o *GrepLineInfo) SetContents(v []string) {
	o.Contents = v
}

// GetFileMaxLine returns the FileMaxLine field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GrepLineInfo) GetFileMaxLine() int64 {
	if o == nil || utils.IsNil(o.FileMaxLine.Get()) {
		var ret int64
		return ret
	}
	return *o.FileMaxLine.Get()
}

// GetFileMaxLineOk returns a tuple with the FileMaxLine field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GrepLineInfo) GetFileMaxLineOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.FileMaxLine.Get(), o.FileMaxLine.IsSet()
}

// HasFileMaxLine returns a boolean if a field has been set.
func (o *GrepLineInfo) HasFileMaxLine() bool {
	if o != nil && o.FileMaxLine.IsSet() {
		return true
	}

	return false
}

// SetFileMaxLine gets a reference to the given utils.NullableInt64 and assigns it to the FileMaxLine field.
func (o *GrepLineInfo) SetFileMaxLine(v int64) {
	o.FileMaxLine.Set(&v)
}
// SetFileMaxLineNil sets the value for FileMaxLine to be an explicit nil
func (o *GrepLineInfo) SetFileMaxLineNil() {
	o.FileMaxLine.Set(nil)
}

// UnsetFileMaxLine ensures that no value is present for FileMaxLine, not even an explicit nil
func (o *GrepLineInfo) UnsetFileMaxLine() {
	o.FileMaxLine.Unset()
}

// GetLineNum returns the LineNum field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GrepLineInfo) GetLineNum() int64 {
	if o == nil || utils.IsNil(o.LineNum.Get()) {
		var ret int64
		return ret
	}
	return *o.LineNum.Get()
}

// GetLineNumOk returns a tuple with the LineNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GrepLineInfo) GetLineNumOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LineNum.Get(), o.LineNum.IsSet()
}

// HasLineNum returns a boolean if a field has been set.
func (o *GrepLineInfo) HasLineNum() bool {
	if o != nil && o.LineNum.IsSet() {
		return true
	}

	return false
}

// SetLineNum gets a reference to the given utils.NullableInt64 and assigns it to the LineNum field.
func (o *GrepLineInfo) SetLineNum(v int64) {
	o.LineNum.Set(&v)
}
// SetLineNumNil sets the value for LineNum to be an explicit nil
func (o *GrepLineInfo) SetLineNumNil() {
	o.LineNum.Set(nil)
}

// UnsetLineNum ensures that no value is present for LineNum, not even an explicit nil
func (o *GrepLineInfo) UnsetLineNum() {
	o.LineNum.Unset()
}

// GetMaxNum returns the MaxNum field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GrepLineInfo) GetMaxNum() int64 {
	if o == nil || utils.IsNil(o.MaxNum.Get()) {
		var ret int64
		return ret
	}
	return *o.MaxNum.Get()
}

// GetMaxNumOk returns a tuple with the MaxNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GrepLineInfo) GetMaxNumOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxNum.Get(), o.MaxNum.IsSet()
}

// HasMaxNum returns a boolean if a field has been set.
func (o *GrepLineInfo) HasMaxNum() bool {
	if o != nil && o.MaxNum.IsSet() {
		return true
	}

	return false
}

// SetMaxNum gets a reference to the given utils.NullableInt64 and assigns it to the MaxNum field.
func (o *GrepLineInfo) SetMaxNum(v int64) {
	o.MaxNum.Set(&v)
}
// SetMaxNumNil sets the value for MaxNum to be an explicit nil
func (o *GrepLineInfo) SetMaxNumNil() {
	o.MaxNum.Set(nil)
}

// UnsetMaxNum ensures that no value is present for MaxNum, not even an explicit nil
func (o *GrepLineInfo) UnsetMaxNum() {
	o.MaxNum.Unset()
}

// GetMinNum returns the MinNum field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GrepLineInfo) GetMinNum() int64 {
	if o == nil || utils.IsNil(o.MinNum.Get()) {
		var ret int64
		return ret
	}
	return *o.MinNum.Get()
}

// GetMinNumOk returns a tuple with the MinNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GrepLineInfo) GetMinNumOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.MinNum.Get(), o.MinNum.IsSet()
}

// HasMinNum returns a boolean if a field has been set.
func (o *GrepLineInfo) HasMinNum() bool {
	if o != nil && o.MinNum.IsSet() {
		return true
	}

	return false
}

// SetMinNum gets a reference to the given utils.NullableInt64 and assigns it to the MinNum field.
func (o *GrepLineInfo) SetMinNum(v int64) {
	o.MinNum.Set(&v)
}
// SetMinNumNil sets the value for MinNum to be an explicit nil
func (o *GrepLineInfo) SetMinNumNil() {
	o.MinNum.Set(nil)
}

// UnsetMinNum ensures that no value is present for MinNum, not even an explicit nil
func (o *GrepLineInfo) UnsetMinNum() {
	o.MinNum.Unset()
}

// GetPath returns the Path field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GrepLineInfo) GetPath() string {
	if o == nil || utils.IsNil(o.Path.Get()) {
		var ret string
		return ret
	}
	return *o.Path.Get()
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GrepLineInfo) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Path.Get(), o.Path.IsSet()
}

// HasPath returns a boolean if a field has been set.
func (o *GrepLineInfo) HasPath() bool {
	if o != nil && o.Path.IsSet() {
		return true
	}

	return false
}

// SetPath gets a reference to the given utils.NullableString and assigns it to the Path field.
func (o *GrepLineInfo) SetPath(v string) {
	o.Path.Set(&v)
}
// SetPathNil sets the value for Path to be an explicit nil
func (o *GrepLineInfo) SetPathNil() {
	o.Path.Set(nil)
}

// UnsetPath ensures that no value is present for Path, not even an explicit nil
func (o *GrepLineInfo) UnsetPath() {
	o.Path.Unset()
}

// GetText returns the Text field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GrepLineInfo) GetText() string {
	if o == nil || utils.IsNil(o.Text.Get()) {
		var ret string
		return ret
	}
	return *o.Text.Get()
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GrepLineInfo) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Text.Get(), o.Text.IsSet()
}

// HasText returns a boolean if a field has been set.
func (o *GrepLineInfo) HasText() bool {
	if o != nil && o.Text.IsSet() {
		return true
	}

	return false
}

// SetText gets a reference to the given utils.NullableString and assigns it to the Text field.
func (o *GrepLineInfo) SetText(v string) {
	o.Text.Set(&v)
}
// SetTextNil sets the value for Text to be an explicit nil
func (o *GrepLineInfo) SetTextNil() {
	o.Text.Set(nil)
}

// UnsetText ensures that no value is present for Text, not even an explicit nil
func (o *GrepLineInfo) UnsetText() {
	o.Text.Unset()
}

func (o GrepLineInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GrepLineInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.BranchName.IsSet() {
		toSerialize["BranchName"] = o.BranchName.Get()
	}
	if o.CommitId.IsSet() {
		toSerialize["CommitId"] = o.CommitId.Get()
	}
	if o.Contents != nil {
		toSerialize["Contents"] = o.Contents
	}
	if o.FileMaxLine.IsSet() {
		toSerialize["FileMaxLine"] = o.FileMaxLine.Get()
	}
	if o.LineNum.IsSet() {
		toSerialize["LineNum"] = o.LineNum.Get()
	}
	if o.MaxNum.IsSet() {
		toSerialize["MaxNum"] = o.MaxNum.Get()
	}
	if o.MinNum.IsSet() {
		toSerialize["MinNum"] = o.MinNum.Get()
	}
	if o.Path.IsSet() {
		toSerialize["Path"] = o.Path.Get()
	}
	if o.Text.IsSet() {
		toSerialize["Text"] = o.Text.Get()
	}
	return toSerialize, nil
}

type NullableGrepLineInfo struct {
	value *GrepLineInfo
	isSet bool
}

func (v NullableGrepLineInfo) Get() *GrepLineInfo {
	return v.value
}

func (v *NullableGrepLineInfo) Set(val *GrepLineInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableGrepLineInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableGrepLineInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGrepLineInfo(val *GrepLineInfo) *NullableGrepLineInfo {
	return &NullableGrepLineInfo{value: val, isSet: true}
}

func (v NullableGrepLineInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGrepLineInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


