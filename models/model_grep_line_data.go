/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the GrepLineData type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &GrepLineData{}

// GrepLineData 代码片段数据
type GrepLineData struct {
	// 代码片段详细信息
	GrepLines []GrepLineInfo `json:"GrepLines,omitempty"`
	Page *PageInfo `json:"Page,omitempty"`
}

// NewGrepLineData instantiates a new GrepLineData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGrepLineData() *GrepLineData {
	this := GrepLineData{}
	return &this
}

// NewGrepLineDataWithDefaults instantiates a new GrepLineData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGrepLineDataWithDefaults() *GrepLineData {
	this := GrepLineData{}
	return &this
}

// GetGrepLines returns the GrepLines field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GrepLineData) GetGrepLines() []GrepLineInfo {
	if o == nil {
		var ret []GrepLineInfo
		return ret
	}
	return o.GrepLines
}

// GetGrepLinesOk returns a tuple with the GrepLines field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GrepLineData) GetGrepLinesOk() ([]GrepLineInfo, bool) {
	if o == nil || utils.IsNil(o.GrepLines) {
		return nil, false
	}
	return o.GrepLines, true
}

// HasGrepLines returns a boolean if a field has been set.
func (o *GrepLineData) HasGrepLines() bool {
	if o != nil && !utils.IsNil(o.GrepLines) {
		return true
	}

	return false
}

// SetGrepLines gets a reference to the given []GrepLineInfo and assigns it to the GrepLines field.
func (o *GrepLineData) SetGrepLines(v []GrepLineInfo) {
	o.GrepLines = v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *GrepLineData) GetPage() PageInfo {
	if o == nil || utils.IsNil(o.Page) {
		var ret PageInfo
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GrepLineData) GetPageOk() (*PageInfo, bool) {
	if o == nil || utils.IsNil(o.Page) {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *GrepLineData) HasPage() bool {
	if o != nil && !utils.IsNil(o.Page) {
		return true
	}

	return false
}

// SetPage gets a reference to the given PageInfo and assigns it to the Page field.
func (o *GrepLineData) SetPage(v PageInfo) {
	o.Page = &v
}

func (o GrepLineData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GrepLineData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.GrepLines != nil {
		toSerialize["GrepLines"] = o.GrepLines
	}
	if !utils.IsNil(o.Page) {
		toSerialize["Page"] = o.Page
	}
	return toSerialize, nil
}

type NullableGrepLineData struct {
	value *GrepLineData
	isSet bool
}

func (v NullableGrepLineData) Get() *GrepLineData {
	return v.value
}

func (v *NullableGrepLineData) Set(val *GrepLineData) {
	v.value = val
	v.isSet = true
}

func (v NullableGrepLineData) IsSet() bool {
	return v.isSet
}

func (v *NullableGrepLineData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGrepLineData(val *GrepLineData) *NullableGrepLineData {
	return &NullableGrepLineData{value: val, isSet: true}
}

func (v NullableGrepLineData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGrepLineData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


