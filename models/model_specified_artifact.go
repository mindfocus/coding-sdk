/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the SpecifiedArtifact type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &SpecifiedArtifact{}

// SpecifiedArtifact 指定的制品
type SpecifiedArtifact struct {
	// 制品包名称（必须配合 VersionName 使用）
	PackageName *string `json:"PackageName,omitempty"`
	// 制品版本（必须配合 PackageName 使用）
	VersionName *string `json:"VersionName,omitempty"`
}

// NewSpecifiedArtifact instantiates a new SpecifiedArtifact object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpecifiedArtifact() *SpecifiedArtifact {
	this := SpecifiedArtifact{}
	var packageName string = ""
	this.PackageName = &packageName
	var versionName string = ""
	this.VersionName = &versionName
	return &this
}

// NewSpecifiedArtifactWithDefaults instantiates a new SpecifiedArtifact object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpecifiedArtifactWithDefaults() *SpecifiedArtifact {
	this := SpecifiedArtifact{}
	var packageName string = ""
	this.PackageName = &packageName
	var versionName string = ""
	this.VersionName = &versionName
	return &this
}

// GetPackageName returns the PackageName field value if set, zero value otherwise.
func (o *SpecifiedArtifact) GetPackageName() string {
	if o == nil || utils.IsNil(o.PackageName) {
		var ret string
		return ret
	}
	return *o.PackageName
}

// GetPackageNameOk returns a tuple with the PackageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecifiedArtifact) GetPackageNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.PackageName) {
		return nil, false
	}
	return o.PackageName, true
}

// HasPackageName returns a boolean if a field has been set.
func (o *SpecifiedArtifact) HasPackageName() bool {
	if o != nil && !utils.IsNil(o.PackageName) {
		return true
	}

	return false
}

// SetPackageName gets a reference to the given string and assigns it to the PackageName field.
func (o *SpecifiedArtifact) SetPackageName(v string) {
	o.PackageName = &v
}

// GetVersionName returns the VersionName field value if set, zero value otherwise.
func (o *SpecifiedArtifact) GetVersionName() string {
	if o == nil || utils.IsNil(o.VersionName) {
		var ret string
		return ret
	}
	return *o.VersionName
}

// GetVersionNameOk returns a tuple with the VersionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecifiedArtifact) GetVersionNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.VersionName) {
		return nil, false
	}
	return o.VersionName, true
}

// HasVersionName returns a boolean if a field has been set.
func (o *SpecifiedArtifact) HasVersionName() bool {
	if o != nil && !utils.IsNil(o.VersionName) {
		return true
	}

	return false
}

// SetVersionName gets a reference to the given string and assigns it to the VersionName field.
func (o *SpecifiedArtifact) SetVersionName(v string) {
	o.VersionName = &v
}

func (o SpecifiedArtifact) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpecifiedArtifact) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.PackageName) {
		toSerialize["PackageName"] = o.PackageName
	}
	if !utils.IsNil(o.VersionName) {
		toSerialize["VersionName"] = o.VersionName
	}
	return toSerialize, nil
}

type NullableSpecifiedArtifact struct {
	value *SpecifiedArtifact
	isSet bool
}

func (v NullableSpecifiedArtifact) Get() *SpecifiedArtifact {
	return v.value
}

func (v *NullableSpecifiedArtifact) Set(val *SpecifiedArtifact) {
	v.value = val
	v.isSet = true
}

func (v NullableSpecifiedArtifact) IsSet() bool {
	return v.isSet
}

func (v *NullableSpecifiedArtifact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpecifiedArtifact(val *SpecifiedArtifact) *NullableSpecifiedArtifact {
	return &NullableSpecifiedArtifact{value: val, isSet: true}
}

func (v NullableSpecifiedArtifact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpecifiedArtifact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


