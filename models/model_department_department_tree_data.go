/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DepartmentDepartmentTreeData type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DepartmentDepartmentTreeData{}

// DepartmentDepartmentTreeData struct for DepartmentDepartmentTreeData
type DepartmentDepartmentTreeData struct {
	// 子部门信息
	Children []DepartmentDepartmentTreeData `json:"Children"`
	// 创建人ID
	CreatorId int64 `json:"CreatorId"`
	// 部门描述ID
	DescribeId string `json:"DescribeId"`
	// 部门ID
	Id int64 `json:"Id"`
	// 部门名
	Name string `json:"Name"`
	// 父级部门ID
	ParentId int64 `json:"ParentId"`
	// 排序值
	Sort int64 `json:"Sort"`
	// 团队ID
	TeamId int64 `json:"TeamId"`
}

type _DepartmentDepartmentTreeData DepartmentDepartmentTreeData

// NewDepartmentDepartmentTreeData instantiates a new DepartmentDepartmentTreeData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDepartmentDepartmentTreeData(children []DepartmentDepartmentTreeData, creatorId int64, describeId string, id int64, name string, parentId int64, sort int64, teamId int64) *DepartmentDepartmentTreeData {
	this := DepartmentDepartmentTreeData{}
	this.Children = children
	this.CreatorId = creatorId
	this.DescribeId = describeId
	this.Id = id
	this.Name = name
	this.ParentId = parentId
	this.Sort = sort
	this.TeamId = teamId
	return &this
}

// NewDepartmentDepartmentTreeDataWithDefaults instantiates a new DepartmentDepartmentTreeData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDepartmentDepartmentTreeDataWithDefaults() *DepartmentDepartmentTreeData {
	this := DepartmentDepartmentTreeData{}
	var creatorId int64 = 0
	this.CreatorId = creatorId
	var describeId string = ""
	this.DescribeId = describeId
	var id int64 = 0
	this.Id = id
	var name string = ""
	this.Name = name
	var parentId int64 = 0
	this.ParentId = parentId
	var sort int64 = 0
	this.Sort = sort
	var teamId int64 = 0
	this.TeamId = teamId
	return &this
}

// GetChildren returns the Children field value
func (o *DepartmentDepartmentTreeData) GetChildren() []DepartmentDepartmentTreeData {
	if o == nil {
		var ret []DepartmentDepartmentTreeData
		return ret
	}

	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value
// and a boolean to check if the value has been set.
func (o *DepartmentDepartmentTreeData) GetChildrenOk() ([]DepartmentDepartmentTreeData, bool) {
	if o == nil {
		return nil, false
	}
	return o.Children, true
}

// SetChildren sets field value
func (o *DepartmentDepartmentTreeData) SetChildren(v []DepartmentDepartmentTreeData) {
	o.Children = v
}

// GetCreatorId returns the CreatorId field value
func (o *DepartmentDepartmentTreeData) GetCreatorId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value
// and a boolean to check if the value has been set.
func (o *DepartmentDepartmentTreeData) GetCreatorIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatorId, true
}

// SetCreatorId sets field value
func (o *DepartmentDepartmentTreeData) SetCreatorId(v int64) {
	o.CreatorId = v
}

// GetDescribeId returns the DescribeId field value
func (o *DepartmentDepartmentTreeData) GetDescribeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DescribeId
}

// GetDescribeIdOk returns a tuple with the DescribeId field value
// and a boolean to check if the value has been set.
func (o *DepartmentDepartmentTreeData) GetDescribeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DescribeId, true
}

// SetDescribeId sets field value
func (o *DepartmentDepartmentTreeData) SetDescribeId(v string) {
	o.DescribeId = v
}

// GetId returns the Id field value
func (o *DepartmentDepartmentTreeData) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DepartmentDepartmentTreeData) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DepartmentDepartmentTreeData) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value
func (o *DepartmentDepartmentTreeData) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DepartmentDepartmentTreeData) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DepartmentDepartmentTreeData) SetName(v string) {
	o.Name = v
}

// GetParentId returns the ParentId field value
func (o *DepartmentDepartmentTreeData) GetParentId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value
// and a boolean to check if the value has been set.
func (o *DepartmentDepartmentTreeData) GetParentIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParentId, true
}

// SetParentId sets field value
func (o *DepartmentDepartmentTreeData) SetParentId(v int64) {
	o.ParentId = v
}

// GetSort returns the Sort field value
func (o *DepartmentDepartmentTreeData) GetSort() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Sort
}

// GetSortOk returns a tuple with the Sort field value
// and a boolean to check if the value has been set.
func (o *DepartmentDepartmentTreeData) GetSortOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sort, true
}

// SetSort sets field value
func (o *DepartmentDepartmentTreeData) SetSort(v int64) {
	o.Sort = v
}

// GetTeamId returns the TeamId field value
func (o *DepartmentDepartmentTreeData) GetTeamId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value
// and a boolean to check if the value has been set.
func (o *DepartmentDepartmentTreeData) GetTeamIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TeamId, true
}

// SetTeamId sets field value
func (o *DepartmentDepartmentTreeData) SetTeamId(v int64) {
	o.TeamId = v
}

func (o DepartmentDepartmentTreeData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DepartmentDepartmentTreeData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Children"] = o.Children
	toSerialize["CreatorId"] = o.CreatorId
	toSerialize["DescribeId"] = o.DescribeId
	toSerialize["Id"] = o.Id
	toSerialize["Name"] = o.Name
	toSerialize["ParentId"] = o.ParentId
	toSerialize["Sort"] = o.Sort
	toSerialize["TeamId"] = o.TeamId
	return toSerialize, nil
}

func (o *DepartmentDepartmentTreeData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Children",
		"CreatorId",
		"DescribeId",
		"Id",
		"Name",
		"ParentId",
		"Sort",
		"TeamId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDepartmentDepartmentTreeData := _DepartmentDepartmentTreeData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDepartmentDepartmentTreeData)

	if err != nil {
		return err
	}

	*o = DepartmentDepartmentTreeData(varDepartmentDepartmentTreeData)

	return err
}

type NullableDepartmentDepartmentTreeData struct {
	value *DepartmentDepartmentTreeData
	isSet bool
}

func (v NullableDepartmentDepartmentTreeData) Get() *DepartmentDepartmentTreeData {
	return v.value
}

func (v *NullableDepartmentDepartmentTreeData) Set(val *DepartmentDepartmentTreeData) {
	v.value = val
	v.isSet = true
}

func (v NullableDepartmentDepartmentTreeData) IsSet() bool {
	return v.isSet
}

func (v *NullableDepartmentDepartmentTreeData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDepartmentDepartmentTreeData(val *DepartmentDepartmentTreeData) *NullableDepartmentDepartmentTreeData {
	return &NullableDepartmentDepartmentTreeData{value: val, isSet: true}
}

func (v NullableDepartmentDepartmentTreeData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDepartmentDepartmentTreeData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


