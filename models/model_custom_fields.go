/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the CustomFields type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CustomFields{}

// CustomFields 自定义属性列表
type CustomFields struct {
	// 自定义属性 Id
	Id *int64 `json:"Id,omitempty"`
	// 自定义属性名称
	Name *string `json:"Name,omitempty"`
	// 自定义属性值
	ValueString *string `json:"ValueString,omitempty"`
}

// NewCustomFields instantiates a new CustomFields object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomFields() *CustomFields {
	this := CustomFields{}
	var name string = ""
	this.Name = &name
	var valueString string = ""
	this.ValueString = &valueString
	return &this
}

// NewCustomFieldsWithDefaults instantiates a new CustomFields object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomFieldsWithDefaults() *CustomFields {
	this := CustomFields{}
	var name string = ""
	this.Name = &name
	var valueString string = ""
	this.ValueString = &valueString
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CustomFields) GetId() int64 {
	if o == nil || utils.IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomFields) GetIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CustomFields) HasId() bool {
	if o != nil && !utils.IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *CustomFields) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CustomFields) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomFields) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CustomFields) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CustomFields) SetName(v string) {
	o.Name = &v
}

// GetValueString returns the ValueString field value if set, zero value otherwise.
func (o *CustomFields) GetValueString() string {
	if o == nil || utils.IsNil(o.ValueString) {
		var ret string
		return ret
	}
	return *o.ValueString
}

// GetValueStringOk returns a tuple with the ValueString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomFields) GetValueStringOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ValueString) {
		return nil, false
	}
	return o.ValueString, true
}

// HasValueString returns a boolean if a field has been set.
func (o *CustomFields) HasValueString() bool {
	if o != nil && !utils.IsNil(o.ValueString) {
		return true
	}

	return false
}

// SetValueString gets a reference to the given string and assigns it to the ValueString field.
func (o *CustomFields) SetValueString(v string) {
	o.ValueString = &v
}

func (o CustomFields) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomFields) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !utils.IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !utils.IsNil(o.ValueString) {
		toSerialize["ValueString"] = o.ValueString
	}
	return toSerialize, nil
}

type NullableCustomFields struct {
	value *CustomFields
	isSet bool
}

func (v NullableCustomFields) Get() *CustomFields {
	return v.value
}

func (v *NullableCustomFields) Set(val *CustomFields) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomFields) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomFields) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomFields(val *CustomFields) *NullableCustomFields {
	return &NullableCustomFields{value: val, isSet: true}
}

func (v NullableCustomFields) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomFields) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


