/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DeleteGitFilesRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DeleteGitFilesRequest{}

// DeleteGitFilesRequest struct for DeleteGitFilesRequest
type DeleteGitFilesRequest struct {
	// 提交信息
	CommitMessage string `json:"CommitMessage"`
	// 仓库id
	DepotId int64 `json:"DepotId"`
	// 仓库路径，DepotId与DepotPath二选一即可
	DepotPath *string `json:"DepotPath,omitempty"`
	// 文件路径列表
	Paths []string `json:"Paths"`
	// 分支名
	Ref string `json:"Ref"`
}

type _DeleteGitFilesRequest DeleteGitFilesRequest

// NewDeleteGitFilesRequest instantiates a new DeleteGitFilesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteGitFilesRequest(commitMessage string, depotId int64, paths []string, ref string) *DeleteGitFilesRequest {
	this := DeleteGitFilesRequest{}
	this.CommitMessage = commitMessage
	this.DepotId = depotId
	this.Paths = paths
	this.Ref = ref
	return &this
}

// NewDeleteGitFilesRequestWithDefaults instantiates a new DeleteGitFilesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteGitFilesRequestWithDefaults() *DeleteGitFilesRequest {
	this := DeleteGitFilesRequest{}
	return &this
}

// GetCommitMessage returns the CommitMessage field value
func (o *DeleteGitFilesRequest) GetCommitMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommitMessage
}

// GetCommitMessageOk returns a tuple with the CommitMessage field value
// and a boolean to check if the value has been set.
func (o *DeleteGitFilesRequest) GetCommitMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommitMessage, true
}

// SetCommitMessage sets field value
func (o *DeleteGitFilesRequest) SetCommitMessage(v string) {
	o.CommitMessage = v
}

// GetDepotId returns the DepotId field value
func (o *DeleteGitFilesRequest) GetDepotId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DepotId
}

// GetDepotIdOk returns a tuple with the DepotId field value
// and a boolean to check if the value has been set.
func (o *DeleteGitFilesRequest) GetDepotIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepotId, true
}

// SetDepotId sets field value
func (o *DeleteGitFilesRequest) SetDepotId(v int64) {
	o.DepotId = v
}

// GetDepotPath returns the DepotPath field value if set, zero value otherwise.
func (o *DeleteGitFilesRequest) GetDepotPath() string {
	if o == nil || utils.IsNil(o.DepotPath) {
		var ret string
		return ret
	}
	return *o.DepotPath
}

// GetDepotPathOk returns a tuple with the DepotPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteGitFilesRequest) GetDepotPathOk() (*string, bool) {
	if o == nil || utils.IsNil(o.DepotPath) {
		return nil, false
	}
	return o.DepotPath, true
}

// HasDepotPath returns a boolean if a field has been set.
func (o *DeleteGitFilesRequest) HasDepotPath() bool {
	if o != nil && !utils.IsNil(o.DepotPath) {
		return true
	}

	return false
}

// SetDepotPath gets a reference to the given string and assigns it to the DepotPath field.
func (o *DeleteGitFilesRequest) SetDepotPath(v string) {
	o.DepotPath = &v
}

// GetPaths returns the Paths field value
func (o *DeleteGitFilesRequest) GetPaths() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Paths
}

// GetPathsOk returns a tuple with the Paths field value
// and a boolean to check if the value has been set.
func (o *DeleteGitFilesRequest) GetPathsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Paths, true
}

// SetPaths sets field value
func (o *DeleteGitFilesRequest) SetPaths(v []string) {
	o.Paths = v
}

// GetRef returns the Ref field value
func (o *DeleteGitFilesRequest) GetRef() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ref
}

// GetRefOk returns a tuple with the Ref field value
// and a boolean to check if the value has been set.
func (o *DeleteGitFilesRequest) GetRefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ref, true
}

// SetRef sets field value
func (o *DeleteGitFilesRequest) SetRef(v string) {
	o.Ref = v
}

func (o DeleteGitFilesRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteGitFilesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["CommitMessage"] = o.CommitMessage
	toSerialize["DepotId"] = o.DepotId
	if !utils.IsNil(o.DepotPath) {
		toSerialize["DepotPath"] = o.DepotPath
	}
	toSerialize["Paths"] = o.Paths
	toSerialize["Ref"] = o.Ref
	return toSerialize, nil
}

func (o *DeleteGitFilesRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"CommitMessage",
		"DepotId",
		"Paths",
		"Ref",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeleteGitFilesRequest := _DeleteGitFilesRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeleteGitFilesRequest)

	if err != nil {
		return err
	}

	*o = DeleteGitFilesRequest(varDeleteGitFilesRequest)

	return err
}

type NullableDeleteGitFilesRequest struct {
	value *DeleteGitFilesRequest
	isSet bool
}

func (v NullableDeleteGitFilesRequest) Get() *DeleteGitFilesRequest {
	return v.value
}

func (v *NullableDeleteGitFilesRequest) Set(val *DeleteGitFilesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteGitFilesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteGitFilesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteGitFilesRequest(val *DeleteGitFilesRequest) *NullableDeleteGitFilesRequest {
	return &NullableDeleteGitFilesRequest{value: val, isSet: true}
}

func (v NullableDeleteGitFilesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteGitFilesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


