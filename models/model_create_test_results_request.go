/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the CreateTestResultsRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CreateTestResultsRequest{}

// CreateTestResultsRequest struct for CreateTestResultsRequest
type CreateTestResultsRequest struct {
	// 测试用例 ID 数组
	CaseIds []int32 `json:"CaseIds"`
	// 项目名称
	ProjectName string `json:"ProjectName"`
	// 测试计划 ID
	RunId int32 `json:"RunId"`
	// 测试状态：UNTESTED:未测试,PASSED:通过,BLOCKED:阻塞,RETEST:重测,FAILED:失败
	Status string `json:"Status"`
}

type _CreateTestResultsRequest CreateTestResultsRequest

// NewCreateTestResultsRequest instantiates a new CreateTestResultsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateTestResultsRequest(caseIds []int32, projectName string, runId int32, status string) *CreateTestResultsRequest {
	this := CreateTestResultsRequest{}
	this.CaseIds = caseIds
	this.ProjectName = projectName
	this.RunId = runId
	this.Status = status
	return &this
}

// NewCreateTestResultsRequestWithDefaults instantiates a new CreateTestResultsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateTestResultsRequestWithDefaults() *CreateTestResultsRequest {
	this := CreateTestResultsRequest{}
	return &this
}

// GetCaseIds returns the CaseIds field value
func (o *CreateTestResultsRequest) GetCaseIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.CaseIds
}

// GetCaseIdsOk returns a tuple with the CaseIds field value
// and a boolean to check if the value has been set.
func (o *CreateTestResultsRequest) GetCaseIdsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaseIds, true
}

// SetCaseIds sets field value
func (o *CreateTestResultsRequest) SetCaseIds(v []int32) {
	o.CaseIds = v
}

// GetProjectName returns the ProjectName field value
func (o *CreateTestResultsRequest) GetProjectName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value
// and a boolean to check if the value has been set.
func (o *CreateTestResultsRequest) GetProjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectName, true
}

// SetProjectName sets field value
func (o *CreateTestResultsRequest) SetProjectName(v string) {
	o.ProjectName = v
}

// GetRunId returns the RunId field value
func (o *CreateTestResultsRequest) GetRunId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RunId
}

// GetRunIdOk returns a tuple with the RunId field value
// and a boolean to check if the value has been set.
func (o *CreateTestResultsRequest) GetRunIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RunId, true
}

// SetRunId sets field value
func (o *CreateTestResultsRequest) SetRunId(v int32) {
	o.RunId = v
}

// GetStatus returns the Status field value
func (o *CreateTestResultsRequest) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *CreateTestResultsRequest) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *CreateTestResultsRequest) SetStatus(v string) {
	o.Status = v
}

func (o CreateTestResultsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateTestResultsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["CaseIds"] = o.CaseIds
	toSerialize["ProjectName"] = o.ProjectName
	toSerialize["RunId"] = o.RunId
	toSerialize["Status"] = o.Status
	return toSerialize, nil
}

func (o *CreateTestResultsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"CaseIds",
		"ProjectName",
		"RunId",
		"Status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateTestResultsRequest := _CreateTestResultsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateTestResultsRequest)

	if err != nil {
		return err
	}

	*o = CreateTestResultsRequest(varCreateTestResultsRequest)

	return err
}

type NullableCreateTestResultsRequest struct {
	value *CreateTestResultsRequest
	isSet bool
}

func (v NullableCreateTestResultsRequest) Get() *CreateTestResultsRequest {
	return v.value
}

func (v *NullableCreateTestResultsRequest) Set(val *CreateTestResultsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateTestResultsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateTestResultsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateTestResultsRequest(val *CreateTestResultsRequest) *NullableCreateTestResultsRequest {
	return &NullableCreateTestResultsRequest{value: val, isSet: true}
}

func (v NullableCreateTestResultsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateTestResultsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


