/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DeployKeyInfo type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DeployKeyInfo{}

// DeployKeyInfo 部署公钥信息
type DeployKeyInfo struct {
	// 是否授予写入权限
	AllowWrite utils.NullableBool `json:"AllowWrite,omitempty"`
	// 创建时间
	CreatedAt utils.NullableInt64 `json:"CreatedAt,omitempty"`
	// 仓库 Id
	DepotId utils.NullableInt64 `json:"DepotId,omitempty"`
	// 过期时间
	ExpirationDate utils.NullableString `json:"ExpirationDate,omitempty"`
	// key 指纹
	FingerPrint utils.NullableString `json:"FingerPrint,omitempty"`
	// 是否过期
	HasExpired utils.NullableBool `json:"HasExpired,omitempty"`
	// SSH Key Id
	KeyId utils.NullableInt64 `json:"KeyId,omitempty"`
	// 所属者名字
	OwnerName utils.NullableString `json:"OwnerName,omitempty"`
	// key 标题
	Title utils.NullableString `json:"Title,omitempty"`
}

// NewDeployKeyInfo instantiates a new DeployKeyInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeployKeyInfo() *DeployKeyInfo {
	this := DeployKeyInfo{}
	var allowWrite bool = false
	this.AllowWrite = *utils.NewNullableBool(&allowWrite)
	var expirationDate string = ""
	this.ExpirationDate = *utils.NewNullableString(&expirationDate)
	var fingerPrint string = ""
	this.FingerPrint = *utils.NewNullableString(&fingerPrint)
	var hasExpired bool = false
	this.HasExpired = *utils.NewNullableBool(&hasExpired)
	var ownerName string = ""
	this.OwnerName = *utils.NewNullableString(&ownerName)
	var title string = ""
	this.Title = *utils.NewNullableString(&title)
	return &this
}

// NewDeployKeyInfoWithDefaults instantiates a new DeployKeyInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeployKeyInfoWithDefaults() *DeployKeyInfo {
	this := DeployKeyInfo{}
	var allowWrite bool = false
	this.AllowWrite = *utils.NewNullableBool(&allowWrite)
	var expirationDate string = ""
	this.ExpirationDate = *utils.NewNullableString(&expirationDate)
	var fingerPrint string = ""
	this.FingerPrint = *utils.NewNullableString(&fingerPrint)
	var hasExpired bool = false
	this.HasExpired = *utils.NewNullableBool(&hasExpired)
	var ownerName string = ""
	this.OwnerName = *utils.NewNullableString(&ownerName)
	var title string = ""
	this.Title = *utils.NewNullableString(&title)
	return &this
}

// GetAllowWrite returns the AllowWrite field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeployKeyInfo) GetAllowWrite() bool {
	if o == nil || utils.IsNil(o.AllowWrite.Get()) {
		var ret bool
		return ret
	}
	return *o.AllowWrite.Get()
}

// GetAllowWriteOk returns a tuple with the AllowWrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeployKeyInfo) GetAllowWriteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowWrite.Get(), o.AllowWrite.IsSet()
}

// HasAllowWrite returns a boolean if a field has been set.
func (o *DeployKeyInfo) HasAllowWrite() bool {
	if o != nil && o.AllowWrite.IsSet() {
		return true
	}

	return false
}

// SetAllowWrite gets a reference to the given utils.NullableBool and assigns it to the AllowWrite field.
func (o *DeployKeyInfo) SetAllowWrite(v bool) {
	o.AllowWrite.Set(&v)
}
// SetAllowWriteNil sets the value for AllowWrite to be an explicit nil
func (o *DeployKeyInfo) SetAllowWriteNil() {
	o.AllowWrite.Set(nil)
}

// UnsetAllowWrite ensures that no value is present for AllowWrite, not even an explicit nil
func (o *DeployKeyInfo) UnsetAllowWrite() {
	o.AllowWrite.Unset()
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeployKeyInfo) GetCreatedAt() int64 {
	if o == nil || utils.IsNil(o.CreatedAt.Get()) {
		var ret int64
		return ret
	}
	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeployKeyInfo) GetCreatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DeployKeyInfo) HasCreatedAt() bool {
	if o != nil && o.CreatedAt.IsSet() {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given utils.NullableInt64 and assigns it to the CreatedAt field.
func (o *DeployKeyInfo) SetCreatedAt(v int64) {
	o.CreatedAt.Set(&v)
}
// SetCreatedAtNil sets the value for CreatedAt to be an explicit nil
func (o *DeployKeyInfo) SetCreatedAtNil() {
	o.CreatedAt.Set(nil)
}

// UnsetCreatedAt ensures that no value is present for CreatedAt, not even an explicit nil
func (o *DeployKeyInfo) UnsetCreatedAt() {
	o.CreatedAt.Unset()
}

// GetDepotId returns the DepotId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeployKeyInfo) GetDepotId() int64 {
	if o == nil || utils.IsNil(o.DepotId.Get()) {
		var ret int64
		return ret
	}
	return *o.DepotId.Get()
}

// GetDepotIdOk returns a tuple with the DepotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeployKeyInfo) GetDepotIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DepotId.Get(), o.DepotId.IsSet()
}

// HasDepotId returns a boolean if a field has been set.
func (o *DeployKeyInfo) HasDepotId() bool {
	if o != nil && o.DepotId.IsSet() {
		return true
	}

	return false
}

// SetDepotId gets a reference to the given utils.NullableInt64 and assigns it to the DepotId field.
func (o *DeployKeyInfo) SetDepotId(v int64) {
	o.DepotId.Set(&v)
}
// SetDepotIdNil sets the value for DepotId to be an explicit nil
func (o *DeployKeyInfo) SetDepotIdNil() {
	o.DepotId.Set(nil)
}

// UnsetDepotId ensures that no value is present for DepotId, not even an explicit nil
func (o *DeployKeyInfo) UnsetDepotId() {
	o.DepotId.Unset()
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeployKeyInfo) GetExpirationDate() string {
	if o == nil || utils.IsNil(o.ExpirationDate.Get()) {
		var ret string
		return ret
	}
	return *o.ExpirationDate.Get()
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeployKeyInfo) GetExpirationDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpirationDate.Get(), o.ExpirationDate.IsSet()
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *DeployKeyInfo) HasExpirationDate() bool {
	if o != nil && o.ExpirationDate.IsSet() {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given utils.NullableString and assigns it to the ExpirationDate field.
func (o *DeployKeyInfo) SetExpirationDate(v string) {
	o.ExpirationDate.Set(&v)
}
// SetExpirationDateNil sets the value for ExpirationDate to be an explicit nil
func (o *DeployKeyInfo) SetExpirationDateNil() {
	o.ExpirationDate.Set(nil)
}

// UnsetExpirationDate ensures that no value is present for ExpirationDate, not even an explicit nil
func (o *DeployKeyInfo) UnsetExpirationDate() {
	o.ExpirationDate.Unset()
}

// GetFingerPrint returns the FingerPrint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeployKeyInfo) GetFingerPrint() string {
	if o == nil || utils.IsNil(o.FingerPrint.Get()) {
		var ret string
		return ret
	}
	return *o.FingerPrint.Get()
}

// GetFingerPrintOk returns a tuple with the FingerPrint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeployKeyInfo) GetFingerPrintOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FingerPrint.Get(), o.FingerPrint.IsSet()
}

// HasFingerPrint returns a boolean if a field has been set.
func (o *DeployKeyInfo) HasFingerPrint() bool {
	if o != nil && o.FingerPrint.IsSet() {
		return true
	}

	return false
}

// SetFingerPrint gets a reference to the given utils.NullableString and assigns it to the FingerPrint field.
func (o *DeployKeyInfo) SetFingerPrint(v string) {
	o.FingerPrint.Set(&v)
}
// SetFingerPrintNil sets the value for FingerPrint to be an explicit nil
func (o *DeployKeyInfo) SetFingerPrintNil() {
	o.FingerPrint.Set(nil)
}

// UnsetFingerPrint ensures that no value is present for FingerPrint, not even an explicit nil
func (o *DeployKeyInfo) UnsetFingerPrint() {
	o.FingerPrint.Unset()
}

// GetHasExpired returns the HasExpired field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeployKeyInfo) GetHasExpired() bool {
	if o == nil || utils.IsNil(o.HasExpired.Get()) {
		var ret bool
		return ret
	}
	return *o.HasExpired.Get()
}

// GetHasExpiredOk returns a tuple with the HasExpired field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeployKeyInfo) GetHasExpiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.HasExpired.Get(), o.HasExpired.IsSet()
}

// HasHasExpired returns a boolean if a field has been set.
func (o *DeployKeyInfo) HasHasExpired() bool {
	if o != nil && o.HasExpired.IsSet() {
		return true
	}

	return false
}

// SetHasExpired gets a reference to the given utils.NullableBool and assigns it to the HasExpired field.
func (o *DeployKeyInfo) SetHasExpired(v bool) {
	o.HasExpired.Set(&v)
}
// SetHasExpiredNil sets the value for HasExpired to be an explicit nil
func (o *DeployKeyInfo) SetHasExpiredNil() {
	o.HasExpired.Set(nil)
}

// UnsetHasExpired ensures that no value is present for HasExpired, not even an explicit nil
func (o *DeployKeyInfo) UnsetHasExpired() {
	o.HasExpired.Unset()
}

// GetKeyId returns the KeyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeployKeyInfo) GetKeyId() int64 {
	if o == nil || utils.IsNil(o.KeyId.Get()) {
		var ret int64
		return ret
	}
	return *o.KeyId.Get()
}

// GetKeyIdOk returns a tuple with the KeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeployKeyInfo) GetKeyIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.KeyId.Get(), o.KeyId.IsSet()
}

// HasKeyId returns a boolean if a field has been set.
func (o *DeployKeyInfo) HasKeyId() bool {
	if o != nil && o.KeyId.IsSet() {
		return true
	}

	return false
}

// SetKeyId gets a reference to the given utils.NullableInt64 and assigns it to the KeyId field.
func (o *DeployKeyInfo) SetKeyId(v int64) {
	o.KeyId.Set(&v)
}
// SetKeyIdNil sets the value for KeyId to be an explicit nil
func (o *DeployKeyInfo) SetKeyIdNil() {
	o.KeyId.Set(nil)
}

// UnsetKeyId ensures that no value is present for KeyId, not even an explicit nil
func (o *DeployKeyInfo) UnsetKeyId() {
	o.KeyId.Unset()
}

// GetOwnerName returns the OwnerName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeployKeyInfo) GetOwnerName() string {
	if o == nil || utils.IsNil(o.OwnerName.Get()) {
		var ret string
		return ret
	}
	return *o.OwnerName.Get()
}

// GetOwnerNameOk returns a tuple with the OwnerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeployKeyInfo) GetOwnerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OwnerName.Get(), o.OwnerName.IsSet()
}

// HasOwnerName returns a boolean if a field has been set.
func (o *DeployKeyInfo) HasOwnerName() bool {
	if o != nil && o.OwnerName.IsSet() {
		return true
	}

	return false
}

// SetOwnerName gets a reference to the given utils.NullableString and assigns it to the OwnerName field.
func (o *DeployKeyInfo) SetOwnerName(v string) {
	o.OwnerName.Set(&v)
}
// SetOwnerNameNil sets the value for OwnerName to be an explicit nil
func (o *DeployKeyInfo) SetOwnerNameNil() {
	o.OwnerName.Set(nil)
}

// UnsetOwnerName ensures that no value is present for OwnerName, not even an explicit nil
func (o *DeployKeyInfo) UnsetOwnerName() {
	o.OwnerName.Unset()
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeployKeyInfo) GetTitle() string {
	if o == nil || utils.IsNil(o.Title.Get()) {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeployKeyInfo) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *DeployKeyInfo) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given utils.NullableString and assigns it to the Title field.
func (o *DeployKeyInfo) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *DeployKeyInfo) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *DeployKeyInfo) UnsetTitle() {
	o.Title.Unset()
}

func (o DeployKeyInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeployKeyInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowWrite.IsSet() {
		toSerialize["AllowWrite"] = o.AllowWrite.Get()
	}
	if o.CreatedAt.IsSet() {
		toSerialize["CreatedAt"] = o.CreatedAt.Get()
	}
	if o.DepotId.IsSet() {
		toSerialize["DepotId"] = o.DepotId.Get()
	}
	if o.ExpirationDate.IsSet() {
		toSerialize["ExpirationDate"] = o.ExpirationDate.Get()
	}
	if o.FingerPrint.IsSet() {
		toSerialize["FingerPrint"] = o.FingerPrint.Get()
	}
	if o.HasExpired.IsSet() {
		toSerialize["HasExpired"] = o.HasExpired.Get()
	}
	if o.KeyId.IsSet() {
		toSerialize["KeyId"] = o.KeyId.Get()
	}
	if o.OwnerName.IsSet() {
		toSerialize["OwnerName"] = o.OwnerName.Get()
	}
	if o.Title.IsSet() {
		toSerialize["Title"] = o.Title.Get()
	}
	return toSerialize, nil
}

type NullableDeployKeyInfo struct {
	value *DeployKeyInfo
	isSet bool
}

func (v NullableDeployKeyInfo) Get() *DeployKeyInfo {
	return v.value
}

func (v *NullableDeployKeyInfo) Set(val *DeployKeyInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDeployKeyInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDeployKeyInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeployKeyInfo(val *DeployKeyInfo) *NullableDeployKeyInfo {
	return &NullableDeployKeyInfo{value: val, isSet: true}
}

func (v NullableDeployKeyInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeployKeyInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


