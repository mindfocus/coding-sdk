/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the CodingCIJobEnv type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CodingCIJobEnv{}

// CodingCIJobEnv 环境变量配置
type CodingCIJobEnv struct {
	// 环境变量名称
	Name string `json:"Name"`
	// 是否保密
	Sensitive bool `json:"Sensitive"`
	// 环境变量值
	Value string `json:"Value"`
}

type _CodingCIJobEnv CodingCIJobEnv

// NewCodingCIJobEnv instantiates a new CodingCIJobEnv object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCodingCIJobEnv(name string, sensitive bool, value string) *CodingCIJobEnv {
	this := CodingCIJobEnv{}
	this.Name = name
	this.Sensitive = sensitive
	this.Value = value
	return &this
}

// NewCodingCIJobEnvWithDefaults instantiates a new CodingCIJobEnv object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCodingCIJobEnvWithDefaults() *CodingCIJobEnv {
	this := CodingCIJobEnv{}
	var name string = ""
	this.Name = name
	var sensitive bool = false
	this.Sensitive = sensitive
	var value string = ""
	this.Value = value
	return &this
}

// GetName returns the Name field value
func (o *CodingCIJobEnv) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CodingCIJobEnv) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CodingCIJobEnv) SetName(v string) {
	o.Name = v
}

// GetSensitive returns the Sensitive field value
func (o *CodingCIJobEnv) GetSensitive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Sensitive
}

// GetSensitiveOk returns a tuple with the Sensitive field value
// and a boolean to check if the value has been set.
func (o *CodingCIJobEnv) GetSensitiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sensitive, true
}

// SetSensitive sets field value
func (o *CodingCIJobEnv) SetSensitive(v bool) {
	o.Sensitive = v
}

// GetValue returns the Value field value
func (o *CodingCIJobEnv) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *CodingCIJobEnv) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *CodingCIJobEnv) SetValue(v string) {
	o.Value = v
}

func (o CodingCIJobEnv) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CodingCIJobEnv) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Name"] = o.Name
	toSerialize["Sensitive"] = o.Sensitive
	toSerialize["Value"] = o.Value
	return toSerialize, nil
}

func (o *CodingCIJobEnv) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Name",
		"Sensitive",
		"Value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCodingCIJobEnv := _CodingCIJobEnv{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCodingCIJobEnv)

	if err != nil {
		return err
	}

	*o = CodingCIJobEnv(varCodingCIJobEnv)

	return err
}

type NullableCodingCIJobEnv struct {
	value *CodingCIJobEnv
	isSet bool
}

func (v NullableCodingCIJobEnv) Get() *CodingCIJobEnv {
	return v.value
}

func (v *NullableCodingCIJobEnv) Set(val *CodingCIJobEnv) {
	v.value = val
	v.isSet = true
}

func (v NullableCodingCIJobEnv) IsSet() bool {
	return v.isSet
}

func (v *NullableCodingCIJobEnv) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCodingCIJobEnv(val *CodingCIJobEnv) *NullableCodingCIJobEnv {
	return &NullableCodingCIJobEnv{value: val, isSet: true}
}

func (v NullableCodingCIJobEnv) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCodingCIJobEnv) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


