/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DescribeIssueListRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DescribeIssueListRequest{}

// DescribeIssueListRequest struct for DescribeIssueListRequest
type DescribeIssueListRequest struct {
	// 筛选条件列表
	Conditions []IssueCondition `json:"Conditions,omitempty"`
	// 事项类型  ALL - 全部事项  DEFECT - 缺陷  REQUIREMENT - 需求  MISSION - 任务  EPIC - 史诗
	IssueType string `json:"IssueType"`
	// 限制数目，默认 20
	Limit *int64 `json:"Limit,omitempty"`
	// 偏移量，默认 0
	Offset *int64 `json:"Offset,omitempty"`
	// 项目名称
	ProjectName string `json:"ProjectName"`
	// 排序字段，默认：CODE  可选值：STATUS, CREATED_AT, PRIORITY, UPDATED_AT, DUE_DATE, CODE, JOIN_ITERATION_AT, STATUS_TYPE, ASSIGNEE, PROJECT_ID, ISSUE_STATUS_ID, ISSUE_ITERATION_SORT, ISSUE_ROADMAP_SORT, PARENT_ID, COMPLETED_AT
	SortKey *string `json:"SortKey,omitempty"`
	// 排序方式  DESC - 倒序（默认值）  ASC - 正序
	SortValue *string `json:"SortValue,omitempty"`
}

type _DescribeIssueListRequest DescribeIssueListRequest

// NewDescribeIssueListRequest instantiates a new DescribeIssueListRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeIssueListRequest(issueType string, projectName string) *DescribeIssueListRequest {
	this := DescribeIssueListRequest{}
	this.IssueType = issueType
	this.ProjectName = projectName
	return &this
}

// NewDescribeIssueListRequestWithDefaults instantiates a new DescribeIssueListRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeIssueListRequestWithDefaults() *DescribeIssueListRequest {
	this := DescribeIssueListRequest{}
	return &this
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *DescribeIssueListRequest) GetConditions() []IssueCondition {
	if o == nil || utils.IsNil(o.Conditions) {
		var ret []IssueCondition
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeIssueListRequest) GetConditionsOk() ([]IssueCondition, bool) {
	if o == nil || utils.IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *DescribeIssueListRequest) HasConditions() bool {
	if o != nil && !utils.IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []IssueCondition and assigns it to the Conditions field.
func (o *DescribeIssueListRequest) SetConditions(v []IssueCondition) {
	o.Conditions = v
}

// GetIssueType returns the IssueType field value
func (o *DescribeIssueListRequest) GetIssueType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IssueType
}

// GetIssueTypeOk returns a tuple with the IssueType field value
// and a boolean to check if the value has been set.
func (o *DescribeIssueListRequest) GetIssueTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssueType, true
}

// SetIssueType sets field value
func (o *DescribeIssueListRequest) SetIssueType(v string) {
	o.IssueType = v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *DescribeIssueListRequest) GetLimit() int64 {
	if o == nil || utils.IsNil(o.Limit) {
		var ret int64
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeIssueListRequest) GetLimitOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *DescribeIssueListRequest) HasLimit() bool {
	if o != nil && !utils.IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int64 and assigns it to the Limit field.
func (o *DescribeIssueListRequest) SetLimit(v int64) {
	o.Limit = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *DescribeIssueListRequest) GetOffset() int64 {
	if o == nil || utils.IsNil(o.Offset) {
		var ret int64
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeIssueListRequest) GetOffsetOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *DescribeIssueListRequest) HasOffset() bool {
	if o != nil && !utils.IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int64 and assigns it to the Offset field.
func (o *DescribeIssueListRequest) SetOffset(v int64) {
	o.Offset = &v
}

// GetProjectName returns the ProjectName field value
func (o *DescribeIssueListRequest) GetProjectName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value
// and a boolean to check if the value has been set.
func (o *DescribeIssueListRequest) GetProjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectName, true
}

// SetProjectName sets field value
func (o *DescribeIssueListRequest) SetProjectName(v string) {
	o.ProjectName = v
}

// GetSortKey returns the SortKey field value if set, zero value otherwise.
func (o *DescribeIssueListRequest) GetSortKey() string {
	if o == nil || utils.IsNil(o.SortKey) {
		var ret string
		return ret
	}
	return *o.SortKey
}

// GetSortKeyOk returns a tuple with the SortKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeIssueListRequest) GetSortKeyOk() (*string, bool) {
	if o == nil || utils.IsNil(o.SortKey) {
		return nil, false
	}
	return o.SortKey, true
}

// HasSortKey returns a boolean if a field has been set.
func (o *DescribeIssueListRequest) HasSortKey() bool {
	if o != nil && !utils.IsNil(o.SortKey) {
		return true
	}

	return false
}

// SetSortKey gets a reference to the given string and assigns it to the SortKey field.
func (o *DescribeIssueListRequest) SetSortKey(v string) {
	o.SortKey = &v
}

// GetSortValue returns the SortValue field value if set, zero value otherwise.
func (o *DescribeIssueListRequest) GetSortValue() string {
	if o == nil || utils.IsNil(o.SortValue) {
		var ret string
		return ret
	}
	return *o.SortValue
}

// GetSortValueOk returns a tuple with the SortValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeIssueListRequest) GetSortValueOk() (*string, bool) {
	if o == nil || utils.IsNil(o.SortValue) {
		return nil, false
	}
	return o.SortValue, true
}

// HasSortValue returns a boolean if a field has been set.
func (o *DescribeIssueListRequest) HasSortValue() bool {
	if o != nil && !utils.IsNil(o.SortValue) {
		return true
	}

	return false
}

// SetSortValue gets a reference to the given string and assigns it to the SortValue field.
func (o *DescribeIssueListRequest) SetSortValue(v string) {
	o.SortValue = &v
}

func (o DescribeIssueListRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeIssueListRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Conditions) {
		toSerialize["Conditions"] = o.Conditions
	}
	toSerialize["IssueType"] = o.IssueType
	if !utils.IsNil(o.Limit) {
		toSerialize["Limit"] = o.Limit
	}
	if !utils.IsNil(o.Offset) {
		toSerialize["Offset"] = o.Offset
	}
	toSerialize["ProjectName"] = o.ProjectName
	if !utils.IsNil(o.SortKey) {
		toSerialize["SortKey"] = o.SortKey
	}
	if !utils.IsNil(o.SortValue) {
		toSerialize["SortValue"] = o.SortValue
	}
	return toSerialize, nil
}

func (o *DescribeIssueListRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"IssueType",
		"ProjectName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescribeIssueListRequest := _DescribeIssueListRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDescribeIssueListRequest)

	if err != nil {
		return err
	}

	*o = DescribeIssueListRequest(varDescribeIssueListRequest)

	return err
}

type NullableDescribeIssueListRequest struct {
	value *DescribeIssueListRequest
	isSet bool
}

func (v NullableDescribeIssueListRequest) Get() *DescribeIssueListRequest {
	return v.value
}

func (v *NullableDescribeIssueListRequest) Set(val *DescribeIssueListRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeIssueListRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeIssueListRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeIssueListRequest(val *DescribeIssueListRequest) *NullableDescribeIssueListRequest {
	return &NullableDescribeIssueListRequest{value: val, isSet: true}
}

func (v NullableDescribeIssueListRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeIssueListRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


