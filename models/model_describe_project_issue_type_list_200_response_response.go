/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DescribeProjectIssueTypeList200ResponseResponse type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DescribeProjectIssueTypeList200ResponseResponse{}

// DescribeProjectIssueTypeList200ResponseResponse 公共返回体
type DescribeProjectIssueTypeList200ResponseResponse struct {
	// 事项类型列表
	IssueTypes []IssueTypeDetailWithSplit `json:"IssueTypes,omitempty"`
	// 请求id
	RequestId *string `json:"RequestId,omitempty"`
}

// NewDescribeProjectIssueTypeList200ResponseResponse instantiates a new DescribeProjectIssueTypeList200ResponseResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeProjectIssueTypeList200ResponseResponse() *DescribeProjectIssueTypeList200ResponseResponse {
	this := DescribeProjectIssueTypeList200ResponseResponse{}
	var requestId string = "xxxxx"
	this.RequestId = &requestId
	return &this
}

// NewDescribeProjectIssueTypeList200ResponseResponseWithDefaults instantiates a new DescribeProjectIssueTypeList200ResponseResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeProjectIssueTypeList200ResponseResponseWithDefaults() *DescribeProjectIssueTypeList200ResponseResponse {
	this := DescribeProjectIssueTypeList200ResponseResponse{}
	var requestId string = "xxxxx"
	this.RequestId = &requestId
	return &this
}

// GetIssueTypes returns the IssueTypes field value if set, zero value otherwise.
func (o *DescribeProjectIssueTypeList200ResponseResponse) GetIssueTypes() []IssueTypeDetailWithSplit {
	if o == nil || utils.IsNil(o.IssueTypes) {
		var ret []IssueTypeDetailWithSplit
		return ret
	}
	return o.IssueTypes
}

// GetIssueTypesOk returns a tuple with the IssueTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeProjectIssueTypeList200ResponseResponse) GetIssueTypesOk() ([]IssueTypeDetailWithSplit, bool) {
	if o == nil || utils.IsNil(o.IssueTypes) {
		return nil, false
	}
	return o.IssueTypes, true
}

// HasIssueTypes returns a boolean if a field has been set.
func (o *DescribeProjectIssueTypeList200ResponseResponse) HasIssueTypes() bool {
	if o != nil && !utils.IsNil(o.IssueTypes) {
		return true
	}

	return false
}

// SetIssueTypes gets a reference to the given []IssueTypeDetailWithSplit and assigns it to the IssueTypes field.
func (o *DescribeProjectIssueTypeList200ResponseResponse) SetIssueTypes(v []IssueTypeDetailWithSplit) {
	o.IssueTypes = v
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *DescribeProjectIssueTypeList200ResponseResponse) GetRequestId() string {
	if o == nil || utils.IsNil(o.RequestId) {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeProjectIssueTypeList200ResponseResponse) GetRequestIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.RequestId) {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *DescribeProjectIssueTypeList200ResponseResponse) HasRequestId() bool {
	if o != nil && !utils.IsNil(o.RequestId) {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *DescribeProjectIssueTypeList200ResponseResponse) SetRequestId(v string) {
	o.RequestId = &v
}

func (o DescribeProjectIssueTypeList200ResponseResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeProjectIssueTypeList200ResponseResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.IssueTypes) {
		toSerialize["IssueTypes"] = o.IssueTypes
	}
	if !utils.IsNil(o.RequestId) {
		toSerialize["RequestId"] = o.RequestId
	}
	return toSerialize, nil
}

type NullableDescribeProjectIssueTypeList200ResponseResponse struct {
	value *DescribeProjectIssueTypeList200ResponseResponse
	isSet bool
}

func (v NullableDescribeProjectIssueTypeList200ResponseResponse) Get() *DescribeProjectIssueTypeList200ResponseResponse {
	return v.value
}

func (v *NullableDescribeProjectIssueTypeList200ResponseResponse) Set(val *DescribeProjectIssueTypeList200ResponseResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeProjectIssueTypeList200ResponseResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeProjectIssueTypeList200ResponseResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeProjectIssueTypeList200ResponseResponse(val *DescribeProjectIssueTypeList200ResponseResponse) *NullableDescribeProjectIssueTypeList200ResponseResponse {
	return &NullableDescribeProjectIssueTypeList200ResponseResponse{value: val, isSet: true}
}

func (v NullableDescribeProjectIssueTypeList200ResponseResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeProjectIssueTypeList200ResponseResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


