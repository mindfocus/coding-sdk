/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the ScanInfo type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ScanInfo{}

// ScanInfo 代码扫描信息
type ScanInfo struct {
	// 分支
	Branch *string `json:"Branch,omitempty"`
	// 构建 id
	CIJob *int32 `json:"CIJob,omitempty"`
	// 仓库 id
	DepotId *int32 `json:"DepotId,omitempty"`
	// 仓库名称
	DepotName *string `json:"DepotName,omitempty"`
	// 是否增量扫描
	IncrScan *bool `json:"IncrScan,omitempty"`
	// 项目 id
	ProjectId *int32 `json:"ProjectId,omitempty"`
	// 项目名称
	ProjectName *string `json:"ProjectName,omitempty"`
	// 扫描任务id
	ScanId *int32 `json:"ScanId,omitempty"`
	// 扫描任务名称
	ScanName *string `json:"ScanName,omitempty"`
	// 扫描方案
	ScanSchemeName *string `json:"ScanSchemeName,omitempty"`
	// Sha 值
	Sha *string `json:"Sha,omitempty"`
	// 状态
	Status *string `json:"Status,omitempty"`
}

// NewScanInfo instantiates a new ScanInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScanInfo() *ScanInfo {
	this := ScanInfo{}
	var branch string = ""
	this.Branch = &branch
	var depotName string = ""
	this.DepotName = &depotName
	var incrScan bool = false
	this.IncrScan = &incrScan
	var projectName string = ""
	this.ProjectName = &projectName
	var scanName string = ""
	this.ScanName = &scanName
	var scanSchemeName string = ""
	this.ScanSchemeName = &scanSchemeName
	var sha string = ""
	this.Sha = &sha
	var status string = ""
	this.Status = &status
	return &this
}

// NewScanInfoWithDefaults instantiates a new ScanInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScanInfoWithDefaults() *ScanInfo {
	this := ScanInfo{}
	var branch string = ""
	this.Branch = &branch
	var depotName string = ""
	this.DepotName = &depotName
	var incrScan bool = false
	this.IncrScan = &incrScan
	var projectName string = ""
	this.ProjectName = &projectName
	var scanName string = ""
	this.ScanName = &scanName
	var scanSchemeName string = ""
	this.ScanSchemeName = &scanSchemeName
	var sha string = ""
	this.Sha = &sha
	var status string = ""
	this.Status = &status
	return &this
}

// GetBranch returns the Branch field value if set, zero value otherwise.
func (o *ScanInfo) GetBranch() string {
	if o == nil || utils.IsNil(o.Branch) {
		var ret string
		return ret
	}
	return *o.Branch
}

// GetBranchOk returns a tuple with the Branch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanInfo) GetBranchOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Branch) {
		return nil, false
	}
	return o.Branch, true
}

// HasBranch returns a boolean if a field has been set.
func (o *ScanInfo) HasBranch() bool {
	if o != nil && !utils.IsNil(o.Branch) {
		return true
	}

	return false
}

// SetBranch gets a reference to the given string and assigns it to the Branch field.
func (o *ScanInfo) SetBranch(v string) {
	o.Branch = &v
}

// GetCIJob returns the CIJob field value if set, zero value otherwise.
func (o *ScanInfo) GetCIJob() int32 {
	if o == nil || utils.IsNil(o.CIJob) {
		var ret int32
		return ret
	}
	return *o.CIJob
}

// GetCIJobOk returns a tuple with the CIJob field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanInfo) GetCIJobOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.CIJob) {
		return nil, false
	}
	return o.CIJob, true
}

// HasCIJob returns a boolean if a field has been set.
func (o *ScanInfo) HasCIJob() bool {
	if o != nil && !utils.IsNil(o.CIJob) {
		return true
	}

	return false
}

// SetCIJob gets a reference to the given int32 and assigns it to the CIJob field.
func (o *ScanInfo) SetCIJob(v int32) {
	o.CIJob = &v
}

// GetDepotId returns the DepotId field value if set, zero value otherwise.
func (o *ScanInfo) GetDepotId() int32 {
	if o == nil || utils.IsNil(o.DepotId) {
		var ret int32
		return ret
	}
	return *o.DepotId
}

// GetDepotIdOk returns a tuple with the DepotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanInfo) GetDepotIdOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.DepotId) {
		return nil, false
	}
	return o.DepotId, true
}

// HasDepotId returns a boolean if a field has been set.
func (o *ScanInfo) HasDepotId() bool {
	if o != nil && !utils.IsNil(o.DepotId) {
		return true
	}

	return false
}

// SetDepotId gets a reference to the given int32 and assigns it to the DepotId field.
func (o *ScanInfo) SetDepotId(v int32) {
	o.DepotId = &v
}

// GetDepotName returns the DepotName field value if set, zero value otherwise.
func (o *ScanInfo) GetDepotName() string {
	if o == nil || utils.IsNil(o.DepotName) {
		var ret string
		return ret
	}
	return *o.DepotName
}

// GetDepotNameOk returns a tuple with the DepotName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanInfo) GetDepotNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.DepotName) {
		return nil, false
	}
	return o.DepotName, true
}

// HasDepotName returns a boolean if a field has been set.
func (o *ScanInfo) HasDepotName() bool {
	if o != nil && !utils.IsNil(o.DepotName) {
		return true
	}

	return false
}

// SetDepotName gets a reference to the given string and assigns it to the DepotName field.
func (o *ScanInfo) SetDepotName(v string) {
	o.DepotName = &v
}

// GetIncrScan returns the IncrScan field value if set, zero value otherwise.
func (o *ScanInfo) GetIncrScan() bool {
	if o == nil || utils.IsNil(o.IncrScan) {
		var ret bool
		return ret
	}
	return *o.IncrScan
}

// GetIncrScanOk returns a tuple with the IncrScan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanInfo) GetIncrScanOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IncrScan) {
		return nil, false
	}
	return o.IncrScan, true
}

// HasIncrScan returns a boolean if a field has been set.
func (o *ScanInfo) HasIncrScan() bool {
	if o != nil && !utils.IsNil(o.IncrScan) {
		return true
	}

	return false
}

// SetIncrScan gets a reference to the given bool and assigns it to the IncrScan field.
func (o *ScanInfo) SetIncrScan(v bool) {
	o.IncrScan = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *ScanInfo) GetProjectId() int32 {
	if o == nil || utils.IsNil(o.ProjectId) {
		var ret int32
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanInfo) GetProjectIdOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *ScanInfo) HasProjectId() bool {
	if o != nil && !utils.IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given int32 and assigns it to the ProjectId field.
func (o *ScanInfo) SetProjectId(v int32) {
	o.ProjectId = &v
}

// GetProjectName returns the ProjectName field value if set, zero value otherwise.
func (o *ScanInfo) GetProjectName() string {
	if o == nil || utils.IsNil(o.ProjectName) {
		var ret string
		return ret
	}
	return *o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanInfo) GetProjectNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ProjectName) {
		return nil, false
	}
	return o.ProjectName, true
}

// HasProjectName returns a boolean if a field has been set.
func (o *ScanInfo) HasProjectName() bool {
	if o != nil && !utils.IsNil(o.ProjectName) {
		return true
	}

	return false
}

// SetProjectName gets a reference to the given string and assigns it to the ProjectName field.
func (o *ScanInfo) SetProjectName(v string) {
	o.ProjectName = &v
}

// GetScanId returns the ScanId field value if set, zero value otherwise.
func (o *ScanInfo) GetScanId() int32 {
	if o == nil || utils.IsNil(o.ScanId) {
		var ret int32
		return ret
	}
	return *o.ScanId
}

// GetScanIdOk returns a tuple with the ScanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanInfo) GetScanIdOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.ScanId) {
		return nil, false
	}
	return o.ScanId, true
}

// HasScanId returns a boolean if a field has been set.
func (o *ScanInfo) HasScanId() bool {
	if o != nil && !utils.IsNil(o.ScanId) {
		return true
	}

	return false
}

// SetScanId gets a reference to the given int32 and assigns it to the ScanId field.
func (o *ScanInfo) SetScanId(v int32) {
	o.ScanId = &v
}

// GetScanName returns the ScanName field value if set, zero value otherwise.
func (o *ScanInfo) GetScanName() string {
	if o == nil || utils.IsNil(o.ScanName) {
		var ret string
		return ret
	}
	return *o.ScanName
}

// GetScanNameOk returns a tuple with the ScanName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanInfo) GetScanNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ScanName) {
		return nil, false
	}
	return o.ScanName, true
}

// HasScanName returns a boolean if a field has been set.
func (o *ScanInfo) HasScanName() bool {
	if o != nil && !utils.IsNil(o.ScanName) {
		return true
	}

	return false
}

// SetScanName gets a reference to the given string and assigns it to the ScanName field.
func (o *ScanInfo) SetScanName(v string) {
	o.ScanName = &v
}

// GetScanSchemeName returns the ScanSchemeName field value if set, zero value otherwise.
func (o *ScanInfo) GetScanSchemeName() string {
	if o == nil || utils.IsNil(o.ScanSchemeName) {
		var ret string
		return ret
	}
	return *o.ScanSchemeName
}

// GetScanSchemeNameOk returns a tuple with the ScanSchemeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanInfo) GetScanSchemeNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ScanSchemeName) {
		return nil, false
	}
	return o.ScanSchemeName, true
}

// HasScanSchemeName returns a boolean if a field has been set.
func (o *ScanInfo) HasScanSchemeName() bool {
	if o != nil && !utils.IsNil(o.ScanSchemeName) {
		return true
	}

	return false
}

// SetScanSchemeName gets a reference to the given string and assigns it to the ScanSchemeName field.
func (o *ScanInfo) SetScanSchemeName(v string) {
	o.ScanSchemeName = &v
}

// GetSha returns the Sha field value if set, zero value otherwise.
func (o *ScanInfo) GetSha() string {
	if o == nil || utils.IsNil(o.Sha) {
		var ret string
		return ret
	}
	return *o.Sha
}

// GetShaOk returns a tuple with the Sha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanInfo) GetShaOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Sha) {
		return nil, false
	}
	return o.Sha, true
}

// HasSha returns a boolean if a field has been set.
func (o *ScanInfo) HasSha() bool {
	if o != nil && !utils.IsNil(o.Sha) {
		return true
	}

	return false
}

// SetSha gets a reference to the given string and assigns it to the Sha field.
func (o *ScanInfo) SetSha(v string) {
	o.Sha = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ScanInfo) GetStatus() string {
	if o == nil || utils.IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanInfo) GetStatusOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ScanInfo) HasStatus() bool {
	if o != nil && !utils.IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ScanInfo) SetStatus(v string) {
	o.Status = &v
}

func (o ScanInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScanInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Branch) {
		toSerialize["Branch"] = o.Branch
	}
	if !utils.IsNil(o.CIJob) {
		toSerialize["CIJob"] = o.CIJob
	}
	if !utils.IsNil(o.DepotId) {
		toSerialize["DepotId"] = o.DepotId
	}
	if !utils.IsNil(o.DepotName) {
		toSerialize["DepotName"] = o.DepotName
	}
	if !utils.IsNil(o.IncrScan) {
		toSerialize["IncrScan"] = o.IncrScan
	}
	if !utils.IsNil(o.ProjectId) {
		toSerialize["ProjectId"] = o.ProjectId
	}
	if !utils.IsNil(o.ProjectName) {
		toSerialize["ProjectName"] = o.ProjectName
	}
	if !utils.IsNil(o.ScanId) {
		toSerialize["ScanId"] = o.ScanId
	}
	if !utils.IsNil(o.ScanName) {
		toSerialize["ScanName"] = o.ScanName
	}
	if !utils.IsNil(o.ScanSchemeName) {
		toSerialize["ScanSchemeName"] = o.ScanSchemeName
	}
	if !utils.IsNil(o.Sha) {
		toSerialize["Sha"] = o.Sha
	}
	if !utils.IsNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	return toSerialize, nil
}

type NullableScanInfo struct {
	value *ScanInfo
	isSet bool
}

func (v NullableScanInfo) Get() *ScanInfo {
	return v.value
}

func (v *NullableScanInfo) Set(val *ScanInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableScanInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableScanInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScanInfo(val *ScanInfo) *NullableScanInfo {
	return &NullableScanInfo{value: val, isSet: true}
}

func (v NullableScanInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScanInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


