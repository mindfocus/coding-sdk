/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the TKEConfigForm type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &TKEConfigForm{}

// TKEConfigForm TKEConfigForm 结构
type TKEConfigForm struct {
	// TKE 集群 ID
	ClusterId string `json:"ClusterId"`
	// 将为选择的每个命名空间自动生成用于访问 CODING Docker 仓库的凭据（ImagePullSecrets）
	Namespaces []string `json:"Namespaces,omitempty"`
	// 是否允许持续部署管理集群已有资源（是：false；否：true）
	OnlySpinnakerManaged bool `json:"OnlySpinnakerManaged"`
	// TKE 地域
	Region string `json:"Region"`
}

type _TKEConfigForm TKEConfigForm

// NewTKEConfigForm instantiates a new TKEConfigForm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTKEConfigForm(clusterId string, onlySpinnakerManaged bool, region string) *TKEConfigForm {
	this := TKEConfigForm{}
	this.ClusterId = clusterId
	this.OnlySpinnakerManaged = onlySpinnakerManaged
	this.Region = region
	return &this
}

// NewTKEConfigFormWithDefaults instantiates a new TKEConfigForm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTKEConfigFormWithDefaults() *TKEConfigForm {
	this := TKEConfigForm{}
	var clusterId string = ""
	this.ClusterId = clusterId
	var onlySpinnakerManaged bool = false
	this.OnlySpinnakerManaged = onlySpinnakerManaged
	var region string = ""
	this.Region = region
	return &this
}

// GetClusterId returns the ClusterId field value
func (o *TKEConfigForm) GetClusterId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value
// and a boolean to check if the value has been set.
func (o *TKEConfigForm) GetClusterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterId, true
}

// SetClusterId sets field value
func (o *TKEConfigForm) SetClusterId(v string) {
	o.ClusterId = v
}

// GetNamespaces returns the Namespaces field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TKEConfigForm) GetNamespaces() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Namespaces
}

// GetNamespacesOk returns a tuple with the Namespaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TKEConfigForm) GetNamespacesOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Namespaces) {
		return nil, false
	}
	return o.Namespaces, true
}

// HasNamespaces returns a boolean if a field has been set.
func (o *TKEConfigForm) HasNamespaces() bool {
	if o != nil && !utils.IsNil(o.Namespaces) {
		return true
	}

	return false
}

// SetNamespaces gets a reference to the given []string and assigns it to the Namespaces field.
func (o *TKEConfigForm) SetNamespaces(v []string) {
	o.Namespaces = v
}

// GetOnlySpinnakerManaged returns the OnlySpinnakerManaged field value
func (o *TKEConfigForm) GetOnlySpinnakerManaged() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.OnlySpinnakerManaged
}

// GetOnlySpinnakerManagedOk returns a tuple with the OnlySpinnakerManaged field value
// and a boolean to check if the value has been set.
func (o *TKEConfigForm) GetOnlySpinnakerManagedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OnlySpinnakerManaged, true
}

// SetOnlySpinnakerManaged sets field value
func (o *TKEConfigForm) SetOnlySpinnakerManaged(v bool) {
	o.OnlySpinnakerManaged = v
}

// GetRegion returns the Region field value
func (o *TKEConfigForm) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *TKEConfigForm) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *TKEConfigForm) SetRegion(v string) {
	o.Region = v
}

func (o TKEConfigForm) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TKEConfigForm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ClusterId"] = o.ClusterId
	if o.Namespaces != nil {
		toSerialize["Namespaces"] = o.Namespaces
	}
	toSerialize["OnlySpinnakerManaged"] = o.OnlySpinnakerManaged
	toSerialize["Region"] = o.Region
	return toSerialize, nil
}

func (o *TKEConfigForm) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ClusterId",
		"OnlySpinnakerManaged",
		"Region",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTKEConfigForm := _TKEConfigForm{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTKEConfigForm)

	if err != nil {
		return err
	}

	*o = TKEConfigForm(varTKEConfigForm)

	return err
}

type NullableTKEConfigForm struct {
	value *TKEConfigForm
	isSet bool
}

func (v NullableTKEConfigForm) Get() *TKEConfigForm {
	return v.value
}

func (v *NullableTKEConfigForm) Set(val *TKEConfigForm) {
	v.value = val
	v.isSet = true
}

func (v NullableTKEConfigForm) IsSet() bool {
	return v.isSet
}

func (v *NullableTKEConfigForm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTKEConfigForm(val *TKEConfigForm) *NullableTKEConfigForm {
	return &NullableTKEConfigForm{value: val, isSet: true}
}

func (v NullableTKEConfigForm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTKEConfigForm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


