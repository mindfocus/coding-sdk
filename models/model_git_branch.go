/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the GitBranch type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &GitBranch{}

// GitBranch 用于展示单个分支的信息
type GitBranch struct {
	// 分支名称
	BranchName *string `json:"BranchName,omitempty"`
	// 是否为默认分支
	IsDefaultBranch *bool `json:"IsDefaultBranch,omitempty"`
	// 是否为保护分支
	IsProtected *bool `json:"IsProtected,omitempty"`
	LastCommit *GitCommit `json:"LastCommit,omitempty"`
	// 分支的sha值
	Sha *string `json:"Sha,omitempty"`
	// 分支的备注信息
	Content *string `json:"Content,omitempty"`
}

// NewGitBranch instantiates a new GitBranch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitBranch() *GitBranch {
	this := GitBranch{}
	var branchName string = ""
	this.BranchName = &branchName
	var isDefaultBranch bool = false
	this.IsDefaultBranch = &isDefaultBranch
	var isProtected bool = false
	this.IsProtected = &isProtected
	var sha string = ""
	this.Sha = &sha
	var content string = ""
	this.Content = &content
	return &this
}

// NewGitBranchWithDefaults instantiates a new GitBranch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitBranchWithDefaults() *GitBranch {
	this := GitBranch{}
	var branchName string = ""
	this.BranchName = &branchName
	var isDefaultBranch bool = false
	this.IsDefaultBranch = &isDefaultBranch
	var isProtected bool = false
	this.IsProtected = &isProtected
	var sha string = ""
	this.Sha = &sha
	var content string = ""
	this.Content = &content
	return &this
}

// GetBranchName returns the BranchName field value if set, zero value otherwise.
func (o *GitBranch) GetBranchName() string {
	if o == nil || utils.IsNil(o.BranchName) {
		var ret string
		return ret
	}
	return *o.BranchName
}

// GetBranchNameOk returns a tuple with the BranchName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitBranch) GetBranchNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.BranchName) {
		return nil, false
	}
	return o.BranchName, true
}

// HasBranchName returns a boolean if a field has been set.
func (o *GitBranch) HasBranchName() bool {
	if o != nil && !utils.IsNil(o.BranchName) {
		return true
	}

	return false
}

// SetBranchName gets a reference to the given string and assigns it to the BranchName field.
func (o *GitBranch) SetBranchName(v string) {
	o.BranchName = &v
}

// GetIsDefaultBranch returns the IsDefaultBranch field value if set, zero value otherwise.
func (o *GitBranch) GetIsDefaultBranch() bool {
	if o == nil || utils.IsNil(o.IsDefaultBranch) {
		var ret bool
		return ret
	}
	return *o.IsDefaultBranch
}

// GetIsDefaultBranchOk returns a tuple with the IsDefaultBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitBranch) GetIsDefaultBranchOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IsDefaultBranch) {
		return nil, false
	}
	return o.IsDefaultBranch, true
}

// HasIsDefaultBranch returns a boolean if a field has been set.
func (o *GitBranch) HasIsDefaultBranch() bool {
	if o != nil && !utils.IsNil(o.IsDefaultBranch) {
		return true
	}

	return false
}

// SetIsDefaultBranch gets a reference to the given bool and assigns it to the IsDefaultBranch field.
func (o *GitBranch) SetIsDefaultBranch(v bool) {
	o.IsDefaultBranch = &v
}

// GetIsProtected returns the IsProtected field value if set, zero value otherwise.
func (o *GitBranch) GetIsProtected() bool {
	if o == nil || utils.IsNil(o.IsProtected) {
		var ret bool
		return ret
	}
	return *o.IsProtected
}

// GetIsProtectedOk returns a tuple with the IsProtected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitBranch) GetIsProtectedOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IsProtected) {
		return nil, false
	}
	return o.IsProtected, true
}

// HasIsProtected returns a boolean if a field has been set.
func (o *GitBranch) HasIsProtected() bool {
	if o != nil && !utils.IsNil(o.IsProtected) {
		return true
	}

	return false
}

// SetIsProtected gets a reference to the given bool and assigns it to the IsProtected field.
func (o *GitBranch) SetIsProtected(v bool) {
	o.IsProtected = &v
}

// GetLastCommit returns the LastCommit field value if set, zero value otherwise.
func (o *GitBranch) GetLastCommit() GitCommit {
	if o == nil || utils.IsNil(o.LastCommit) {
		var ret GitCommit
		return ret
	}
	return *o.LastCommit
}

// GetLastCommitOk returns a tuple with the LastCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitBranch) GetLastCommitOk() (*GitCommit, bool) {
	if o == nil || utils.IsNil(o.LastCommit) {
		return nil, false
	}
	return o.LastCommit, true
}

// HasLastCommit returns a boolean if a field has been set.
func (o *GitBranch) HasLastCommit() bool {
	if o != nil && !utils.IsNil(o.LastCommit) {
		return true
	}

	return false
}

// SetLastCommit gets a reference to the given GitCommit and assigns it to the LastCommit field.
func (o *GitBranch) SetLastCommit(v GitCommit) {
	o.LastCommit = &v
}

// GetSha returns the Sha field value if set, zero value otherwise.
func (o *GitBranch) GetSha() string {
	if o == nil || utils.IsNil(o.Sha) {
		var ret string
		return ret
	}
	return *o.Sha
}

// GetShaOk returns a tuple with the Sha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitBranch) GetShaOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Sha) {
		return nil, false
	}
	return o.Sha, true
}

// HasSha returns a boolean if a field has been set.
func (o *GitBranch) HasSha() bool {
	if o != nil && !utils.IsNil(o.Sha) {
		return true
	}

	return false
}

// SetSha gets a reference to the given string and assigns it to the Sha field.
func (o *GitBranch) SetSha(v string) {
	o.Sha = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *GitBranch) GetContent() string {
	if o == nil || utils.IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitBranch) GetContentOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *GitBranch) HasContent() bool {
	if o != nil && !utils.IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *GitBranch) SetContent(v string) {
	o.Content = &v
}

func (o GitBranch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitBranch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.BranchName) {
		toSerialize["BranchName"] = o.BranchName
	}
	if !utils.IsNil(o.IsDefaultBranch) {
		toSerialize["IsDefaultBranch"] = o.IsDefaultBranch
	}
	if !utils.IsNil(o.IsProtected) {
		toSerialize["IsProtected"] = o.IsProtected
	}
	if !utils.IsNil(o.LastCommit) {
		toSerialize["LastCommit"] = o.LastCommit
	}
	if !utils.IsNil(o.Sha) {
		toSerialize["Sha"] = o.Sha
	}
	if !utils.IsNil(o.Content) {
		toSerialize["Content"] = o.Content
	}
	return toSerialize, nil
}

type NullableGitBranch struct {
	value *GitBranch
	isSet bool
}

func (v NullableGitBranch) Get() *GitBranch {
	return v.value
}

func (v *NullableGitBranch) Set(val *GitBranch) {
	v.value = val
	v.isSet = true
}

func (v NullableGitBranch) IsSet() bool {
	return v.isSet
}

func (v *NullableGitBranch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitBranch(val *GitBranch) *NullableGitBranch {
	return &NullableGitBranch{value: val, isSet: true}
}

func (v NullableGitBranch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitBranch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


