/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DescribeCdPipelineConfigRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DescribeCdPipelineConfigRequest{}

// DescribeCdPipelineConfigRequest struct for DescribeCdPipelineConfigRequest
type DescribeCdPipelineConfigRequest struct {
	// CD 应用名
	Application string `json:"Application"`
	// 部署流程名称
	PipelineName string `json:"PipelineName"`
}

type _DescribeCdPipelineConfigRequest DescribeCdPipelineConfigRequest

// NewDescribeCdPipelineConfigRequest instantiates a new DescribeCdPipelineConfigRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeCdPipelineConfigRequest(application string, pipelineName string) *DescribeCdPipelineConfigRequest {
	this := DescribeCdPipelineConfigRequest{}
	this.Application = application
	this.PipelineName = pipelineName
	return &this
}

// NewDescribeCdPipelineConfigRequestWithDefaults instantiates a new DescribeCdPipelineConfigRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeCdPipelineConfigRequestWithDefaults() *DescribeCdPipelineConfigRequest {
	this := DescribeCdPipelineConfigRequest{}
	return &this
}

// GetApplication returns the Application field value
func (o *DescribeCdPipelineConfigRequest) GetApplication() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Application
}

// GetApplicationOk returns a tuple with the Application field value
// and a boolean to check if the value has been set.
func (o *DescribeCdPipelineConfigRequest) GetApplicationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Application, true
}

// SetApplication sets field value
func (o *DescribeCdPipelineConfigRequest) SetApplication(v string) {
	o.Application = v
}

// GetPipelineName returns the PipelineName field value
func (o *DescribeCdPipelineConfigRequest) GetPipelineName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PipelineName
}

// GetPipelineNameOk returns a tuple with the PipelineName field value
// and a boolean to check if the value has been set.
func (o *DescribeCdPipelineConfigRequest) GetPipelineNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PipelineName, true
}

// SetPipelineName sets field value
func (o *DescribeCdPipelineConfigRequest) SetPipelineName(v string) {
	o.PipelineName = v
}

func (o DescribeCdPipelineConfigRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeCdPipelineConfigRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Application"] = o.Application
	toSerialize["PipelineName"] = o.PipelineName
	return toSerialize, nil
}

func (o *DescribeCdPipelineConfigRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Application",
		"PipelineName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescribeCdPipelineConfigRequest := _DescribeCdPipelineConfigRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDescribeCdPipelineConfigRequest)

	if err != nil {
		return err
	}

	*o = DescribeCdPipelineConfigRequest(varDescribeCdPipelineConfigRequest)

	return err
}

type NullableDescribeCdPipelineConfigRequest struct {
	value *DescribeCdPipelineConfigRequest
	isSet bool
}

func (v NullableDescribeCdPipelineConfigRequest) Get() *DescribeCdPipelineConfigRequest {
	return v.value
}

func (v *NullableDescribeCdPipelineConfigRequest) Set(val *DescribeCdPipelineConfigRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeCdPipelineConfigRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeCdPipelineConfigRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeCdPipelineConfigRequest(val *DescribeCdPipelineConfigRequest) *NullableDescribeCdPipelineConfigRequest {
	return &NullableDescribeCdPipelineConfigRequest{value: val, isSet: true}
}

func (v NullableDescribeCdPipelineConfigRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeCdPipelineConfigRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


