/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the ArtifactsOpenApiRemoteRepoData type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ArtifactsOpenApiRemoteRepoData{}

// ArtifactsOpenApiRemoteRepoData struct for ArtifactsOpenApiRemoteRepoData
type ArtifactsOpenApiRemoteRepoData struct {
	// 项目名
	Project string `json:"Project"`
	// 仓库名
	Repository string `json:"Repository"`
}

type _ArtifactsOpenApiRemoteRepoData ArtifactsOpenApiRemoteRepoData

// NewArtifactsOpenApiRemoteRepoData instantiates a new ArtifactsOpenApiRemoteRepoData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArtifactsOpenApiRemoteRepoData(project string, repository string) *ArtifactsOpenApiRemoteRepoData {
	this := ArtifactsOpenApiRemoteRepoData{}
	this.Project = project
	this.Repository = repository
	return &this
}

// NewArtifactsOpenApiRemoteRepoDataWithDefaults instantiates a new ArtifactsOpenApiRemoteRepoData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArtifactsOpenApiRemoteRepoDataWithDefaults() *ArtifactsOpenApiRemoteRepoData {
	this := ArtifactsOpenApiRemoteRepoData{}
	var project string = ""
	this.Project = project
	var repository string = ""
	this.Repository = repository
	return &this
}

// GetProject returns the Project field value
func (o *ArtifactsOpenApiRemoteRepoData) GetProject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Project
}

// GetProjectOk returns a tuple with the Project field value
// and a boolean to check if the value has been set.
func (o *ArtifactsOpenApiRemoteRepoData) GetProjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Project, true
}

// SetProject sets field value
func (o *ArtifactsOpenApiRemoteRepoData) SetProject(v string) {
	o.Project = v
}

// GetRepository returns the Repository field value
func (o *ArtifactsOpenApiRemoteRepoData) GetRepository() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value
// and a boolean to check if the value has been set.
func (o *ArtifactsOpenApiRemoteRepoData) GetRepositoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Repository, true
}

// SetRepository sets field value
func (o *ArtifactsOpenApiRemoteRepoData) SetRepository(v string) {
	o.Repository = v
}

func (o ArtifactsOpenApiRemoteRepoData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArtifactsOpenApiRemoteRepoData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Project"] = o.Project
	toSerialize["Repository"] = o.Repository
	return toSerialize, nil
}

func (o *ArtifactsOpenApiRemoteRepoData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Project",
		"Repository",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varArtifactsOpenApiRemoteRepoData := _ArtifactsOpenApiRemoteRepoData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varArtifactsOpenApiRemoteRepoData)

	if err != nil {
		return err
	}

	*o = ArtifactsOpenApiRemoteRepoData(varArtifactsOpenApiRemoteRepoData)

	return err
}

type NullableArtifactsOpenApiRemoteRepoData struct {
	value *ArtifactsOpenApiRemoteRepoData
	isSet bool
}

func (v NullableArtifactsOpenApiRemoteRepoData) Get() *ArtifactsOpenApiRemoteRepoData {
	return v.value
}

func (v *NullableArtifactsOpenApiRemoteRepoData) Set(val *ArtifactsOpenApiRemoteRepoData) {
	v.value = val
	v.isSet = true
}

func (v NullableArtifactsOpenApiRemoteRepoData) IsSet() bool {
	return v.isSet
}

func (v *NullableArtifactsOpenApiRemoteRepoData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArtifactsOpenApiRemoteRepoData(val *ArtifactsOpenApiRemoteRepoData) *NullableArtifactsOpenApiRemoteRepoData {
	return &NullableArtifactsOpenApiRemoteRepoData{value: val, isSet: true}
}

func (v NullableArtifactsOpenApiRemoteRepoData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArtifactsOpenApiRemoteRepoData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


