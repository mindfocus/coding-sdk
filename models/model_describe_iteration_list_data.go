/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DescribeIterationListData type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DescribeIterationListData{}

// DescribeIterationListData 查询迭代列表数据结构
type DescribeIterationListData struct {
	// 迭代列表
	List []Iteration `json:"List,omitempty"`
	// 结果总条数
	TotalRow *int64 `json:"TotalRow,omitempty"`
}

// NewDescribeIterationListData instantiates a new DescribeIterationListData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeIterationListData() *DescribeIterationListData {
	this := DescribeIterationListData{}
	return &this
}

// NewDescribeIterationListDataWithDefaults instantiates a new DescribeIterationListData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeIterationListDataWithDefaults() *DescribeIterationListData {
	this := DescribeIterationListData{}
	return &this
}

// GetList returns the List field value if set, zero value otherwise.
func (o *DescribeIterationListData) GetList() []Iteration {
	if o == nil || utils.IsNil(o.List) {
		var ret []Iteration
		return ret
	}
	return o.List
}

// GetListOk returns a tuple with the List field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeIterationListData) GetListOk() ([]Iteration, bool) {
	if o == nil || utils.IsNil(o.List) {
		return nil, false
	}
	return o.List, true
}

// HasList returns a boolean if a field has been set.
func (o *DescribeIterationListData) HasList() bool {
	if o != nil && !utils.IsNil(o.List) {
		return true
	}

	return false
}

// SetList gets a reference to the given []Iteration and assigns it to the List field.
func (o *DescribeIterationListData) SetList(v []Iteration) {
	o.List = v
}

// GetTotalRow returns the TotalRow field value if set, zero value otherwise.
func (o *DescribeIterationListData) GetTotalRow() int64 {
	if o == nil || utils.IsNil(o.TotalRow) {
		var ret int64
		return ret
	}
	return *o.TotalRow
}

// GetTotalRowOk returns a tuple with the TotalRow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeIterationListData) GetTotalRowOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.TotalRow) {
		return nil, false
	}
	return o.TotalRow, true
}

// HasTotalRow returns a boolean if a field has been set.
func (o *DescribeIterationListData) HasTotalRow() bool {
	if o != nil && !utils.IsNil(o.TotalRow) {
		return true
	}

	return false
}

// SetTotalRow gets a reference to the given int64 and assigns it to the TotalRow field.
func (o *DescribeIterationListData) SetTotalRow(v int64) {
	o.TotalRow = &v
}

func (o DescribeIterationListData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeIterationListData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.List) {
		toSerialize["List"] = o.List
	}
	if !utils.IsNil(o.TotalRow) {
		toSerialize["TotalRow"] = o.TotalRow
	}
	return toSerialize, nil
}

type NullableDescribeIterationListData struct {
	value *DescribeIterationListData
	isSet bool
}

func (v NullableDescribeIterationListData) Get() *DescribeIterationListData {
	return v.value
}

func (v *NullableDescribeIterationListData) Set(val *DescribeIterationListData) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeIterationListData) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeIterationListData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeIterationListData(val *DescribeIterationListData) *NullableDescribeIterationListData {
	return &NullableDescribeIterationListData{value: val, isSet: true}
}

func (v NullableDescribeIterationListData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeIterationListData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


