/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the IssueListData type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &IssueListData{}

// IssueListData 事项列表信息
type IssueListData struct {
	// 处理人 Id
	AssigneeId *int64 `json:"AssigneeId,omitempty"`
	// 事项 Code
	Code *int64 `json:"Code,omitempty"`
	// 完成时间时间戳
	CompletedAt utils.NullableInt64 `json:"CompletedAt,omitempty"`
	// 创建时间时间戳
	CreatedAt utils.NullableInt64 `json:"CreatedAt,omitempty"`
	// 创建人 Id
	CreatorId *int64 `json:"CreatorId,omitempty"`
	// 自定义属性
	CustomFields []IssueCustomField `json:"CustomFields,omitempty"`
	// 描述
	Description *string `json:"Description,omitempty"`
	// 截止日期时间戳
	DueDate utils.NullableInt64 `json:"DueDate,omitempty"`
	// 状态 Id
	IssueStatusId *int64 `json:"IssueStatusId,omitempty"`
	// 状态名称
	IssueStatusName *string `json:"IssueStatusName,omitempty"`
	// 状态类型：  TODO｜PROCESSING｜COMPLETED
	IssueStatusType *string `json:"IssueStatusType,omitempty"`
	IssueTypeDetail *IssueTypeDetail `json:"IssueTypeDetail,omitempty"`
	// 事项类型 ID
	IssueTypeId utils.NullableInt64 `json:"IssueTypeId,omitempty"`
	Iteration *IterationSimple `json:"Iteration,omitempty"`
	// 迭代 Id
	IterationId *int64 `json:"IterationId,omitempty"`
	// 事项标签
	Labels []IssueProjectLabel `json:"Labels,omitempty"`
	// 名称
	Name *string `json:"Name,omitempty"`
	// 父事项code
	ParentCode utils.NullableInt64 `json:"ParentCode,omitempty"`
	// 父事项ID
	ParentId utils.NullableInt64 `json:"ParentId,omitempty"`
	// 父事项类型：  DEFECT - 缺陷，  REQUIREMENT - 需求，  MISSION - 任务，  EPIC - 史诗
	ParentType *string `json:"ParentType,omitempty"`
	// 优先级：  \"0\" - 低，  \"1\" - 中，  \"2\" - 高，  \"3\" - 紧急，  \"\" - 未指定
	Priority *string `json:"Priority,omitempty"`
	// 开始日期时间戳
	StartDate utils.NullableInt64 `json:"StartDate,omitempty"`
	// 故事点，例如：\"0.5\"、\"0\"，  空字符串 \"\" 表示未指定
	StoryPoint utils.NullableString `json:"StoryPoint,omitempty"`
	// 事项类型：  DEFECT - 缺陷，  REQUIREMENT - 需求，  MISSION - 任务，  EPIC - 史诗，  SUB_TASK - 子工作项
	Type *string `json:"Type,omitempty"`
	// 修改时间时间戳
	UpdatedAt utils.NullableInt64 `json:"UpdatedAt,omitempty"`
	// 工时（小时）
	WorkingHours *float32 `json:"WorkingHours,omitempty"`
	// 经办人列表
	Assignees []User `json:"Assignees,omitempty"`
}

// NewIssueListData instantiates a new IssueListData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueListData() *IssueListData {
	this := IssueListData{}
	var description string = ""
	this.Description = &description
	var issueStatusName string = ""
	this.IssueStatusName = &issueStatusName
	var issueStatusType string = ""
	this.IssueStatusType = &issueStatusType
	var name string = ""
	this.Name = &name
	var parentType string = ""
	this.ParentType = &parentType
	var priority string = ""
	this.Priority = &priority
	var storyPoint string = ""
	this.StoryPoint = *utils.NewNullableString(&storyPoint)
	var type_ string = ""
	this.Type = &type_
	return &this
}

// NewIssueListDataWithDefaults instantiates a new IssueListData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueListDataWithDefaults() *IssueListData {
	this := IssueListData{}
	var description string = ""
	this.Description = &description
	var issueStatusName string = ""
	this.IssueStatusName = &issueStatusName
	var issueStatusType string = ""
	this.IssueStatusType = &issueStatusType
	var name string = ""
	this.Name = &name
	var parentType string = ""
	this.ParentType = &parentType
	var priority string = ""
	this.Priority = &priority
	var storyPoint string = ""
	this.StoryPoint = *utils.NewNullableString(&storyPoint)
	var type_ string = ""
	this.Type = &type_
	return &this
}

// GetAssigneeId returns the AssigneeId field value if set, zero value otherwise.
func (o *IssueListData) GetAssigneeId() int64 {
	if o == nil || utils.IsNil(o.AssigneeId) {
		var ret int64
		return ret
	}
	return *o.AssigneeId
}

// GetAssigneeIdOk returns a tuple with the AssigneeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueListData) GetAssigneeIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.AssigneeId) {
		return nil, false
	}
	return o.AssigneeId, true
}

// HasAssigneeId returns a boolean if a field has been set.
func (o *IssueListData) HasAssigneeId() bool {
	if o != nil && !utils.IsNil(o.AssigneeId) {
		return true
	}

	return false
}

// SetAssigneeId gets a reference to the given int64 and assigns it to the AssigneeId field.
func (o *IssueListData) SetAssigneeId(v int64) {
	o.AssigneeId = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *IssueListData) GetCode() int64 {
	if o == nil || utils.IsNil(o.Code) {
		var ret int64
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueListData) GetCodeOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *IssueListData) HasCode() bool {
	if o != nil && !utils.IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given int64 and assigns it to the Code field.
func (o *IssueListData) SetCode(v int64) {
	o.Code = &v
}

// GetCompletedAt returns the CompletedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssueListData) GetCompletedAt() int64 {
	if o == nil || utils.IsNil(o.CompletedAt.Get()) {
		var ret int64
		return ret
	}
	return *o.CompletedAt.Get()
}

// GetCompletedAtOk returns a tuple with the CompletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssueListData) GetCompletedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompletedAt.Get(), o.CompletedAt.IsSet()
}

// HasCompletedAt returns a boolean if a field has been set.
func (o *IssueListData) HasCompletedAt() bool {
	if o != nil && o.CompletedAt.IsSet() {
		return true
	}

	return false
}

// SetCompletedAt gets a reference to the given utils.NullableInt64 and assigns it to the CompletedAt field.
func (o *IssueListData) SetCompletedAt(v int64) {
	o.CompletedAt.Set(&v)
}
// SetCompletedAtNil sets the value for CompletedAt to be an explicit nil
func (o *IssueListData) SetCompletedAtNil() {
	o.CompletedAt.Set(nil)
}

// UnsetCompletedAt ensures that no value is present for CompletedAt, not even an explicit nil
func (o *IssueListData) UnsetCompletedAt() {
	o.CompletedAt.Unset()
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssueListData) GetCreatedAt() int64 {
	if o == nil || utils.IsNil(o.CreatedAt.Get()) {
		var ret int64
		return ret
	}
	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssueListData) GetCreatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *IssueListData) HasCreatedAt() bool {
	if o != nil && o.CreatedAt.IsSet() {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given utils.NullableInt64 and assigns it to the CreatedAt field.
func (o *IssueListData) SetCreatedAt(v int64) {
	o.CreatedAt.Set(&v)
}
// SetCreatedAtNil sets the value for CreatedAt to be an explicit nil
func (o *IssueListData) SetCreatedAtNil() {
	o.CreatedAt.Set(nil)
}

// UnsetCreatedAt ensures that no value is present for CreatedAt, not even an explicit nil
func (o *IssueListData) UnsetCreatedAt() {
	o.CreatedAt.Unset()
}

// GetCreatorId returns the CreatorId field value if set, zero value otherwise.
func (o *IssueListData) GetCreatorId() int64 {
	if o == nil || utils.IsNil(o.CreatorId) {
		var ret int64
		return ret
	}
	return *o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueListData) GetCreatorIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.CreatorId) {
		return nil, false
	}
	return o.CreatorId, true
}

// HasCreatorId returns a boolean if a field has been set.
func (o *IssueListData) HasCreatorId() bool {
	if o != nil && !utils.IsNil(o.CreatorId) {
		return true
	}

	return false
}

// SetCreatorId gets a reference to the given int64 and assigns it to the CreatorId field.
func (o *IssueListData) SetCreatorId(v int64) {
	o.CreatorId = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssueListData) GetCustomFields() []IssueCustomField {
	if o == nil {
		var ret []IssueCustomField
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssueListData) GetCustomFieldsOk() ([]IssueCustomField, bool) {
	if o == nil || utils.IsNil(o.CustomFields) {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *IssueListData) HasCustomFields() bool {
	if o != nil && !utils.IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given []IssueCustomField and assigns it to the CustomFields field.
func (o *IssueListData) SetCustomFields(v []IssueCustomField) {
	o.CustomFields = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *IssueListData) GetDescription() string {
	if o == nil || utils.IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueListData) GetDescriptionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *IssueListData) HasDescription() bool {
	if o != nil && !utils.IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *IssueListData) SetDescription(v string) {
	o.Description = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssueListData) GetDueDate() int64 {
	if o == nil || utils.IsNil(o.DueDate.Get()) {
		var ret int64
		return ret
	}
	return *o.DueDate.Get()
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssueListData) GetDueDateOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DueDate.Get(), o.DueDate.IsSet()
}

// HasDueDate returns a boolean if a field has been set.
func (o *IssueListData) HasDueDate() bool {
	if o != nil && o.DueDate.IsSet() {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given utils.NullableInt64 and assigns it to the DueDate field.
func (o *IssueListData) SetDueDate(v int64) {
	o.DueDate.Set(&v)
}
// SetDueDateNil sets the value for DueDate to be an explicit nil
func (o *IssueListData) SetDueDateNil() {
	o.DueDate.Set(nil)
}

// UnsetDueDate ensures that no value is present for DueDate, not even an explicit nil
func (o *IssueListData) UnsetDueDate() {
	o.DueDate.Unset()
}

// GetIssueStatusId returns the IssueStatusId field value if set, zero value otherwise.
func (o *IssueListData) GetIssueStatusId() int64 {
	if o == nil || utils.IsNil(o.IssueStatusId) {
		var ret int64
		return ret
	}
	return *o.IssueStatusId
}

// GetIssueStatusIdOk returns a tuple with the IssueStatusId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueListData) GetIssueStatusIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.IssueStatusId) {
		return nil, false
	}
	return o.IssueStatusId, true
}

// HasIssueStatusId returns a boolean if a field has been set.
func (o *IssueListData) HasIssueStatusId() bool {
	if o != nil && !utils.IsNil(o.IssueStatusId) {
		return true
	}

	return false
}

// SetIssueStatusId gets a reference to the given int64 and assigns it to the IssueStatusId field.
func (o *IssueListData) SetIssueStatusId(v int64) {
	o.IssueStatusId = &v
}

// GetIssueStatusName returns the IssueStatusName field value if set, zero value otherwise.
func (o *IssueListData) GetIssueStatusName() string {
	if o == nil || utils.IsNil(o.IssueStatusName) {
		var ret string
		return ret
	}
	return *o.IssueStatusName
}

// GetIssueStatusNameOk returns a tuple with the IssueStatusName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueListData) GetIssueStatusNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.IssueStatusName) {
		return nil, false
	}
	return o.IssueStatusName, true
}

// HasIssueStatusName returns a boolean if a field has been set.
func (o *IssueListData) HasIssueStatusName() bool {
	if o != nil && !utils.IsNil(o.IssueStatusName) {
		return true
	}

	return false
}

// SetIssueStatusName gets a reference to the given string and assigns it to the IssueStatusName field.
func (o *IssueListData) SetIssueStatusName(v string) {
	o.IssueStatusName = &v
}

// GetIssueStatusType returns the IssueStatusType field value if set, zero value otherwise.
func (o *IssueListData) GetIssueStatusType() string {
	if o == nil || utils.IsNil(o.IssueStatusType) {
		var ret string
		return ret
	}
	return *o.IssueStatusType
}

// GetIssueStatusTypeOk returns a tuple with the IssueStatusType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueListData) GetIssueStatusTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.IssueStatusType) {
		return nil, false
	}
	return o.IssueStatusType, true
}

// HasIssueStatusType returns a boolean if a field has been set.
func (o *IssueListData) HasIssueStatusType() bool {
	if o != nil && !utils.IsNil(o.IssueStatusType) {
		return true
	}

	return false
}

// SetIssueStatusType gets a reference to the given string and assigns it to the IssueStatusType field.
func (o *IssueListData) SetIssueStatusType(v string) {
	o.IssueStatusType = &v
}

// GetIssueTypeDetail returns the IssueTypeDetail field value if set, zero value otherwise.
func (o *IssueListData) GetIssueTypeDetail() IssueTypeDetail {
	if o == nil || utils.IsNil(o.IssueTypeDetail) {
		var ret IssueTypeDetail
		return ret
	}
	return *o.IssueTypeDetail
}

// GetIssueTypeDetailOk returns a tuple with the IssueTypeDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueListData) GetIssueTypeDetailOk() (*IssueTypeDetail, bool) {
	if o == nil || utils.IsNil(o.IssueTypeDetail) {
		return nil, false
	}
	return o.IssueTypeDetail, true
}

// HasIssueTypeDetail returns a boolean if a field has been set.
func (o *IssueListData) HasIssueTypeDetail() bool {
	if o != nil && !utils.IsNil(o.IssueTypeDetail) {
		return true
	}

	return false
}

// SetIssueTypeDetail gets a reference to the given IssueTypeDetail and assigns it to the IssueTypeDetail field.
func (o *IssueListData) SetIssueTypeDetail(v IssueTypeDetail) {
	o.IssueTypeDetail = &v
}

// GetIssueTypeId returns the IssueTypeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssueListData) GetIssueTypeId() int64 {
	if o == nil || utils.IsNil(o.IssueTypeId.Get()) {
		var ret int64
		return ret
	}
	return *o.IssueTypeId.Get()
}

// GetIssueTypeIdOk returns a tuple with the IssueTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssueListData) GetIssueTypeIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.IssueTypeId.Get(), o.IssueTypeId.IsSet()
}

// HasIssueTypeId returns a boolean if a field has been set.
func (o *IssueListData) HasIssueTypeId() bool {
	if o != nil && o.IssueTypeId.IsSet() {
		return true
	}

	return false
}

// SetIssueTypeId gets a reference to the given utils.NullableInt64 and assigns it to the IssueTypeId field.
func (o *IssueListData) SetIssueTypeId(v int64) {
	o.IssueTypeId.Set(&v)
}
// SetIssueTypeIdNil sets the value for IssueTypeId to be an explicit nil
func (o *IssueListData) SetIssueTypeIdNil() {
	o.IssueTypeId.Set(nil)
}

// UnsetIssueTypeId ensures that no value is present for IssueTypeId, not even an explicit nil
func (o *IssueListData) UnsetIssueTypeId() {
	o.IssueTypeId.Unset()
}

// GetIteration returns the Iteration field value if set, zero value otherwise.
func (o *IssueListData) GetIteration() IterationSimple {
	if o == nil || utils.IsNil(o.Iteration) {
		var ret IterationSimple
		return ret
	}
	return *o.Iteration
}

// GetIterationOk returns a tuple with the Iteration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueListData) GetIterationOk() (*IterationSimple, bool) {
	if o == nil || utils.IsNil(o.Iteration) {
		return nil, false
	}
	return o.Iteration, true
}

// HasIteration returns a boolean if a field has been set.
func (o *IssueListData) HasIteration() bool {
	if o != nil && !utils.IsNil(o.Iteration) {
		return true
	}

	return false
}

// SetIteration gets a reference to the given IterationSimple and assigns it to the Iteration field.
func (o *IssueListData) SetIteration(v IterationSimple) {
	o.Iteration = &v
}

// GetIterationId returns the IterationId field value if set, zero value otherwise.
func (o *IssueListData) GetIterationId() int64 {
	if o == nil || utils.IsNil(o.IterationId) {
		var ret int64
		return ret
	}
	return *o.IterationId
}

// GetIterationIdOk returns a tuple with the IterationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueListData) GetIterationIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.IterationId) {
		return nil, false
	}
	return o.IterationId, true
}

// HasIterationId returns a boolean if a field has been set.
func (o *IssueListData) HasIterationId() bool {
	if o != nil && !utils.IsNil(o.IterationId) {
		return true
	}

	return false
}

// SetIterationId gets a reference to the given int64 and assigns it to the IterationId field.
func (o *IssueListData) SetIterationId(v int64) {
	o.IterationId = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssueListData) GetLabels() []IssueProjectLabel {
	if o == nil {
		var ret []IssueProjectLabel
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssueListData) GetLabelsOk() ([]IssueProjectLabel, bool) {
	if o == nil || utils.IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *IssueListData) HasLabels() bool {
	if o != nil && !utils.IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []IssueProjectLabel and assigns it to the Labels field.
func (o *IssueListData) SetLabels(v []IssueProjectLabel) {
	o.Labels = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IssueListData) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueListData) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IssueListData) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IssueListData) SetName(v string) {
	o.Name = &v
}

// GetParentCode returns the ParentCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssueListData) GetParentCode() int64 {
	if o == nil || utils.IsNil(o.ParentCode.Get()) {
		var ret int64
		return ret
	}
	return *o.ParentCode.Get()
}

// GetParentCodeOk returns a tuple with the ParentCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssueListData) GetParentCodeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentCode.Get(), o.ParentCode.IsSet()
}

// HasParentCode returns a boolean if a field has been set.
func (o *IssueListData) HasParentCode() bool {
	if o != nil && o.ParentCode.IsSet() {
		return true
	}

	return false
}

// SetParentCode gets a reference to the given utils.NullableInt64 and assigns it to the ParentCode field.
func (o *IssueListData) SetParentCode(v int64) {
	o.ParentCode.Set(&v)
}
// SetParentCodeNil sets the value for ParentCode to be an explicit nil
func (o *IssueListData) SetParentCodeNil() {
	o.ParentCode.Set(nil)
}

// UnsetParentCode ensures that no value is present for ParentCode, not even an explicit nil
func (o *IssueListData) UnsetParentCode() {
	o.ParentCode.Unset()
}

// GetParentId returns the ParentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssueListData) GetParentId() int64 {
	if o == nil || utils.IsNil(o.ParentId.Get()) {
		var ret int64
		return ret
	}
	return *o.ParentId.Get()
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssueListData) GetParentIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentId.Get(), o.ParentId.IsSet()
}

// HasParentId returns a boolean if a field has been set.
func (o *IssueListData) HasParentId() bool {
	if o != nil && o.ParentId.IsSet() {
		return true
	}

	return false
}

// SetParentId gets a reference to the given utils.NullableInt64 and assigns it to the ParentId field.
func (o *IssueListData) SetParentId(v int64) {
	o.ParentId.Set(&v)
}
// SetParentIdNil sets the value for ParentId to be an explicit nil
func (o *IssueListData) SetParentIdNil() {
	o.ParentId.Set(nil)
}

// UnsetParentId ensures that no value is present for ParentId, not even an explicit nil
func (o *IssueListData) UnsetParentId() {
	o.ParentId.Unset()
}

// GetParentType returns the ParentType field value if set, zero value otherwise.
func (o *IssueListData) GetParentType() string {
	if o == nil || utils.IsNil(o.ParentType) {
		var ret string
		return ret
	}
	return *o.ParentType
}

// GetParentTypeOk returns a tuple with the ParentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueListData) GetParentTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ParentType) {
		return nil, false
	}
	return o.ParentType, true
}

// HasParentType returns a boolean if a field has been set.
func (o *IssueListData) HasParentType() bool {
	if o != nil && !utils.IsNil(o.ParentType) {
		return true
	}

	return false
}

// SetParentType gets a reference to the given string and assigns it to the ParentType field.
func (o *IssueListData) SetParentType(v string) {
	o.ParentType = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *IssueListData) GetPriority() string {
	if o == nil || utils.IsNil(o.Priority) {
		var ret string
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueListData) GetPriorityOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *IssueListData) HasPriority() bool {
	if o != nil && !utils.IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given string and assigns it to the Priority field.
func (o *IssueListData) SetPriority(v string) {
	o.Priority = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssueListData) GetStartDate() int64 {
	if o == nil || utils.IsNil(o.StartDate.Get()) {
		var ret int64
		return ret
	}
	return *o.StartDate.Get()
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssueListData) GetStartDateOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartDate.Get(), o.StartDate.IsSet()
}

// HasStartDate returns a boolean if a field has been set.
func (o *IssueListData) HasStartDate() bool {
	if o != nil && o.StartDate.IsSet() {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given utils.NullableInt64 and assigns it to the StartDate field.
func (o *IssueListData) SetStartDate(v int64) {
	o.StartDate.Set(&v)
}
// SetStartDateNil sets the value for StartDate to be an explicit nil
func (o *IssueListData) SetStartDateNil() {
	o.StartDate.Set(nil)
}

// UnsetStartDate ensures that no value is present for StartDate, not even an explicit nil
func (o *IssueListData) UnsetStartDate() {
	o.StartDate.Unset()
}

// GetStoryPoint returns the StoryPoint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssueListData) GetStoryPoint() string {
	if o == nil || utils.IsNil(o.StoryPoint.Get()) {
		var ret string
		return ret
	}
	return *o.StoryPoint.Get()
}

// GetStoryPointOk returns a tuple with the StoryPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssueListData) GetStoryPointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StoryPoint.Get(), o.StoryPoint.IsSet()
}

// HasStoryPoint returns a boolean if a field has been set.
func (o *IssueListData) HasStoryPoint() bool {
	if o != nil && o.StoryPoint.IsSet() {
		return true
	}

	return false
}

// SetStoryPoint gets a reference to the given utils.NullableString and assigns it to the StoryPoint field.
func (o *IssueListData) SetStoryPoint(v string) {
	o.StoryPoint.Set(&v)
}
// SetStoryPointNil sets the value for StoryPoint to be an explicit nil
func (o *IssueListData) SetStoryPointNil() {
	o.StoryPoint.Set(nil)
}

// UnsetStoryPoint ensures that no value is present for StoryPoint, not even an explicit nil
func (o *IssueListData) UnsetStoryPoint() {
	o.StoryPoint.Unset()
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IssueListData) GetType() string {
	if o == nil || utils.IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueListData) GetTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IssueListData) HasType() bool {
	if o != nil && !utils.IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *IssueListData) SetType(v string) {
	o.Type = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssueListData) GetUpdatedAt() int64 {
	if o == nil || utils.IsNil(o.UpdatedAt.Get()) {
		var ret int64
		return ret
	}
	return *o.UpdatedAt.Get()
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssueListData) GetUpdatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedAt.Get(), o.UpdatedAt.IsSet()
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *IssueListData) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt.IsSet() {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given utils.NullableInt64 and assigns it to the UpdatedAt field.
func (o *IssueListData) SetUpdatedAt(v int64) {
	o.UpdatedAt.Set(&v)
}
// SetUpdatedAtNil sets the value for UpdatedAt to be an explicit nil
func (o *IssueListData) SetUpdatedAtNil() {
	o.UpdatedAt.Set(nil)
}

// UnsetUpdatedAt ensures that no value is present for UpdatedAt, not even an explicit nil
func (o *IssueListData) UnsetUpdatedAt() {
	o.UpdatedAt.Unset()
}

// GetWorkingHours returns the WorkingHours field value if set, zero value otherwise.
func (o *IssueListData) GetWorkingHours() float32 {
	if o == nil || utils.IsNil(o.WorkingHours) {
		var ret float32
		return ret
	}
	return *o.WorkingHours
}

// GetWorkingHoursOk returns a tuple with the WorkingHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueListData) GetWorkingHoursOk() (*float32, bool) {
	if o == nil || utils.IsNil(o.WorkingHours) {
		return nil, false
	}
	return o.WorkingHours, true
}

// HasWorkingHours returns a boolean if a field has been set.
func (o *IssueListData) HasWorkingHours() bool {
	if o != nil && !utils.IsNil(o.WorkingHours) {
		return true
	}

	return false
}

// SetWorkingHours gets a reference to the given float32 and assigns it to the WorkingHours field.
func (o *IssueListData) SetWorkingHours(v float32) {
	o.WorkingHours = &v
}

// GetAssignees returns the Assignees field value if set, zero value otherwise.
func (o *IssueListData) GetAssignees() []User {
	if o == nil || utils.IsNil(o.Assignees) {
		var ret []User
		return ret
	}
	return o.Assignees
}

// GetAssigneesOk returns a tuple with the Assignees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueListData) GetAssigneesOk() ([]User, bool) {
	if o == nil || utils.IsNil(o.Assignees) {
		return nil, false
	}
	return o.Assignees, true
}

// HasAssignees returns a boolean if a field has been set.
func (o *IssueListData) HasAssignees() bool {
	if o != nil && !utils.IsNil(o.Assignees) {
		return true
	}

	return false
}

// SetAssignees gets a reference to the given []User and assigns it to the Assignees field.
func (o *IssueListData) SetAssignees(v []User) {
	o.Assignees = v
}

func (o IssueListData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IssueListData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.AssigneeId) {
		toSerialize["AssigneeId"] = o.AssigneeId
	}
	if !utils.IsNil(o.Code) {
		toSerialize["Code"] = o.Code
	}
	if o.CompletedAt.IsSet() {
		toSerialize["CompletedAt"] = o.CompletedAt.Get()
	}
	if o.CreatedAt.IsSet() {
		toSerialize["CreatedAt"] = o.CreatedAt.Get()
	}
	if !utils.IsNil(o.CreatorId) {
		toSerialize["CreatorId"] = o.CreatorId
	}
	if o.CustomFields != nil {
		toSerialize["CustomFields"] = o.CustomFields
	}
	if !utils.IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if o.DueDate.IsSet() {
		toSerialize["DueDate"] = o.DueDate.Get()
	}
	if !utils.IsNil(o.IssueStatusId) {
		toSerialize["IssueStatusId"] = o.IssueStatusId
	}
	if !utils.IsNil(o.IssueStatusName) {
		toSerialize["IssueStatusName"] = o.IssueStatusName
	}
	if !utils.IsNil(o.IssueStatusType) {
		toSerialize["IssueStatusType"] = o.IssueStatusType
	}
	if !utils.IsNil(o.IssueTypeDetail) {
		toSerialize["IssueTypeDetail"] = o.IssueTypeDetail
	}
	if o.IssueTypeId.IsSet() {
		toSerialize["IssueTypeId"] = o.IssueTypeId.Get()
	}
	if !utils.IsNil(o.Iteration) {
		toSerialize["Iteration"] = o.Iteration
	}
	if !utils.IsNil(o.IterationId) {
		toSerialize["IterationId"] = o.IterationId
	}
	if o.Labels != nil {
		toSerialize["Labels"] = o.Labels
	}
	if !utils.IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if o.ParentCode.IsSet() {
		toSerialize["ParentCode"] = o.ParentCode.Get()
	}
	if o.ParentId.IsSet() {
		toSerialize["ParentId"] = o.ParentId.Get()
	}
	if !utils.IsNil(o.ParentType) {
		toSerialize["ParentType"] = o.ParentType
	}
	if !utils.IsNil(o.Priority) {
		toSerialize["Priority"] = o.Priority
	}
	if o.StartDate.IsSet() {
		toSerialize["StartDate"] = o.StartDate.Get()
	}
	if o.StoryPoint.IsSet() {
		toSerialize["StoryPoint"] = o.StoryPoint.Get()
	}
	if !utils.IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	if o.UpdatedAt.IsSet() {
		toSerialize["UpdatedAt"] = o.UpdatedAt.Get()
	}
	if !utils.IsNil(o.WorkingHours) {
		toSerialize["WorkingHours"] = o.WorkingHours
	}
	if !utils.IsNil(o.Assignees) {
		toSerialize["Assignees"] = o.Assignees
	}
	return toSerialize, nil
}

type NullableIssueListData struct {
	value *IssueListData
	isSet bool
}

func (v NullableIssueListData) Get() *IssueListData {
	return v.value
}

func (v *NullableIssueListData) Set(val *IssueListData) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueListData) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueListData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueListData(val *IssueListData) *NullableIssueListData {
	return &NullableIssueListData{value: val, isSet: true}
}

func (v NullableIssueListData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueListData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


