/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the IssueRecordHourForm type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &IssueRecordHourForm{}

// IssueRecordHourForm 事项登记工时表单
type IssueRecordHourForm struct {
	// 剩余工时
	RemainingHour float32 `json:"RemainingHour"`
	// 使用工时
	SpendHour float32 `json:"SpendHour"`
	// 开始时间
	StartAt int64 `json:"StartAt"`
	// 工作描述
	WorkingDesc string `json:"WorkingDesc"`
}

type _IssueRecordHourForm IssueRecordHourForm

// NewIssueRecordHourForm instantiates a new IssueRecordHourForm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueRecordHourForm(remainingHour float32, spendHour float32, startAt int64, workingDesc string) *IssueRecordHourForm {
	this := IssueRecordHourForm{}
	this.RemainingHour = remainingHour
	this.SpendHour = spendHour
	this.StartAt = startAt
	this.WorkingDesc = workingDesc
	return &this
}

// NewIssueRecordHourFormWithDefaults instantiates a new IssueRecordHourForm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueRecordHourFormWithDefaults() *IssueRecordHourForm {
	this := IssueRecordHourForm{}
	var workingDesc string = ""
	this.WorkingDesc = workingDesc
	return &this
}

// GetRemainingHour returns the RemainingHour field value
func (o *IssueRecordHourForm) GetRemainingHour() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.RemainingHour
}

// GetRemainingHourOk returns a tuple with the RemainingHour field value
// and a boolean to check if the value has been set.
func (o *IssueRecordHourForm) GetRemainingHourOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemainingHour, true
}

// SetRemainingHour sets field value
func (o *IssueRecordHourForm) SetRemainingHour(v float32) {
	o.RemainingHour = v
}

// GetSpendHour returns the SpendHour field value
func (o *IssueRecordHourForm) GetSpendHour() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SpendHour
}

// GetSpendHourOk returns a tuple with the SpendHour field value
// and a boolean to check if the value has been set.
func (o *IssueRecordHourForm) GetSpendHourOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpendHour, true
}

// SetSpendHour sets field value
func (o *IssueRecordHourForm) SetSpendHour(v float32) {
	o.SpendHour = v
}

// GetStartAt returns the StartAt field value
func (o *IssueRecordHourForm) GetStartAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.StartAt
}

// GetStartAtOk returns a tuple with the StartAt field value
// and a boolean to check if the value has been set.
func (o *IssueRecordHourForm) GetStartAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartAt, true
}

// SetStartAt sets field value
func (o *IssueRecordHourForm) SetStartAt(v int64) {
	o.StartAt = v
}

// GetWorkingDesc returns the WorkingDesc field value
func (o *IssueRecordHourForm) GetWorkingDesc() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WorkingDesc
}

// GetWorkingDescOk returns a tuple with the WorkingDesc field value
// and a boolean to check if the value has been set.
func (o *IssueRecordHourForm) GetWorkingDescOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WorkingDesc, true
}

// SetWorkingDesc sets field value
func (o *IssueRecordHourForm) SetWorkingDesc(v string) {
	o.WorkingDesc = v
}

func (o IssueRecordHourForm) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IssueRecordHourForm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["RemainingHour"] = o.RemainingHour
	toSerialize["SpendHour"] = o.SpendHour
	toSerialize["StartAt"] = o.StartAt
	toSerialize["WorkingDesc"] = o.WorkingDesc
	return toSerialize, nil
}

func (o *IssueRecordHourForm) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"RemainingHour",
		"SpendHour",
		"StartAt",
		"WorkingDesc",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIssueRecordHourForm := _IssueRecordHourForm{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIssueRecordHourForm)

	if err != nil {
		return err
	}

	*o = IssueRecordHourForm(varIssueRecordHourForm)

	return err
}

type NullableIssueRecordHourForm struct {
	value *IssueRecordHourForm
	isSet bool
}

func (v NullableIssueRecordHourForm) Get() *IssueRecordHourForm {
	return v.value
}

func (v *NullableIssueRecordHourForm) Set(val *IssueRecordHourForm) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueRecordHourForm) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueRecordHourForm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueRecordHourForm(val *IssueRecordHourForm) *NullableIssueRecordHourForm {
	return &NullableIssueRecordHourForm{value: val, isSet: true}
}

func (v NullableIssueRecordHourForm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueRecordHourForm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


