/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the ResourceInfoOfPolicyScope type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ResourceInfoOfPolicyScope{}

// ResourceInfoOfPolicyScope 权限组可用资源范围的资源信息
type ResourceInfoOfPolicyScope struct {
	// 资源 ID
	ResourceId string `json:"ResourceId"`
	// 资源类型：例如 project
	ResourceType string `json:"ResourceType"`
}

type _ResourceInfoOfPolicyScope ResourceInfoOfPolicyScope

// NewResourceInfoOfPolicyScope instantiates a new ResourceInfoOfPolicyScope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceInfoOfPolicyScope(resourceId string, resourceType string) *ResourceInfoOfPolicyScope {
	this := ResourceInfoOfPolicyScope{}
	this.ResourceId = resourceId
	this.ResourceType = resourceType
	return &this
}

// NewResourceInfoOfPolicyScopeWithDefaults instantiates a new ResourceInfoOfPolicyScope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceInfoOfPolicyScopeWithDefaults() *ResourceInfoOfPolicyScope {
	this := ResourceInfoOfPolicyScope{}
	var resourceId string = ""
	this.ResourceId = resourceId
	var resourceType string = ""
	this.ResourceType = resourceType
	return &this
}

// GetResourceId returns the ResourceId field value
func (o *ResourceInfoOfPolicyScope) GetResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value
// and a boolean to check if the value has been set.
func (o *ResourceInfoOfPolicyScope) GetResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceId, true
}

// SetResourceId sets field value
func (o *ResourceInfoOfPolicyScope) SetResourceId(v string) {
	o.ResourceId = v
}

// GetResourceType returns the ResourceType field value
func (o *ResourceInfoOfPolicyScope) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *ResourceInfoOfPolicyScope) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *ResourceInfoOfPolicyScope) SetResourceType(v string) {
	o.ResourceType = v
}

func (o ResourceInfoOfPolicyScope) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceInfoOfPolicyScope) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ResourceId"] = o.ResourceId
	toSerialize["ResourceType"] = o.ResourceType
	return toSerialize, nil
}

func (o *ResourceInfoOfPolicyScope) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ResourceId",
		"ResourceType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceInfoOfPolicyScope := _ResourceInfoOfPolicyScope{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResourceInfoOfPolicyScope)

	if err != nil {
		return err
	}

	*o = ResourceInfoOfPolicyScope(varResourceInfoOfPolicyScope)

	return err
}

type NullableResourceInfoOfPolicyScope struct {
	value *ResourceInfoOfPolicyScope
	isSet bool
}

func (v NullableResourceInfoOfPolicyScope) Get() *ResourceInfoOfPolicyScope {
	return v.value
}

func (v *NullableResourceInfoOfPolicyScope) Set(val *ResourceInfoOfPolicyScope) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceInfoOfPolicyScope) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceInfoOfPolicyScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceInfoOfPolicyScope(val *ResourceInfoOfPolicyScope) *NullableResourceInfoOfPolicyScope {
	return &NullableResourceInfoOfPolicyScope{value: val, isSet: true}
}

func (v NullableResourceInfoOfPolicyScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceInfoOfPolicyScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


