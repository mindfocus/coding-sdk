/*
CODING OPEN API

  

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DescribeProjectDepotBranchesRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DescribeProjectDepotBranchesRequest{}

// DescribeProjectDepotBranchesRequest struct for DescribeProjectDepotBranchesRequest
type DescribeProjectDepotBranchesRequest struct {
	// 仓库类型
	DepotType string `json:"DepotType"`
	// 仓库 Id
	Id int32 `json:"Id"`
	// 项目 Id
	ProjectId int32 `json:"ProjectId"`
}

type _DescribeProjectDepotBranchesRequest DescribeProjectDepotBranchesRequest

// NewDescribeProjectDepotBranchesRequest instantiates a new DescribeProjectDepotBranchesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeProjectDepotBranchesRequest(depotType string, id int32, projectId int32) *DescribeProjectDepotBranchesRequest {
	this := DescribeProjectDepotBranchesRequest{}
	this.DepotType = depotType
	this.Id = id
	this.ProjectId = projectId
	return &this
}

// NewDescribeProjectDepotBranchesRequestWithDefaults instantiates a new DescribeProjectDepotBranchesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeProjectDepotBranchesRequestWithDefaults() *DescribeProjectDepotBranchesRequest {
	this := DescribeProjectDepotBranchesRequest{}
	return &this
}

// GetDepotType returns the DepotType field value
func (o *DescribeProjectDepotBranchesRequest) GetDepotType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DepotType
}

// GetDepotTypeOk returns a tuple with the DepotType field value
// and a boolean to check if the value has been set.
func (o *DescribeProjectDepotBranchesRequest) GetDepotTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepotType, true
}

// SetDepotType sets field value
func (o *DescribeProjectDepotBranchesRequest) SetDepotType(v string) {
	o.DepotType = v
}

// GetId returns the Id field value
func (o *DescribeProjectDepotBranchesRequest) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DescribeProjectDepotBranchesRequest) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DescribeProjectDepotBranchesRequest) SetId(v int32) {
	o.Id = v
}

// GetProjectId returns the ProjectId field value
func (o *DescribeProjectDepotBranchesRequest) GetProjectId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *DescribeProjectDepotBranchesRequest) GetProjectIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *DescribeProjectDepotBranchesRequest) SetProjectId(v int32) {
	o.ProjectId = v
}

func (o DescribeProjectDepotBranchesRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeProjectDepotBranchesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["DepotType"] = o.DepotType
	toSerialize["Id"] = o.Id
	toSerialize["ProjectId"] = o.ProjectId
	return toSerialize, nil
}

func (o *DescribeProjectDepotBranchesRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"DepotType",
		"Id",
		"ProjectId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescribeProjectDepotBranchesRequest := _DescribeProjectDepotBranchesRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDescribeProjectDepotBranchesRequest)

	if err != nil {
		return err
	}

	*o = DescribeProjectDepotBranchesRequest(varDescribeProjectDepotBranchesRequest)

	return err
}

type NullableDescribeProjectDepotBranchesRequest struct {
	value *DescribeProjectDepotBranchesRequest
	isSet bool
}

func (v NullableDescribeProjectDepotBranchesRequest) Get() *DescribeProjectDepotBranchesRequest {
	return v.value
}

func (v *NullableDescribeProjectDepotBranchesRequest) Set(val *DescribeProjectDepotBranchesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeProjectDepotBranchesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeProjectDepotBranchesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeProjectDepotBranchesRequest(val *DescribeProjectDepotBranchesRequest) *NullableDescribeProjectDepotBranchesRequest {
	return &NullableDescribeProjectDepotBranchesRequest{value: val, isSet: true}
}

func (v NullableDescribeProjectDepotBranchesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeProjectDepotBranchesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


