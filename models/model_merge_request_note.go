/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the MergeRequestNote type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &MergeRequestNote{}

// MergeRequestNote 合并请求评论
type MergeRequestNote struct {
	Author *CodingUser `json:"Author,omitempty"`
	// 合并请求中提交Id
	CommitSha utils.NullableString `json:"CommitSha,omitempty"`
	// 行评论的内容
	Content *string `json:"Content,omitempty"`
	// 行评论创建时间
	CreatedAt *int32 `json:"CreatedAt,omitempty"`
	// 行评论的Id
	Id *int32 `json:"Id,omitempty"`
	// diff信息中的行数
	Index utils.NullableInt32 `json:"Index,omitempty"`
	// 合并请求的Iid
	MergeId *int32 `json:"MergeId,omitempty"`
	// 子评论的父Id
	ParentId *int32 `json:"ParentId,omitempty"`
	// 改动文件的路径
	Path utils.NullableString `json:"Path,omitempty"`
	// 行评论更新时间
	UpdatedAt *int32 `json:"UpdatedAt,omitempty"`
}

// NewMergeRequestNote instantiates a new MergeRequestNote object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMergeRequestNote() *MergeRequestNote {
	this := MergeRequestNote{}
	var commitSha string = ""
	this.CommitSha = *utils.NewNullableString(&commitSha)
	var content string = ""
	this.Content = &content
	var path string = ""
	this.Path = *utils.NewNullableString(&path)
	return &this
}

// NewMergeRequestNoteWithDefaults instantiates a new MergeRequestNote object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMergeRequestNoteWithDefaults() *MergeRequestNote {
	this := MergeRequestNote{}
	var commitSha string = ""
	this.CommitSha = *utils.NewNullableString(&commitSha)
	var content string = ""
	this.Content = &content
	var path string = ""
	this.Path = *utils.NewNullableString(&path)
	return &this
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *MergeRequestNote) GetAuthor() CodingUser {
	if o == nil || utils.IsNil(o.Author) {
		var ret CodingUser
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRequestNote) GetAuthorOk() (*CodingUser, bool) {
	if o == nil || utils.IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *MergeRequestNote) HasAuthor() bool {
	if o != nil && !utils.IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given CodingUser and assigns it to the Author field.
func (o *MergeRequestNote) SetAuthor(v CodingUser) {
	o.Author = &v
}

// GetCommitSha returns the CommitSha field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MergeRequestNote) GetCommitSha() string {
	if o == nil || utils.IsNil(o.CommitSha.Get()) {
		var ret string
		return ret
	}
	return *o.CommitSha.Get()
}

// GetCommitShaOk returns a tuple with the CommitSha field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MergeRequestNote) GetCommitShaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CommitSha.Get(), o.CommitSha.IsSet()
}

// HasCommitSha returns a boolean if a field has been set.
func (o *MergeRequestNote) HasCommitSha() bool {
	if o != nil && o.CommitSha.IsSet() {
		return true
	}

	return false
}

// SetCommitSha gets a reference to the given utils.NullableString and assigns it to the CommitSha field.
func (o *MergeRequestNote) SetCommitSha(v string) {
	o.CommitSha.Set(&v)
}
// SetCommitShaNil sets the value for CommitSha to be an explicit nil
func (o *MergeRequestNote) SetCommitShaNil() {
	o.CommitSha.Set(nil)
}

// UnsetCommitSha ensures that no value is present for CommitSha, not even an explicit nil
func (o *MergeRequestNote) UnsetCommitSha() {
	o.CommitSha.Unset()
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *MergeRequestNote) GetContent() string {
	if o == nil || utils.IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRequestNote) GetContentOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *MergeRequestNote) HasContent() bool {
	if o != nil && !utils.IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *MergeRequestNote) SetContent(v string) {
	o.Content = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *MergeRequestNote) GetCreatedAt() int32 {
	if o == nil || utils.IsNil(o.CreatedAt) {
		var ret int32
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRequestNote) GetCreatedAtOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *MergeRequestNote) HasCreatedAt() bool {
	if o != nil && !utils.IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int32 and assigns it to the CreatedAt field.
func (o *MergeRequestNote) SetCreatedAt(v int32) {
	o.CreatedAt = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MergeRequestNote) GetId() int32 {
	if o == nil || utils.IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRequestNote) GetIdOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MergeRequestNote) HasId() bool {
	if o != nil && !utils.IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *MergeRequestNote) SetId(v int32) {
	o.Id = &v
}

// GetIndex returns the Index field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MergeRequestNote) GetIndex() int32 {
	if o == nil || utils.IsNil(o.Index.Get()) {
		var ret int32
		return ret
	}
	return *o.Index.Get()
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MergeRequestNote) GetIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Index.Get(), o.Index.IsSet()
}

// HasIndex returns a boolean if a field has been set.
func (o *MergeRequestNote) HasIndex() bool {
	if o != nil && o.Index.IsSet() {
		return true
	}

	return false
}

// SetIndex gets a reference to the given utils.NullableInt32 and assigns it to the Index field.
func (o *MergeRequestNote) SetIndex(v int32) {
	o.Index.Set(&v)
}
// SetIndexNil sets the value for Index to be an explicit nil
func (o *MergeRequestNote) SetIndexNil() {
	o.Index.Set(nil)
}

// UnsetIndex ensures that no value is present for Index, not even an explicit nil
func (o *MergeRequestNote) UnsetIndex() {
	o.Index.Unset()
}

// GetMergeId returns the MergeId field value if set, zero value otherwise.
func (o *MergeRequestNote) GetMergeId() int32 {
	if o == nil || utils.IsNil(o.MergeId) {
		var ret int32
		return ret
	}
	return *o.MergeId
}

// GetMergeIdOk returns a tuple with the MergeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRequestNote) GetMergeIdOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.MergeId) {
		return nil, false
	}
	return o.MergeId, true
}

// HasMergeId returns a boolean if a field has been set.
func (o *MergeRequestNote) HasMergeId() bool {
	if o != nil && !utils.IsNil(o.MergeId) {
		return true
	}

	return false
}

// SetMergeId gets a reference to the given int32 and assigns it to the MergeId field.
func (o *MergeRequestNote) SetMergeId(v int32) {
	o.MergeId = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *MergeRequestNote) GetParentId() int32 {
	if o == nil || utils.IsNil(o.ParentId) {
		var ret int32
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRequestNote) GetParentIdOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *MergeRequestNote) HasParentId() bool {
	if o != nil && !utils.IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given int32 and assigns it to the ParentId field.
func (o *MergeRequestNote) SetParentId(v int32) {
	o.ParentId = &v
}

// GetPath returns the Path field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MergeRequestNote) GetPath() string {
	if o == nil || utils.IsNil(o.Path.Get()) {
		var ret string
		return ret
	}
	return *o.Path.Get()
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MergeRequestNote) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Path.Get(), o.Path.IsSet()
}

// HasPath returns a boolean if a field has been set.
func (o *MergeRequestNote) HasPath() bool {
	if o != nil && o.Path.IsSet() {
		return true
	}

	return false
}

// SetPath gets a reference to the given utils.NullableString and assigns it to the Path field.
func (o *MergeRequestNote) SetPath(v string) {
	o.Path.Set(&v)
}
// SetPathNil sets the value for Path to be an explicit nil
func (o *MergeRequestNote) SetPathNil() {
	o.Path.Set(nil)
}

// UnsetPath ensures that no value is present for Path, not even an explicit nil
func (o *MergeRequestNote) UnsetPath() {
	o.Path.Unset()
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *MergeRequestNote) GetUpdatedAt() int32 {
	if o == nil || utils.IsNil(o.UpdatedAt) {
		var ret int32
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRequestNote) GetUpdatedAtOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *MergeRequestNote) HasUpdatedAt() bool {
	if o != nil && !utils.IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given int32 and assigns it to the UpdatedAt field.
func (o *MergeRequestNote) SetUpdatedAt(v int32) {
	o.UpdatedAt = &v
}

func (o MergeRequestNote) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MergeRequestNote) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Author) {
		toSerialize["Author"] = o.Author
	}
	if o.CommitSha.IsSet() {
		toSerialize["CommitSha"] = o.CommitSha.Get()
	}
	if !utils.IsNil(o.Content) {
		toSerialize["Content"] = o.Content
	}
	if !utils.IsNil(o.CreatedAt) {
		toSerialize["CreatedAt"] = o.CreatedAt
	}
	if !utils.IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if o.Index.IsSet() {
		toSerialize["Index"] = o.Index.Get()
	}
	if !utils.IsNil(o.MergeId) {
		toSerialize["MergeId"] = o.MergeId
	}
	if !utils.IsNil(o.ParentId) {
		toSerialize["ParentId"] = o.ParentId
	}
	if o.Path.IsSet() {
		toSerialize["Path"] = o.Path.Get()
	}
	if !utils.IsNil(o.UpdatedAt) {
		toSerialize["UpdatedAt"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableMergeRequestNote struct {
	value *MergeRequestNote
	isSet bool
}

func (v NullableMergeRequestNote) Get() *MergeRequestNote {
	return v.value
}

func (v *NullableMergeRequestNote) Set(val *MergeRequestNote) {
	v.value = val
	v.isSet = true
}

func (v NullableMergeRequestNote) IsSet() bool {
	return v.isSet
}

func (v *NullableMergeRequestNote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMergeRequestNote(val *MergeRequestNote) *NullableMergeRequestNote {
	return &NullableMergeRequestNote{value: val, isSet: true}
}

func (v NullableMergeRequestNote) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMergeRequestNote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


