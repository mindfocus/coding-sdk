/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DescribeResourceReferencesRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DescribeResourceReferencesRequest{}

// DescribeResourceReferencesRequest struct for DescribeResourceReferencesRequest
type DescribeResourceReferencesRequest struct {
	// 项目名称
	ProjectName string `json:"ProjectName"`
	// 资源ID
	ResourceCode int64 `json:"ResourceCode"`
}

type _DescribeResourceReferencesRequest DescribeResourceReferencesRequest

// NewDescribeResourceReferencesRequest instantiates a new DescribeResourceReferencesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeResourceReferencesRequest(projectName string, resourceCode int64) *DescribeResourceReferencesRequest {
	this := DescribeResourceReferencesRequest{}
	this.ProjectName = projectName
	this.ResourceCode = resourceCode
	return &this
}

// NewDescribeResourceReferencesRequestWithDefaults instantiates a new DescribeResourceReferencesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeResourceReferencesRequestWithDefaults() *DescribeResourceReferencesRequest {
	this := DescribeResourceReferencesRequest{}
	return &this
}

// GetProjectName returns the ProjectName field value
func (o *DescribeResourceReferencesRequest) GetProjectName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value
// and a boolean to check if the value has been set.
func (o *DescribeResourceReferencesRequest) GetProjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectName, true
}

// SetProjectName sets field value
func (o *DescribeResourceReferencesRequest) SetProjectName(v string) {
	o.ProjectName = v
}

// GetResourceCode returns the ResourceCode field value
func (o *DescribeResourceReferencesRequest) GetResourceCode() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ResourceCode
}

// GetResourceCodeOk returns a tuple with the ResourceCode field value
// and a boolean to check if the value has been set.
func (o *DescribeResourceReferencesRequest) GetResourceCodeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceCode, true
}

// SetResourceCode sets field value
func (o *DescribeResourceReferencesRequest) SetResourceCode(v int64) {
	o.ResourceCode = v
}

func (o DescribeResourceReferencesRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeResourceReferencesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ProjectName"] = o.ProjectName
	toSerialize["ResourceCode"] = o.ResourceCode
	return toSerialize, nil
}

func (o *DescribeResourceReferencesRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ProjectName",
		"ResourceCode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescribeResourceReferencesRequest := _DescribeResourceReferencesRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDescribeResourceReferencesRequest)

	if err != nil {
		return err
	}

	*o = DescribeResourceReferencesRequest(varDescribeResourceReferencesRequest)

	return err
}

type NullableDescribeResourceReferencesRequest struct {
	value *DescribeResourceReferencesRequest
	isSet bool
}

func (v NullableDescribeResourceReferencesRequest) Get() *DescribeResourceReferencesRequest {
	return v.value
}

func (v *NullableDescribeResourceReferencesRequest) Set(val *DescribeResourceReferencesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeResourceReferencesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeResourceReferencesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeResourceReferencesRequest(val *DescribeResourceReferencesRequest) *NullableDescribeResourceReferencesRequest {
	return &NullableDescribeResourceReferencesRequest{value: val, isSet: true}
}

func (v NullableDescribeResourceReferencesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeResourceReferencesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


