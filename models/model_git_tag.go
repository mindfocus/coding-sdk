/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the GitTag type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &GitTag{}

// GitTag 用于展示GitTag相关信息
type GitTag struct {
	Commit *GitAllTagCommit `json:"Commit,omitempty"`
	// tag信息
	Message *string `json:"Message,omitempty"`
	// tag的名称
	TagName *string `json:"TagName,omitempty"`
}

// NewGitTag instantiates a new GitTag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitTag() *GitTag {
	this := GitTag{}
	var message string = ""
	this.Message = &message
	var tagName string = ""
	this.TagName = &tagName
	return &this
}

// NewGitTagWithDefaults instantiates a new GitTag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitTagWithDefaults() *GitTag {
	this := GitTag{}
	var message string = ""
	this.Message = &message
	var tagName string = ""
	this.TagName = &tagName
	return &this
}

// GetCommit returns the Commit field value if set, zero value otherwise.
func (o *GitTag) GetCommit() GitAllTagCommit {
	if o == nil || utils.IsNil(o.Commit) {
		var ret GitAllTagCommit
		return ret
	}
	return *o.Commit
}

// GetCommitOk returns a tuple with the Commit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitTag) GetCommitOk() (*GitAllTagCommit, bool) {
	if o == nil || utils.IsNil(o.Commit) {
		return nil, false
	}
	return o.Commit, true
}

// HasCommit returns a boolean if a field has been set.
func (o *GitTag) HasCommit() bool {
	if o != nil && !utils.IsNil(o.Commit) {
		return true
	}

	return false
}

// SetCommit gets a reference to the given GitAllTagCommit and assigns it to the Commit field.
func (o *GitTag) SetCommit(v GitAllTagCommit) {
	o.Commit = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *GitTag) GetMessage() string {
	if o == nil || utils.IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitTag) GetMessageOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *GitTag) HasMessage() bool {
	if o != nil && !utils.IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *GitTag) SetMessage(v string) {
	o.Message = &v
}

// GetTagName returns the TagName field value if set, zero value otherwise.
func (o *GitTag) GetTagName() string {
	if o == nil || utils.IsNil(o.TagName) {
		var ret string
		return ret
	}
	return *o.TagName
}

// GetTagNameOk returns a tuple with the TagName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitTag) GetTagNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.TagName) {
		return nil, false
	}
	return o.TagName, true
}

// HasTagName returns a boolean if a field has been set.
func (o *GitTag) HasTagName() bool {
	if o != nil && !utils.IsNil(o.TagName) {
		return true
	}

	return false
}

// SetTagName gets a reference to the given string and assigns it to the TagName field.
func (o *GitTag) SetTagName(v string) {
	o.TagName = &v
}

func (o GitTag) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitTag) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Commit) {
		toSerialize["Commit"] = o.Commit
	}
	if !utils.IsNil(o.Message) {
		toSerialize["Message"] = o.Message
	}
	if !utils.IsNil(o.TagName) {
		toSerialize["TagName"] = o.TagName
	}
	return toSerialize, nil
}

type NullableGitTag struct {
	value *GitTag
	isSet bool
}

func (v NullableGitTag) Get() *GitTag {
	return v.value
}

func (v *NullableGitTag) Set(val *GitTag) {
	v.value = val
	v.isSet = true
}

func (v NullableGitTag) IsSet() bool {
	return v.isSet
}

func (v *NullableGitTag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitTag(val *GitTag) *NullableGitTag {
	return &NullableGitTag{value: val, isSet: true}
}

func (v NullableGitTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitTag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


