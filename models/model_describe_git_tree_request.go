/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DescribeGitTreeRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DescribeGitTreeRequest{}

// DescribeGitTreeRequest struct for DescribeGitTreeRequest
type DescribeGitTreeRequest struct {
	// 仓库Id
	DepotId int64 `json:"DepotId"`
	// 仓库路径，与仓库ID二选一
	DepotPath *string `json:"DepotPath,omitempty"`
	// 是否递归
	IsRecursive bool `json:"IsRecursive"`
	// 文件路径
	Path *string `json:"Path,omitempty"`
	// 分支或标签名，默认 HEAD
	Ref string `json:"Ref"`
}

type _DescribeGitTreeRequest DescribeGitTreeRequest

// NewDescribeGitTreeRequest instantiates a new DescribeGitTreeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeGitTreeRequest(depotId int64, isRecursive bool, ref string) *DescribeGitTreeRequest {
	this := DescribeGitTreeRequest{}
	this.DepotId = depotId
	this.IsRecursive = isRecursive
	this.Ref = ref
	return &this
}

// NewDescribeGitTreeRequestWithDefaults instantiates a new DescribeGitTreeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeGitTreeRequestWithDefaults() *DescribeGitTreeRequest {
	this := DescribeGitTreeRequest{}
	return &this
}

// GetDepotId returns the DepotId field value
func (o *DescribeGitTreeRequest) GetDepotId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DepotId
}

// GetDepotIdOk returns a tuple with the DepotId field value
// and a boolean to check if the value has been set.
func (o *DescribeGitTreeRequest) GetDepotIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepotId, true
}

// SetDepotId sets field value
func (o *DescribeGitTreeRequest) SetDepotId(v int64) {
	o.DepotId = v
}

// GetDepotPath returns the DepotPath field value if set, zero value otherwise.
func (o *DescribeGitTreeRequest) GetDepotPath() string {
	if o == nil || utils.IsNil(o.DepotPath) {
		var ret string
		return ret
	}
	return *o.DepotPath
}

// GetDepotPathOk returns a tuple with the DepotPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeGitTreeRequest) GetDepotPathOk() (*string, bool) {
	if o == nil || utils.IsNil(o.DepotPath) {
		return nil, false
	}
	return o.DepotPath, true
}

// HasDepotPath returns a boolean if a field has been set.
func (o *DescribeGitTreeRequest) HasDepotPath() bool {
	if o != nil && !utils.IsNil(o.DepotPath) {
		return true
	}

	return false
}

// SetDepotPath gets a reference to the given string and assigns it to the DepotPath field.
func (o *DescribeGitTreeRequest) SetDepotPath(v string) {
	o.DepotPath = &v
}

// GetIsRecursive returns the IsRecursive field value
func (o *DescribeGitTreeRequest) GetIsRecursive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsRecursive
}

// GetIsRecursiveOk returns a tuple with the IsRecursive field value
// and a boolean to check if the value has been set.
func (o *DescribeGitTreeRequest) GetIsRecursiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsRecursive, true
}

// SetIsRecursive sets field value
func (o *DescribeGitTreeRequest) SetIsRecursive(v bool) {
	o.IsRecursive = v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *DescribeGitTreeRequest) GetPath() string {
	if o == nil || utils.IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeGitTreeRequest) GetPathOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *DescribeGitTreeRequest) HasPath() bool {
	if o != nil && !utils.IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *DescribeGitTreeRequest) SetPath(v string) {
	o.Path = &v
}

// GetRef returns the Ref field value
func (o *DescribeGitTreeRequest) GetRef() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ref
}

// GetRefOk returns a tuple with the Ref field value
// and a boolean to check if the value has been set.
func (o *DescribeGitTreeRequest) GetRefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ref, true
}

// SetRef sets field value
func (o *DescribeGitTreeRequest) SetRef(v string) {
	o.Ref = v
}

func (o DescribeGitTreeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeGitTreeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["DepotId"] = o.DepotId
	if !utils.IsNil(o.DepotPath) {
		toSerialize["DepotPath"] = o.DepotPath
	}
	toSerialize["IsRecursive"] = o.IsRecursive
	if !utils.IsNil(o.Path) {
		toSerialize["Path"] = o.Path
	}
	toSerialize["Ref"] = o.Ref
	return toSerialize, nil
}

func (o *DescribeGitTreeRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"DepotId",
		"IsRecursive",
		"Ref",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescribeGitTreeRequest := _DescribeGitTreeRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDescribeGitTreeRequest)

	if err != nil {
		return err
	}

	*o = DescribeGitTreeRequest(varDescribeGitTreeRequest)

	return err
}

type NullableDescribeGitTreeRequest struct {
	value *DescribeGitTreeRequest
	isSet bool
}

func (v NullableDescribeGitTreeRequest) Get() *DescribeGitTreeRequest {
	return v.value
}

func (v *NullableDescribeGitTreeRequest) Set(val *DescribeGitTreeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeGitTreeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeGitTreeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeGitTreeRequest(val *DescribeGitTreeRequest) *NullableDescribeGitTreeRequest {
	return &NullableDescribeGitTreeRequest{value: val, isSet: true}
}

func (v NullableDescribeGitTreeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeGitTreeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


