/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the CreateGitCommitNoteRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CreateGitCommitNoteRequest{}

// CreateGitCommitNoteRequest struct for CreateGitCommitNoteRequest
type CreateGitCommitNoteRequest struct {
	// 提交信息
	CommitMessage string `json:"CommitMessage"`
	// 提交的 Sha
	CommitSha string `json:"CommitSha"`
	// 仓库id
	DepotId int64 `json:"DepotId"`
	// 仓库路径，DepotId与DepotPath二选一即可
	DepotPath *string `json:"DepotPath,omitempty"`
	// 注释的详情信息
	Note string `json:"Note"`
	// 注释分支 ref。建议默认不填
	NotesRef *string `json:"NotesRef,omitempty"`
}

type _CreateGitCommitNoteRequest CreateGitCommitNoteRequest

// NewCreateGitCommitNoteRequest instantiates a new CreateGitCommitNoteRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateGitCommitNoteRequest(commitMessage string, commitSha string, depotId int64, note string) *CreateGitCommitNoteRequest {
	this := CreateGitCommitNoteRequest{}
	this.CommitMessage = commitMessage
	this.CommitSha = commitSha
	this.DepotId = depotId
	this.Note = note
	return &this
}

// NewCreateGitCommitNoteRequestWithDefaults instantiates a new CreateGitCommitNoteRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateGitCommitNoteRequestWithDefaults() *CreateGitCommitNoteRequest {
	this := CreateGitCommitNoteRequest{}
	return &this
}

// GetCommitMessage returns the CommitMessage field value
func (o *CreateGitCommitNoteRequest) GetCommitMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommitMessage
}

// GetCommitMessageOk returns a tuple with the CommitMessage field value
// and a boolean to check if the value has been set.
func (o *CreateGitCommitNoteRequest) GetCommitMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommitMessage, true
}

// SetCommitMessage sets field value
func (o *CreateGitCommitNoteRequest) SetCommitMessage(v string) {
	o.CommitMessage = v
}

// GetCommitSha returns the CommitSha field value
func (o *CreateGitCommitNoteRequest) GetCommitSha() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommitSha
}

// GetCommitShaOk returns a tuple with the CommitSha field value
// and a boolean to check if the value has been set.
func (o *CreateGitCommitNoteRequest) GetCommitShaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommitSha, true
}

// SetCommitSha sets field value
func (o *CreateGitCommitNoteRequest) SetCommitSha(v string) {
	o.CommitSha = v
}

// GetDepotId returns the DepotId field value
func (o *CreateGitCommitNoteRequest) GetDepotId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DepotId
}

// GetDepotIdOk returns a tuple with the DepotId field value
// and a boolean to check if the value has been set.
func (o *CreateGitCommitNoteRequest) GetDepotIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepotId, true
}

// SetDepotId sets field value
func (o *CreateGitCommitNoteRequest) SetDepotId(v int64) {
	o.DepotId = v
}

// GetDepotPath returns the DepotPath field value if set, zero value otherwise.
func (o *CreateGitCommitNoteRequest) GetDepotPath() string {
	if o == nil || utils.IsNil(o.DepotPath) {
		var ret string
		return ret
	}
	return *o.DepotPath
}

// GetDepotPathOk returns a tuple with the DepotPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateGitCommitNoteRequest) GetDepotPathOk() (*string, bool) {
	if o == nil || utils.IsNil(o.DepotPath) {
		return nil, false
	}
	return o.DepotPath, true
}

// HasDepotPath returns a boolean if a field has been set.
func (o *CreateGitCommitNoteRequest) HasDepotPath() bool {
	if o != nil && !utils.IsNil(o.DepotPath) {
		return true
	}

	return false
}

// SetDepotPath gets a reference to the given string and assigns it to the DepotPath field.
func (o *CreateGitCommitNoteRequest) SetDepotPath(v string) {
	o.DepotPath = &v
}

// GetNote returns the Note field value
func (o *CreateGitCommitNoteRequest) GetNote() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Note
}

// GetNoteOk returns a tuple with the Note field value
// and a boolean to check if the value has been set.
func (o *CreateGitCommitNoteRequest) GetNoteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Note, true
}

// SetNote sets field value
func (o *CreateGitCommitNoteRequest) SetNote(v string) {
	o.Note = v
}

// GetNotesRef returns the NotesRef field value if set, zero value otherwise.
func (o *CreateGitCommitNoteRequest) GetNotesRef() string {
	if o == nil || utils.IsNil(o.NotesRef) {
		var ret string
		return ret
	}
	return *o.NotesRef
}

// GetNotesRefOk returns a tuple with the NotesRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateGitCommitNoteRequest) GetNotesRefOk() (*string, bool) {
	if o == nil || utils.IsNil(o.NotesRef) {
		return nil, false
	}
	return o.NotesRef, true
}

// HasNotesRef returns a boolean if a field has been set.
func (o *CreateGitCommitNoteRequest) HasNotesRef() bool {
	if o != nil && !utils.IsNil(o.NotesRef) {
		return true
	}

	return false
}

// SetNotesRef gets a reference to the given string and assigns it to the NotesRef field.
func (o *CreateGitCommitNoteRequest) SetNotesRef(v string) {
	o.NotesRef = &v
}

func (o CreateGitCommitNoteRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateGitCommitNoteRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["CommitMessage"] = o.CommitMessage
	toSerialize["CommitSha"] = o.CommitSha
	toSerialize["DepotId"] = o.DepotId
	if !utils.IsNil(o.DepotPath) {
		toSerialize["DepotPath"] = o.DepotPath
	}
	toSerialize["Note"] = o.Note
	if !utils.IsNil(o.NotesRef) {
		toSerialize["NotesRef"] = o.NotesRef
	}
	return toSerialize, nil
}

func (o *CreateGitCommitNoteRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"CommitMessage",
		"CommitSha",
		"DepotId",
		"Note",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateGitCommitNoteRequest := _CreateGitCommitNoteRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateGitCommitNoteRequest)

	if err != nil {
		return err
	}

	*o = CreateGitCommitNoteRequest(varCreateGitCommitNoteRequest)

	return err
}

type NullableCreateGitCommitNoteRequest struct {
	value *CreateGitCommitNoteRequest
	isSet bool
}

func (v NullableCreateGitCommitNoteRequest) Get() *CreateGitCommitNoteRequest {
	return v.value
}

func (v *NullableCreateGitCommitNoteRequest) Set(val *CreateGitCommitNoteRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateGitCommitNoteRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateGitCommitNoteRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateGitCommitNoteRequest(val *CreateGitCommitNoteRequest) *NullableCreateGitCommitNoteRequest {
	return &NullableCreateGitCommitNoteRequest{value: val, isSet: true}
}

func (v NullableCreateGitCommitNoteRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateGitCommitNoteRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


