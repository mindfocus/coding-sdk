/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the ResourceInfo type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ResourceInfo{}

// ResourceInfo 授权的资源信息
type ResourceInfo struct {
	// 资源三段式描述的资源定位描述，支持 path 形式及模糊表达匹配
	RelativeResource *string `json:"RelativeResource,omitempty"`
	// 资源 ID
	ResourceId string `json:"ResourceId"`
	// 资源三段式描述的 scope，目前固定 coding
	ResourceScope *string `json:"ResourceScope,omitempty"`
	// 资源类型：例如 project
	ResourceType string `json:"ResourceType"`
	// 资源三段式描述的 serviceName 部分，表示业务模块
	ServiceName *string `json:"ServiceName,omitempty"`
}

type _ResourceInfo ResourceInfo

// NewResourceInfo instantiates a new ResourceInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceInfo(resourceId string, resourceType string) *ResourceInfo {
	this := ResourceInfo{}
	var relativeResource string = ""
	this.RelativeResource = &relativeResource
	this.ResourceId = resourceId
	var resourceScope string = ""
	this.ResourceScope = &resourceScope
	this.ResourceType = resourceType
	var serviceName string = ""
	this.ServiceName = &serviceName
	return &this
}

// NewResourceInfoWithDefaults instantiates a new ResourceInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceInfoWithDefaults() *ResourceInfo {
	this := ResourceInfo{}
	var relativeResource string = ""
	this.RelativeResource = &relativeResource
	var resourceId string = ""
	this.ResourceId = resourceId
	var resourceScope string = ""
	this.ResourceScope = &resourceScope
	var resourceType string = ""
	this.ResourceType = resourceType
	var serviceName string = ""
	this.ServiceName = &serviceName
	return &this
}

// GetRelativeResource returns the RelativeResource field value if set, zero value otherwise.
func (o *ResourceInfo) GetRelativeResource() string {
	if o == nil || utils.IsNil(o.RelativeResource) {
		var ret string
		return ret
	}
	return *o.RelativeResource
}

// GetRelativeResourceOk returns a tuple with the RelativeResource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceInfo) GetRelativeResourceOk() (*string, bool) {
	if o == nil || utils.IsNil(o.RelativeResource) {
		return nil, false
	}
	return o.RelativeResource, true
}

// HasRelativeResource returns a boolean if a field has been set.
func (o *ResourceInfo) HasRelativeResource() bool {
	if o != nil && !utils.IsNil(o.RelativeResource) {
		return true
	}

	return false
}

// SetRelativeResource gets a reference to the given string and assigns it to the RelativeResource field.
func (o *ResourceInfo) SetRelativeResource(v string) {
	o.RelativeResource = &v
}

// GetResourceId returns the ResourceId field value
func (o *ResourceInfo) GetResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value
// and a boolean to check if the value has been set.
func (o *ResourceInfo) GetResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceId, true
}

// SetResourceId sets field value
func (o *ResourceInfo) SetResourceId(v string) {
	o.ResourceId = v
}

// GetResourceScope returns the ResourceScope field value if set, zero value otherwise.
func (o *ResourceInfo) GetResourceScope() string {
	if o == nil || utils.IsNil(o.ResourceScope) {
		var ret string
		return ret
	}
	return *o.ResourceScope
}

// GetResourceScopeOk returns a tuple with the ResourceScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceInfo) GetResourceScopeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ResourceScope) {
		return nil, false
	}
	return o.ResourceScope, true
}

// HasResourceScope returns a boolean if a field has been set.
func (o *ResourceInfo) HasResourceScope() bool {
	if o != nil && !utils.IsNil(o.ResourceScope) {
		return true
	}

	return false
}

// SetResourceScope gets a reference to the given string and assigns it to the ResourceScope field.
func (o *ResourceInfo) SetResourceScope(v string) {
	o.ResourceScope = &v
}

// GetResourceType returns the ResourceType field value
func (o *ResourceInfo) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *ResourceInfo) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *ResourceInfo) SetResourceType(v string) {
	o.ResourceType = v
}

// GetServiceName returns the ServiceName field value if set, zero value otherwise.
func (o *ResourceInfo) GetServiceName() string {
	if o == nil || utils.IsNil(o.ServiceName) {
		var ret string
		return ret
	}
	return *o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceInfo) GetServiceNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ServiceName) {
		return nil, false
	}
	return o.ServiceName, true
}

// HasServiceName returns a boolean if a field has been set.
func (o *ResourceInfo) HasServiceName() bool {
	if o != nil && !utils.IsNil(o.ServiceName) {
		return true
	}

	return false
}

// SetServiceName gets a reference to the given string and assigns it to the ServiceName field.
func (o *ResourceInfo) SetServiceName(v string) {
	o.ServiceName = &v
}

func (o ResourceInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.RelativeResource) {
		toSerialize["RelativeResource"] = o.RelativeResource
	}
	toSerialize["ResourceId"] = o.ResourceId
	if !utils.IsNil(o.ResourceScope) {
		toSerialize["ResourceScope"] = o.ResourceScope
	}
	toSerialize["ResourceType"] = o.ResourceType
	if !utils.IsNil(o.ServiceName) {
		toSerialize["ServiceName"] = o.ServiceName
	}
	return toSerialize, nil
}

func (o *ResourceInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ResourceId",
		"ResourceType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceInfo := _ResourceInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResourceInfo)

	if err != nil {
		return err
	}

	*o = ResourceInfo(varResourceInfo)

	return err
}

type NullableResourceInfo struct {
	value *ResourceInfo
	isSet bool
}

func (v NullableResourceInfo) Get() *ResourceInfo {
	return v.value
}

func (v *NullableResourceInfo) Set(val *ResourceInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceInfo(val *ResourceInfo) *NullableResourceInfo {
	return &NullableResourceInfo{value: val, isSet: true}
}

func (v NullableResourceInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


