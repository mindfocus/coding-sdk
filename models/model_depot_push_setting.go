/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DepotPushSetting type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DepotPushSetting{}

// DepotPushSetting 仓库推送规则信息
type DepotPushSetting struct {
	// 检查 Git 提交的提交者 (Committer) 和提交作者 (Author) 必须是已验证的邮箱。
	CheckCommitAuthor utils.NullableBool `json:"CheckCommitAuthor,omitempty"`
	// Git 提交信息的格式校验
	CommitMessageMustMatchRegex utils.NullableString `json:"CommitMessageMustMatchRegex,omitempty"`
	// 禁止强制推送 (Force Push)
	DenyForcePush utils.NullableBool `json:"DenyForcePush,omitempty"`
	// 禁止推送的文件（文件类型用换行符隔开）
	PushDenyFile utils.NullableString `json:"PushDenyFile,omitempty"`
	// 开启单次提交的文件总大小限制，Git LFS 文件除外（单位MB）
	PushFileSize utils.NullableString `json:"PushFileSize,omitempty"`
}

// NewDepotPushSetting instantiates a new DepotPushSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDepotPushSetting() *DepotPushSetting {
	this := DepotPushSetting{}
	var checkCommitAuthor bool = false
	this.CheckCommitAuthor = *utils.NewNullableBool(&checkCommitAuthor)
	var commitMessageMustMatchRegex string = ""
	this.CommitMessageMustMatchRegex = *utils.NewNullableString(&commitMessageMustMatchRegex)
	var denyForcePush bool = false
	this.DenyForcePush = *utils.NewNullableBool(&denyForcePush)
	var pushDenyFile string = ""
	this.PushDenyFile = *utils.NewNullableString(&pushDenyFile)
	var pushFileSize string = ""
	this.PushFileSize = *utils.NewNullableString(&pushFileSize)
	return &this
}

// NewDepotPushSettingWithDefaults instantiates a new DepotPushSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDepotPushSettingWithDefaults() *DepotPushSetting {
	this := DepotPushSetting{}
	var checkCommitAuthor bool = false
	this.CheckCommitAuthor = *utils.NewNullableBool(&checkCommitAuthor)
	var commitMessageMustMatchRegex string = ""
	this.CommitMessageMustMatchRegex = *utils.NewNullableString(&commitMessageMustMatchRegex)
	var denyForcePush bool = false
	this.DenyForcePush = *utils.NewNullableBool(&denyForcePush)
	var pushDenyFile string = ""
	this.PushDenyFile = *utils.NewNullableString(&pushDenyFile)
	var pushFileSize string = ""
	this.PushFileSize = *utils.NewNullableString(&pushFileSize)
	return &this
}

// GetCheckCommitAuthor returns the CheckCommitAuthor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DepotPushSetting) GetCheckCommitAuthor() bool {
	if o == nil || utils.IsNil(o.CheckCommitAuthor.Get()) {
		var ret bool
		return ret
	}
	return *o.CheckCommitAuthor.Get()
}

// GetCheckCommitAuthorOk returns a tuple with the CheckCommitAuthor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DepotPushSetting) GetCheckCommitAuthorOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CheckCommitAuthor.Get(), o.CheckCommitAuthor.IsSet()
}

// HasCheckCommitAuthor returns a boolean if a field has been set.
func (o *DepotPushSetting) HasCheckCommitAuthor() bool {
	if o != nil && o.CheckCommitAuthor.IsSet() {
		return true
	}

	return false
}

// SetCheckCommitAuthor gets a reference to the given utils.NullableBool and assigns it to the CheckCommitAuthor field.
func (o *DepotPushSetting) SetCheckCommitAuthor(v bool) {
	o.CheckCommitAuthor.Set(&v)
}
// SetCheckCommitAuthorNil sets the value for CheckCommitAuthor to be an explicit nil
func (o *DepotPushSetting) SetCheckCommitAuthorNil() {
	o.CheckCommitAuthor.Set(nil)
}

// UnsetCheckCommitAuthor ensures that no value is present for CheckCommitAuthor, not even an explicit nil
func (o *DepotPushSetting) UnsetCheckCommitAuthor() {
	o.CheckCommitAuthor.Unset()
}

// GetCommitMessageMustMatchRegex returns the CommitMessageMustMatchRegex field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DepotPushSetting) GetCommitMessageMustMatchRegex() string {
	if o == nil || utils.IsNil(o.CommitMessageMustMatchRegex.Get()) {
		var ret string
		return ret
	}
	return *o.CommitMessageMustMatchRegex.Get()
}

// GetCommitMessageMustMatchRegexOk returns a tuple with the CommitMessageMustMatchRegex field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DepotPushSetting) GetCommitMessageMustMatchRegexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CommitMessageMustMatchRegex.Get(), o.CommitMessageMustMatchRegex.IsSet()
}

// HasCommitMessageMustMatchRegex returns a boolean if a field has been set.
func (o *DepotPushSetting) HasCommitMessageMustMatchRegex() bool {
	if o != nil && o.CommitMessageMustMatchRegex.IsSet() {
		return true
	}

	return false
}

// SetCommitMessageMustMatchRegex gets a reference to the given utils.NullableString and assigns it to the CommitMessageMustMatchRegex field.
func (o *DepotPushSetting) SetCommitMessageMustMatchRegex(v string) {
	o.CommitMessageMustMatchRegex.Set(&v)
}
// SetCommitMessageMustMatchRegexNil sets the value for CommitMessageMustMatchRegex to be an explicit nil
func (o *DepotPushSetting) SetCommitMessageMustMatchRegexNil() {
	o.CommitMessageMustMatchRegex.Set(nil)
}

// UnsetCommitMessageMustMatchRegex ensures that no value is present for CommitMessageMustMatchRegex, not even an explicit nil
func (o *DepotPushSetting) UnsetCommitMessageMustMatchRegex() {
	o.CommitMessageMustMatchRegex.Unset()
}

// GetDenyForcePush returns the DenyForcePush field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DepotPushSetting) GetDenyForcePush() bool {
	if o == nil || utils.IsNil(o.DenyForcePush.Get()) {
		var ret bool
		return ret
	}
	return *o.DenyForcePush.Get()
}

// GetDenyForcePushOk returns a tuple with the DenyForcePush field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DepotPushSetting) GetDenyForcePushOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DenyForcePush.Get(), o.DenyForcePush.IsSet()
}

// HasDenyForcePush returns a boolean if a field has been set.
func (o *DepotPushSetting) HasDenyForcePush() bool {
	if o != nil && o.DenyForcePush.IsSet() {
		return true
	}

	return false
}

// SetDenyForcePush gets a reference to the given utils.NullableBool and assigns it to the DenyForcePush field.
func (o *DepotPushSetting) SetDenyForcePush(v bool) {
	o.DenyForcePush.Set(&v)
}
// SetDenyForcePushNil sets the value for DenyForcePush to be an explicit nil
func (o *DepotPushSetting) SetDenyForcePushNil() {
	o.DenyForcePush.Set(nil)
}

// UnsetDenyForcePush ensures that no value is present for DenyForcePush, not even an explicit nil
func (o *DepotPushSetting) UnsetDenyForcePush() {
	o.DenyForcePush.Unset()
}

// GetPushDenyFile returns the PushDenyFile field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DepotPushSetting) GetPushDenyFile() string {
	if o == nil || utils.IsNil(o.PushDenyFile.Get()) {
		var ret string
		return ret
	}
	return *o.PushDenyFile.Get()
}

// GetPushDenyFileOk returns a tuple with the PushDenyFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DepotPushSetting) GetPushDenyFileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PushDenyFile.Get(), o.PushDenyFile.IsSet()
}

// HasPushDenyFile returns a boolean if a field has been set.
func (o *DepotPushSetting) HasPushDenyFile() bool {
	if o != nil && o.PushDenyFile.IsSet() {
		return true
	}

	return false
}

// SetPushDenyFile gets a reference to the given utils.NullableString and assigns it to the PushDenyFile field.
func (o *DepotPushSetting) SetPushDenyFile(v string) {
	o.PushDenyFile.Set(&v)
}
// SetPushDenyFileNil sets the value for PushDenyFile to be an explicit nil
func (o *DepotPushSetting) SetPushDenyFileNil() {
	o.PushDenyFile.Set(nil)
}

// UnsetPushDenyFile ensures that no value is present for PushDenyFile, not even an explicit nil
func (o *DepotPushSetting) UnsetPushDenyFile() {
	o.PushDenyFile.Unset()
}

// GetPushFileSize returns the PushFileSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DepotPushSetting) GetPushFileSize() string {
	if o == nil || utils.IsNil(o.PushFileSize.Get()) {
		var ret string
		return ret
	}
	return *o.PushFileSize.Get()
}

// GetPushFileSizeOk returns a tuple with the PushFileSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DepotPushSetting) GetPushFileSizeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PushFileSize.Get(), o.PushFileSize.IsSet()
}

// HasPushFileSize returns a boolean if a field has been set.
func (o *DepotPushSetting) HasPushFileSize() bool {
	if o != nil && o.PushFileSize.IsSet() {
		return true
	}

	return false
}

// SetPushFileSize gets a reference to the given utils.NullableString and assigns it to the PushFileSize field.
func (o *DepotPushSetting) SetPushFileSize(v string) {
	o.PushFileSize.Set(&v)
}
// SetPushFileSizeNil sets the value for PushFileSize to be an explicit nil
func (o *DepotPushSetting) SetPushFileSizeNil() {
	o.PushFileSize.Set(nil)
}

// UnsetPushFileSize ensures that no value is present for PushFileSize, not even an explicit nil
func (o *DepotPushSetting) UnsetPushFileSize() {
	o.PushFileSize.Unset()
}

func (o DepotPushSetting) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DepotPushSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CheckCommitAuthor.IsSet() {
		toSerialize["CheckCommitAuthor"] = o.CheckCommitAuthor.Get()
	}
	if o.CommitMessageMustMatchRegex.IsSet() {
		toSerialize["CommitMessageMustMatchRegex"] = o.CommitMessageMustMatchRegex.Get()
	}
	if o.DenyForcePush.IsSet() {
		toSerialize["DenyForcePush"] = o.DenyForcePush.Get()
	}
	if o.PushDenyFile.IsSet() {
		toSerialize["PushDenyFile"] = o.PushDenyFile.Get()
	}
	if o.PushFileSize.IsSet() {
		toSerialize["PushFileSize"] = o.PushFileSize.Get()
	}
	return toSerialize, nil
}

type NullableDepotPushSetting struct {
	value *DepotPushSetting
	isSet bool
}

func (v NullableDepotPushSetting) Get() *DepotPushSetting {
	return v.value
}

func (v *NullableDepotPushSetting) Set(val *DepotPushSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableDepotPushSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableDepotPushSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDepotPushSetting(val *DepotPushSetting) *NullableDepotPushSetting {
	return &NullableDepotPushSetting{value: val, isSet: true}
}

func (v NullableDepotPushSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDepotPushSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


