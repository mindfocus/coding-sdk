/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DetachResourceScopeOnPolicyRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DetachResourceScopeOnPolicyRequest{}

// DetachResourceScopeOnPolicyRequest struct for DetachResourceScopeOnPolicyRequest
type DetachResourceScopeOnPolicyRequest struct {
	// 权限组 ID
	PolicyId int64 `json:"PolicyId"`
	// 删除的资源
	ResourceInfos []ResourceInfoOfPolicyScope `json:"ResourceInfos"`
}

type _DetachResourceScopeOnPolicyRequest DetachResourceScopeOnPolicyRequest

// NewDetachResourceScopeOnPolicyRequest instantiates a new DetachResourceScopeOnPolicyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDetachResourceScopeOnPolicyRequest(policyId int64, resourceInfos []ResourceInfoOfPolicyScope) *DetachResourceScopeOnPolicyRequest {
	this := DetachResourceScopeOnPolicyRequest{}
	this.PolicyId = policyId
	this.ResourceInfos = resourceInfos
	return &this
}

// NewDetachResourceScopeOnPolicyRequestWithDefaults instantiates a new DetachResourceScopeOnPolicyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDetachResourceScopeOnPolicyRequestWithDefaults() *DetachResourceScopeOnPolicyRequest {
	this := DetachResourceScopeOnPolicyRequest{}
	return &this
}

// GetPolicyId returns the PolicyId field value
func (o *DetachResourceScopeOnPolicyRequest) GetPolicyId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.PolicyId
}

// GetPolicyIdOk returns a tuple with the PolicyId field value
// and a boolean to check if the value has been set.
func (o *DetachResourceScopeOnPolicyRequest) GetPolicyIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PolicyId, true
}

// SetPolicyId sets field value
func (o *DetachResourceScopeOnPolicyRequest) SetPolicyId(v int64) {
	o.PolicyId = v
}

// GetResourceInfos returns the ResourceInfos field value
func (o *DetachResourceScopeOnPolicyRequest) GetResourceInfos() []ResourceInfoOfPolicyScope {
	if o == nil {
		var ret []ResourceInfoOfPolicyScope
		return ret
	}

	return o.ResourceInfos
}

// GetResourceInfosOk returns a tuple with the ResourceInfos field value
// and a boolean to check if the value has been set.
func (o *DetachResourceScopeOnPolicyRequest) GetResourceInfosOk() ([]ResourceInfoOfPolicyScope, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceInfos, true
}

// SetResourceInfos sets field value
func (o *DetachResourceScopeOnPolicyRequest) SetResourceInfos(v []ResourceInfoOfPolicyScope) {
	o.ResourceInfos = v
}

func (o DetachResourceScopeOnPolicyRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DetachResourceScopeOnPolicyRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["PolicyId"] = o.PolicyId
	toSerialize["ResourceInfos"] = o.ResourceInfos
	return toSerialize, nil
}

func (o *DetachResourceScopeOnPolicyRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"PolicyId",
		"ResourceInfos",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDetachResourceScopeOnPolicyRequest := _DetachResourceScopeOnPolicyRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDetachResourceScopeOnPolicyRequest)

	if err != nil {
		return err
	}

	*o = DetachResourceScopeOnPolicyRequest(varDetachResourceScopeOnPolicyRequest)

	return err
}

type NullableDetachResourceScopeOnPolicyRequest struct {
	value *DetachResourceScopeOnPolicyRequest
	isSet bool
}

func (v NullableDetachResourceScopeOnPolicyRequest) Get() *DetachResourceScopeOnPolicyRequest {
	return v.value
}

func (v *NullableDetachResourceScopeOnPolicyRequest) Set(val *DetachResourceScopeOnPolicyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDetachResourceScopeOnPolicyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDetachResourceScopeOnPolicyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDetachResourceScopeOnPolicyRequest(val *DetachResourceScopeOnPolicyRequest) *NullableDetachResourceScopeOnPolicyRequest {
	return &NullableDetachResourceScopeOnPolicyRequest{value: val, isSet: true}
}

func (v NullableDetachResourceScopeOnPolicyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDetachResourceScopeOnPolicyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


