/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the CdDeployCountDetail type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CdDeployCountDetail{}

// CdDeployCountDetail CdDeployCountDetail 结构
type CdDeployCountDetail struct {
	// 应用名称
	Application *string `json:"Application,omitempty"`
	CdDeployCount *CdDeployCount `json:"CdDeployCount,omitempty"`
}

// NewCdDeployCountDetail instantiates a new CdDeployCountDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCdDeployCountDetail() *CdDeployCountDetail {
	this := CdDeployCountDetail{}
	var application string = ""
	this.Application = &application
	return &this
}

// NewCdDeployCountDetailWithDefaults instantiates a new CdDeployCountDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCdDeployCountDetailWithDefaults() *CdDeployCountDetail {
	this := CdDeployCountDetail{}
	var application string = ""
	this.Application = &application
	return &this
}

// GetApplication returns the Application field value if set, zero value otherwise.
func (o *CdDeployCountDetail) GetApplication() string {
	if o == nil || utils.IsNil(o.Application) {
		var ret string
		return ret
	}
	return *o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdDeployCountDetail) GetApplicationOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Application) {
		return nil, false
	}
	return o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *CdDeployCountDetail) HasApplication() bool {
	if o != nil && !utils.IsNil(o.Application) {
		return true
	}

	return false
}

// SetApplication gets a reference to the given string and assigns it to the Application field.
func (o *CdDeployCountDetail) SetApplication(v string) {
	o.Application = &v
}

// GetCdDeployCount returns the CdDeployCount field value if set, zero value otherwise.
func (o *CdDeployCountDetail) GetCdDeployCount() CdDeployCount {
	if o == nil || utils.IsNil(o.CdDeployCount) {
		var ret CdDeployCount
		return ret
	}
	return *o.CdDeployCount
}

// GetCdDeployCountOk returns a tuple with the CdDeployCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdDeployCountDetail) GetCdDeployCountOk() (*CdDeployCount, bool) {
	if o == nil || utils.IsNil(o.CdDeployCount) {
		return nil, false
	}
	return o.CdDeployCount, true
}

// HasCdDeployCount returns a boolean if a field has been set.
func (o *CdDeployCountDetail) HasCdDeployCount() bool {
	if o != nil && !utils.IsNil(o.CdDeployCount) {
		return true
	}

	return false
}

// SetCdDeployCount gets a reference to the given CdDeployCount and assigns it to the CdDeployCount field.
func (o *CdDeployCountDetail) SetCdDeployCount(v CdDeployCount) {
	o.CdDeployCount = &v
}

func (o CdDeployCountDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CdDeployCountDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Application) {
		toSerialize["Application"] = o.Application
	}
	if !utils.IsNil(o.CdDeployCount) {
		toSerialize["CdDeployCount"] = o.CdDeployCount
	}
	return toSerialize, nil
}

type NullableCdDeployCountDetail struct {
	value *CdDeployCountDetail
	isSet bool
}

func (v NullableCdDeployCountDetail) Get() *CdDeployCountDetail {
	return v.value
}

func (v *NullableCdDeployCountDetail) Set(val *CdDeployCountDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableCdDeployCountDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableCdDeployCountDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCdDeployCountDetail(val *CdDeployCountDetail) *NullableCdDeployCountDetail {
	return &NullableCdDeployCountDetail{value: val, isSet: true}
}

func (v NullableCdDeployCountDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCdDeployCountDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


