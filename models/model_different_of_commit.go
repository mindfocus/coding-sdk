/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DifferentOfCommit type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DifferentOfCommit{}

// DifferentOfCommit 请求之间的文件差别
type DifferentOfCommit struct {
	// 修改类型
	ChangeType utils.NullableString `json:"ChangeType,omitempty"`
	// 删除的行数
	Deletions *int64 `json:"Deletions,omitempty"`
	// 新增的行数
	Insertions *int64 `json:"Insertions,omitempty"`
	// 提交的名称
	Name *string `json:"Name,omitempty"`
	// 文件路径
	Path *string `json:"Path,omitempty"`
}

// NewDifferentOfCommit instantiates a new DifferentOfCommit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDifferentOfCommit() *DifferentOfCommit {
	this := DifferentOfCommit{}
	var changeType string = ""
	this.ChangeType = *utils.NewNullableString(&changeType)
	var name string = ""
	this.Name = &name
	var path string = ""
	this.Path = &path
	return &this
}

// NewDifferentOfCommitWithDefaults instantiates a new DifferentOfCommit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDifferentOfCommitWithDefaults() *DifferentOfCommit {
	this := DifferentOfCommit{}
	var changeType string = ""
	this.ChangeType = *utils.NewNullableString(&changeType)
	var name string = ""
	this.Name = &name
	var path string = ""
	this.Path = &path
	return &this
}

// GetChangeType returns the ChangeType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DifferentOfCommit) GetChangeType() string {
	if o == nil || utils.IsNil(o.ChangeType.Get()) {
		var ret string
		return ret
	}
	return *o.ChangeType.Get()
}

// GetChangeTypeOk returns a tuple with the ChangeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DifferentOfCommit) GetChangeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChangeType.Get(), o.ChangeType.IsSet()
}

// HasChangeType returns a boolean if a field has been set.
func (o *DifferentOfCommit) HasChangeType() bool {
	if o != nil && o.ChangeType.IsSet() {
		return true
	}

	return false
}

// SetChangeType gets a reference to the given utils.NullableString and assigns it to the ChangeType field.
func (o *DifferentOfCommit) SetChangeType(v string) {
	o.ChangeType.Set(&v)
}
// SetChangeTypeNil sets the value for ChangeType to be an explicit nil
func (o *DifferentOfCommit) SetChangeTypeNil() {
	o.ChangeType.Set(nil)
}

// UnsetChangeType ensures that no value is present for ChangeType, not even an explicit nil
func (o *DifferentOfCommit) UnsetChangeType() {
	o.ChangeType.Unset()
}

// GetDeletions returns the Deletions field value if set, zero value otherwise.
func (o *DifferentOfCommit) GetDeletions() int64 {
	if o == nil || utils.IsNil(o.Deletions) {
		var ret int64
		return ret
	}
	return *o.Deletions
}

// GetDeletionsOk returns a tuple with the Deletions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DifferentOfCommit) GetDeletionsOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Deletions) {
		return nil, false
	}
	return o.Deletions, true
}

// HasDeletions returns a boolean if a field has been set.
func (o *DifferentOfCommit) HasDeletions() bool {
	if o != nil && !utils.IsNil(o.Deletions) {
		return true
	}

	return false
}

// SetDeletions gets a reference to the given int64 and assigns it to the Deletions field.
func (o *DifferentOfCommit) SetDeletions(v int64) {
	o.Deletions = &v
}

// GetInsertions returns the Insertions field value if set, zero value otherwise.
func (o *DifferentOfCommit) GetInsertions() int64 {
	if o == nil || utils.IsNil(o.Insertions) {
		var ret int64
		return ret
	}
	return *o.Insertions
}

// GetInsertionsOk returns a tuple with the Insertions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DifferentOfCommit) GetInsertionsOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Insertions) {
		return nil, false
	}
	return o.Insertions, true
}

// HasInsertions returns a boolean if a field has been set.
func (o *DifferentOfCommit) HasInsertions() bool {
	if o != nil && !utils.IsNil(o.Insertions) {
		return true
	}

	return false
}

// SetInsertions gets a reference to the given int64 and assigns it to the Insertions field.
func (o *DifferentOfCommit) SetInsertions(v int64) {
	o.Insertions = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DifferentOfCommit) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DifferentOfCommit) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DifferentOfCommit) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DifferentOfCommit) SetName(v string) {
	o.Name = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *DifferentOfCommit) GetPath() string {
	if o == nil || utils.IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DifferentOfCommit) GetPathOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *DifferentOfCommit) HasPath() bool {
	if o != nil && !utils.IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *DifferentOfCommit) SetPath(v string) {
	o.Path = &v
}

func (o DifferentOfCommit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DifferentOfCommit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ChangeType.IsSet() {
		toSerialize["ChangeType"] = o.ChangeType.Get()
	}
	if !utils.IsNil(o.Deletions) {
		toSerialize["Deletions"] = o.Deletions
	}
	if !utils.IsNil(o.Insertions) {
		toSerialize["Insertions"] = o.Insertions
	}
	if !utils.IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !utils.IsNil(o.Path) {
		toSerialize["Path"] = o.Path
	}
	return toSerialize, nil
}

type NullableDifferentOfCommit struct {
	value *DifferentOfCommit
	isSet bool
}

func (v NullableDifferentOfCommit) Get() *DifferentOfCommit {
	return v.value
}

func (v *NullableDifferentOfCommit) Set(val *DifferentOfCommit) {
	v.value = val
	v.isSet = true
}

func (v NullableDifferentOfCommit) IsSet() bool {
	return v.isSet
}

func (v *NullableDifferentOfCommit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDifferentOfCommit(val *DifferentOfCommit) *NullableDifferentOfCommit {
	return &NullableDifferentOfCommit{value: val, isSet: true}
}

func (v NullableDifferentOfCommit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDifferentOfCommit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


