/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the PinyinPinyinResult type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &PinyinPinyinResult{}

// PinyinPinyinResult struct for PinyinPinyinResult
type PinyinPinyinResult struct {
	// 拼音分词列表
	Array []PinyinPinyinArray `json:"Array"`
	// 拼音
	Value []string `json:"Value"`
}

type _PinyinPinyinResult PinyinPinyinResult

// NewPinyinPinyinResult instantiates a new PinyinPinyinResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPinyinPinyinResult(array []PinyinPinyinArray, value []string) *PinyinPinyinResult {
	this := PinyinPinyinResult{}
	this.Array = array
	this.Value = value
	return &this
}

// NewPinyinPinyinResultWithDefaults instantiates a new PinyinPinyinResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPinyinPinyinResultWithDefaults() *PinyinPinyinResult {
	this := PinyinPinyinResult{}
	return &this
}

// GetArray returns the Array field value
func (o *PinyinPinyinResult) GetArray() []PinyinPinyinArray {
	if o == nil {
		var ret []PinyinPinyinArray
		return ret
	}

	return o.Array
}

// GetArrayOk returns a tuple with the Array field value
// and a boolean to check if the value has been set.
func (o *PinyinPinyinResult) GetArrayOk() ([]PinyinPinyinArray, bool) {
	if o == nil {
		return nil, false
	}
	return o.Array, true
}

// SetArray sets field value
func (o *PinyinPinyinResult) SetArray(v []PinyinPinyinArray) {
	o.Array = v
}

// GetValue returns the Value field value
func (o *PinyinPinyinResult) GetValue() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *PinyinPinyinResult) GetValueOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value, true
}

// SetValue sets field value
func (o *PinyinPinyinResult) SetValue(v []string) {
	o.Value = v
}

func (o PinyinPinyinResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PinyinPinyinResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Array"] = o.Array
	toSerialize["Value"] = o.Value
	return toSerialize, nil
}

func (o *PinyinPinyinResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Array",
		"Value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPinyinPinyinResult := _PinyinPinyinResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPinyinPinyinResult)

	if err != nil {
		return err
	}

	*o = PinyinPinyinResult(varPinyinPinyinResult)

	return err
}

type NullablePinyinPinyinResult struct {
	value *PinyinPinyinResult
	isSet bool
}

func (v NullablePinyinPinyinResult) Get() *PinyinPinyinResult {
	return v.value
}

func (v *NullablePinyinPinyinResult) Set(val *PinyinPinyinResult) {
	v.value = val
	v.isSet = true
}

func (v NullablePinyinPinyinResult) IsSet() bool {
	return v.isSet
}

func (v *NullablePinyinPinyinResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePinyinPinyinResult(val *PinyinPinyinResult) *NullablePinyinPinyinResult {
	return &NullablePinyinPinyinResult{value: val, isSet: true}
}

func (v NullablePinyinPinyinResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePinyinPinyinResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


