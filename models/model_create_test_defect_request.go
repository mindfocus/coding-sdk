/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the CreateTestDefectRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CreateTestDefectRequest{}

// CreateTestDefectRequest struct for CreateTestDefectRequest
type CreateTestDefectRequest struct {
	// 缺陷 ID
	DefectId int32 `json:"DefectId"`
	// 项目名称
	ProjectName string `json:"ProjectName"`
	// 测试任务 ID
	TestId int32 `json:"TestId"`
}

type _CreateTestDefectRequest CreateTestDefectRequest

// NewCreateTestDefectRequest instantiates a new CreateTestDefectRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateTestDefectRequest(defectId int32, projectName string, testId int32) *CreateTestDefectRequest {
	this := CreateTestDefectRequest{}
	this.DefectId = defectId
	this.ProjectName = projectName
	this.TestId = testId
	return &this
}

// NewCreateTestDefectRequestWithDefaults instantiates a new CreateTestDefectRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateTestDefectRequestWithDefaults() *CreateTestDefectRequest {
	this := CreateTestDefectRequest{}
	return &this
}

// GetDefectId returns the DefectId field value
func (o *CreateTestDefectRequest) GetDefectId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DefectId
}

// GetDefectIdOk returns a tuple with the DefectId field value
// and a boolean to check if the value has been set.
func (o *CreateTestDefectRequest) GetDefectIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefectId, true
}

// SetDefectId sets field value
func (o *CreateTestDefectRequest) SetDefectId(v int32) {
	o.DefectId = v
}

// GetProjectName returns the ProjectName field value
func (o *CreateTestDefectRequest) GetProjectName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value
// and a boolean to check if the value has been set.
func (o *CreateTestDefectRequest) GetProjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectName, true
}

// SetProjectName sets field value
func (o *CreateTestDefectRequest) SetProjectName(v string) {
	o.ProjectName = v
}

// GetTestId returns the TestId field value
func (o *CreateTestDefectRequest) GetTestId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TestId
}

// GetTestIdOk returns a tuple with the TestId field value
// and a boolean to check if the value has been set.
func (o *CreateTestDefectRequest) GetTestIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TestId, true
}

// SetTestId sets field value
func (o *CreateTestDefectRequest) SetTestId(v int32) {
	o.TestId = v
}

func (o CreateTestDefectRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateTestDefectRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["DefectId"] = o.DefectId
	toSerialize["ProjectName"] = o.ProjectName
	toSerialize["TestId"] = o.TestId
	return toSerialize, nil
}

func (o *CreateTestDefectRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"DefectId",
		"ProjectName",
		"TestId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateTestDefectRequest := _CreateTestDefectRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateTestDefectRequest)

	if err != nil {
		return err
	}

	*o = CreateTestDefectRequest(varCreateTestDefectRequest)

	return err
}

type NullableCreateTestDefectRequest struct {
	value *CreateTestDefectRequest
	isSet bool
}

func (v NullableCreateTestDefectRequest) Get() *CreateTestDefectRequest {
	return v.value
}

func (v *NullableCreateTestDefectRequest) Set(val *CreateTestDefectRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateTestDefectRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateTestDefectRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateTestDefectRequest(val *CreateTestDefectRequest) *NullableCreateTestDefectRequest {
	return &NullableCreateTestDefectRequest{value: val, isSet: true}
}

func (v NullableCreateTestDefectRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateTestDefectRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


