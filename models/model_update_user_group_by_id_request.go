/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the UpdateUserGroupByIdRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &UpdateUserGroupByIdRequest{}

// UpdateUserGroupByIdRequest struct for UpdateUserGroupByIdRequest
type UpdateUserGroupByIdRequest struct {
	// 用户组描述
	Description string `json:"Description"`
	// 用户组ID
	GroupId int64 `json:"GroupId"`
	// 用户组名称
	Name string `json:"Name"`
}

type _UpdateUserGroupByIdRequest UpdateUserGroupByIdRequest

// NewUpdateUserGroupByIdRequest instantiates a new UpdateUserGroupByIdRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateUserGroupByIdRequest(description string, groupId int64, name string) *UpdateUserGroupByIdRequest {
	this := UpdateUserGroupByIdRequest{}
	this.Description = description
	this.GroupId = groupId
	this.Name = name
	return &this
}

// NewUpdateUserGroupByIdRequestWithDefaults instantiates a new UpdateUserGroupByIdRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateUserGroupByIdRequestWithDefaults() *UpdateUserGroupByIdRequest {
	this := UpdateUserGroupByIdRequest{}
	return &this
}

// GetDescription returns the Description field value
func (o *UpdateUserGroupByIdRequest) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *UpdateUserGroupByIdRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *UpdateUserGroupByIdRequest) SetDescription(v string) {
	o.Description = v
}

// GetGroupId returns the GroupId field value
func (o *UpdateUserGroupByIdRequest) GetGroupId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value
// and a boolean to check if the value has been set.
func (o *UpdateUserGroupByIdRequest) GetGroupIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupId, true
}

// SetGroupId sets field value
func (o *UpdateUserGroupByIdRequest) SetGroupId(v int64) {
	o.GroupId = v
}

// GetName returns the Name field value
func (o *UpdateUserGroupByIdRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UpdateUserGroupByIdRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UpdateUserGroupByIdRequest) SetName(v string) {
	o.Name = v
}

func (o UpdateUserGroupByIdRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateUserGroupByIdRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Description"] = o.Description
	toSerialize["GroupId"] = o.GroupId
	toSerialize["Name"] = o.Name
	return toSerialize, nil
}

func (o *UpdateUserGroupByIdRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Description",
		"GroupId",
		"Name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateUserGroupByIdRequest := _UpdateUserGroupByIdRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateUserGroupByIdRequest)

	if err != nil {
		return err
	}

	*o = UpdateUserGroupByIdRequest(varUpdateUserGroupByIdRequest)

	return err
}

type NullableUpdateUserGroupByIdRequest struct {
	value *UpdateUserGroupByIdRequest
	isSet bool
}

func (v NullableUpdateUserGroupByIdRequest) Get() *UpdateUserGroupByIdRequest {
	return v.value
}

func (v *NullableUpdateUserGroupByIdRequest) Set(val *UpdateUserGroupByIdRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateUserGroupByIdRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateUserGroupByIdRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateUserGroupByIdRequest(val *UpdateUserGroupByIdRequest) *NullableUpdateUserGroupByIdRequest {
	return &NullableUpdateUserGroupByIdRequest{value: val, isSet: true}
}

func (v NullableUpdateUserGroupByIdRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateUserGroupByIdRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


