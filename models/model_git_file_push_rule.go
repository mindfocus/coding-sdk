/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the GitFilePushRule type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &GitFilePushRule{}

// GitFilePushRule git 文件推送权限规则
type GitFilePushRule struct {
	// 文件推送规则 ID
	FilePushRuleId *int64 `json:"FilePushRuleId,omitempty"`
	// 拒绝所有人推送
	IsDenyForAllUser *bool `json:"IsDenyForAllUser,omitempty"`
	// 文件路径
	Pattern *string `json:"Pattern,omitempty"`
	// 特权者列表
	Privileges []GitFilePushRulePrivilege `json:"Privileges,omitempty"`
}

// NewGitFilePushRule instantiates a new GitFilePushRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitFilePushRule() *GitFilePushRule {
	this := GitFilePushRule{}
	var isDenyForAllUser bool = false
	this.IsDenyForAllUser = &isDenyForAllUser
	var pattern string = ""
	this.Pattern = &pattern
	return &this
}

// NewGitFilePushRuleWithDefaults instantiates a new GitFilePushRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitFilePushRuleWithDefaults() *GitFilePushRule {
	this := GitFilePushRule{}
	var isDenyForAllUser bool = false
	this.IsDenyForAllUser = &isDenyForAllUser
	var pattern string = ""
	this.Pattern = &pattern
	return &this
}

// GetFilePushRuleId returns the FilePushRuleId field value if set, zero value otherwise.
func (o *GitFilePushRule) GetFilePushRuleId() int64 {
	if o == nil || utils.IsNil(o.FilePushRuleId) {
		var ret int64
		return ret
	}
	return *o.FilePushRuleId
}

// GetFilePushRuleIdOk returns a tuple with the FilePushRuleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitFilePushRule) GetFilePushRuleIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.FilePushRuleId) {
		return nil, false
	}
	return o.FilePushRuleId, true
}

// HasFilePushRuleId returns a boolean if a field has been set.
func (o *GitFilePushRule) HasFilePushRuleId() bool {
	if o != nil && !utils.IsNil(o.FilePushRuleId) {
		return true
	}

	return false
}

// SetFilePushRuleId gets a reference to the given int64 and assigns it to the FilePushRuleId field.
func (o *GitFilePushRule) SetFilePushRuleId(v int64) {
	o.FilePushRuleId = &v
}

// GetIsDenyForAllUser returns the IsDenyForAllUser field value if set, zero value otherwise.
func (o *GitFilePushRule) GetIsDenyForAllUser() bool {
	if o == nil || utils.IsNil(o.IsDenyForAllUser) {
		var ret bool
		return ret
	}
	return *o.IsDenyForAllUser
}

// GetIsDenyForAllUserOk returns a tuple with the IsDenyForAllUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitFilePushRule) GetIsDenyForAllUserOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IsDenyForAllUser) {
		return nil, false
	}
	return o.IsDenyForAllUser, true
}

// HasIsDenyForAllUser returns a boolean if a field has been set.
func (o *GitFilePushRule) HasIsDenyForAllUser() bool {
	if o != nil && !utils.IsNil(o.IsDenyForAllUser) {
		return true
	}

	return false
}

// SetIsDenyForAllUser gets a reference to the given bool and assigns it to the IsDenyForAllUser field.
func (o *GitFilePushRule) SetIsDenyForAllUser(v bool) {
	o.IsDenyForAllUser = &v
}

// GetPattern returns the Pattern field value if set, zero value otherwise.
func (o *GitFilePushRule) GetPattern() string {
	if o == nil || utils.IsNil(o.Pattern) {
		var ret string
		return ret
	}
	return *o.Pattern
}

// GetPatternOk returns a tuple with the Pattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitFilePushRule) GetPatternOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Pattern) {
		return nil, false
	}
	return o.Pattern, true
}

// HasPattern returns a boolean if a field has been set.
func (o *GitFilePushRule) HasPattern() bool {
	if o != nil && !utils.IsNil(o.Pattern) {
		return true
	}

	return false
}

// SetPattern gets a reference to the given string and assigns it to the Pattern field.
func (o *GitFilePushRule) SetPattern(v string) {
	o.Pattern = &v
}

// GetPrivileges returns the Privileges field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GitFilePushRule) GetPrivileges() []GitFilePushRulePrivilege {
	if o == nil {
		var ret []GitFilePushRulePrivilege
		return ret
	}
	return o.Privileges
}

// GetPrivilegesOk returns a tuple with the Privileges field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GitFilePushRule) GetPrivilegesOk() ([]GitFilePushRulePrivilege, bool) {
	if o == nil || utils.IsNil(o.Privileges) {
		return nil, false
	}
	return o.Privileges, true
}

// HasPrivileges returns a boolean if a field has been set.
func (o *GitFilePushRule) HasPrivileges() bool {
	if o != nil && !utils.IsNil(o.Privileges) {
		return true
	}

	return false
}

// SetPrivileges gets a reference to the given []GitFilePushRulePrivilege and assigns it to the Privileges field.
func (o *GitFilePushRule) SetPrivileges(v []GitFilePushRulePrivilege) {
	o.Privileges = v
}

func (o GitFilePushRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitFilePushRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.FilePushRuleId) {
		toSerialize["FilePushRuleId"] = o.FilePushRuleId
	}
	if !utils.IsNil(o.IsDenyForAllUser) {
		toSerialize["IsDenyForAllUser"] = o.IsDenyForAllUser
	}
	if !utils.IsNil(o.Pattern) {
		toSerialize["Pattern"] = o.Pattern
	}
	if o.Privileges != nil {
		toSerialize["Privileges"] = o.Privileges
	}
	return toSerialize, nil
}

type NullableGitFilePushRule struct {
	value *GitFilePushRule
	isSet bool
}

func (v NullableGitFilePushRule) Get() *GitFilePushRule {
	return v.value
}

func (v *NullableGitFilePushRule) Set(val *GitFilePushRule) {
	v.value = val
	v.isSet = true
}

func (v NullableGitFilePushRule) IsSet() bool {
	return v.isSet
}

func (v *NullableGitFilePushRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitFilePushRule(val *GitFilePushRule) *NullableGitFilePushRule {
	return &NullableGitFilePushRule{value: val, isSet: true}
}

func (v NullableGitFilePushRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitFilePushRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


