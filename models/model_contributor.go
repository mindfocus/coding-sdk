/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the Contributor type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Contributor{}

// Contributor git 贡献者详情
type Contributor struct {
	// 提交次数
	Commits utils.NullableInt64 `json:"Commits,omitempty"`
	// 邮箱
	Email utils.NullableString `json:"Email,omitempty"`
	// 名字
	Name utils.NullableString `json:"Name,omitempty"`
}

// NewContributor instantiates a new Contributor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContributor() *Contributor {
	this := Contributor{}
	var email string = ""
	this.Email = *utils.NewNullableString(&email)
	var name string = ""
	this.Name = *utils.NewNullableString(&name)
	return &this
}

// NewContributorWithDefaults instantiates a new Contributor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContributorWithDefaults() *Contributor {
	this := Contributor{}
	var email string = ""
	this.Email = *utils.NewNullableString(&email)
	var name string = ""
	this.Name = *utils.NewNullableString(&name)
	return &this
}

// GetCommits returns the Commits field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Contributor) GetCommits() int64 {
	if o == nil || utils.IsNil(o.Commits.Get()) {
		var ret int64
		return ret
	}
	return *o.Commits.Get()
}

// GetCommitsOk returns a tuple with the Commits field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Contributor) GetCommitsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Commits.Get(), o.Commits.IsSet()
}

// HasCommits returns a boolean if a field has been set.
func (o *Contributor) HasCommits() bool {
	if o != nil && o.Commits.IsSet() {
		return true
	}

	return false
}

// SetCommits gets a reference to the given utils.NullableInt64 and assigns it to the Commits field.
func (o *Contributor) SetCommits(v int64) {
	o.Commits.Set(&v)
}
// SetCommitsNil sets the value for Commits to be an explicit nil
func (o *Contributor) SetCommitsNil() {
	o.Commits.Set(nil)
}

// UnsetCommits ensures that no value is present for Commits, not even an explicit nil
func (o *Contributor) UnsetCommits() {
	o.Commits.Unset()
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Contributor) GetEmail() string {
	if o == nil || utils.IsNil(o.Email.Get()) {
		var ret string
		return ret
	}
	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Contributor) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// HasEmail returns a boolean if a field has been set.
func (o *Contributor) HasEmail() bool {
	if o != nil && o.Email.IsSet() {
		return true
	}

	return false
}

// SetEmail gets a reference to the given utils.NullableString and assigns it to the Email field.
func (o *Contributor) SetEmail(v string) {
	o.Email.Set(&v)
}
// SetEmailNil sets the value for Email to be an explicit nil
func (o *Contributor) SetEmailNil() {
	o.Email.Set(nil)
}

// UnsetEmail ensures that no value is present for Email, not even an explicit nil
func (o *Contributor) UnsetEmail() {
	o.Email.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Contributor) GetName() string {
	if o == nil || utils.IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Contributor) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *Contributor) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given utils.NullableString and assigns it to the Name field.
func (o *Contributor) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *Contributor) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *Contributor) UnsetName() {
	o.Name.Unset()
}

func (o Contributor) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Contributor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Commits.IsSet() {
		toSerialize["Commits"] = o.Commits.Get()
	}
	if o.Email.IsSet() {
		toSerialize["Email"] = o.Email.Get()
	}
	if o.Name.IsSet() {
		toSerialize["Name"] = o.Name.Get()
	}
	return toSerialize, nil
}

type NullableContributor struct {
	value *Contributor
	isSet bool
}

func (v NullableContributor) Get() *Contributor {
	return v.value
}

func (v *NullableContributor) Set(val *Contributor) {
	v.value = val
	v.isSet = true
}

func (v NullableContributor) IsSet() bool {
	return v.isSet
}

func (v *NullableContributor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContributor(val *Contributor) *NullableContributor {
	return &NullableContributor{value: val, isSet: true}
}

func (v NullableContributor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContributor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


