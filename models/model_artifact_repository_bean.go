/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the ArtifactRepositoryBean type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ArtifactRepositoryBean{}

// ArtifactRepositoryBean 制品仓库实体
type ArtifactRepositoryBean struct {
	// 仓库访问权限：1-项目内;2-团队内;3-公开
	AccessLevel *int64 `json:"AccessLevel,omitempty"`
	// 创建时间
	CreatedAt *int64 `json:"CreatedAt,omitempty"`
	// 仓库描述
	Description utils.NullableString `json:"Description,omitempty"`
	// 仓库 ID
	Id *int32 `json:"Id,omitempty"`
	// 仓库名称
	Name *string `json:"Name,omitempty"`
	// 项目 ID
	ProjectId *int32 `json:"ProjectId,omitempty"`
	// 版本发布策略：1-允许覆盖发布;2-不允许覆盖发布;3-快照策略
	ReleaseStrategy *int64 `json:"ReleaseStrategy,omitempty"`
	// 团队 ID
	TeamId *int32 `json:"TeamId,omitempty"`
	// 仓库类型：1-generic;2-docker;3-maven;4-npm;5-pypi;6-helm;7-composer;8-nuget;9-conan;10-cocoapods;11-rpm
	Type *int64 `json:"Type,omitempty"`
}

// NewArtifactRepositoryBean instantiates a new ArtifactRepositoryBean object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArtifactRepositoryBean() *ArtifactRepositoryBean {
	this := ArtifactRepositoryBean{}
	var description string = ""
	this.Description = *utils.NewNullableString(&description)
	var name string = ""
	this.Name = &name
	return &this
}

// NewArtifactRepositoryBeanWithDefaults instantiates a new ArtifactRepositoryBean object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArtifactRepositoryBeanWithDefaults() *ArtifactRepositoryBean {
	this := ArtifactRepositoryBean{}
	var description string = ""
	this.Description = *utils.NewNullableString(&description)
	var name string = ""
	this.Name = &name
	return &this
}

// GetAccessLevel returns the AccessLevel field value if set, zero value otherwise.
func (o *ArtifactRepositoryBean) GetAccessLevel() int64 {
	if o == nil || utils.IsNil(o.AccessLevel) {
		var ret int64
		return ret
	}
	return *o.AccessLevel
}

// GetAccessLevelOk returns a tuple with the AccessLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactRepositoryBean) GetAccessLevelOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.AccessLevel) {
		return nil, false
	}
	return o.AccessLevel, true
}

// HasAccessLevel returns a boolean if a field has been set.
func (o *ArtifactRepositoryBean) HasAccessLevel() bool {
	if o != nil && !utils.IsNil(o.AccessLevel) {
		return true
	}

	return false
}

// SetAccessLevel gets a reference to the given int64 and assigns it to the AccessLevel field.
func (o *ArtifactRepositoryBean) SetAccessLevel(v int64) {
	o.AccessLevel = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ArtifactRepositoryBean) GetCreatedAt() int64 {
	if o == nil || utils.IsNil(o.CreatedAt) {
		var ret int64
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactRepositoryBean) GetCreatedAtOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ArtifactRepositoryBean) HasCreatedAt() bool {
	if o != nil && !utils.IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int64 and assigns it to the CreatedAt field.
func (o *ArtifactRepositoryBean) SetCreatedAt(v int64) {
	o.CreatedAt = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArtifactRepositoryBean) GetDescription() string {
	if o == nil || utils.IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArtifactRepositoryBean) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *ArtifactRepositoryBean) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given utils.NullableString and assigns it to the Description field.
func (o *ArtifactRepositoryBean) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *ArtifactRepositoryBean) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *ArtifactRepositoryBean) UnsetDescription() {
	o.Description.Unset()
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ArtifactRepositoryBean) GetId() int32 {
	if o == nil || utils.IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactRepositoryBean) GetIdOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ArtifactRepositoryBean) HasId() bool {
	if o != nil && !utils.IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ArtifactRepositoryBean) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ArtifactRepositoryBean) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactRepositoryBean) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ArtifactRepositoryBean) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ArtifactRepositoryBean) SetName(v string) {
	o.Name = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *ArtifactRepositoryBean) GetProjectId() int32 {
	if o == nil || utils.IsNil(o.ProjectId) {
		var ret int32
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactRepositoryBean) GetProjectIdOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *ArtifactRepositoryBean) HasProjectId() bool {
	if o != nil && !utils.IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given int32 and assigns it to the ProjectId field.
func (o *ArtifactRepositoryBean) SetProjectId(v int32) {
	o.ProjectId = &v
}

// GetReleaseStrategy returns the ReleaseStrategy field value if set, zero value otherwise.
func (o *ArtifactRepositoryBean) GetReleaseStrategy() int64 {
	if o == nil || utils.IsNil(o.ReleaseStrategy) {
		var ret int64
		return ret
	}
	return *o.ReleaseStrategy
}

// GetReleaseStrategyOk returns a tuple with the ReleaseStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactRepositoryBean) GetReleaseStrategyOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.ReleaseStrategy) {
		return nil, false
	}
	return o.ReleaseStrategy, true
}

// HasReleaseStrategy returns a boolean if a field has been set.
func (o *ArtifactRepositoryBean) HasReleaseStrategy() bool {
	if o != nil && !utils.IsNil(o.ReleaseStrategy) {
		return true
	}

	return false
}

// SetReleaseStrategy gets a reference to the given int64 and assigns it to the ReleaseStrategy field.
func (o *ArtifactRepositoryBean) SetReleaseStrategy(v int64) {
	o.ReleaseStrategy = &v
}

// GetTeamId returns the TeamId field value if set, zero value otherwise.
func (o *ArtifactRepositoryBean) GetTeamId() int32 {
	if o == nil || utils.IsNil(o.TeamId) {
		var ret int32
		return ret
	}
	return *o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactRepositoryBean) GetTeamIdOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.TeamId) {
		return nil, false
	}
	return o.TeamId, true
}

// HasTeamId returns a boolean if a field has been set.
func (o *ArtifactRepositoryBean) HasTeamId() bool {
	if o != nil && !utils.IsNil(o.TeamId) {
		return true
	}

	return false
}

// SetTeamId gets a reference to the given int32 and assigns it to the TeamId field.
func (o *ArtifactRepositoryBean) SetTeamId(v int32) {
	o.TeamId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ArtifactRepositoryBean) GetType() int64 {
	if o == nil || utils.IsNil(o.Type) {
		var ret int64
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactRepositoryBean) GetTypeOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ArtifactRepositoryBean) HasType() bool {
	if o != nil && !utils.IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given int64 and assigns it to the Type field.
func (o *ArtifactRepositoryBean) SetType(v int64) {
	o.Type = &v
}

func (o ArtifactRepositoryBean) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArtifactRepositoryBean) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.AccessLevel) {
		toSerialize["AccessLevel"] = o.AccessLevel
	}
	if !utils.IsNil(o.CreatedAt) {
		toSerialize["CreatedAt"] = o.CreatedAt
	}
	if o.Description.IsSet() {
		toSerialize["Description"] = o.Description.Get()
	}
	if !utils.IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !utils.IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !utils.IsNil(o.ProjectId) {
		toSerialize["ProjectId"] = o.ProjectId
	}
	if !utils.IsNil(o.ReleaseStrategy) {
		toSerialize["ReleaseStrategy"] = o.ReleaseStrategy
	}
	if !utils.IsNil(o.TeamId) {
		toSerialize["TeamId"] = o.TeamId
	}
	if !utils.IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	return toSerialize, nil
}

type NullableArtifactRepositoryBean struct {
	value *ArtifactRepositoryBean
	isSet bool
}

func (v NullableArtifactRepositoryBean) Get() *ArtifactRepositoryBean {
	return v.value
}

func (v *NullableArtifactRepositoryBean) Set(val *ArtifactRepositoryBean) {
	v.value = val
	v.isSet = true
}

func (v NullableArtifactRepositoryBean) IsSet() bool {
	return v.isSet
}

func (v *NullableArtifactRepositoryBean) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArtifactRepositoryBean(val *ArtifactRepositoryBean) *NullableArtifactRepositoryBean {
	return &NullableArtifactRepositoryBean{value: val, isSet: true}
}

func (v NullableArtifactRepositoryBean) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArtifactRepositoryBean) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


