/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the ModifyReleaseRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ModifyReleaseRequest{}

// ModifyReleaseRequest struct for ModifyReleaseRequest
type ModifyReleaseRequest struct {
	// 修改之后的处理人ID
	Assignee *int64 `json:"Assignee,omitempty"`
	// 需要删除的版本已关联的迭代的列表
	DelIterationCodes []int64 `json:"DelIterationCodes,omitempty"`
	// 需要删除的标签的ID列表
	DelLabelIds []int64 `json:"DelLabelIds,omitempty"`
	// 修改之后的版本描述
	Description *string `json:"Description,omitempty"`
	// 版本关联的迭代code列表
	IterationCodes []int64 `json:"IterationCodes,omitempty"`
	// 需要添加的标签的ID列表
	LabelIds []int64 `json:"LabelIds,omitempty"`
	// 修改之后的版本名
	Name *string `json:"Name,omitempty"`
	// 项目名称 
	ProjectName string `json:"ProjectName"`
	// 页面上版本ID
	ReleaseCode int64 `json:"ReleaseCode"`
	// 修改之后的版本发布日期
	ReleaseDate *string `json:"ReleaseDate,omitempty"`
	// 修改之后的版本开始日期
	StartDate *string `json:"StartDate,omitempty"`
	// 修改之后的状态ID
	StatusId *int64 `json:"StatusId,omitempty"`
}

type _ModifyReleaseRequest ModifyReleaseRequest

// NewModifyReleaseRequest instantiates a new ModifyReleaseRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModifyReleaseRequest(projectName string, releaseCode int64) *ModifyReleaseRequest {
	this := ModifyReleaseRequest{}
	this.ProjectName = projectName
	this.ReleaseCode = releaseCode
	return &this
}

// NewModifyReleaseRequestWithDefaults instantiates a new ModifyReleaseRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModifyReleaseRequestWithDefaults() *ModifyReleaseRequest {
	this := ModifyReleaseRequest{}
	return &this
}

// GetAssignee returns the Assignee field value if set, zero value otherwise.
func (o *ModifyReleaseRequest) GetAssignee() int64 {
	if o == nil || utils.IsNil(o.Assignee) {
		var ret int64
		return ret
	}
	return *o.Assignee
}

// GetAssigneeOk returns a tuple with the Assignee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifyReleaseRequest) GetAssigneeOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Assignee) {
		return nil, false
	}
	return o.Assignee, true
}

// HasAssignee returns a boolean if a field has been set.
func (o *ModifyReleaseRequest) HasAssignee() bool {
	if o != nil && !utils.IsNil(o.Assignee) {
		return true
	}

	return false
}

// SetAssignee gets a reference to the given int64 and assigns it to the Assignee field.
func (o *ModifyReleaseRequest) SetAssignee(v int64) {
	o.Assignee = &v
}

// GetDelIterationCodes returns the DelIterationCodes field value if set, zero value otherwise.
func (o *ModifyReleaseRequest) GetDelIterationCodes() []int64 {
	if o == nil || utils.IsNil(o.DelIterationCodes) {
		var ret []int64
		return ret
	}
	return o.DelIterationCodes
}

// GetDelIterationCodesOk returns a tuple with the DelIterationCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifyReleaseRequest) GetDelIterationCodesOk() ([]int64, bool) {
	if o == nil || utils.IsNil(o.DelIterationCodes) {
		return nil, false
	}
	return o.DelIterationCodes, true
}

// HasDelIterationCodes returns a boolean if a field has been set.
func (o *ModifyReleaseRequest) HasDelIterationCodes() bool {
	if o != nil && !utils.IsNil(o.DelIterationCodes) {
		return true
	}

	return false
}

// SetDelIterationCodes gets a reference to the given []int64 and assigns it to the DelIterationCodes field.
func (o *ModifyReleaseRequest) SetDelIterationCodes(v []int64) {
	o.DelIterationCodes = v
}

// GetDelLabelIds returns the DelLabelIds field value if set, zero value otherwise.
func (o *ModifyReleaseRequest) GetDelLabelIds() []int64 {
	if o == nil || utils.IsNil(o.DelLabelIds) {
		var ret []int64
		return ret
	}
	return o.DelLabelIds
}

// GetDelLabelIdsOk returns a tuple with the DelLabelIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifyReleaseRequest) GetDelLabelIdsOk() ([]int64, bool) {
	if o == nil || utils.IsNil(o.DelLabelIds) {
		return nil, false
	}
	return o.DelLabelIds, true
}

// HasDelLabelIds returns a boolean if a field has been set.
func (o *ModifyReleaseRequest) HasDelLabelIds() bool {
	if o != nil && !utils.IsNil(o.DelLabelIds) {
		return true
	}

	return false
}

// SetDelLabelIds gets a reference to the given []int64 and assigns it to the DelLabelIds field.
func (o *ModifyReleaseRequest) SetDelLabelIds(v []int64) {
	o.DelLabelIds = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ModifyReleaseRequest) GetDescription() string {
	if o == nil || utils.IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifyReleaseRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ModifyReleaseRequest) HasDescription() bool {
	if o != nil && !utils.IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ModifyReleaseRequest) SetDescription(v string) {
	o.Description = &v
}

// GetIterationCodes returns the IterationCodes field value if set, zero value otherwise.
func (o *ModifyReleaseRequest) GetIterationCodes() []int64 {
	if o == nil || utils.IsNil(o.IterationCodes) {
		var ret []int64
		return ret
	}
	return o.IterationCodes
}

// GetIterationCodesOk returns a tuple with the IterationCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifyReleaseRequest) GetIterationCodesOk() ([]int64, bool) {
	if o == nil || utils.IsNil(o.IterationCodes) {
		return nil, false
	}
	return o.IterationCodes, true
}

// HasIterationCodes returns a boolean if a field has been set.
func (o *ModifyReleaseRequest) HasIterationCodes() bool {
	if o != nil && !utils.IsNil(o.IterationCodes) {
		return true
	}

	return false
}

// SetIterationCodes gets a reference to the given []int64 and assigns it to the IterationCodes field.
func (o *ModifyReleaseRequest) SetIterationCodes(v []int64) {
	o.IterationCodes = v
}

// GetLabelIds returns the LabelIds field value if set, zero value otherwise.
func (o *ModifyReleaseRequest) GetLabelIds() []int64 {
	if o == nil || utils.IsNil(o.LabelIds) {
		var ret []int64
		return ret
	}
	return o.LabelIds
}

// GetLabelIdsOk returns a tuple with the LabelIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifyReleaseRequest) GetLabelIdsOk() ([]int64, bool) {
	if o == nil || utils.IsNil(o.LabelIds) {
		return nil, false
	}
	return o.LabelIds, true
}

// HasLabelIds returns a boolean if a field has been set.
func (o *ModifyReleaseRequest) HasLabelIds() bool {
	if o != nil && !utils.IsNil(o.LabelIds) {
		return true
	}

	return false
}

// SetLabelIds gets a reference to the given []int64 and assigns it to the LabelIds field.
func (o *ModifyReleaseRequest) SetLabelIds(v []int64) {
	o.LabelIds = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ModifyReleaseRequest) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifyReleaseRequest) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ModifyReleaseRequest) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ModifyReleaseRequest) SetName(v string) {
	o.Name = &v
}

// GetProjectName returns the ProjectName field value
func (o *ModifyReleaseRequest) GetProjectName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value
// and a boolean to check if the value has been set.
func (o *ModifyReleaseRequest) GetProjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectName, true
}

// SetProjectName sets field value
func (o *ModifyReleaseRequest) SetProjectName(v string) {
	o.ProjectName = v
}

// GetReleaseCode returns the ReleaseCode field value
func (o *ModifyReleaseRequest) GetReleaseCode() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ReleaseCode
}

// GetReleaseCodeOk returns a tuple with the ReleaseCode field value
// and a boolean to check if the value has been set.
func (o *ModifyReleaseRequest) GetReleaseCodeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReleaseCode, true
}

// SetReleaseCode sets field value
func (o *ModifyReleaseRequest) SetReleaseCode(v int64) {
	o.ReleaseCode = v
}

// GetReleaseDate returns the ReleaseDate field value if set, zero value otherwise.
func (o *ModifyReleaseRequest) GetReleaseDate() string {
	if o == nil || utils.IsNil(o.ReleaseDate) {
		var ret string
		return ret
	}
	return *o.ReleaseDate
}

// GetReleaseDateOk returns a tuple with the ReleaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifyReleaseRequest) GetReleaseDateOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ReleaseDate) {
		return nil, false
	}
	return o.ReleaseDate, true
}

// HasReleaseDate returns a boolean if a field has been set.
func (o *ModifyReleaseRequest) HasReleaseDate() bool {
	if o != nil && !utils.IsNil(o.ReleaseDate) {
		return true
	}

	return false
}

// SetReleaseDate gets a reference to the given string and assigns it to the ReleaseDate field.
func (o *ModifyReleaseRequest) SetReleaseDate(v string) {
	o.ReleaseDate = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *ModifyReleaseRequest) GetStartDate() string {
	if o == nil || utils.IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifyReleaseRequest) GetStartDateOk() (*string, bool) {
	if o == nil || utils.IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *ModifyReleaseRequest) HasStartDate() bool {
	if o != nil && !utils.IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *ModifyReleaseRequest) SetStartDate(v string) {
	o.StartDate = &v
}

// GetStatusId returns the StatusId field value if set, zero value otherwise.
func (o *ModifyReleaseRequest) GetStatusId() int64 {
	if o == nil || utils.IsNil(o.StatusId) {
		var ret int64
		return ret
	}
	return *o.StatusId
}

// GetStatusIdOk returns a tuple with the StatusId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifyReleaseRequest) GetStatusIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.StatusId) {
		return nil, false
	}
	return o.StatusId, true
}

// HasStatusId returns a boolean if a field has been set.
func (o *ModifyReleaseRequest) HasStatusId() bool {
	if o != nil && !utils.IsNil(o.StatusId) {
		return true
	}

	return false
}

// SetStatusId gets a reference to the given int64 and assigns it to the StatusId field.
func (o *ModifyReleaseRequest) SetStatusId(v int64) {
	o.StatusId = &v
}

func (o ModifyReleaseRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModifyReleaseRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Assignee) {
		toSerialize["Assignee"] = o.Assignee
	}
	if !utils.IsNil(o.DelIterationCodes) {
		toSerialize["DelIterationCodes"] = o.DelIterationCodes
	}
	if !utils.IsNil(o.DelLabelIds) {
		toSerialize["DelLabelIds"] = o.DelLabelIds
	}
	if !utils.IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !utils.IsNil(o.IterationCodes) {
		toSerialize["IterationCodes"] = o.IterationCodes
	}
	if !utils.IsNil(o.LabelIds) {
		toSerialize["LabelIds"] = o.LabelIds
	}
	if !utils.IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	toSerialize["ProjectName"] = o.ProjectName
	toSerialize["ReleaseCode"] = o.ReleaseCode
	if !utils.IsNil(o.ReleaseDate) {
		toSerialize["ReleaseDate"] = o.ReleaseDate
	}
	if !utils.IsNil(o.StartDate) {
		toSerialize["StartDate"] = o.StartDate
	}
	if !utils.IsNil(o.StatusId) {
		toSerialize["StatusId"] = o.StatusId
	}
	return toSerialize, nil
}

func (o *ModifyReleaseRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ProjectName",
		"ReleaseCode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModifyReleaseRequest := _ModifyReleaseRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModifyReleaseRequest)

	if err != nil {
		return err
	}

	*o = ModifyReleaseRequest(varModifyReleaseRequest)

	return err
}

type NullableModifyReleaseRequest struct {
	value *ModifyReleaseRequest
	isSet bool
}

func (v NullableModifyReleaseRequest) Get() *ModifyReleaseRequest {
	return v.value
}

func (v *NullableModifyReleaseRequest) Set(val *ModifyReleaseRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableModifyReleaseRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableModifyReleaseRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModifyReleaseRequest(val *ModifyReleaseRequest) *NullableModifyReleaseRequest {
	return &NullableModifyReleaseRequest{value: val, isSet: true}
}

func (v NullableModifyReleaseRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModifyReleaseRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


