/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DescribePolicyRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DescribePolicyRequest{}

// DescribePolicyRequest struct for DescribePolicyRequest
type DescribePolicyRequest struct {
	// 针对模糊配置的 action 定义，是否转换成精确的 action 定义返回
	AccurateActions bool `json:"AccurateActions"`
	// 权限组 ID
	PolicyId int64 `json:"PolicyId"`
}

type _DescribePolicyRequest DescribePolicyRequest

// NewDescribePolicyRequest instantiates a new DescribePolicyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribePolicyRequest(accurateActions bool, policyId int64) *DescribePolicyRequest {
	this := DescribePolicyRequest{}
	this.AccurateActions = accurateActions
	this.PolicyId = policyId
	return &this
}

// NewDescribePolicyRequestWithDefaults instantiates a new DescribePolicyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribePolicyRequestWithDefaults() *DescribePolicyRequest {
	this := DescribePolicyRequest{}
	return &this
}

// GetAccurateActions returns the AccurateActions field value
func (o *DescribePolicyRequest) GetAccurateActions() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AccurateActions
}

// GetAccurateActionsOk returns a tuple with the AccurateActions field value
// and a boolean to check if the value has been set.
func (o *DescribePolicyRequest) GetAccurateActionsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccurateActions, true
}

// SetAccurateActions sets field value
func (o *DescribePolicyRequest) SetAccurateActions(v bool) {
	o.AccurateActions = v
}

// GetPolicyId returns the PolicyId field value
func (o *DescribePolicyRequest) GetPolicyId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.PolicyId
}

// GetPolicyIdOk returns a tuple with the PolicyId field value
// and a boolean to check if the value has been set.
func (o *DescribePolicyRequest) GetPolicyIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PolicyId, true
}

// SetPolicyId sets field value
func (o *DescribePolicyRequest) SetPolicyId(v int64) {
	o.PolicyId = v
}

func (o DescribePolicyRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribePolicyRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["AccurateActions"] = o.AccurateActions
	toSerialize["PolicyId"] = o.PolicyId
	return toSerialize, nil
}

func (o *DescribePolicyRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"AccurateActions",
		"PolicyId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescribePolicyRequest := _DescribePolicyRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDescribePolicyRequest)

	if err != nil {
		return err
	}

	*o = DescribePolicyRequest(varDescribePolicyRequest)

	return err
}

type NullableDescribePolicyRequest struct {
	value *DescribePolicyRequest
	isSet bool
}

func (v NullableDescribePolicyRequest) Get() *DescribePolicyRequest {
	return v.value
}

func (v *NullableDescribePolicyRequest) Set(val *DescribePolicyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribePolicyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribePolicyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribePolicyRequest(val *DescribePolicyRequest) *NullableDescribePolicyRequest {
	return &NullableDescribePolicyRequest{value: val, isSet: true}
}

func (v NullableDescribePolicyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribePolicyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


