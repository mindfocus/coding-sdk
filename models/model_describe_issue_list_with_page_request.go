/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DescribeIssueListWithPageRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DescribeIssueListWithPageRequest{}

// DescribeIssueListWithPageRequest struct for DescribeIssueListWithPageRequest
type DescribeIssueListWithPageRequest struct {
	Conditions *IssueCondition `json:"Conditions,omitempty"`
	// 是否展示子工作项
	ExcludeSubTask *bool `json:"ExcludeSubTask,omitempty"`
	// ALL - 全部事项 DEFECT - 缺陷 REQUIREMENT - 需求 MISSION - 任务 EPIC - 史诗
	IssueType string `json:"IssueType"`
	// 页码
	PageNumber int64 `json:"PageNumber"`
	// 每页展示数，默认 20 ，最大值 500
	PageSize int64 `json:"PageSize"`
	// 项目名称
	ProjectName string `json:"ProjectName"`
	// 是否展示子事项
	ShowSubIssues *bool `json:"ShowSubIssues,omitempty"`
	// 排序字段，默认：CODE 可选值：STATUS, CREATED_AT, PRIORITY, UPDATED_AT, DUE_DATE, CODE, JOIN_ITERATION_AT, STATUS_TYPE, ASSIGNEE, PROJECT_ID, ISSUE_STATUS_ID, ISSUE_ITERATION_SORT, ISSUE_ROADMAP_SORT, PARENT_ID, COMPLETED_AT
	SortKey *string `json:"SortKey,omitempty"`
	//  排序方式 DESC - 倒序（默认值） ASC - 正序
	SortValue *string `json:"SortValue,omitempty"`
}

type _DescribeIssueListWithPageRequest DescribeIssueListWithPageRequest

// NewDescribeIssueListWithPageRequest instantiates a new DescribeIssueListWithPageRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeIssueListWithPageRequest(issueType string, pageNumber int64, pageSize int64, projectName string) *DescribeIssueListWithPageRequest {
	this := DescribeIssueListWithPageRequest{}
	this.IssueType = issueType
	this.PageNumber = pageNumber
	this.PageSize = pageSize
	this.ProjectName = projectName
	return &this
}

// NewDescribeIssueListWithPageRequestWithDefaults instantiates a new DescribeIssueListWithPageRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeIssueListWithPageRequestWithDefaults() *DescribeIssueListWithPageRequest {
	this := DescribeIssueListWithPageRequest{}
	return &this
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *DescribeIssueListWithPageRequest) GetConditions() IssueCondition {
	if o == nil || utils.IsNil(o.Conditions) {
		var ret IssueCondition
		return ret
	}
	return *o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeIssueListWithPageRequest) GetConditionsOk() (*IssueCondition, bool) {
	if o == nil || utils.IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *DescribeIssueListWithPageRequest) HasConditions() bool {
	if o != nil && !utils.IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given IssueCondition and assigns it to the Conditions field.
func (o *DescribeIssueListWithPageRequest) SetConditions(v IssueCondition) {
	o.Conditions = &v
}

// GetExcludeSubTask returns the ExcludeSubTask field value if set, zero value otherwise.
func (o *DescribeIssueListWithPageRequest) GetExcludeSubTask() bool {
	if o == nil || utils.IsNil(o.ExcludeSubTask) {
		var ret bool
		return ret
	}
	return *o.ExcludeSubTask
}

// GetExcludeSubTaskOk returns a tuple with the ExcludeSubTask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeIssueListWithPageRequest) GetExcludeSubTaskOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.ExcludeSubTask) {
		return nil, false
	}
	return o.ExcludeSubTask, true
}

// HasExcludeSubTask returns a boolean if a field has been set.
func (o *DescribeIssueListWithPageRequest) HasExcludeSubTask() bool {
	if o != nil && !utils.IsNil(o.ExcludeSubTask) {
		return true
	}

	return false
}

// SetExcludeSubTask gets a reference to the given bool and assigns it to the ExcludeSubTask field.
func (o *DescribeIssueListWithPageRequest) SetExcludeSubTask(v bool) {
	o.ExcludeSubTask = &v
}

// GetIssueType returns the IssueType field value
func (o *DescribeIssueListWithPageRequest) GetIssueType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IssueType
}

// GetIssueTypeOk returns a tuple with the IssueType field value
// and a boolean to check if the value has been set.
func (o *DescribeIssueListWithPageRequest) GetIssueTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssueType, true
}

// SetIssueType sets field value
func (o *DescribeIssueListWithPageRequest) SetIssueType(v string) {
	o.IssueType = v
}

// GetPageNumber returns the PageNumber field value
func (o *DescribeIssueListWithPageRequest) GetPageNumber() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.PageNumber
}

// GetPageNumberOk returns a tuple with the PageNumber field value
// and a boolean to check if the value has been set.
func (o *DescribeIssueListWithPageRequest) GetPageNumberOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PageNumber, true
}

// SetPageNumber sets field value
func (o *DescribeIssueListWithPageRequest) SetPageNumber(v int64) {
	o.PageNumber = v
}

// GetPageSize returns the PageSize field value
func (o *DescribeIssueListWithPageRequest) GetPageSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value
// and a boolean to check if the value has been set.
func (o *DescribeIssueListWithPageRequest) GetPageSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PageSize, true
}

// SetPageSize sets field value
func (o *DescribeIssueListWithPageRequest) SetPageSize(v int64) {
	o.PageSize = v
}

// GetProjectName returns the ProjectName field value
func (o *DescribeIssueListWithPageRequest) GetProjectName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value
// and a boolean to check if the value has been set.
func (o *DescribeIssueListWithPageRequest) GetProjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectName, true
}

// SetProjectName sets field value
func (o *DescribeIssueListWithPageRequest) SetProjectName(v string) {
	o.ProjectName = v
}

// GetShowSubIssues returns the ShowSubIssues field value if set, zero value otherwise.
func (o *DescribeIssueListWithPageRequest) GetShowSubIssues() bool {
	if o == nil || utils.IsNil(o.ShowSubIssues) {
		var ret bool
		return ret
	}
	return *o.ShowSubIssues
}

// GetShowSubIssuesOk returns a tuple with the ShowSubIssues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeIssueListWithPageRequest) GetShowSubIssuesOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.ShowSubIssues) {
		return nil, false
	}
	return o.ShowSubIssues, true
}

// HasShowSubIssues returns a boolean if a field has been set.
func (o *DescribeIssueListWithPageRequest) HasShowSubIssues() bool {
	if o != nil && !utils.IsNil(o.ShowSubIssues) {
		return true
	}

	return false
}

// SetShowSubIssues gets a reference to the given bool and assigns it to the ShowSubIssues field.
func (o *DescribeIssueListWithPageRequest) SetShowSubIssues(v bool) {
	o.ShowSubIssues = &v
}

// GetSortKey returns the SortKey field value if set, zero value otherwise.
func (o *DescribeIssueListWithPageRequest) GetSortKey() string {
	if o == nil || utils.IsNil(o.SortKey) {
		var ret string
		return ret
	}
	return *o.SortKey
}

// GetSortKeyOk returns a tuple with the SortKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeIssueListWithPageRequest) GetSortKeyOk() (*string, bool) {
	if o == nil || utils.IsNil(o.SortKey) {
		return nil, false
	}
	return o.SortKey, true
}

// HasSortKey returns a boolean if a field has been set.
func (o *DescribeIssueListWithPageRequest) HasSortKey() bool {
	if o != nil && !utils.IsNil(o.SortKey) {
		return true
	}

	return false
}

// SetSortKey gets a reference to the given string and assigns it to the SortKey field.
func (o *DescribeIssueListWithPageRequest) SetSortKey(v string) {
	o.SortKey = &v
}

// GetSortValue returns the SortValue field value if set, zero value otherwise.
func (o *DescribeIssueListWithPageRequest) GetSortValue() string {
	if o == nil || utils.IsNil(o.SortValue) {
		var ret string
		return ret
	}
	return *o.SortValue
}

// GetSortValueOk returns a tuple with the SortValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeIssueListWithPageRequest) GetSortValueOk() (*string, bool) {
	if o == nil || utils.IsNil(o.SortValue) {
		return nil, false
	}
	return o.SortValue, true
}

// HasSortValue returns a boolean if a field has been set.
func (o *DescribeIssueListWithPageRequest) HasSortValue() bool {
	if o != nil && !utils.IsNil(o.SortValue) {
		return true
	}

	return false
}

// SetSortValue gets a reference to the given string and assigns it to the SortValue field.
func (o *DescribeIssueListWithPageRequest) SetSortValue(v string) {
	o.SortValue = &v
}

func (o DescribeIssueListWithPageRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeIssueListWithPageRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Conditions) {
		toSerialize["Conditions"] = o.Conditions
	}
	if !utils.IsNil(o.ExcludeSubTask) {
		toSerialize["ExcludeSubTask"] = o.ExcludeSubTask
	}
	toSerialize["IssueType"] = o.IssueType
	toSerialize["PageNumber"] = o.PageNumber
	toSerialize["PageSize"] = o.PageSize
	toSerialize["ProjectName"] = o.ProjectName
	if !utils.IsNil(o.ShowSubIssues) {
		toSerialize["ShowSubIssues"] = o.ShowSubIssues
	}
	if !utils.IsNil(o.SortKey) {
		toSerialize["SortKey"] = o.SortKey
	}
	if !utils.IsNil(o.SortValue) {
		toSerialize["SortValue"] = o.SortValue
	}
	return toSerialize, nil
}

func (o *DescribeIssueListWithPageRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"IssueType",
		"PageNumber",
		"PageSize",
		"ProjectName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescribeIssueListWithPageRequest := _DescribeIssueListWithPageRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDescribeIssueListWithPageRequest)

	if err != nil {
		return err
	}

	*o = DescribeIssueListWithPageRequest(varDescribeIssueListWithPageRequest)

	return err
}

type NullableDescribeIssueListWithPageRequest struct {
	value *DescribeIssueListWithPageRequest
	isSet bool
}

func (v NullableDescribeIssueListWithPageRequest) Get() *DescribeIssueListWithPageRequest {
	return v.value
}

func (v *NullableDescribeIssueListWithPageRequest) Set(val *DescribeIssueListWithPageRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeIssueListWithPageRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeIssueListWithPageRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeIssueListWithPageRequest(val *DescribeIssueListWithPageRequest) *NullableDescribeIssueListWithPageRequest {
	return &NullableDescribeIssueListWithPageRequest{value: val, isSet: true}
}

func (v NullableDescribeIssueListWithPageRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeIssueListWithPageRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


