/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the RunData type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &RunData{}

// RunData 测试计划数据
type RunData struct {
	Run *Run `json:"Run,omitempty"`
}

// NewRunData instantiates a new RunData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunData() *RunData {
	this := RunData{}
	return &this
}

// NewRunDataWithDefaults instantiates a new RunData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunDataWithDefaults() *RunData {
	this := RunData{}
	return &this
}

// GetRun returns the Run field value if set, zero value otherwise.
func (o *RunData) GetRun() Run {
	if o == nil || utils.IsNil(o.Run) {
		var ret Run
		return ret
	}
	return *o.Run
}

// GetRunOk returns a tuple with the Run field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunData) GetRunOk() (*Run, bool) {
	if o == nil || utils.IsNil(o.Run) {
		return nil, false
	}
	return o.Run, true
}

// HasRun returns a boolean if a field has been set.
func (o *RunData) HasRun() bool {
	if o != nil && !utils.IsNil(o.Run) {
		return true
	}

	return false
}

// SetRun gets a reference to the given Run and assigns it to the Run field.
func (o *RunData) SetRun(v Run) {
	o.Run = &v
}

func (o RunData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Run) {
		toSerialize["Run"] = o.Run
	}
	return toSerialize, nil
}

type NullableRunData struct {
	value *RunData
	isSet bool
}

func (v NullableRunData) Get() *RunData {
	return v.value
}

func (v *NullableRunData) Set(val *RunData) {
	v.value = val
	v.isSet = true
}

func (v NullableRunData) IsSet() bool {
	return v.isSet
}

func (v *NullableRunData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunData(val *RunData) *NullableRunData {
	return &NullableRunData{value: val, isSet: true}
}

func (v NullableRunData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


