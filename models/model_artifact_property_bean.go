/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"
	"github.com/mindfocus/coding-sdk/utils"
)

// checks if the ArtifactPropertyBean type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ArtifactPropertyBean{}

// ArtifactPropertyBean 简单制品属性实体，用于新增、修改制品属性
type ArtifactPropertyBean struct {
	// 属性名称（以 ‘coding.’ 作为属性名称开头的属性，将不可变更及删除，即 Immutable = false）
	Name string `json:"Name"`
	// 属性值
	Value string `json:"Value"`
}

type _ArtifactPropertyBean ArtifactPropertyBean

// NewArtifactPropertyBean instantiates a new ArtifactPropertyBean object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArtifactPropertyBean(name string, value string) *ArtifactPropertyBean {
	this := ArtifactPropertyBean{}
	this.Name = name
	this.Value = value
	return &this
}

// NewArtifactPropertyBeanWithDefaults instantiates a new ArtifactPropertyBean object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArtifactPropertyBeanWithDefaults() *ArtifactPropertyBean {
	this := ArtifactPropertyBean{}
	var name string = ""
	this.Name = name
	var value string = ""
	this.Value = value
	return &this
}

// GetName returns the Name field value
func (o *ArtifactPropertyBean) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ArtifactPropertyBean) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ArtifactPropertyBean) SetName(v string) {
	o.Name = v
}

// GetValue returns the Value field value
func (o *ArtifactPropertyBean) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ArtifactPropertyBean) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *ArtifactPropertyBean) SetValue(v string) {
	o.Value = v
}

func (o ArtifactPropertyBean) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArtifactPropertyBean) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Name"] = o.Name
	toSerialize["Value"] = o.Value
	return toSerialize, nil
}

func (o *ArtifactPropertyBean) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Name",
		"Value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varArtifactPropertyBean := _ArtifactPropertyBean{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varArtifactPropertyBean)

	if err != nil {
		return err
	}

	*o = ArtifactPropertyBean(varArtifactPropertyBean)

	return err
}

type NullableArtifactPropertyBean struct {
	value *ArtifactPropertyBean
	isSet bool
}

func (v NullableArtifactPropertyBean) Get() *ArtifactPropertyBean {
	return v.value
}

func (v *NullableArtifactPropertyBean) Set(val *ArtifactPropertyBean) {
	v.value = val
	v.isSet = true
}

func (v NullableArtifactPropertyBean) IsSet() bool {
	return v.isSet
}

func (v *NullableArtifactPropertyBean) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArtifactPropertyBean(val *ArtifactPropertyBean) *NullableArtifactPropertyBean {
	return &NullableArtifactPropertyBean{value: val, isSet: true}
}

func (v NullableArtifactPropertyBean) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArtifactPropertyBean) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


