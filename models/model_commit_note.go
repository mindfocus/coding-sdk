/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the CommitNote type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CommitNote{}

// CommitNote 用于描述请求的Note值
type CommitNote struct {
	// 请求的sha值
	CommitSha *string `json:"CommitSha,omitempty"`
	// note的具体值
	NoteContent *string `json:"NoteContent,omitempty"`
}

// NewCommitNote instantiates a new CommitNote object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommitNote() *CommitNote {
	this := CommitNote{}
	var commitSha string = ""
	this.CommitSha = &commitSha
	var noteContent string = ""
	this.NoteContent = &noteContent
	return &this
}

// NewCommitNoteWithDefaults instantiates a new CommitNote object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitNoteWithDefaults() *CommitNote {
	this := CommitNote{}
	var commitSha string = ""
	this.CommitSha = &commitSha
	var noteContent string = ""
	this.NoteContent = &noteContent
	return &this
}

// GetCommitSha returns the CommitSha field value if set, zero value otherwise.
func (o *CommitNote) GetCommitSha() string {
	if o == nil || utils.IsNil(o.CommitSha) {
		var ret string
		return ret
	}
	return *o.CommitSha
}

// GetCommitShaOk returns a tuple with the CommitSha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitNote) GetCommitShaOk() (*string, bool) {
	if o == nil || utils.IsNil(o.CommitSha) {
		return nil, false
	}
	return o.CommitSha, true
}

// HasCommitSha returns a boolean if a field has been set.
func (o *CommitNote) HasCommitSha() bool {
	if o != nil && !utils.IsNil(o.CommitSha) {
		return true
	}

	return false
}

// SetCommitSha gets a reference to the given string and assigns it to the CommitSha field.
func (o *CommitNote) SetCommitSha(v string) {
	o.CommitSha = &v
}

// GetNoteContent returns the NoteContent field value if set, zero value otherwise.
func (o *CommitNote) GetNoteContent() string {
	if o == nil || utils.IsNil(o.NoteContent) {
		var ret string
		return ret
	}
	return *o.NoteContent
}

// GetNoteContentOk returns a tuple with the NoteContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitNote) GetNoteContentOk() (*string, bool) {
	if o == nil || utils.IsNil(o.NoteContent) {
		return nil, false
	}
	return o.NoteContent, true
}

// HasNoteContent returns a boolean if a field has been set.
func (o *CommitNote) HasNoteContent() bool {
	if o != nil && !utils.IsNil(o.NoteContent) {
		return true
	}

	return false
}

// SetNoteContent gets a reference to the given string and assigns it to the NoteContent field.
func (o *CommitNote) SetNoteContent(v string) {
	o.NoteContent = &v
}

func (o CommitNote) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommitNote) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.CommitSha) {
		toSerialize["CommitSha"] = o.CommitSha
	}
	if !utils.IsNil(o.NoteContent) {
		toSerialize["NoteContent"] = o.NoteContent
	}
	return toSerialize, nil
}

type NullableCommitNote struct {
	value *CommitNote
	isSet bool
}

func (v NullableCommitNote) Get() *CommitNote {
	return v.value
}

func (v *NullableCommitNote) Set(val *CommitNote) {
	v.value = val
	v.isSet = true
}

func (v NullableCommitNote) IsSet() bool {
	return v.isSet
}

func (v *NullableCommitNote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommitNote(val *CommitNote) *NullableCommitNote {
	return &NullableCommitNote{value: val, isSet: true}
}

func (v NullableCommitNote) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommitNote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


