/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the PipelineIdIndex type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &PipelineIdIndex{}

// PipelineIdIndex PipelineIdIndex 结构
type PipelineIdIndex struct {
	// 排序索引
	Index int64 `json:"Index"`
	// 部署流程 ID
	PipelineId string `json:"PipelineId"`
}

type _PipelineIdIndex PipelineIdIndex

// NewPipelineIdIndex instantiates a new PipelineIdIndex object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPipelineIdIndex(index int64, pipelineId string) *PipelineIdIndex {
	this := PipelineIdIndex{}
	this.Index = index
	this.PipelineId = pipelineId
	return &this
}

// NewPipelineIdIndexWithDefaults instantiates a new PipelineIdIndex object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPipelineIdIndexWithDefaults() *PipelineIdIndex {
	this := PipelineIdIndex{}
	var pipelineId string = ""
	this.PipelineId = pipelineId
	return &this
}

// GetIndex returns the Index field value
func (o *PipelineIdIndex) GetIndex() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *PipelineIdIndex) GetIndexOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value
func (o *PipelineIdIndex) SetIndex(v int64) {
	o.Index = v
}

// GetPipelineId returns the PipelineId field value
func (o *PipelineIdIndex) GetPipelineId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PipelineId
}

// GetPipelineIdOk returns a tuple with the PipelineId field value
// and a boolean to check if the value has been set.
func (o *PipelineIdIndex) GetPipelineIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PipelineId, true
}

// SetPipelineId sets field value
func (o *PipelineIdIndex) SetPipelineId(v string) {
	o.PipelineId = v
}

func (o PipelineIdIndex) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PipelineIdIndex) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Index"] = o.Index
	toSerialize["PipelineId"] = o.PipelineId
	return toSerialize, nil
}

func (o *PipelineIdIndex) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Index",
		"PipelineId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPipelineIdIndex := _PipelineIdIndex{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPipelineIdIndex)

	if err != nil {
		return err
	}

	*o = PipelineIdIndex(varPipelineIdIndex)

	return err
}

type NullablePipelineIdIndex struct {
	value *PipelineIdIndex
	isSet bool
}

func (v NullablePipelineIdIndex) Get() *PipelineIdIndex {
	return v.value
}

func (v *NullablePipelineIdIndex) Set(val *PipelineIdIndex) {
	v.value = val
	v.isSet = true
}

func (v NullablePipelineIdIndex) IsSet() bool {
	return v.isSet
}

func (v *NullablePipelineIdIndex) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePipelineIdIndex(val *PipelineIdIndex) *NullablePipelineIdIndex {
	return &NullablePipelineIdIndex{value: val, isSet: true}
}

func (v NullablePipelineIdIndex) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePipelineIdIndex) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


