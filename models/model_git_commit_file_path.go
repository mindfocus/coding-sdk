/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the GitCommitFilePath type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &GitCommitFilePath{}

// GitCommitFilePath git 提交中文件路径信息
type GitCommitFilePath struct {
	// 文件改动类型为 move 时，（移动、重命名），文件的新路径
	NewPath utils.NullableString `json:"NewPath,omitempty"`
	// 改动文件的路径
	Path utils.NullableString `json:"Path,omitempty"`
	// 文件改动类型 add update delete move
	Type utils.NullableString `json:"Type,omitempty"`
}

// NewGitCommitFilePath instantiates a new GitCommitFilePath object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitCommitFilePath() *GitCommitFilePath {
	this := GitCommitFilePath{}
	var newPath string = ""
	this.NewPath = *utils.NewNullableString(&newPath)
	var path string = ""
	this.Path = *utils.NewNullableString(&path)
	var type_ string = ""
	this.Type = *utils.NewNullableString(&type_)
	return &this
}

// NewGitCommitFilePathWithDefaults instantiates a new GitCommitFilePath object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitCommitFilePathWithDefaults() *GitCommitFilePath {
	this := GitCommitFilePath{}
	var newPath string = ""
	this.NewPath = *utils.NewNullableString(&newPath)
	var path string = ""
	this.Path = *utils.NewNullableString(&path)
	var type_ string = ""
	this.Type = *utils.NewNullableString(&type_)
	return &this
}

// GetNewPath returns the NewPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GitCommitFilePath) GetNewPath() string {
	if o == nil || utils.IsNil(o.NewPath.Get()) {
		var ret string
		return ret
	}
	return *o.NewPath.Get()
}

// GetNewPathOk returns a tuple with the NewPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GitCommitFilePath) GetNewPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NewPath.Get(), o.NewPath.IsSet()
}

// HasNewPath returns a boolean if a field has been set.
func (o *GitCommitFilePath) HasNewPath() bool {
	if o != nil && o.NewPath.IsSet() {
		return true
	}

	return false
}

// SetNewPath gets a reference to the given utils.NullableString and assigns it to the NewPath field.
func (o *GitCommitFilePath) SetNewPath(v string) {
	o.NewPath.Set(&v)
}
// SetNewPathNil sets the value for NewPath to be an explicit nil
func (o *GitCommitFilePath) SetNewPathNil() {
	o.NewPath.Set(nil)
}

// UnsetNewPath ensures that no value is present for NewPath, not even an explicit nil
func (o *GitCommitFilePath) UnsetNewPath() {
	o.NewPath.Unset()
}

// GetPath returns the Path field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GitCommitFilePath) GetPath() string {
	if o == nil || utils.IsNil(o.Path.Get()) {
		var ret string
		return ret
	}
	return *o.Path.Get()
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GitCommitFilePath) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Path.Get(), o.Path.IsSet()
}

// HasPath returns a boolean if a field has been set.
func (o *GitCommitFilePath) HasPath() bool {
	if o != nil && o.Path.IsSet() {
		return true
	}

	return false
}

// SetPath gets a reference to the given utils.NullableString and assigns it to the Path field.
func (o *GitCommitFilePath) SetPath(v string) {
	o.Path.Set(&v)
}
// SetPathNil sets the value for Path to be an explicit nil
func (o *GitCommitFilePath) SetPathNil() {
	o.Path.Set(nil)
}

// UnsetPath ensures that no value is present for Path, not even an explicit nil
func (o *GitCommitFilePath) UnsetPath() {
	o.Path.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GitCommitFilePath) GetType() string {
	if o == nil || utils.IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GitCommitFilePath) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *GitCommitFilePath) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given utils.NullableString and assigns it to the Type field.
func (o *GitCommitFilePath) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *GitCommitFilePath) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *GitCommitFilePath) UnsetType() {
	o.Type.Unset()
}

func (o GitCommitFilePath) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitCommitFilePath) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.NewPath.IsSet() {
		toSerialize["NewPath"] = o.NewPath.Get()
	}
	if o.Path.IsSet() {
		toSerialize["Path"] = o.Path.Get()
	}
	if o.Type.IsSet() {
		toSerialize["Type"] = o.Type.Get()
	}
	return toSerialize, nil
}

type NullableGitCommitFilePath struct {
	value *GitCommitFilePath
	isSet bool
}

func (v NullableGitCommitFilePath) Get() *GitCommitFilePath {
	return v.value
}

func (v *NullableGitCommitFilePath) Set(val *GitCommitFilePath) {
	v.value = val
	v.isSet = true
}

func (v NullableGitCommitFilePath) IsSet() bool {
	return v.isSet
}

func (v *NullableGitCommitFilePath) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitCommitFilePath(val *GitCommitFilePath) *NullableGitCommitFilePath {
	return &NullableGitCommitFilePath{value: val, isSet: true}
}

func (v NullableGitCommitFilePath) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitCommitFilePath) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


