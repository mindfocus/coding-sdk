/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DescribeAllProjectLabels200ResponseResponse type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DescribeAllProjectLabels200ResponseResponse{}

// DescribeAllProjectLabels200ResponseResponse 公共返回体
type DescribeAllProjectLabels200ResponseResponse struct {
	// 标签列表
	Labels []ProjectLabelLabels `json:"Labels,omitempty"`
	// 请求id
	RequestId *string `json:"RequestId,omitempty"`
}

// NewDescribeAllProjectLabels200ResponseResponse instantiates a new DescribeAllProjectLabels200ResponseResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeAllProjectLabels200ResponseResponse() *DescribeAllProjectLabels200ResponseResponse {
	this := DescribeAllProjectLabels200ResponseResponse{}
	var requestId string = "xxxxx"
	this.RequestId = &requestId
	return &this
}

// NewDescribeAllProjectLabels200ResponseResponseWithDefaults instantiates a new DescribeAllProjectLabels200ResponseResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeAllProjectLabels200ResponseResponseWithDefaults() *DescribeAllProjectLabels200ResponseResponse {
	this := DescribeAllProjectLabels200ResponseResponse{}
	var requestId string = "xxxxx"
	this.RequestId = &requestId
	return &this
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *DescribeAllProjectLabels200ResponseResponse) GetLabels() []ProjectLabelLabels {
	if o == nil || utils.IsNil(o.Labels) {
		var ret []ProjectLabelLabels
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeAllProjectLabels200ResponseResponse) GetLabelsOk() ([]ProjectLabelLabels, bool) {
	if o == nil || utils.IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *DescribeAllProjectLabels200ResponseResponse) HasLabels() bool {
	if o != nil && !utils.IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []ProjectLabelLabels and assigns it to the Labels field.
func (o *DescribeAllProjectLabels200ResponseResponse) SetLabels(v []ProjectLabelLabels) {
	o.Labels = v
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *DescribeAllProjectLabels200ResponseResponse) GetRequestId() string {
	if o == nil || utils.IsNil(o.RequestId) {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeAllProjectLabels200ResponseResponse) GetRequestIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.RequestId) {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *DescribeAllProjectLabels200ResponseResponse) HasRequestId() bool {
	if o != nil && !utils.IsNil(o.RequestId) {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *DescribeAllProjectLabels200ResponseResponse) SetRequestId(v string) {
	o.RequestId = &v
}

func (o DescribeAllProjectLabels200ResponseResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeAllProjectLabels200ResponseResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Labels) {
		toSerialize["Labels"] = o.Labels
	}
	if !utils.IsNil(o.RequestId) {
		toSerialize["RequestId"] = o.RequestId
	}
	return toSerialize, nil
}

type NullableDescribeAllProjectLabels200ResponseResponse struct {
	value *DescribeAllProjectLabels200ResponseResponse
	isSet bool
}

func (v NullableDescribeAllProjectLabels200ResponseResponse) Get() *DescribeAllProjectLabels200ResponseResponse {
	return v.value
}

func (v *NullableDescribeAllProjectLabels200ResponseResponse) Set(val *DescribeAllProjectLabels200ResponseResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeAllProjectLabels200ResponseResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeAllProjectLabels200ResponseResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeAllProjectLabels200ResponseResponse(val *DescribeAllProjectLabels200ResponseResponse) *NullableDescribeAllProjectLabels200ResponseResponse {
	return &NullableDescribeAllProjectLabels200ResponseResponse{value: val, isSet: true}
}

func (v NullableDescribeAllProjectLabels200ResponseResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeAllProjectLabels200ResponseResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


