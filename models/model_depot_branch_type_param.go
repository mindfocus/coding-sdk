/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DepotBranchTypeParam type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DepotBranchTypeParam{}

// DepotBranchTypeParam 仓库规范的分支类型入参
type DepotBranchTypeParam struct {
	// 分支类型描述信息
	Description *string `json:"Description,omitempty"`
	// 分支类型名字
	Name string `json:"Name"`
	// 分支类型规则
	Rule string `json:"Rule"`
}

type _DepotBranchTypeParam DepotBranchTypeParam

// NewDepotBranchTypeParam instantiates a new DepotBranchTypeParam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDepotBranchTypeParam(name string, rule string) *DepotBranchTypeParam {
	this := DepotBranchTypeParam{}
	var description string = ""
	this.Description = &description
	this.Name = name
	this.Rule = rule
	return &this
}

// NewDepotBranchTypeParamWithDefaults instantiates a new DepotBranchTypeParam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDepotBranchTypeParamWithDefaults() *DepotBranchTypeParam {
	this := DepotBranchTypeParam{}
	var description string = ""
	this.Description = &description
	var name string = ""
	this.Name = name
	var rule string = ""
	this.Rule = rule
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DepotBranchTypeParam) GetDescription() string {
	if o == nil || utils.IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepotBranchTypeParam) GetDescriptionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DepotBranchTypeParam) HasDescription() bool {
	if o != nil && !utils.IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DepotBranchTypeParam) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value
func (o *DepotBranchTypeParam) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DepotBranchTypeParam) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DepotBranchTypeParam) SetName(v string) {
	o.Name = v
}

// GetRule returns the Rule field value
func (o *DepotBranchTypeParam) GetRule() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Rule
}

// GetRuleOk returns a tuple with the Rule field value
// and a boolean to check if the value has been set.
func (o *DepotBranchTypeParam) GetRuleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rule, true
}

// SetRule sets field value
func (o *DepotBranchTypeParam) SetRule(v string) {
	o.Rule = v
}

func (o DepotBranchTypeParam) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DepotBranchTypeParam) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	toSerialize["Name"] = o.Name
	toSerialize["Rule"] = o.Rule
	return toSerialize, nil
}

func (o *DepotBranchTypeParam) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Name",
		"Rule",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDepotBranchTypeParam := _DepotBranchTypeParam{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDepotBranchTypeParam)

	if err != nil {
		return err
	}

	*o = DepotBranchTypeParam(varDepotBranchTypeParam)

	return err
}

type NullableDepotBranchTypeParam struct {
	value *DepotBranchTypeParam
	isSet bool
}

func (v NullableDepotBranchTypeParam) Get() *DepotBranchTypeParam {
	return v.value
}

func (v *NullableDepotBranchTypeParam) Set(val *DepotBranchTypeParam) {
	v.value = val
	v.isSet = true
}

func (v NullableDepotBranchTypeParam) IsSet() bool {
	return v.isSet
}

func (v *NullableDepotBranchTypeParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDepotBranchTypeParam(val *DepotBranchTypeParam) *NullableDepotBranchTypeParam {
	return &NullableDepotBranchTypeParam{value: val, isSet: true}
}

func (v NullableDepotBranchTypeParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDepotBranchTypeParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


