/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the ProtectedBranch type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ProtectedBranch{}

// ProtectedBranch 保护分支详情
type ProtectedBranch struct {
	// 提交时间戳,单位毫秒
	CommitDate *int64 `json:"CommitDate,omitempty"`
	// 是否禁止强制推送
	DenyForcePush *bool `json:"DenyForcePush,omitempty"`
	// 是否使用 squash 推送
	ForceSquash *bool `json:"ForceSquash,omitempty"`
	// 名称
	Name *string `json:"Name,omitempty"`
	// 是否开启状态检查
	StatusCheck *bool `json:"StatusCheck,omitempty"`
}

// NewProtectedBranch instantiates a new ProtectedBranch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtectedBranch() *ProtectedBranch {
	this := ProtectedBranch{}
	var denyForcePush bool = false
	this.DenyForcePush = &denyForcePush
	var forceSquash bool = false
	this.ForceSquash = &forceSquash
	var name string = ""
	this.Name = &name
	var statusCheck bool = false
	this.StatusCheck = &statusCheck
	return &this
}

// NewProtectedBranchWithDefaults instantiates a new ProtectedBranch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtectedBranchWithDefaults() *ProtectedBranch {
	this := ProtectedBranch{}
	var denyForcePush bool = false
	this.DenyForcePush = &denyForcePush
	var forceSquash bool = false
	this.ForceSquash = &forceSquash
	var name string = ""
	this.Name = &name
	var statusCheck bool = false
	this.StatusCheck = &statusCheck
	return &this
}

// GetCommitDate returns the CommitDate field value if set, zero value otherwise.
func (o *ProtectedBranch) GetCommitDate() int64 {
	if o == nil || utils.IsNil(o.CommitDate) {
		var ret int64
		return ret
	}
	return *o.CommitDate
}

// GetCommitDateOk returns a tuple with the CommitDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectedBranch) GetCommitDateOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.CommitDate) {
		return nil, false
	}
	return o.CommitDate, true
}

// HasCommitDate returns a boolean if a field has been set.
func (o *ProtectedBranch) HasCommitDate() bool {
	if o != nil && !utils.IsNil(o.CommitDate) {
		return true
	}

	return false
}

// SetCommitDate gets a reference to the given int64 and assigns it to the CommitDate field.
func (o *ProtectedBranch) SetCommitDate(v int64) {
	o.CommitDate = &v
}

// GetDenyForcePush returns the DenyForcePush field value if set, zero value otherwise.
func (o *ProtectedBranch) GetDenyForcePush() bool {
	if o == nil || utils.IsNil(o.DenyForcePush) {
		var ret bool
		return ret
	}
	return *o.DenyForcePush
}

// GetDenyForcePushOk returns a tuple with the DenyForcePush field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectedBranch) GetDenyForcePushOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.DenyForcePush) {
		return nil, false
	}
	return o.DenyForcePush, true
}

// HasDenyForcePush returns a boolean if a field has been set.
func (o *ProtectedBranch) HasDenyForcePush() bool {
	if o != nil && !utils.IsNil(o.DenyForcePush) {
		return true
	}

	return false
}

// SetDenyForcePush gets a reference to the given bool and assigns it to the DenyForcePush field.
func (o *ProtectedBranch) SetDenyForcePush(v bool) {
	o.DenyForcePush = &v
}

// GetForceSquash returns the ForceSquash field value if set, zero value otherwise.
func (o *ProtectedBranch) GetForceSquash() bool {
	if o == nil || utils.IsNil(o.ForceSquash) {
		var ret bool
		return ret
	}
	return *o.ForceSquash
}

// GetForceSquashOk returns a tuple with the ForceSquash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectedBranch) GetForceSquashOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.ForceSquash) {
		return nil, false
	}
	return o.ForceSquash, true
}

// HasForceSquash returns a boolean if a field has been set.
func (o *ProtectedBranch) HasForceSquash() bool {
	if o != nil && !utils.IsNil(o.ForceSquash) {
		return true
	}

	return false
}

// SetForceSquash gets a reference to the given bool and assigns it to the ForceSquash field.
func (o *ProtectedBranch) SetForceSquash(v bool) {
	o.ForceSquash = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ProtectedBranch) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectedBranch) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ProtectedBranch) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ProtectedBranch) SetName(v string) {
	o.Name = &v
}

// GetStatusCheck returns the StatusCheck field value if set, zero value otherwise.
func (o *ProtectedBranch) GetStatusCheck() bool {
	if o == nil || utils.IsNil(o.StatusCheck) {
		var ret bool
		return ret
	}
	return *o.StatusCheck
}

// GetStatusCheckOk returns a tuple with the StatusCheck field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectedBranch) GetStatusCheckOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.StatusCheck) {
		return nil, false
	}
	return o.StatusCheck, true
}

// HasStatusCheck returns a boolean if a field has been set.
func (o *ProtectedBranch) HasStatusCheck() bool {
	if o != nil && !utils.IsNil(o.StatusCheck) {
		return true
	}

	return false
}

// SetStatusCheck gets a reference to the given bool and assigns it to the StatusCheck field.
func (o *ProtectedBranch) SetStatusCheck(v bool) {
	o.StatusCheck = &v
}

func (o ProtectedBranch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProtectedBranch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.CommitDate) {
		toSerialize["CommitDate"] = o.CommitDate
	}
	if !utils.IsNil(o.DenyForcePush) {
		toSerialize["DenyForcePush"] = o.DenyForcePush
	}
	if !utils.IsNil(o.ForceSquash) {
		toSerialize["ForceSquash"] = o.ForceSquash
	}
	if !utils.IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !utils.IsNil(o.StatusCheck) {
		toSerialize["StatusCheck"] = o.StatusCheck
	}
	return toSerialize, nil
}

type NullableProtectedBranch struct {
	value *ProtectedBranch
	isSet bool
}

func (v NullableProtectedBranch) Get() *ProtectedBranch {
	return v.value
}

func (v *NullableProtectedBranch) Set(val *ProtectedBranch) {
	v.value = val
	v.isSet = true
}

func (v NullableProtectedBranch) IsSet() bool {
	return v.isSet
}

func (v *NullableProtectedBranch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtectedBranch(val *ProtectedBranch) *NullableProtectedBranch {
	return &NullableProtectedBranch{value: val, isSet: true}
}

func (v NullableProtectedBranch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtectedBranch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


