/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the Mission type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Mission{}

// Mission Mission
type Mission struct {
	// 返回码
	Code utils.NullableInt64 `json:"Code,omitempty"`
	// 连接
	Link utils.NullableString `json:"Link,omitempty"`
	// 目标id
	TargetId utils.NullableInt64 `json:"TargetId,omitempty"`
	// 目标项目名称
	TargetProjectName utils.NullableString `json:"TargetProjectName,omitempty"`
	// 类型
	TargetType utils.NullableString `json:"TargetType,omitempty"`
	// 标题
	Title utils.NullableString `json:"Title,omitempty"`
}

// NewMission instantiates a new Mission object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMission() *Mission {
	this := Mission{}
	var link string = ""
	this.Link = *utils.NewNullableString(&link)
	var targetProjectName string = ""
	this.TargetProjectName = *utils.NewNullableString(&targetProjectName)
	var targetType string = ""
	this.TargetType = *utils.NewNullableString(&targetType)
	var title string = ""
	this.Title = *utils.NewNullableString(&title)
	return &this
}

// NewMissionWithDefaults instantiates a new Mission object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMissionWithDefaults() *Mission {
	this := Mission{}
	var link string = ""
	this.Link = *utils.NewNullableString(&link)
	var targetProjectName string = ""
	this.TargetProjectName = *utils.NewNullableString(&targetProjectName)
	var targetType string = ""
	this.TargetType = *utils.NewNullableString(&targetType)
	var title string = ""
	this.Title = *utils.NewNullableString(&title)
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Mission) GetCode() int64 {
	if o == nil || utils.IsNil(o.Code.Get()) {
		var ret int64
		return ret
	}
	return *o.Code.Get()
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Mission) GetCodeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Code.Get(), o.Code.IsSet()
}

// HasCode returns a boolean if a field has been set.
func (o *Mission) HasCode() bool {
	if o != nil && o.Code.IsSet() {
		return true
	}

	return false
}

// SetCode gets a reference to the given utils.NullableInt64 and assigns it to the Code field.
func (o *Mission) SetCode(v int64) {
	o.Code.Set(&v)
}
// SetCodeNil sets the value for Code to be an explicit nil
func (o *Mission) SetCodeNil() {
	o.Code.Set(nil)
}

// UnsetCode ensures that no value is present for Code, not even an explicit nil
func (o *Mission) UnsetCode() {
	o.Code.Unset()
}

// GetLink returns the Link field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Mission) GetLink() string {
	if o == nil || utils.IsNil(o.Link.Get()) {
		var ret string
		return ret
	}
	return *o.Link.Get()
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Mission) GetLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Link.Get(), o.Link.IsSet()
}

// HasLink returns a boolean if a field has been set.
func (o *Mission) HasLink() bool {
	if o != nil && o.Link.IsSet() {
		return true
	}

	return false
}

// SetLink gets a reference to the given utils.NullableString and assigns it to the Link field.
func (o *Mission) SetLink(v string) {
	o.Link.Set(&v)
}
// SetLinkNil sets the value for Link to be an explicit nil
func (o *Mission) SetLinkNil() {
	o.Link.Set(nil)
}

// UnsetLink ensures that no value is present for Link, not even an explicit nil
func (o *Mission) UnsetLink() {
	o.Link.Unset()
}

// GetTargetId returns the TargetId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Mission) GetTargetId() int64 {
	if o == nil || utils.IsNil(o.TargetId.Get()) {
		var ret int64
		return ret
	}
	return *o.TargetId.Get()
}

// GetTargetIdOk returns a tuple with the TargetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Mission) GetTargetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetId.Get(), o.TargetId.IsSet()
}

// HasTargetId returns a boolean if a field has been set.
func (o *Mission) HasTargetId() bool {
	if o != nil && o.TargetId.IsSet() {
		return true
	}

	return false
}

// SetTargetId gets a reference to the given utils.NullableInt64 and assigns it to the TargetId field.
func (o *Mission) SetTargetId(v int64) {
	o.TargetId.Set(&v)
}
// SetTargetIdNil sets the value for TargetId to be an explicit nil
func (o *Mission) SetTargetIdNil() {
	o.TargetId.Set(nil)
}

// UnsetTargetId ensures that no value is present for TargetId, not even an explicit nil
func (o *Mission) UnsetTargetId() {
	o.TargetId.Unset()
}

// GetTargetProjectName returns the TargetProjectName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Mission) GetTargetProjectName() string {
	if o == nil || utils.IsNil(o.TargetProjectName.Get()) {
		var ret string
		return ret
	}
	return *o.TargetProjectName.Get()
}

// GetTargetProjectNameOk returns a tuple with the TargetProjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Mission) GetTargetProjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetProjectName.Get(), o.TargetProjectName.IsSet()
}

// HasTargetProjectName returns a boolean if a field has been set.
func (o *Mission) HasTargetProjectName() bool {
	if o != nil && o.TargetProjectName.IsSet() {
		return true
	}

	return false
}

// SetTargetProjectName gets a reference to the given utils.NullableString and assigns it to the TargetProjectName field.
func (o *Mission) SetTargetProjectName(v string) {
	o.TargetProjectName.Set(&v)
}
// SetTargetProjectNameNil sets the value for TargetProjectName to be an explicit nil
func (o *Mission) SetTargetProjectNameNil() {
	o.TargetProjectName.Set(nil)
}

// UnsetTargetProjectName ensures that no value is present for TargetProjectName, not even an explicit nil
func (o *Mission) UnsetTargetProjectName() {
	o.TargetProjectName.Unset()
}

// GetTargetType returns the TargetType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Mission) GetTargetType() string {
	if o == nil || utils.IsNil(o.TargetType.Get()) {
		var ret string
		return ret
	}
	return *o.TargetType.Get()
}

// GetTargetTypeOk returns a tuple with the TargetType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Mission) GetTargetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetType.Get(), o.TargetType.IsSet()
}

// HasTargetType returns a boolean if a field has been set.
func (o *Mission) HasTargetType() bool {
	if o != nil && o.TargetType.IsSet() {
		return true
	}

	return false
}

// SetTargetType gets a reference to the given utils.NullableString and assigns it to the TargetType field.
func (o *Mission) SetTargetType(v string) {
	o.TargetType.Set(&v)
}
// SetTargetTypeNil sets the value for TargetType to be an explicit nil
func (o *Mission) SetTargetTypeNil() {
	o.TargetType.Set(nil)
}

// UnsetTargetType ensures that no value is present for TargetType, not even an explicit nil
func (o *Mission) UnsetTargetType() {
	o.TargetType.Unset()
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Mission) GetTitle() string {
	if o == nil || utils.IsNil(o.Title.Get()) {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Mission) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *Mission) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given utils.NullableString and assigns it to the Title field.
func (o *Mission) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *Mission) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *Mission) UnsetTitle() {
	o.Title.Unset()
}

func (o Mission) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Mission) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Code.IsSet() {
		toSerialize["Code"] = o.Code.Get()
	}
	if o.Link.IsSet() {
		toSerialize["Link"] = o.Link.Get()
	}
	if o.TargetId.IsSet() {
		toSerialize["TargetId"] = o.TargetId.Get()
	}
	if o.TargetProjectName.IsSet() {
		toSerialize["TargetProjectName"] = o.TargetProjectName.Get()
	}
	if o.TargetType.IsSet() {
		toSerialize["TargetType"] = o.TargetType.Get()
	}
	if o.Title.IsSet() {
		toSerialize["Title"] = o.Title.Get()
	}
	return toSerialize, nil
}

type NullableMission struct {
	value *Mission
	isSet bool
}

func (v NullableMission) Get() *Mission {
	return v.value
}

func (v *NullableMission) Set(val *Mission) {
	v.value = val
	v.isSet = true
}

func (v NullableMission) IsSet() bool {
	return v.isSet
}

func (v *NullableMission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMission(val *Mission) *NullableMission {
	return &NullableMission{value: val, isSet: true}
}

func (v NullableMission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


