/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the ArtifactFilterRule type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ArtifactFilterRule{}

// ArtifactFilterRule 制品筛选规则实体
type ArtifactFilterRule struct {
	// 制品类型筛选（1-generic;2-docker;3-maven;4-npm;5-pypi;6-helm;7-composer;8-nuget;9-conan;10-cocoapods;11-rpm）
	ArtifactType []int64 `json:"ArtifactType,omitempty"`
	// 包筛选
	Package []ArtifactFilterRuleDetail `json:"Package,omitempty"`
	// 版本筛选
	PackageVersion []ArtifactFilterRuleDetail `json:"PackageVersion,omitempty"`
	// 项目筛选
	ProjectName []string `json:"ProjectName,omitempty"`
	// 仓库筛选
	Repository []string `json:"Repository,omitempty"`
}

// NewArtifactFilterRule instantiates a new ArtifactFilterRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArtifactFilterRule() *ArtifactFilterRule {
	this := ArtifactFilterRule{}
	return &this
}

// NewArtifactFilterRuleWithDefaults instantiates a new ArtifactFilterRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArtifactFilterRuleWithDefaults() *ArtifactFilterRule {
	this := ArtifactFilterRule{}
	return &this
}

// GetArtifactType returns the ArtifactType field value if set, zero value otherwise.
func (o *ArtifactFilterRule) GetArtifactType() []int64 {
	if o == nil || utils.IsNil(o.ArtifactType) {
		var ret []int64
		return ret
	}
	return o.ArtifactType
}

// GetArtifactTypeOk returns a tuple with the ArtifactType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactFilterRule) GetArtifactTypeOk() ([]int64, bool) {
	if o == nil || utils.IsNil(o.ArtifactType) {
		return nil, false
	}
	return o.ArtifactType, true
}

// HasArtifactType returns a boolean if a field has been set.
func (o *ArtifactFilterRule) HasArtifactType() bool {
	if o != nil && !utils.IsNil(o.ArtifactType) {
		return true
	}

	return false
}

// SetArtifactType gets a reference to the given []int64 and assigns it to the ArtifactType field.
func (o *ArtifactFilterRule) SetArtifactType(v []int64) {
	o.ArtifactType = v
}

// GetPackage returns the Package field value if set, zero value otherwise.
func (o *ArtifactFilterRule) GetPackage() []ArtifactFilterRuleDetail {
	if o == nil || utils.IsNil(o.Package) {
		var ret []ArtifactFilterRuleDetail
		return ret
	}
	return o.Package
}

// GetPackageOk returns a tuple with the Package field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactFilterRule) GetPackageOk() ([]ArtifactFilterRuleDetail, bool) {
	if o == nil || utils.IsNil(o.Package) {
		return nil, false
	}
	return o.Package, true
}

// HasPackage returns a boolean if a field has been set.
func (o *ArtifactFilterRule) HasPackage() bool {
	if o != nil && !utils.IsNil(o.Package) {
		return true
	}

	return false
}

// SetPackage gets a reference to the given []ArtifactFilterRuleDetail and assigns it to the Package field.
func (o *ArtifactFilterRule) SetPackage(v []ArtifactFilterRuleDetail) {
	o.Package = v
}

// GetPackageVersion returns the PackageVersion field value if set, zero value otherwise.
func (o *ArtifactFilterRule) GetPackageVersion() []ArtifactFilterRuleDetail {
	if o == nil || utils.IsNil(o.PackageVersion) {
		var ret []ArtifactFilterRuleDetail
		return ret
	}
	return o.PackageVersion
}

// GetPackageVersionOk returns a tuple with the PackageVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactFilterRule) GetPackageVersionOk() ([]ArtifactFilterRuleDetail, bool) {
	if o == nil || utils.IsNil(o.PackageVersion) {
		return nil, false
	}
	return o.PackageVersion, true
}

// HasPackageVersion returns a boolean if a field has been set.
func (o *ArtifactFilterRule) HasPackageVersion() bool {
	if o != nil && !utils.IsNil(o.PackageVersion) {
		return true
	}

	return false
}

// SetPackageVersion gets a reference to the given []ArtifactFilterRuleDetail and assigns it to the PackageVersion field.
func (o *ArtifactFilterRule) SetPackageVersion(v []ArtifactFilterRuleDetail) {
	o.PackageVersion = v
}

// GetProjectName returns the ProjectName field value if set, zero value otherwise.
func (o *ArtifactFilterRule) GetProjectName() []string {
	if o == nil || utils.IsNil(o.ProjectName) {
		var ret []string
		return ret
	}
	return o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactFilterRule) GetProjectNameOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.ProjectName) {
		return nil, false
	}
	return o.ProjectName, true
}

// HasProjectName returns a boolean if a field has been set.
func (o *ArtifactFilterRule) HasProjectName() bool {
	if o != nil && !utils.IsNil(o.ProjectName) {
		return true
	}

	return false
}

// SetProjectName gets a reference to the given []string and assigns it to the ProjectName field.
func (o *ArtifactFilterRule) SetProjectName(v []string) {
	o.ProjectName = v
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *ArtifactFilterRule) GetRepository() []string {
	if o == nil || utils.IsNil(o.Repository) {
		var ret []string
		return ret
	}
	return o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactFilterRule) GetRepositoryOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Repository) {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *ArtifactFilterRule) HasRepository() bool {
	if o != nil && !utils.IsNil(o.Repository) {
		return true
	}

	return false
}

// SetRepository gets a reference to the given []string and assigns it to the Repository field.
func (o *ArtifactFilterRule) SetRepository(v []string) {
	o.Repository = v
}

func (o ArtifactFilterRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArtifactFilterRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.ArtifactType) {
		toSerialize["ArtifactType"] = o.ArtifactType
	}
	if !utils.IsNil(o.Package) {
		toSerialize["Package"] = o.Package
	}
	if !utils.IsNil(o.PackageVersion) {
		toSerialize["PackageVersion"] = o.PackageVersion
	}
	if !utils.IsNil(o.ProjectName) {
		toSerialize["ProjectName"] = o.ProjectName
	}
	if !utils.IsNil(o.Repository) {
		toSerialize["Repository"] = o.Repository
	}
	return toSerialize, nil
}

type NullableArtifactFilterRule struct {
	value *ArtifactFilterRule
	isSet bool
}

func (v NullableArtifactFilterRule) Get() *ArtifactFilterRule {
	return v.value
}

func (v *NullableArtifactFilterRule) Set(val *ArtifactFilterRule) {
	v.value = val
	v.isSet = true
}

func (v NullableArtifactFilterRule) IsSet() bool {
	return v.isSet
}

func (v *NullableArtifactFilterRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArtifactFilterRule(val *ArtifactFilterRule) *NullableArtifactFilterRule {
	return &NullableArtifactFilterRule{value: val, isSet: true}
}

func (v NullableArtifactFilterRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArtifactFilterRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


