/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the GitFilePushRulePrivilege type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &GitFilePushRulePrivilege{}

// GitFilePushRulePrivilege git 文件推送规则特权者
type GitFilePushRulePrivilege struct {
	// 拒绝推送文件
	IsDeny *bool `json:"IsDeny,omitempty"`
	// 特权者是角色
	IsRole *bool `json:"IsRole,omitempty"`
	// 特权者是用户
	IsUser *bool `json:"IsUser,omitempty"`
	Role *GitFilePushRuleRole `json:"Role,omitempty"`
	User *GitFilePushRuleUser `json:"User,omitempty"`
}

// NewGitFilePushRulePrivilege instantiates a new GitFilePushRulePrivilege object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitFilePushRulePrivilege() *GitFilePushRulePrivilege {
	this := GitFilePushRulePrivilege{}
	var isDeny bool = false
	this.IsDeny = &isDeny
	var isRole bool = false
	this.IsRole = &isRole
	var isUser bool = false
	this.IsUser = &isUser
	return &this
}

// NewGitFilePushRulePrivilegeWithDefaults instantiates a new GitFilePushRulePrivilege object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitFilePushRulePrivilegeWithDefaults() *GitFilePushRulePrivilege {
	this := GitFilePushRulePrivilege{}
	var isDeny bool = false
	this.IsDeny = &isDeny
	var isRole bool = false
	this.IsRole = &isRole
	var isUser bool = false
	this.IsUser = &isUser
	return &this
}

// GetIsDeny returns the IsDeny field value if set, zero value otherwise.
func (o *GitFilePushRulePrivilege) GetIsDeny() bool {
	if o == nil || utils.IsNil(o.IsDeny) {
		var ret bool
		return ret
	}
	return *o.IsDeny
}

// GetIsDenyOk returns a tuple with the IsDeny field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitFilePushRulePrivilege) GetIsDenyOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IsDeny) {
		return nil, false
	}
	return o.IsDeny, true
}

// HasIsDeny returns a boolean if a field has been set.
func (o *GitFilePushRulePrivilege) HasIsDeny() bool {
	if o != nil && !utils.IsNil(o.IsDeny) {
		return true
	}

	return false
}

// SetIsDeny gets a reference to the given bool and assigns it to the IsDeny field.
func (o *GitFilePushRulePrivilege) SetIsDeny(v bool) {
	o.IsDeny = &v
}

// GetIsRole returns the IsRole field value if set, zero value otherwise.
func (o *GitFilePushRulePrivilege) GetIsRole() bool {
	if o == nil || utils.IsNil(o.IsRole) {
		var ret bool
		return ret
	}
	return *o.IsRole
}

// GetIsRoleOk returns a tuple with the IsRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitFilePushRulePrivilege) GetIsRoleOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IsRole) {
		return nil, false
	}
	return o.IsRole, true
}

// HasIsRole returns a boolean if a field has been set.
func (o *GitFilePushRulePrivilege) HasIsRole() bool {
	if o != nil && !utils.IsNil(o.IsRole) {
		return true
	}

	return false
}

// SetIsRole gets a reference to the given bool and assigns it to the IsRole field.
func (o *GitFilePushRulePrivilege) SetIsRole(v bool) {
	o.IsRole = &v
}

// GetIsUser returns the IsUser field value if set, zero value otherwise.
func (o *GitFilePushRulePrivilege) GetIsUser() bool {
	if o == nil || utils.IsNil(o.IsUser) {
		var ret bool
		return ret
	}
	return *o.IsUser
}

// GetIsUserOk returns a tuple with the IsUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitFilePushRulePrivilege) GetIsUserOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IsUser) {
		return nil, false
	}
	return o.IsUser, true
}

// HasIsUser returns a boolean if a field has been set.
func (o *GitFilePushRulePrivilege) HasIsUser() bool {
	if o != nil && !utils.IsNil(o.IsUser) {
		return true
	}

	return false
}

// SetIsUser gets a reference to the given bool and assigns it to the IsUser field.
func (o *GitFilePushRulePrivilege) SetIsUser(v bool) {
	o.IsUser = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *GitFilePushRulePrivilege) GetRole() GitFilePushRuleRole {
	if o == nil || utils.IsNil(o.Role) {
		var ret GitFilePushRuleRole
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitFilePushRulePrivilege) GetRoleOk() (*GitFilePushRuleRole, bool) {
	if o == nil || utils.IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *GitFilePushRulePrivilege) HasRole() bool {
	if o != nil && !utils.IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given GitFilePushRuleRole and assigns it to the Role field.
func (o *GitFilePushRulePrivilege) SetRole(v GitFilePushRuleRole) {
	o.Role = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *GitFilePushRulePrivilege) GetUser() GitFilePushRuleUser {
	if o == nil || utils.IsNil(o.User) {
		var ret GitFilePushRuleUser
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitFilePushRulePrivilege) GetUserOk() (*GitFilePushRuleUser, bool) {
	if o == nil || utils.IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *GitFilePushRulePrivilege) HasUser() bool {
	if o != nil && !utils.IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given GitFilePushRuleUser and assigns it to the User field.
func (o *GitFilePushRulePrivilege) SetUser(v GitFilePushRuleUser) {
	o.User = &v
}

func (o GitFilePushRulePrivilege) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitFilePushRulePrivilege) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.IsDeny) {
		toSerialize["IsDeny"] = o.IsDeny
	}
	if !utils.IsNil(o.IsRole) {
		toSerialize["IsRole"] = o.IsRole
	}
	if !utils.IsNil(o.IsUser) {
		toSerialize["IsUser"] = o.IsUser
	}
	if !utils.IsNil(o.Role) {
		toSerialize["Role"] = o.Role
	}
	if !utils.IsNil(o.User) {
		toSerialize["User"] = o.User
	}
	return toSerialize, nil
}

type NullableGitFilePushRulePrivilege struct {
	value *GitFilePushRulePrivilege
	isSet bool
}

func (v NullableGitFilePushRulePrivilege) Get() *GitFilePushRulePrivilege {
	return v.value
}

func (v *NullableGitFilePushRulePrivilege) Set(val *GitFilePushRulePrivilege) {
	v.value = val
	v.isSet = true
}

func (v NullableGitFilePushRulePrivilege) IsSet() bool {
	return v.isSet
}

func (v *NullableGitFilePushRulePrivilege) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitFilePushRulePrivilege(val *GitFilePushRulePrivilege) *NullableGitFilePushRulePrivilege {
	return &NullableGitFilePushRulePrivilege{value: val, isSet: true}
}

func (v NullableGitFilePushRulePrivilege) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitFilePushRulePrivilege) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


