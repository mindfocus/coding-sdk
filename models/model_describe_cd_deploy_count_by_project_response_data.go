/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DescribeCdDeployCountByProjectResponseData type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DescribeCdDeployCountByProjectResponseData{}

// DescribeCdDeployCountByProjectResponseData DescribeCdDeployCountByProjectResponseData 结构
type DescribeCdDeployCountByProjectResponseData struct {
	// 各应用发布次数详情
	Details []CdDeployCountDetail `json:"Details,omitempty"`
	// 结束时间
	EndDate *string `json:"EndDate,omitempty"`
	// 开始时间
	StartDate *string `json:"StartDate,omitempty"`
	Total *CdDeployCount `json:"Total,omitempty"`
}

// NewDescribeCdDeployCountByProjectResponseData instantiates a new DescribeCdDeployCountByProjectResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeCdDeployCountByProjectResponseData() *DescribeCdDeployCountByProjectResponseData {
	this := DescribeCdDeployCountByProjectResponseData{}
	var endDate string = ""
	this.EndDate = &endDate
	var startDate string = ""
	this.StartDate = &startDate
	return &this
}

// NewDescribeCdDeployCountByProjectResponseDataWithDefaults instantiates a new DescribeCdDeployCountByProjectResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeCdDeployCountByProjectResponseDataWithDefaults() *DescribeCdDeployCountByProjectResponseData {
	this := DescribeCdDeployCountByProjectResponseData{}
	var endDate string = ""
	this.EndDate = &endDate
	var startDate string = ""
	this.StartDate = &startDate
	return &this
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *DescribeCdDeployCountByProjectResponseData) GetDetails() []CdDeployCountDetail {
	if o == nil || utils.IsNil(o.Details) {
		var ret []CdDeployCountDetail
		return ret
	}
	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeCdDeployCountByProjectResponseData) GetDetailsOk() ([]CdDeployCountDetail, bool) {
	if o == nil || utils.IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *DescribeCdDeployCountByProjectResponseData) HasDetails() bool {
	if o != nil && !utils.IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given []CdDeployCountDetail and assigns it to the Details field.
func (o *DescribeCdDeployCountByProjectResponseData) SetDetails(v []CdDeployCountDetail) {
	o.Details = v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *DescribeCdDeployCountByProjectResponseData) GetEndDate() string {
	if o == nil || utils.IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeCdDeployCountByProjectResponseData) GetEndDateOk() (*string, bool) {
	if o == nil || utils.IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *DescribeCdDeployCountByProjectResponseData) HasEndDate() bool {
	if o != nil && !utils.IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *DescribeCdDeployCountByProjectResponseData) SetEndDate(v string) {
	o.EndDate = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *DescribeCdDeployCountByProjectResponseData) GetStartDate() string {
	if o == nil || utils.IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeCdDeployCountByProjectResponseData) GetStartDateOk() (*string, bool) {
	if o == nil || utils.IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *DescribeCdDeployCountByProjectResponseData) HasStartDate() bool {
	if o != nil && !utils.IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *DescribeCdDeployCountByProjectResponseData) SetStartDate(v string) {
	o.StartDate = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *DescribeCdDeployCountByProjectResponseData) GetTotal() CdDeployCount {
	if o == nil || utils.IsNil(o.Total) {
		var ret CdDeployCount
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeCdDeployCountByProjectResponseData) GetTotalOk() (*CdDeployCount, bool) {
	if o == nil || utils.IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *DescribeCdDeployCountByProjectResponseData) HasTotal() bool {
	if o != nil && !utils.IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given CdDeployCount and assigns it to the Total field.
func (o *DescribeCdDeployCountByProjectResponseData) SetTotal(v CdDeployCount) {
	o.Total = &v
}

func (o DescribeCdDeployCountByProjectResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeCdDeployCountByProjectResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Details) {
		toSerialize["Details"] = o.Details
	}
	if !utils.IsNil(o.EndDate) {
		toSerialize["EndDate"] = o.EndDate
	}
	if !utils.IsNil(o.StartDate) {
		toSerialize["StartDate"] = o.StartDate
	}
	if !utils.IsNil(o.Total) {
		toSerialize["Total"] = o.Total
	}
	return toSerialize, nil
}

type NullableDescribeCdDeployCountByProjectResponseData struct {
	value *DescribeCdDeployCountByProjectResponseData
	isSet bool
}

func (v NullableDescribeCdDeployCountByProjectResponseData) Get() *DescribeCdDeployCountByProjectResponseData {
	return v.value
}

func (v *NullableDescribeCdDeployCountByProjectResponseData) Set(val *DescribeCdDeployCountByProjectResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeCdDeployCountByProjectResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeCdDeployCountByProjectResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeCdDeployCountByProjectResponseData(val *DescribeCdDeployCountByProjectResponseData) *NullableDescribeCdDeployCountByProjectResponseData {
	return &NullableDescribeCdDeployCountByProjectResponseData{value: val, isSet: true}
}

func (v NullableDescribeCdDeployCountByProjectResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeCdDeployCountByProjectResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


