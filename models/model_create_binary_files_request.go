/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the CreateBinaryFilesRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CreateBinaryFilesRequest{}

// CreateBinaryFilesRequest struct for CreateBinaryFilesRequest
type CreateBinaryFilesRequest struct {
	// 仓库id
	DepotId int64 `json:"DepotId"`
	// 仓库路径，DepotId与DepotPath二选一即可
	DepotPath *string `json:"DepotPath,omitempty"`
	// 目标分支名，如果想上传至源分支，值与源分支名一致
	DestRef *string `json:"DestRef,omitempty"`
	// 文件信息，其中Path需带上文件名，例如：/data/ReadMe.md。  Content为文件字节流进行Base64编码后的字符串。
	GitFiles []GitFile `json:"GitFiles"`
	// 源分支最后一次提交sha
	LastCommitSha string `json:"LastCommitSha"`
	// 提交信息
	Message string `json:"Message"`
	// 源分支名
	SrcRef string `json:"SrcRef"`
	// 用户id
	UserId *int64 `json:"UserId,omitempty"`
}

type _CreateBinaryFilesRequest CreateBinaryFilesRequest

// NewCreateBinaryFilesRequest instantiates a new CreateBinaryFilesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateBinaryFilesRequest(depotId int64, gitFiles []GitFile, lastCommitSha string, message string, srcRef string) *CreateBinaryFilesRequest {
	this := CreateBinaryFilesRequest{}
	this.DepotId = depotId
	this.GitFiles = gitFiles
	this.LastCommitSha = lastCommitSha
	this.Message = message
	this.SrcRef = srcRef
	return &this
}

// NewCreateBinaryFilesRequestWithDefaults instantiates a new CreateBinaryFilesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateBinaryFilesRequestWithDefaults() *CreateBinaryFilesRequest {
	this := CreateBinaryFilesRequest{}
	return &this
}

// GetDepotId returns the DepotId field value
func (o *CreateBinaryFilesRequest) GetDepotId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DepotId
}

// GetDepotIdOk returns a tuple with the DepotId field value
// and a boolean to check if the value has been set.
func (o *CreateBinaryFilesRequest) GetDepotIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepotId, true
}

// SetDepotId sets field value
func (o *CreateBinaryFilesRequest) SetDepotId(v int64) {
	o.DepotId = v
}

// GetDepotPath returns the DepotPath field value if set, zero value otherwise.
func (o *CreateBinaryFilesRequest) GetDepotPath() string {
	if o == nil || utils.IsNil(o.DepotPath) {
		var ret string
		return ret
	}
	return *o.DepotPath
}

// GetDepotPathOk returns a tuple with the DepotPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBinaryFilesRequest) GetDepotPathOk() (*string, bool) {
	if o == nil || utils.IsNil(o.DepotPath) {
		return nil, false
	}
	return o.DepotPath, true
}

// HasDepotPath returns a boolean if a field has been set.
func (o *CreateBinaryFilesRequest) HasDepotPath() bool {
	if o != nil && !utils.IsNil(o.DepotPath) {
		return true
	}

	return false
}

// SetDepotPath gets a reference to the given string and assigns it to the DepotPath field.
func (o *CreateBinaryFilesRequest) SetDepotPath(v string) {
	o.DepotPath = &v
}

// GetDestRef returns the DestRef field value if set, zero value otherwise.
func (o *CreateBinaryFilesRequest) GetDestRef() string {
	if o == nil || utils.IsNil(o.DestRef) {
		var ret string
		return ret
	}
	return *o.DestRef
}

// GetDestRefOk returns a tuple with the DestRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBinaryFilesRequest) GetDestRefOk() (*string, bool) {
	if o == nil || utils.IsNil(o.DestRef) {
		return nil, false
	}
	return o.DestRef, true
}

// HasDestRef returns a boolean if a field has been set.
func (o *CreateBinaryFilesRequest) HasDestRef() bool {
	if o != nil && !utils.IsNil(o.DestRef) {
		return true
	}

	return false
}

// SetDestRef gets a reference to the given string and assigns it to the DestRef field.
func (o *CreateBinaryFilesRequest) SetDestRef(v string) {
	o.DestRef = &v
}

// GetGitFiles returns the GitFiles field value
func (o *CreateBinaryFilesRequest) GetGitFiles() []GitFile {
	if o == nil {
		var ret []GitFile
		return ret
	}

	return o.GitFiles
}

// GetGitFilesOk returns a tuple with the GitFiles field value
// and a boolean to check if the value has been set.
func (o *CreateBinaryFilesRequest) GetGitFilesOk() ([]GitFile, bool) {
	if o == nil {
		return nil, false
	}
	return o.GitFiles, true
}

// SetGitFiles sets field value
func (o *CreateBinaryFilesRequest) SetGitFiles(v []GitFile) {
	o.GitFiles = v
}

// GetLastCommitSha returns the LastCommitSha field value
func (o *CreateBinaryFilesRequest) GetLastCommitSha() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastCommitSha
}

// GetLastCommitShaOk returns a tuple with the LastCommitSha field value
// and a boolean to check if the value has been set.
func (o *CreateBinaryFilesRequest) GetLastCommitShaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastCommitSha, true
}

// SetLastCommitSha sets field value
func (o *CreateBinaryFilesRequest) SetLastCommitSha(v string) {
	o.LastCommitSha = v
}

// GetMessage returns the Message field value
func (o *CreateBinaryFilesRequest) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *CreateBinaryFilesRequest) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *CreateBinaryFilesRequest) SetMessage(v string) {
	o.Message = v
}

// GetSrcRef returns the SrcRef field value
func (o *CreateBinaryFilesRequest) GetSrcRef() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SrcRef
}

// GetSrcRefOk returns a tuple with the SrcRef field value
// and a boolean to check if the value has been set.
func (o *CreateBinaryFilesRequest) GetSrcRefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SrcRef, true
}

// SetSrcRef sets field value
func (o *CreateBinaryFilesRequest) SetSrcRef(v string) {
	o.SrcRef = v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *CreateBinaryFilesRequest) GetUserId() int64 {
	if o == nil || utils.IsNil(o.UserId) {
		var ret int64
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBinaryFilesRequest) GetUserIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *CreateBinaryFilesRequest) HasUserId() bool {
	if o != nil && !utils.IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int64 and assigns it to the UserId field.
func (o *CreateBinaryFilesRequest) SetUserId(v int64) {
	o.UserId = &v
}

func (o CreateBinaryFilesRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateBinaryFilesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["DepotId"] = o.DepotId
	if !utils.IsNil(o.DepotPath) {
		toSerialize["DepotPath"] = o.DepotPath
	}
	if !utils.IsNil(o.DestRef) {
		toSerialize["DestRef"] = o.DestRef
	}
	toSerialize["GitFiles"] = o.GitFiles
	toSerialize["LastCommitSha"] = o.LastCommitSha
	toSerialize["Message"] = o.Message
	toSerialize["SrcRef"] = o.SrcRef
	if !utils.IsNil(o.UserId) {
		toSerialize["UserId"] = o.UserId
	}
	return toSerialize, nil
}

func (o *CreateBinaryFilesRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"DepotId",
		"GitFiles",
		"LastCommitSha",
		"Message",
		"SrcRef",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateBinaryFilesRequest := _CreateBinaryFilesRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateBinaryFilesRequest)

	if err != nil {
		return err
	}

	*o = CreateBinaryFilesRequest(varCreateBinaryFilesRequest)

	return err
}

type NullableCreateBinaryFilesRequest struct {
	value *CreateBinaryFilesRequest
	isSet bool
}

func (v NullableCreateBinaryFilesRequest) Get() *CreateBinaryFilesRequest {
	return v.value
}

func (v *NullableCreateBinaryFilesRequest) Set(val *CreateBinaryFilesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateBinaryFilesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateBinaryFilesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateBinaryFilesRequest(val *CreateBinaryFilesRequest) *NullableCreateBinaryFilesRequest {
	return &NullableCreateBinaryFilesRequest{value: val, isSet: true}
}

func (v NullableCreateBinaryFilesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateBinaryFilesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


