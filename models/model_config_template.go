/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the ConfigTemplate type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ConfigTemplate{}

// ConfigTemplate 模版
type ConfigTemplate struct {
	// 配置方案Code 
	Code utils.NullableInt64 `json:"Code,omitempty"`
	// 配置方案协作类型，包括 SCRUM 和 CLASSIC 
	CooperateMode utils.NullableString `json:"CooperateMode,omitempty"`
	// 创建时间
	CreatedAt utils.NullableInt64 `json:"CreatedAt,omitempty"`
	// 配置方案描述 
	Description utils.NullableString `json:"Description,omitempty"`
	// 配置方案ID
	Id utils.NullableInt64 `json:"Id,omitempty"`
	// 是否是草稿配置方案 
	IsDraft utils.NullableBool `json:"IsDraft,omitempty"`
	// 是否是系统配置方案 
	IsSystem utils.NullableBool `json:"IsSystem,omitempty"`
	// 配置方案名字 
	Name utils.NullableString `json:"Name,omitempty"`
	// 配置方案名字，取值和CooperateMode字段一样 
	NameType utils.NullableString `json:"NameType,omitempty"`
	// 关联项目id 
	RelatedProjects utils.NullableInt64 `json:"RelatedProjects,omitempty"`
	// 配置方案类型，和入参的TemplateType取值一样 
	Scope utils.NullableString `json:"Scope,omitempty"`
	// 团队ID
	TeamId utils.NullableInt64 `json:"TeamId,omitempty"`
	// 更新时间
	UpdatedAt utils.NullableInt64 `json:"UpdatedAt,omitempty"`
}

// NewConfigTemplate instantiates a new ConfigTemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigTemplate() *ConfigTemplate {
	this := ConfigTemplate{}
	var cooperateMode string = ""
	this.CooperateMode = *utils.NewNullableString(&cooperateMode)
	var description string = ""
	this.Description = *utils.NewNullableString(&description)
	var isDraft bool = false
	this.IsDraft = *utils.NewNullableBool(&isDraft)
	var isSystem bool = false
	this.IsSystem = *utils.NewNullableBool(&isSystem)
	var name string = ""
	this.Name = *utils.NewNullableString(&name)
	var nameType string = ""
	this.NameType = *utils.NewNullableString(&nameType)
	var scope string = ""
	this.Scope = *utils.NewNullableString(&scope)
	return &this
}

// NewConfigTemplateWithDefaults instantiates a new ConfigTemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigTemplateWithDefaults() *ConfigTemplate {
	this := ConfigTemplate{}
	var cooperateMode string = ""
	this.CooperateMode = *utils.NewNullableString(&cooperateMode)
	var description string = ""
	this.Description = *utils.NewNullableString(&description)
	var isDraft bool = false
	this.IsDraft = *utils.NewNullableBool(&isDraft)
	var isSystem bool = false
	this.IsSystem = *utils.NewNullableBool(&isSystem)
	var name string = ""
	this.Name = *utils.NewNullableString(&name)
	var nameType string = ""
	this.NameType = *utils.NewNullableString(&nameType)
	var scope string = ""
	this.Scope = *utils.NewNullableString(&scope)
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigTemplate) GetCode() int64 {
	if o == nil || utils.IsNil(o.Code.Get()) {
		var ret int64
		return ret
	}
	return *o.Code.Get()
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigTemplate) GetCodeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Code.Get(), o.Code.IsSet()
}

// HasCode returns a boolean if a field has been set.
func (o *ConfigTemplate) HasCode() bool {
	if o != nil && o.Code.IsSet() {
		return true
	}

	return false
}

// SetCode gets a reference to the given utils.NullableInt64 and assigns it to the Code field.
func (o *ConfigTemplate) SetCode(v int64) {
	o.Code.Set(&v)
}
// SetCodeNil sets the value for Code to be an explicit nil
func (o *ConfigTemplate) SetCodeNil() {
	o.Code.Set(nil)
}

// UnsetCode ensures that no value is present for Code, not even an explicit nil
func (o *ConfigTemplate) UnsetCode() {
	o.Code.Unset()
}

// GetCooperateMode returns the CooperateMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigTemplate) GetCooperateMode() string {
	if o == nil || utils.IsNil(o.CooperateMode.Get()) {
		var ret string
		return ret
	}
	return *o.CooperateMode.Get()
}

// GetCooperateModeOk returns a tuple with the CooperateMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigTemplate) GetCooperateModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CooperateMode.Get(), o.CooperateMode.IsSet()
}

// HasCooperateMode returns a boolean if a field has been set.
func (o *ConfigTemplate) HasCooperateMode() bool {
	if o != nil && o.CooperateMode.IsSet() {
		return true
	}

	return false
}

// SetCooperateMode gets a reference to the given utils.NullableString and assigns it to the CooperateMode field.
func (o *ConfigTemplate) SetCooperateMode(v string) {
	o.CooperateMode.Set(&v)
}
// SetCooperateModeNil sets the value for CooperateMode to be an explicit nil
func (o *ConfigTemplate) SetCooperateModeNil() {
	o.CooperateMode.Set(nil)
}

// UnsetCooperateMode ensures that no value is present for CooperateMode, not even an explicit nil
func (o *ConfigTemplate) UnsetCooperateMode() {
	o.CooperateMode.Unset()
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigTemplate) GetCreatedAt() int64 {
	if o == nil || utils.IsNil(o.CreatedAt.Get()) {
		var ret int64
		return ret
	}
	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigTemplate) GetCreatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ConfigTemplate) HasCreatedAt() bool {
	if o != nil && o.CreatedAt.IsSet() {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given utils.NullableInt64 and assigns it to the CreatedAt field.
func (o *ConfigTemplate) SetCreatedAt(v int64) {
	o.CreatedAt.Set(&v)
}
// SetCreatedAtNil sets the value for CreatedAt to be an explicit nil
func (o *ConfigTemplate) SetCreatedAtNil() {
	o.CreatedAt.Set(nil)
}

// UnsetCreatedAt ensures that no value is present for CreatedAt, not even an explicit nil
func (o *ConfigTemplate) UnsetCreatedAt() {
	o.CreatedAt.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigTemplate) GetDescription() string {
	if o == nil || utils.IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigTemplate) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *ConfigTemplate) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given utils.NullableString and assigns it to the Description field.
func (o *ConfigTemplate) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *ConfigTemplate) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *ConfigTemplate) UnsetDescription() {
	o.Description.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigTemplate) GetId() int64 {
	if o == nil || utils.IsNil(o.Id.Get()) {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigTemplate) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *ConfigTemplate) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given utils.NullableInt64 and assigns it to the Id field.
func (o *ConfigTemplate) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *ConfigTemplate) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *ConfigTemplate) UnsetId() {
	o.Id.Unset()
}

// GetIsDraft returns the IsDraft field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigTemplate) GetIsDraft() bool {
	if o == nil || utils.IsNil(o.IsDraft.Get()) {
		var ret bool
		return ret
	}
	return *o.IsDraft.Get()
}

// GetIsDraftOk returns a tuple with the IsDraft field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigTemplate) GetIsDraftOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsDraft.Get(), o.IsDraft.IsSet()
}

// HasIsDraft returns a boolean if a field has been set.
func (o *ConfigTemplate) HasIsDraft() bool {
	if o != nil && o.IsDraft.IsSet() {
		return true
	}

	return false
}

// SetIsDraft gets a reference to the given utils.NullableBool and assigns it to the IsDraft field.
func (o *ConfigTemplate) SetIsDraft(v bool) {
	o.IsDraft.Set(&v)
}
// SetIsDraftNil sets the value for IsDraft to be an explicit nil
func (o *ConfigTemplate) SetIsDraftNil() {
	o.IsDraft.Set(nil)
}

// UnsetIsDraft ensures that no value is present for IsDraft, not even an explicit nil
func (o *ConfigTemplate) UnsetIsDraft() {
	o.IsDraft.Unset()
}

// GetIsSystem returns the IsSystem field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigTemplate) GetIsSystem() bool {
	if o == nil || utils.IsNil(o.IsSystem.Get()) {
		var ret bool
		return ret
	}
	return *o.IsSystem.Get()
}

// GetIsSystemOk returns a tuple with the IsSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigTemplate) GetIsSystemOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsSystem.Get(), o.IsSystem.IsSet()
}

// HasIsSystem returns a boolean if a field has been set.
func (o *ConfigTemplate) HasIsSystem() bool {
	if o != nil && o.IsSystem.IsSet() {
		return true
	}

	return false
}

// SetIsSystem gets a reference to the given utils.NullableBool and assigns it to the IsSystem field.
func (o *ConfigTemplate) SetIsSystem(v bool) {
	o.IsSystem.Set(&v)
}
// SetIsSystemNil sets the value for IsSystem to be an explicit nil
func (o *ConfigTemplate) SetIsSystemNil() {
	o.IsSystem.Set(nil)
}

// UnsetIsSystem ensures that no value is present for IsSystem, not even an explicit nil
func (o *ConfigTemplate) UnsetIsSystem() {
	o.IsSystem.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigTemplate) GetName() string {
	if o == nil || utils.IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigTemplate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ConfigTemplate) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given utils.NullableString and assigns it to the Name field.
func (o *ConfigTemplate) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *ConfigTemplate) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ConfigTemplate) UnsetName() {
	o.Name.Unset()
}

// GetNameType returns the NameType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigTemplate) GetNameType() string {
	if o == nil || utils.IsNil(o.NameType.Get()) {
		var ret string
		return ret
	}
	return *o.NameType.Get()
}

// GetNameTypeOk returns a tuple with the NameType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigTemplate) GetNameTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NameType.Get(), o.NameType.IsSet()
}

// HasNameType returns a boolean if a field has been set.
func (o *ConfigTemplate) HasNameType() bool {
	if o != nil && o.NameType.IsSet() {
		return true
	}

	return false
}

// SetNameType gets a reference to the given utils.NullableString and assigns it to the NameType field.
func (o *ConfigTemplate) SetNameType(v string) {
	o.NameType.Set(&v)
}
// SetNameTypeNil sets the value for NameType to be an explicit nil
func (o *ConfigTemplate) SetNameTypeNil() {
	o.NameType.Set(nil)
}

// UnsetNameType ensures that no value is present for NameType, not even an explicit nil
func (o *ConfigTemplate) UnsetNameType() {
	o.NameType.Unset()
}

// GetRelatedProjects returns the RelatedProjects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigTemplate) GetRelatedProjects() int64 {
	if o == nil || utils.IsNil(o.RelatedProjects.Get()) {
		var ret int64
		return ret
	}
	return *o.RelatedProjects.Get()
}

// GetRelatedProjectsOk returns a tuple with the RelatedProjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigTemplate) GetRelatedProjectsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RelatedProjects.Get(), o.RelatedProjects.IsSet()
}

// HasRelatedProjects returns a boolean if a field has been set.
func (o *ConfigTemplate) HasRelatedProjects() bool {
	if o != nil && o.RelatedProjects.IsSet() {
		return true
	}

	return false
}

// SetRelatedProjects gets a reference to the given utils.NullableInt64 and assigns it to the RelatedProjects field.
func (o *ConfigTemplate) SetRelatedProjects(v int64) {
	o.RelatedProjects.Set(&v)
}
// SetRelatedProjectsNil sets the value for RelatedProjects to be an explicit nil
func (o *ConfigTemplate) SetRelatedProjectsNil() {
	o.RelatedProjects.Set(nil)
}

// UnsetRelatedProjects ensures that no value is present for RelatedProjects, not even an explicit nil
func (o *ConfigTemplate) UnsetRelatedProjects() {
	o.RelatedProjects.Unset()
}

// GetScope returns the Scope field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigTemplate) GetScope() string {
	if o == nil || utils.IsNil(o.Scope.Get()) {
		var ret string
		return ret
	}
	return *o.Scope.Get()
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigTemplate) GetScopeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Scope.Get(), o.Scope.IsSet()
}

// HasScope returns a boolean if a field has been set.
func (o *ConfigTemplate) HasScope() bool {
	if o != nil && o.Scope.IsSet() {
		return true
	}

	return false
}

// SetScope gets a reference to the given utils.NullableString and assigns it to the Scope field.
func (o *ConfigTemplate) SetScope(v string) {
	o.Scope.Set(&v)
}
// SetScopeNil sets the value for Scope to be an explicit nil
func (o *ConfigTemplate) SetScopeNil() {
	o.Scope.Set(nil)
}

// UnsetScope ensures that no value is present for Scope, not even an explicit nil
func (o *ConfigTemplate) UnsetScope() {
	o.Scope.Unset()
}

// GetTeamId returns the TeamId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigTemplate) GetTeamId() int64 {
	if o == nil || utils.IsNil(o.TeamId.Get()) {
		var ret int64
		return ret
	}
	return *o.TeamId.Get()
}

// GetTeamIdOk returns a tuple with the TeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigTemplate) GetTeamIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TeamId.Get(), o.TeamId.IsSet()
}

// HasTeamId returns a boolean if a field has been set.
func (o *ConfigTemplate) HasTeamId() bool {
	if o != nil && o.TeamId.IsSet() {
		return true
	}

	return false
}

// SetTeamId gets a reference to the given utils.NullableInt64 and assigns it to the TeamId field.
func (o *ConfigTemplate) SetTeamId(v int64) {
	o.TeamId.Set(&v)
}
// SetTeamIdNil sets the value for TeamId to be an explicit nil
func (o *ConfigTemplate) SetTeamIdNil() {
	o.TeamId.Set(nil)
}

// UnsetTeamId ensures that no value is present for TeamId, not even an explicit nil
func (o *ConfigTemplate) UnsetTeamId() {
	o.TeamId.Unset()
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigTemplate) GetUpdatedAt() int64 {
	if o == nil || utils.IsNil(o.UpdatedAt.Get()) {
		var ret int64
		return ret
	}
	return *o.UpdatedAt.Get()
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigTemplate) GetUpdatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedAt.Get(), o.UpdatedAt.IsSet()
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ConfigTemplate) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt.IsSet() {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given utils.NullableInt64 and assigns it to the UpdatedAt field.
func (o *ConfigTemplate) SetUpdatedAt(v int64) {
	o.UpdatedAt.Set(&v)
}
// SetUpdatedAtNil sets the value for UpdatedAt to be an explicit nil
func (o *ConfigTemplate) SetUpdatedAtNil() {
	o.UpdatedAt.Set(nil)
}

// UnsetUpdatedAt ensures that no value is present for UpdatedAt, not even an explicit nil
func (o *ConfigTemplate) UnsetUpdatedAt() {
	o.UpdatedAt.Unset()
}

func (o ConfigTemplate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigTemplate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Code.IsSet() {
		toSerialize["Code"] = o.Code.Get()
	}
	if o.CooperateMode.IsSet() {
		toSerialize["CooperateMode"] = o.CooperateMode.Get()
	}
	if o.CreatedAt.IsSet() {
		toSerialize["CreatedAt"] = o.CreatedAt.Get()
	}
	if o.Description.IsSet() {
		toSerialize["Description"] = o.Description.Get()
	}
	if o.Id.IsSet() {
		toSerialize["Id"] = o.Id.Get()
	}
	if o.IsDraft.IsSet() {
		toSerialize["IsDraft"] = o.IsDraft.Get()
	}
	if o.IsSystem.IsSet() {
		toSerialize["IsSystem"] = o.IsSystem.Get()
	}
	if o.Name.IsSet() {
		toSerialize["Name"] = o.Name.Get()
	}
	if o.NameType.IsSet() {
		toSerialize["NameType"] = o.NameType.Get()
	}
	if o.RelatedProjects.IsSet() {
		toSerialize["RelatedProjects"] = o.RelatedProjects.Get()
	}
	if o.Scope.IsSet() {
		toSerialize["Scope"] = o.Scope.Get()
	}
	if o.TeamId.IsSet() {
		toSerialize["TeamId"] = o.TeamId.Get()
	}
	if o.UpdatedAt.IsSet() {
		toSerialize["UpdatedAt"] = o.UpdatedAt.Get()
	}
	return toSerialize, nil
}

type NullableConfigTemplate struct {
	value *ConfigTemplate
	isSet bool
}

func (v NullableConfigTemplate) Get() *ConfigTemplate {
	return v.value
}

func (v *NullableConfigTemplate) Set(val *ConfigTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigTemplate(val *ConfigTemplate) *NullableConfigTemplate {
	return &NullableConfigTemplate{value: val, isSet: true}
}

func (v NullableConfigTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


