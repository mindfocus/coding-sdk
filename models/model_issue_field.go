/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the IssueField type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &IssueField{}

// IssueField 事项属性
type IssueField struct {
	// 字段空间类型  TEXT_SINGLE_LINE - 单行文本  TEXT_MULTI_LINE - 多行文本  SELECT_SINGLE - 单选列表  SELECT_MULTI - 多选列表  RADIO - 单选框  CHECKBOX - 多选框  SELECT_MEMBER_SINGLE - 用户单选列表  SELECT_MEMBER_MULTI - 用户多选列表  TEXT_DATETIME - 日期时间选择框  TEXT_DATE - 日期选择框  TEXT_INTEGER - 整数输入框  TEXT_DECIMAL - 小数输入框
	ComponentType *string `json:"ComponentType,omitempty"`
	// 创建时间戳
	CreatedAt *int64 `json:"CreatedAt,omitempty"`
	// 创建者 ID
	CreatedBy *int64 `json:"CreatedBy,omitempty"`
	// 是否可删除
	Deletable *bool `json:"Deletable,omitempty"`
	// 描述
	Description utils.NullableString `json:"Description,omitempty"`
	// 是否可修改
	Editable *bool `json:"Editable,omitempty"`
	// 图标地址
	IconUrl utils.NullableString `json:"IconUrl,omitempty"`
	// 属性 ID
	Id *int64 `json:"Id,omitempty"`
	// 名称
	Name *string `json:"Name,omitempty"`
	// 选项列表
	Options []IssueFieldOption `json:"Options,omitempty"`
	// 是否必填
	Required *bool `json:"Required,omitempty"`
	// 项目中属性可选
	Selectable *bool `json:"Selectable,omitempty"`
	// 是否可排序
	Sortable *bool `json:"Sortable,omitempty"`
	// 字段类型
	Type *string `json:"Type,omitempty"`
	// 单位
	Unit utils.NullableString `json:"Unit,omitempty"`
	// 修改时间戳
	UpdatedAt *int64 `json:"UpdatedAt,omitempty"`
}

// NewIssueField instantiates a new IssueField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueField() *IssueField {
	this := IssueField{}
	var componentType string = ""
	this.ComponentType = &componentType
	var deletable bool = false
	this.Deletable = &deletable
	var description string = ""
	this.Description = *utils.NewNullableString(&description)
	var editable bool = false
	this.Editable = &editable
	var iconUrl string = ""
	this.IconUrl = *utils.NewNullableString(&iconUrl)
	var name string = ""
	this.Name = &name
	var required bool = false
	this.Required = &required
	var selectable bool = false
	this.Selectable = &selectable
	var sortable bool = false
	this.Sortable = &sortable
	var type_ string = ""
	this.Type = &type_
	var unit string = ""
	this.Unit = *utils.NewNullableString(&unit)
	return &this
}

// NewIssueFieldWithDefaults instantiates a new IssueField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueFieldWithDefaults() *IssueField {
	this := IssueField{}
	var componentType string = ""
	this.ComponentType = &componentType
	var deletable bool = false
	this.Deletable = &deletable
	var description string = ""
	this.Description = *utils.NewNullableString(&description)
	var editable bool = false
	this.Editable = &editable
	var iconUrl string = ""
	this.IconUrl = *utils.NewNullableString(&iconUrl)
	var name string = ""
	this.Name = &name
	var required bool = false
	this.Required = &required
	var selectable bool = false
	this.Selectable = &selectable
	var sortable bool = false
	this.Sortable = &sortable
	var type_ string = ""
	this.Type = &type_
	var unit string = ""
	this.Unit = *utils.NewNullableString(&unit)
	return &this
}

// GetComponentType returns the ComponentType field value if set, zero value otherwise.
func (o *IssueField) GetComponentType() string {
	if o == nil || utils.IsNil(o.ComponentType) {
		var ret string
		return ret
	}
	return *o.ComponentType
}

// GetComponentTypeOk returns a tuple with the ComponentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueField) GetComponentTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ComponentType) {
		return nil, false
	}
	return o.ComponentType, true
}

// HasComponentType returns a boolean if a field has been set.
func (o *IssueField) HasComponentType() bool {
	if o != nil && !utils.IsNil(o.ComponentType) {
		return true
	}

	return false
}

// SetComponentType gets a reference to the given string and assigns it to the ComponentType field.
func (o *IssueField) SetComponentType(v string) {
	o.ComponentType = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *IssueField) GetCreatedAt() int64 {
	if o == nil || utils.IsNil(o.CreatedAt) {
		var ret int64
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueField) GetCreatedAtOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *IssueField) HasCreatedAt() bool {
	if o != nil && !utils.IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int64 and assigns it to the CreatedAt field.
func (o *IssueField) SetCreatedAt(v int64) {
	o.CreatedAt = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *IssueField) GetCreatedBy() int64 {
	if o == nil || utils.IsNil(o.CreatedBy) {
		var ret int64
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueField) GetCreatedByOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *IssueField) HasCreatedBy() bool {
	if o != nil && !utils.IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given int64 and assigns it to the CreatedBy field.
func (o *IssueField) SetCreatedBy(v int64) {
	o.CreatedBy = &v
}

// GetDeletable returns the Deletable field value if set, zero value otherwise.
func (o *IssueField) GetDeletable() bool {
	if o == nil || utils.IsNil(o.Deletable) {
		var ret bool
		return ret
	}
	return *o.Deletable
}

// GetDeletableOk returns a tuple with the Deletable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueField) GetDeletableOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.Deletable) {
		return nil, false
	}
	return o.Deletable, true
}

// HasDeletable returns a boolean if a field has been set.
func (o *IssueField) HasDeletable() bool {
	if o != nil && !utils.IsNil(o.Deletable) {
		return true
	}

	return false
}

// SetDeletable gets a reference to the given bool and assigns it to the Deletable field.
func (o *IssueField) SetDeletable(v bool) {
	o.Deletable = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssueField) GetDescription() string {
	if o == nil || utils.IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssueField) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *IssueField) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given utils.NullableString and assigns it to the Description field.
func (o *IssueField) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *IssueField) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *IssueField) UnsetDescription() {
	o.Description.Unset()
}

// GetEditable returns the Editable field value if set, zero value otherwise.
func (o *IssueField) GetEditable() bool {
	if o == nil || utils.IsNil(o.Editable) {
		var ret bool
		return ret
	}
	return *o.Editable
}

// GetEditableOk returns a tuple with the Editable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueField) GetEditableOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.Editable) {
		return nil, false
	}
	return o.Editable, true
}

// HasEditable returns a boolean if a field has been set.
func (o *IssueField) HasEditable() bool {
	if o != nil && !utils.IsNil(o.Editable) {
		return true
	}

	return false
}

// SetEditable gets a reference to the given bool and assigns it to the Editable field.
func (o *IssueField) SetEditable(v bool) {
	o.Editable = &v
}

// GetIconUrl returns the IconUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssueField) GetIconUrl() string {
	if o == nil || utils.IsNil(o.IconUrl.Get()) {
		var ret string
		return ret
	}
	return *o.IconUrl.Get()
}

// GetIconUrlOk returns a tuple with the IconUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssueField) GetIconUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IconUrl.Get(), o.IconUrl.IsSet()
}

// HasIconUrl returns a boolean if a field has been set.
func (o *IssueField) HasIconUrl() bool {
	if o != nil && o.IconUrl.IsSet() {
		return true
	}

	return false
}

// SetIconUrl gets a reference to the given utils.NullableString and assigns it to the IconUrl field.
func (o *IssueField) SetIconUrl(v string) {
	o.IconUrl.Set(&v)
}
// SetIconUrlNil sets the value for IconUrl to be an explicit nil
func (o *IssueField) SetIconUrlNil() {
	o.IconUrl.Set(nil)
}

// UnsetIconUrl ensures that no value is present for IconUrl, not even an explicit nil
func (o *IssueField) UnsetIconUrl() {
	o.IconUrl.Unset()
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IssueField) GetId() int64 {
	if o == nil || utils.IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueField) GetIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IssueField) HasId() bool {
	if o != nil && !utils.IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *IssueField) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IssueField) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueField) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IssueField) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IssueField) SetName(v string) {
	o.Name = &v
}

// GetOptions returns the Options field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssueField) GetOptions() []IssueFieldOption {
	if o == nil {
		var ret []IssueFieldOption
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssueField) GetOptionsOk() ([]IssueFieldOption, bool) {
	if o == nil || utils.IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *IssueField) HasOptions() bool {
	if o != nil && !utils.IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []IssueFieldOption and assigns it to the Options field.
func (o *IssueField) SetOptions(v []IssueFieldOption) {
	o.Options = v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *IssueField) GetRequired() bool {
	if o == nil || utils.IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueField) GetRequiredOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *IssueField) HasRequired() bool {
	if o != nil && !utils.IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *IssueField) SetRequired(v bool) {
	o.Required = &v
}

// GetSelectable returns the Selectable field value if set, zero value otherwise.
func (o *IssueField) GetSelectable() bool {
	if o == nil || utils.IsNil(o.Selectable) {
		var ret bool
		return ret
	}
	return *o.Selectable
}

// GetSelectableOk returns a tuple with the Selectable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueField) GetSelectableOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.Selectable) {
		return nil, false
	}
	return o.Selectable, true
}

// HasSelectable returns a boolean if a field has been set.
func (o *IssueField) HasSelectable() bool {
	if o != nil && !utils.IsNil(o.Selectable) {
		return true
	}

	return false
}

// SetSelectable gets a reference to the given bool and assigns it to the Selectable field.
func (o *IssueField) SetSelectable(v bool) {
	o.Selectable = &v
}

// GetSortable returns the Sortable field value if set, zero value otherwise.
func (o *IssueField) GetSortable() bool {
	if o == nil || utils.IsNil(o.Sortable) {
		var ret bool
		return ret
	}
	return *o.Sortable
}

// GetSortableOk returns a tuple with the Sortable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueField) GetSortableOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.Sortable) {
		return nil, false
	}
	return o.Sortable, true
}

// HasSortable returns a boolean if a field has been set.
func (o *IssueField) HasSortable() bool {
	if o != nil && !utils.IsNil(o.Sortable) {
		return true
	}

	return false
}

// SetSortable gets a reference to the given bool and assigns it to the Sortable field.
func (o *IssueField) SetSortable(v bool) {
	o.Sortable = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IssueField) GetType() string {
	if o == nil || utils.IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueField) GetTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IssueField) HasType() bool {
	if o != nil && !utils.IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *IssueField) SetType(v string) {
	o.Type = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssueField) GetUnit() string {
	if o == nil || utils.IsNil(o.Unit.Get()) {
		var ret string
		return ret
	}
	return *o.Unit.Get()
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssueField) GetUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Unit.Get(), o.Unit.IsSet()
}

// HasUnit returns a boolean if a field has been set.
func (o *IssueField) HasUnit() bool {
	if o != nil && o.Unit.IsSet() {
		return true
	}

	return false
}

// SetUnit gets a reference to the given utils.NullableString and assigns it to the Unit field.
func (o *IssueField) SetUnit(v string) {
	o.Unit.Set(&v)
}
// SetUnitNil sets the value for Unit to be an explicit nil
func (o *IssueField) SetUnitNil() {
	o.Unit.Set(nil)
}

// UnsetUnit ensures that no value is present for Unit, not even an explicit nil
func (o *IssueField) UnsetUnit() {
	o.Unit.Unset()
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *IssueField) GetUpdatedAt() int64 {
	if o == nil || utils.IsNil(o.UpdatedAt) {
		var ret int64
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueField) GetUpdatedAtOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *IssueField) HasUpdatedAt() bool {
	if o != nil && !utils.IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given int64 and assigns it to the UpdatedAt field.
func (o *IssueField) SetUpdatedAt(v int64) {
	o.UpdatedAt = &v
}

func (o IssueField) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IssueField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.ComponentType) {
		toSerialize["ComponentType"] = o.ComponentType
	}
	if !utils.IsNil(o.CreatedAt) {
		toSerialize["CreatedAt"] = o.CreatedAt
	}
	if !utils.IsNil(o.CreatedBy) {
		toSerialize["CreatedBy"] = o.CreatedBy
	}
	if !utils.IsNil(o.Deletable) {
		toSerialize["Deletable"] = o.Deletable
	}
	if o.Description.IsSet() {
		toSerialize["Description"] = o.Description.Get()
	}
	if !utils.IsNil(o.Editable) {
		toSerialize["Editable"] = o.Editable
	}
	if o.IconUrl.IsSet() {
		toSerialize["IconUrl"] = o.IconUrl.Get()
	}
	if !utils.IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !utils.IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if o.Options != nil {
		toSerialize["Options"] = o.Options
	}
	if !utils.IsNil(o.Required) {
		toSerialize["Required"] = o.Required
	}
	if !utils.IsNil(o.Selectable) {
		toSerialize["Selectable"] = o.Selectable
	}
	if !utils.IsNil(o.Sortable) {
		toSerialize["Sortable"] = o.Sortable
	}
	if !utils.IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	if o.Unit.IsSet() {
		toSerialize["Unit"] = o.Unit.Get()
	}
	if !utils.IsNil(o.UpdatedAt) {
		toSerialize["UpdatedAt"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableIssueField struct {
	value *IssueField
	isSet bool
}

func (v NullableIssueField) Get() *IssueField {
	return v.value
}

func (v *NullableIssueField) Set(val *IssueField) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueField) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueField(val *IssueField) *NullableIssueField {
	return &NullableIssueField{value: val, isSet: true}
}

func (v NullableIssueField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


