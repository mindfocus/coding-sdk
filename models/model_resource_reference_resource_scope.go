/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the ResourceReferenceResourceScope type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ResourceReferenceResourceScope{}

// ResourceReferenceResourceScope 资源所属主体信息
type ResourceReferenceResourceScope struct {
	// 所属主体类型： 1项目、2团队
	ScopeType int64 `json:"ScopeType"`
	// 所属主体名
	ScopeName string `json:"ScopeName"`
	// 所属主体展示名
	ScopeDisplayName string `json:"ScopeDisplayName"`
	// 所属主体ID
	ScopeId int64 `json:"ScopeId"`
}

type _ResourceReferenceResourceScope ResourceReferenceResourceScope

// NewResourceReferenceResourceScope instantiates a new ResourceReferenceResourceScope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceReferenceResourceScope(scopeType int64, scopeName string, scopeDisplayName string, scopeId int64) *ResourceReferenceResourceScope {
	this := ResourceReferenceResourceScope{}
	this.ScopeType = scopeType
	this.ScopeName = scopeName
	this.ScopeDisplayName = scopeDisplayName
	this.ScopeId = scopeId
	return &this
}

// NewResourceReferenceResourceScopeWithDefaults instantiates a new ResourceReferenceResourceScope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceReferenceResourceScopeWithDefaults() *ResourceReferenceResourceScope {
	this := ResourceReferenceResourceScope{}
	var scopeType int64 = 0
	this.ScopeType = scopeType
	var scopeName string = ""
	this.ScopeName = scopeName
	var scopeDisplayName string = ""
	this.ScopeDisplayName = scopeDisplayName
	var scopeId int64 = 0
	this.ScopeId = scopeId
	return &this
}

// GetScopeType returns the ScopeType field value
func (o *ResourceReferenceResourceScope) GetScopeType() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ScopeType
}

// GetScopeTypeOk returns a tuple with the ScopeType field value
// and a boolean to check if the value has been set.
func (o *ResourceReferenceResourceScope) GetScopeTypeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScopeType, true
}

// SetScopeType sets field value
func (o *ResourceReferenceResourceScope) SetScopeType(v int64) {
	o.ScopeType = v
}

// GetScopeName returns the ScopeName field value
func (o *ResourceReferenceResourceScope) GetScopeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScopeName
}

// GetScopeNameOk returns a tuple with the ScopeName field value
// and a boolean to check if the value has been set.
func (o *ResourceReferenceResourceScope) GetScopeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScopeName, true
}

// SetScopeName sets field value
func (o *ResourceReferenceResourceScope) SetScopeName(v string) {
	o.ScopeName = v
}

// GetScopeDisplayName returns the ScopeDisplayName field value
func (o *ResourceReferenceResourceScope) GetScopeDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScopeDisplayName
}

// GetScopeDisplayNameOk returns a tuple with the ScopeDisplayName field value
// and a boolean to check if the value has been set.
func (o *ResourceReferenceResourceScope) GetScopeDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScopeDisplayName, true
}

// SetScopeDisplayName sets field value
func (o *ResourceReferenceResourceScope) SetScopeDisplayName(v string) {
	o.ScopeDisplayName = v
}

// GetScopeId returns the ScopeId field value
func (o *ResourceReferenceResourceScope) GetScopeId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ScopeId
}

// GetScopeIdOk returns a tuple with the ScopeId field value
// and a boolean to check if the value has been set.
func (o *ResourceReferenceResourceScope) GetScopeIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScopeId, true
}

// SetScopeId sets field value
func (o *ResourceReferenceResourceScope) SetScopeId(v int64) {
	o.ScopeId = v
}

func (o ResourceReferenceResourceScope) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceReferenceResourceScope) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ScopeType"] = o.ScopeType
	toSerialize["ScopeName"] = o.ScopeName
	toSerialize["ScopeDisplayName"] = o.ScopeDisplayName
	toSerialize["ScopeId"] = o.ScopeId
	return toSerialize, nil
}

func (o *ResourceReferenceResourceScope) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ScopeType",
		"ScopeName",
		"ScopeDisplayName",
		"ScopeId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceReferenceResourceScope := _ResourceReferenceResourceScope{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResourceReferenceResourceScope)

	if err != nil {
		return err
	}

	*o = ResourceReferenceResourceScope(varResourceReferenceResourceScope)

	return err
}

type NullableResourceReferenceResourceScope struct {
	value *ResourceReferenceResourceScope
	isSet bool
}

func (v NullableResourceReferenceResourceScope) Get() *ResourceReferenceResourceScope {
	return v.value
}

func (v *NullableResourceReferenceResourceScope) Set(val *ResourceReferenceResourceScope) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceReferenceResourceScope) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceReferenceResourceScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceReferenceResourceScope(val *ResourceReferenceResourceScope) *NullableResourceReferenceResourceScope {
	return &NullableResourceReferenceResourceScope{value: val, isSet: true}
}

func (v NullableResourceReferenceResourceScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceReferenceResourceScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


