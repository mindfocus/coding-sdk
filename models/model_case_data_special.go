/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the CaseDataSpecial type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CaseDataSpecial{}

// CaseDataSpecial 测试用例数据
type CaseDataSpecial struct {
	Case *CaseSpecial `json:"Case,omitempty"`
}

// NewCaseDataSpecial instantiates a new CaseDataSpecial object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCaseDataSpecial() *CaseDataSpecial {
	this := CaseDataSpecial{}
	return &this
}

// NewCaseDataSpecialWithDefaults instantiates a new CaseDataSpecial object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCaseDataSpecialWithDefaults() *CaseDataSpecial {
	this := CaseDataSpecial{}
	return &this
}

// GetCase returns the Case field value if set, zero value otherwise.
func (o *CaseDataSpecial) GetCase() CaseSpecial {
	if o == nil || utils.IsNil(o.Case) {
		var ret CaseSpecial
		return ret
	}
	return *o.Case
}

// GetCaseOk returns a tuple with the Case field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaseDataSpecial) GetCaseOk() (*CaseSpecial, bool) {
	if o == nil || utils.IsNil(o.Case) {
		return nil, false
	}
	return o.Case, true
}

// HasCase returns a boolean if a field has been set.
func (o *CaseDataSpecial) HasCase() bool {
	if o != nil && !utils.IsNil(o.Case) {
		return true
	}

	return false
}

// SetCase gets a reference to the given CaseSpecial and assigns it to the Case field.
func (o *CaseDataSpecial) SetCase(v CaseSpecial) {
	o.Case = &v
}

func (o CaseDataSpecial) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CaseDataSpecial) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Case) {
		toSerialize["Case"] = o.Case
	}
	return toSerialize, nil
}

type NullableCaseDataSpecial struct {
	value *CaseDataSpecial
	isSet bool
}

func (v NullableCaseDataSpecial) Get() *CaseDataSpecial {
	return v.value
}

func (v *NullableCaseDataSpecial) Set(val *CaseDataSpecial) {
	v.value = val
	v.isSet = true
}

func (v NullableCaseDataSpecial) IsSet() bool {
	return v.isSet
}

func (v *NullableCaseDataSpecial) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCaseDataSpecial(val *CaseDataSpecial) *NullableCaseDataSpecial {
	return &NullableCaseDataSpecial{value: val, isSet: true}
}

func (v NullableCaseDataSpecial) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCaseDataSpecial) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


