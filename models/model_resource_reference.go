/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the ResourceReference type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ResourceReference{}

// ResourceReference 协同事项引用资源
type ResourceReference struct {
	// 项目ID
	ProjectId utils.NullableInt64 `json:"ProjectId,omitempty"`
	// 项目名称
	ProjectName utils.NullableString `json:"ProjectName,omitempty"`
	// 资源code
	ResourceCode utils.NullableInt64 `json:"ResourceCode,omitempty"`
	// 资源ID
	ResourceId utils.NullableInt64 `json:"ResourceId,omitempty"`
	// 资源名称
	ResourceName utils.NullableString `json:"ResourceName,omitempty"`
	// 资源状态
	ResourceStatus utils.NullableString `json:"ResourceStatus,omitempty"`
	// 资源类型
	ResourceType utils.NullableString `json:"ResourceType,omitempty"`
}

// NewResourceReference instantiates a new ResourceReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceReference() *ResourceReference {
	this := ResourceReference{}
	var projectName string = ""
	this.ProjectName = *utils.NewNullableString(&projectName)
	var resourceName string = ""
	this.ResourceName = *utils.NewNullableString(&resourceName)
	var resourceStatus string = ""
	this.ResourceStatus = *utils.NewNullableString(&resourceStatus)
	var resourceType string = ""
	this.ResourceType = *utils.NewNullableString(&resourceType)
	return &this
}

// NewResourceReferenceWithDefaults instantiates a new ResourceReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceReferenceWithDefaults() *ResourceReference {
	this := ResourceReference{}
	var projectName string = ""
	this.ProjectName = *utils.NewNullableString(&projectName)
	var resourceName string = ""
	this.ResourceName = *utils.NewNullableString(&resourceName)
	var resourceStatus string = ""
	this.ResourceStatus = *utils.NewNullableString(&resourceStatus)
	var resourceType string = ""
	this.ResourceType = *utils.NewNullableString(&resourceType)
	return &this
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceReference) GetProjectId() int64 {
	if o == nil || utils.IsNil(o.ProjectId.Get()) {
		var ret int64
		return ret
	}
	return *o.ProjectId.Get()
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceReference) GetProjectIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProjectId.Get(), o.ProjectId.IsSet()
}

// HasProjectId returns a boolean if a field has been set.
func (o *ResourceReference) HasProjectId() bool {
	if o != nil && o.ProjectId.IsSet() {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given utils.NullableInt64 and assigns it to the ProjectId field.
func (o *ResourceReference) SetProjectId(v int64) {
	o.ProjectId.Set(&v)
}
// SetProjectIdNil sets the value for ProjectId to be an explicit nil
func (o *ResourceReference) SetProjectIdNil() {
	o.ProjectId.Set(nil)
}

// UnsetProjectId ensures that no value is present for ProjectId, not even an explicit nil
func (o *ResourceReference) UnsetProjectId() {
	o.ProjectId.Unset()
}

// GetProjectName returns the ProjectName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceReference) GetProjectName() string {
	if o == nil || utils.IsNil(o.ProjectName.Get()) {
		var ret string
		return ret
	}
	return *o.ProjectName.Get()
}

// GetProjectNameOk returns a tuple with the ProjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceReference) GetProjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProjectName.Get(), o.ProjectName.IsSet()
}

// HasProjectName returns a boolean if a field has been set.
func (o *ResourceReference) HasProjectName() bool {
	if o != nil && o.ProjectName.IsSet() {
		return true
	}

	return false
}

// SetProjectName gets a reference to the given utils.NullableString and assigns it to the ProjectName field.
func (o *ResourceReference) SetProjectName(v string) {
	o.ProjectName.Set(&v)
}
// SetProjectNameNil sets the value for ProjectName to be an explicit nil
func (o *ResourceReference) SetProjectNameNil() {
	o.ProjectName.Set(nil)
}

// UnsetProjectName ensures that no value is present for ProjectName, not even an explicit nil
func (o *ResourceReference) UnsetProjectName() {
	o.ProjectName.Unset()
}

// GetResourceCode returns the ResourceCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceReference) GetResourceCode() int64 {
	if o == nil || utils.IsNil(o.ResourceCode.Get()) {
		var ret int64
		return ret
	}
	return *o.ResourceCode.Get()
}

// GetResourceCodeOk returns a tuple with the ResourceCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceReference) GetResourceCodeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceCode.Get(), o.ResourceCode.IsSet()
}

// HasResourceCode returns a boolean if a field has been set.
func (o *ResourceReference) HasResourceCode() bool {
	if o != nil && o.ResourceCode.IsSet() {
		return true
	}

	return false
}

// SetResourceCode gets a reference to the given utils.NullableInt64 and assigns it to the ResourceCode field.
func (o *ResourceReference) SetResourceCode(v int64) {
	o.ResourceCode.Set(&v)
}
// SetResourceCodeNil sets the value for ResourceCode to be an explicit nil
func (o *ResourceReference) SetResourceCodeNil() {
	o.ResourceCode.Set(nil)
}

// UnsetResourceCode ensures that no value is present for ResourceCode, not even an explicit nil
func (o *ResourceReference) UnsetResourceCode() {
	o.ResourceCode.Unset()
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceReference) GetResourceId() int64 {
	if o == nil || utils.IsNil(o.ResourceId.Get()) {
		var ret int64
		return ret
	}
	return *o.ResourceId.Get()
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceReference) GetResourceIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceId.Get(), o.ResourceId.IsSet()
}

// HasResourceId returns a boolean if a field has been set.
func (o *ResourceReference) HasResourceId() bool {
	if o != nil && o.ResourceId.IsSet() {
		return true
	}

	return false
}

// SetResourceId gets a reference to the given utils.NullableInt64 and assigns it to the ResourceId field.
func (o *ResourceReference) SetResourceId(v int64) {
	o.ResourceId.Set(&v)
}
// SetResourceIdNil sets the value for ResourceId to be an explicit nil
func (o *ResourceReference) SetResourceIdNil() {
	o.ResourceId.Set(nil)
}

// UnsetResourceId ensures that no value is present for ResourceId, not even an explicit nil
func (o *ResourceReference) UnsetResourceId() {
	o.ResourceId.Unset()
}

// GetResourceName returns the ResourceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceReference) GetResourceName() string {
	if o == nil || utils.IsNil(o.ResourceName.Get()) {
		var ret string
		return ret
	}
	return *o.ResourceName.Get()
}

// GetResourceNameOk returns a tuple with the ResourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceReference) GetResourceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceName.Get(), o.ResourceName.IsSet()
}

// HasResourceName returns a boolean if a field has been set.
func (o *ResourceReference) HasResourceName() bool {
	if o != nil && o.ResourceName.IsSet() {
		return true
	}

	return false
}

// SetResourceName gets a reference to the given utils.NullableString and assigns it to the ResourceName field.
func (o *ResourceReference) SetResourceName(v string) {
	o.ResourceName.Set(&v)
}
// SetResourceNameNil sets the value for ResourceName to be an explicit nil
func (o *ResourceReference) SetResourceNameNil() {
	o.ResourceName.Set(nil)
}

// UnsetResourceName ensures that no value is present for ResourceName, not even an explicit nil
func (o *ResourceReference) UnsetResourceName() {
	o.ResourceName.Unset()
}

// GetResourceStatus returns the ResourceStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceReference) GetResourceStatus() string {
	if o == nil || utils.IsNil(o.ResourceStatus.Get()) {
		var ret string
		return ret
	}
	return *o.ResourceStatus.Get()
}

// GetResourceStatusOk returns a tuple with the ResourceStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceReference) GetResourceStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceStatus.Get(), o.ResourceStatus.IsSet()
}

// HasResourceStatus returns a boolean if a field has been set.
func (o *ResourceReference) HasResourceStatus() bool {
	if o != nil && o.ResourceStatus.IsSet() {
		return true
	}

	return false
}

// SetResourceStatus gets a reference to the given utils.NullableString and assigns it to the ResourceStatus field.
func (o *ResourceReference) SetResourceStatus(v string) {
	o.ResourceStatus.Set(&v)
}
// SetResourceStatusNil sets the value for ResourceStatus to be an explicit nil
func (o *ResourceReference) SetResourceStatusNil() {
	o.ResourceStatus.Set(nil)
}

// UnsetResourceStatus ensures that no value is present for ResourceStatus, not even an explicit nil
func (o *ResourceReference) UnsetResourceStatus() {
	o.ResourceStatus.Unset()
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceReference) GetResourceType() string {
	if o == nil || utils.IsNil(o.ResourceType.Get()) {
		var ret string
		return ret
	}
	return *o.ResourceType.Get()
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceReference) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceType.Get(), o.ResourceType.IsSet()
}

// HasResourceType returns a boolean if a field has been set.
func (o *ResourceReference) HasResourceType() bool {
	if o != nil && o.ResourceType.IsSet() {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given utils.NullableString and assigns it to the ResourceType field.
func (o *ResourceReference) SetResourceType(v string) {
	o.ResourceType.Set(&v)
}
// SetResourceTypeNil sets the value for ResourceType to be an explicit nil
func (o *ResourceReference) SetResourceTypeNil() {
	o.ResourceType.Set(nil)
}

// UnsetResourceType ensures that no value is present for ResourceType, not even an explicit nil
func (o *ResourceReference) UnsetResourceType() {
	o.ResourceType.Unset()
}

func (o ResourceReference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ProjectId.IsSet() {
		toSerialize["ProjectId"] = o.ProjectId.Get()
	}
	if o.ProjectName.IsSet() {
		toSerialize["ProjectName"] = o.ProjectName.Get()
	}
	if o.ResourceCode.IsSet() {
		toSerialize["ResourceCode"] = o.ResourceCode.Get()
	}
	if o.ResourceId.IsSet() {
		toSerialize["ResourceId"] = o.ResourceId.Get()
	}
	if o.ResourceName.IsSet() {
		toSerialize["ResourceName"] = o.ResourceName.Get()
	}
	if o.ResourceStatus.IsSet() {
		toSerialize["ResourceStatus"] = o.ResourceStatus.Get()
	}
	if o.ResourceType.IsSet() {
		toSerialize["ResourceType"] = o.ResourceType.Get()
	}
	return toSerialize, nil
}

type NullableResourceReference struct {
	value *ResourceReference
	isSet bool
}

func (v NullableResourceReference) Get() *ResourceReference {
	return v.value
}

func (v *NullableResourceReference) Set(val *ResourceReference) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceReference) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceReference(val *ResourceReference) *NullableResourceReference {
	return &NullableResourceReference{value: val, isSet: true}
}

func (v NullableResourceReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


