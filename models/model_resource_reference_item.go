/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the ResourceReferenceItem type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ResourceReferenceItem{}

// ResourceReferenceItem 引用的资源数据项
type ResourceReferenceItem struct {
	// 项目ID
	ProjectId *int64 `json:"ProjectId,omitempty"`
	// 资源CODE
	ResourceCode *int64 `json:"ResourceCode,omitempty"`
	// 资源ID
	ResourceId *int64 `json:"ResourceId,omitempty"`
	// 资源类型
	ResourceType *string `json:"ResourceType,omitempty"`
}

// NewResourceReferenceItem instantiates a new ResourceReferenceItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceReferenceItem() *ResourceReferenceItem {
	this := ResourceReferenceItem{}
	return &this
}

// NewResourceReferenceItemWithDefaults instantiates a new ResourceReferenceItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceReferenceItemWithDefaults() *ResourceReferenceItem {
	this := ResourceReferenceItem{}
	return &this
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *ResourceReferenceItem) GetProjectId() int64 {
	if o == nil || utils.IsNil(o.ProjectId) {
		var ret int64
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceReferenceItem) GetProjectIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *ResourceReferenceItem) HasProjectId() bool {
	if o != nil && !utils.IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given int64 and assigns it to the ProjectId field.
func (o *ResourceReferenceItem) SetProjectId(v int64) {
	o.ProjectId = &v
}

// GetResourceCode returns the ResourceCode field value if set, zero value otherwise.
func (o *ResourceReferenceItem) GetResourceCode() int64 {
	if o == nil || utils.IsNil(o.ResourceCode) {
		var ret int64
		return ret
	}
	return *o.ResourceCode
}

// GetResourceCodeOk returns a tuple with the ResourceCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceReferenceItem) GetResourceCodeOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.ResourceCode) {
		return nil, false
	}
	return o.ResourceCode, true
}

// HasResourceCode returns a boolean if a field has been set.
func (o *ResourceReferenceItem) HasResourceCode() bool {
	if o != nil && !utils.IsNil(o.ResourceCode) {
		return true
	}

	return false
}

// SetResourceCode gets a reference to the given int64 and assigns it to the ResourceCode field.
func (o *ResourceReferenceItem) SetResourceCode(v int64) {
	o.ResourceCode = &v
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise.
func (o *ResourceReferenceItem) GetResourceId() int64 {
	if o == nil || utils.IsNil(o.ResourceId) {
		var ret int64
		return ret
	}
	return *o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceReferenceItem) GetResourceIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.ResourceId) {
		return nil, false
	}
	return o.ResourceId, true
}

// HasResourceId returns a boolean if a field has been set.
func (o *ResourceReferenceItem) HasResourceId() bool {
	if o != nil && !utils.IsNil(o.ResourceId) {
		return true
	}

	return false
}

// SetResourceId gets a reference to the given int64 and assigns it to the ResourceId field.
func (o *ResourceReferenceItem) SetResourceId(v int64) {
	o.ResourceId = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *ResourceReferenceItem) GetResourceType() string {
	if o == nil || utils.IsNil(o.ResourceType) {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceReferenceItem) GetResourceTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *ResourceReferenceItem) HasResourceType() bool {
	if o != nil && !utils.IsNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *ResourceReferenceItem) SetResourceType(v string) {
	o.ResourceType = &v
}

func (o ResourceReferenceItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceReferenceItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.ProjectId) {
		toSerialize["ProjectId"] = o.ProjectId
	}
	if !utils.IsNil(o.ResourceCode) {
		toSerialize["ResourceCode"] = o.ResourceCode
	}
	if !utils.IsNil(o.ResourceId) {
		toSerialize["ResourceId"] = o.ResourceId
	}
	if !utils.IsNil(o.ResourceType) {
		toSerialize["ResourceType"] = o.ResourceType
	}
	return toSerialize, nil
}

type NullableResourceReferenceItem struct {
	value *ResourceReferenceItem
	isSet bool
}

func (v NullableResourceReferenceItem) Get() *ResourceReferenceItem {
	return v.value
}

func (v *NullableResourceReferenceItem) Set(val *ResourceReferenceItem) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceReferenceItem) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceReferenceItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceReferenceItem(val *ResourceReferenceItem) *NullableResourceReferenceItem {
	return &NullableResourceReferenceItem{value: val, isSet: true}
}

func (v NullableResourceReferenceItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceReferenceItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


