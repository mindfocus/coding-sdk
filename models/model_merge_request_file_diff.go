/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the MergeRequestFileDiff type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &MergeRequestFileDiff{}

// MergeRequestFileDiff 文件修改记录
type MergeRequestFileDiff struct {
	// 总删除条数
	Deletions *int64 `json:"Deletions,omitempty"`
	// 文件差异列表
	FileDiffs []FileDiff `json:"FileDiffs,omitempty"`
	// 总新增条数
	Insertions *int64 `json:"Insertions,omitempty"`
	// 新请求的 sha 值
	NewSha *string `json:"NewSha,omitempty"`
	// 旧请求的 sha 值
	OldSha *string `json:"OldSha,omitempty"`
}

// NewMergeRequestFileDiff instantiates a new MergeRequestFileDiff object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMergeRequestFileDiff() *MergeRequestFileDiff {
	this := MergeRequestFileDiff{}
	var newSha string = ""
	this.NewSha = &newSha
	var oldSha string = ""
	this.OldSha = &oldSha
	return &this
}

// NewMergeRequestFileDiffWithDefaults instantiates a new MergeRequestFileDiff object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMergeRequestFileDiffWithDefaults() *MergeRequestFileDiff {
	this := MergeRequestFileDiff{}
	var newSha string = ""
	this.NewSha = &newSha
	var oldSha string = ""
	this.OldSha = &oldSha
	return &this
}

// GetDeletions returns the Deletions field value if set, zero value otherwise.
func (o *MergeRequestFileDiff) GetDeletions() int64 {
	if o == nil || utils.IsNil(o.Deletions) {
		var ret int64
		return ret
	}
	return *o.Deletions
}

// GetDeletionsOk returns a tuple with the Deletions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRequestFileDiff) GetDeletionsOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Deletions) {
		return nil, false
	}
	return o.Deletions, true
}

// HasDeletions returns a boolean if a field has been set.
func (o *MergeRequestFileDiff) HasDeletions() bool {
	if o != nil && !utils.IsNil(o.Deletions) {
		return true
	}

	return false
}

// SetDeletions gets a reference to the given int64 and assigns it to the Deletions field.
func (o *MergeRequestFileDiff) SetDeletions(v int64) {
	o.Deletions = &v
}

// GetFileDiffs returns the FileDiffs field value if set, zero value otherwise.
func (o *MergeRequestFileDiff) GetFileDiffs() []FileDiff {
	if o == nil || utils.IsNil(o.FileDiffs) {
		var ret []FileDiff
		return ret
	}
	return o.FileDiffs
}

// GetFileDiffsOk returns a tuple with the FileDiffs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRequestFileDiff) GetFileDiffsOk() ([]FileDiff, bool) {
	if o == nil || utils.IsNil(o.FileDiffs) {
		return nil, false
	}
	return o.FileDiffs, true
}

// HasFileDiffs returns a boolean if a field has been set.
func (o *MergeRequestFileDiff) HasFileDiffs() bool {
	if o != nil && !utils.IsNil(o.FileDiffs) {
		return true
	}

	return false
}

// SetFileDiffs gets a reference to the given []FileDiff and assigns it to the FileDiffs field.
func (o *MergeRequestFileDiff) SetFileDiffs(v []FileDiff) {
	o.FileDiffs = v
}

// GetInsertions returns the Insertions field value if set, zero value otherwise.
func (o *MergeRequestFileDiff) GetInsertions() int64 {
	if o == nil || utils.IsNil(o.Insertions) {
		var ret int64
		return ret
	}
	return *o.Insertions
}

// GetInsertionsOk returns a tuple with the Insertions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRequestFileDiff) GetInsertionsOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Insertions) {
		return nil, false
	}
	return o.Insertions, true
}

// HasInsertions returns a boolean if a field has been set.
func (o *MergeRequestFileDiff) HasInsertions() bool {
	if o != nil && !utils.IsNil(o.Insertions) {
		return true
	}

	return false
}

// SetInsertions gets a reference to the given int64 and assigns it to the Insertions field.
func (o *MergeRequestFileDiff) SetInsertions(v int64) {
	o.Insertions = &v
}

// GetNewSha returns the NewSha field value if set, zero value otherwise.
func (o *MergeRequestFileDiff) GetNewSha() string {
	if o == nil || utils.IsNil(o.NewSha) {
		var ret string
		return ret
	}
	return *o.NewSha
}

// GetNewShaOk returns a tuple with the NewSha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRequestFileDiff) GetNewShaOk() (*string, bool) {
	if o == nil || utils.IsNil(o.NewSha) {
		return nil, false
	}
	return o.NewSha, true
}

// HasNewSha returns a boolean if a field has been set.
func (o *MergeRequestFileDiff) HasNewSha() bool {
	if o != nil && !utils.IsNil(o.NewSha) {
		return true
	}

	return false
}

// SetNewSha gets a reference to the given string and assigns it to the NewSha field.
func (o *MergeRequestFileDiff) SetNewSha(v string) {
	o.NewSha = &v
}

// GetOldSha returns the OldSha field value if set, zero value otherwise.
func (o *MergeRequestFileDiff) GetOldSha() string {
	if o == nil || utils.IsNil(o.OldSha) {
		var ret string
		return ret
	}
	return *o.OldSha
}

// GetOldShaOk returns a tuple with the OldSha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRequestFileDiff) GetOldShaOk() (*string, bool) {
	if o == nil || utils.IsNil(o.OldSha) {
		return nil, false
	}
	return o.OldSha, true
}

// HasOldSha returns a boolean if a field has been set.
func (o *MergeRequestFileDiff) HasOldSha() bool {
	if o != nil && !utils.IsNil(o.OldSha) {
		return true
	}

	return false
}

// SetOldSha gets a reference to the given string and assigns it to the OldSha field.
func (o *MergeRequestFileDiff) SetOldSha(v string) {
	o.OldSha = &v
}

func (o MergeRequestFileDiff) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MergeRequestFileDiff) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Deletions) {
		toSerialize["Deletions"] = o.Deletions
	}
	if !utils.IsNil(o.FileDiffs) {
		toSerialize["FileDiffs"] = o.FileDiffs
	}
	if !utils.IsNil(o.Insertions) {
		toSerialize["Insertions"] = o.Insertions
	}
	if !utils.IsNil(o.NewSha) {
		toSerialize["NewSha"] = o.NewSha
	}
	if !utils.IsNil(o.OldSha) {
		toSerialize["OldSha"] = o.OldSha
	}
	return toSerialize, nil
}

type NullableMergeRequestFileDiff struct {
	value *MergeRequestFileDiff
	isSet bool
}

func (v NullableMergeRequestFileDiff) Get() *MergeRequestFileDiff {
	return v.value
}

func (v *NullableMergeRequestFileDiff) Set(val *MergeRequestFileDiff) {
	v.value = val
	v.isSet = true
}

func (v NullableMergeRequestFileDiff) IsSet() bool {
	return v.isSet
}

func (v *NullableMergeRequestFileDiff) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMergeRequestFileDiff(val *MergeRequestFileDiff) *NullableMergeRequestFileDiff {
	return &NullableMergeRequestFileDiff{value: val, isSet: true}
}

func (v NullableMergeRequestFileDiff) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMergeRequestFileDiff) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


