/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the ArtifactProperty type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ArtifactProperty{}

// ArtifactProperty 制品属性实体，用于查询制品属性列表
type ArtifactProperty struct {
	// 创建时间
	CreatedAt *int64 `json:"CreatedAt,omitempty"`
	// 属性 ID
	Id *int32 `json:"Id,omitempty"`
	// 是否不可变更
	Immutable *bool `json:"Immutable,omitempty"`
	// 属性名称（以 ‘coding.’ 作为属性名称开头的属性，将不可变更及删除，即 Immutable = false）
	Name *string `json:"Name,omitempty"`
	// 属性值
	Value *string `json:"Value,omitempty"`
	// 制品版本
	Version *string `json:"Version,omitempty"`
}

// NewArtifactProperty instantiates a new ArtifactProperty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArtifactProperty() *ArtifactProperty {
	this := ArtifactProperty{}
	var immutable bool = false
	this.Immutable = &immutable
	var name string = ""
	this.Name = &name
	var value string = ""
	this.Value = &value
	var version string = ""
	this.Version = &version
	return &this
}

// NewArtifactPropertyWithDefaults instantiates a new ArtifactProperty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArtifactPropertyWithDefaults() *ArtifactProperty {
	this := ArtifactProperty{}
	var immutable bool = false
	this.Immutable = &immutable
	var name string = ""
	this.Name = &name
	var value string = ""
	this.Value = &value
	var version string = ""
	this.Version = &version
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ArtifactProperty) GetCreatedAt() int64 {
	if o == nil || utils.IsNil(o.CreatedAt) {
		var ret int64
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactProperty) GetCreatedAtOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ArtifactProperty) HasCreatedAt() bool {
	if o != nil && !utils.IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int64 and assigns it to the CreatedAt field.
func (o *ArtifactProperty) SetCreatedAt(v int64) {
	o.CreatedAt = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ArtifactProperty) GetId() int32 {
	if o == nil || utils.IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactProperty) GetIdOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ArtifactProperty) HasId() bool {
	if o != nil && !utils.IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ArtifactProperty) SetId(v int32) {
	o.Id = &v
}

// GetImmutable returns the Immutable field value if set, zero value otherwise.
func (o *ArtifactProperty) GetImmutable() bool {
	if o == nil || utils.IsNil(o.Immutable) {
		var ret bool
		return ret
	}
	return *o.Immutable
}

// GetImmutableOk returns a tuple with the Immutable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactProperty) GetImmutableOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.Immutable) {
		return nil, false
	}
	return o.Immutable, true
}

// HasImmutable returns a boolean if a field has been set.
func (o *ArtifactProperty) HasImmutable() bool {
	if o != nil && !utils.IsNil(o.Immutable) {
		return true
	}

	return false
}

// SetImmutable gets a reference to the given bool and assigns it to the Immutable field.
func (o *ArtifactProperty) SetImmutable(v bool) {
	o.Immutable = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ArtifactProperty) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactProperty) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ArtifactProperty) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ArtifactProperty) SetName(v string) {
	o.Name = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ArtifactProperty) GetValue() string {
	if o == nil || utils.IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactProperty) GetValueOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ArtifactProperty) HasValue() bool {
	if o != nil && !utils.IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ArtifactProperty) SetValue(v string) {
	o.Value = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ArtifactProperty) GetVersion() string {
	if o == nil || utils.IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactProperty) GetVersionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ArtifactProperty) HasVersion() bool {
	if o != nil && !utils.IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ArtifactProperty) SetVersion(v string) {
	o.Version = &v
}

func (o ArtifactProperty) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArtifactProperty) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.CreatedAt) {
		toSerialize["CreatedAt"] = o.CreatedAt
	}
	if !utils.IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !utils.IsNil(o.Immutable) {
		toSerialize["Immutable"] = o.Immutable
	}
	if !utils.IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !utils.IsNil(o.Value) {
		toSerialize["Value"] = o.Value
	}
	if !utils.IsNil(o.Version) {
		toSerialize["Version"] = o.Version
	}
	return toSerialize, nil
}

type NullableArtifactProperty struct {
	value *ArtifactProperty
	isSet bool
}

func (v NullableArtifactProperty) Get() *ArtifactProperty {
	return v.value
}

func (v *NullableArtifactProperty) Set(val *ArtifactProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableArtifactProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableArtifactProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArtifactProperty(val *ArtifactProperty) *NullableArtifactProperty {
	return &NullableArtifactProperty{value: val, isSet: true}
}

func (v NullableArtifactProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArtifactProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


