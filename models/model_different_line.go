/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DifferentLine type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DifferentLine{}

// DifferentLine 文件差异信息
type DifferentLine struct {
	// 排序号，由小到大递增
	Index *int64 `json:"Index,omitempty"`
	// 操作起始行号
	LeftNo *int64 `json:"LeftNo,omitempty"`
	// 操作方式:”+”表示新增,”-“表示删除,” “表示不变
	Prefix *string `json:"Prefix,omitempty"`
	// 操作结束行号
	RightNo *int64 `json:"RightNo,omitempty"`
	// 文本
	Text *string `json:"Text,omitempty"`
}

// NewDifferentLine instantiates a new DifferentLine object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDifferentLine() *DifferentLine {
	this := DifferentLine{}
	var prefix string = ""
	this.Prefix = &prefix
	var text string = ""
	this.Text = &text
	return &this
}

// NewDifferentLineWithDefaults instantiates a new DifferentLine object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDifferentLineWithDefaults() *DifferentLine {
	this := DifferentLine{}
	var prefix string = ""
	this.Prefix = &prefix
	var text string = ""
	this.Text = &text
	return &this
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *DifferentLine) GetIndex() int64 {
	if o == nil || utils.IsNil(o.Index) {
		var ret int64
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DifferentLine) GetIndexOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *DifferentLine) HasIndex() bool {
	if o != nil && !utils.IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given int64 and assigns it to the Index field.
func (o *DifferentLine) SetIndex(v int64) {
	o.Index = &v
}

// GetLeftNo returns the LeftNo field value if set, zero value otherwise.
func (o *DifferentLine) GetLeftNo() int64 {
	if o == nil || utils.IsNil(o.LeftNo) {
		var ret int64
		return ret
	}
	return *o.LeftNo
}

// GetLeftNoOk returns a tuple with the LeftNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DifferentLine) GetLeftNoOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.LeftNo) {
		return nil, false
	}
	return o.LeftNo, true
}

// HasLeftNo returns a boolean if a field has been set.
func (o *DifferentLine) HasLeftNo() bool {
	if o != nil && !utils.IsNil(o.LeftNo) {
		return true
	}

	return false
}

// SetLeftNo gets a reference to the given int64 and assigns it to the LeftNo field.
func (o *DifferentLine) SetLeftNo(v int64) {
	o.LeftNo = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *DifferentLine) GetPrefix() string {
	if o == nil || utils.IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DifferentLine) GetPrefixOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *DifferentLine) HasPrefix() bool {
	if o != nil && !utils.IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *DifferentLine) SetPrefix(v string) {
	o.Prefix = &v
}

// GetRightNo returns the RightNo field value if set, zero value otherwise.
func (o *DifferentLine) GetRightNo() int64 {
	if o == nil || utils.IsNil(o.RightNo) {
		var ret int64
		return ret
	}
	return *o.RightNo
}

// GetRightNoOk returns a tuple with the RightNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DifferentLine) GetRightNoOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.RightNo) {
		return nil, false
	}
	return o.RightNo, true
}

// HasRightNo returns a boolean if a field has been set.
func (o *DifferentLine) HasRightNo() bool {
	if o != nil && !utils.IsNil(o.RightNo) {
		return true
	}

	return false
}

// SetRightNo gets a reference to the given int64 and assigns it to the RightNo field.
func (o *DifferentLine) SetRightNo(v int64) {
	o.RightNo = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *DifferentLine) GetText() string {
	if o == nil || utils.IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DifferentLine) GetTextOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *DifferentLine) HasText() bool {
	if o != nil && !utils.IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *DifferentLine) SetText(v string) {
	o.Text = &v
}

func (o DifferentLine) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DifferentLine) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Index) {
		toSerialize["Index"] = o.Index
	}
	if !utils.IsNil(o.LeftNo) {
		toSerialize["LeftNo"] = o.LeftNo
	}
	if !utils.IsNil(o.Prefix) {
		toSerialize["Prefix"] = o.Prefix
	}
	if !utils.IsNil(o.RightNo) {
		toSerialize["RightNo"] = o.RightNo
	}
	if !utils.IsNil(o.Text) {
		toSerialize["Text"] = o.Text
	}
	return toSerialize, nil
}

type NullableDifferentLine struct {
	value *DifferentLine
	isSet bool
}

func (v NullableDifferentLine) Get() *DifferentLine {
	return v.value
}

func (v *NullableDifferentLine) Set(val *DifferentLine) {
	v.value = val
	v.isSet = true
}

func (v NullableDifferentLine) IsSet() bool {
	return v.isSet
}

func (v *NullableDifferentLine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDifferentLine(val *DifferentLine) *NullableDifferentLine {
	return &NullableDifferentLine{value: val, isSet: true}
}

func (v NullableDifferentLine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDifferentLine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


