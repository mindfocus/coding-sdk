/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DescribeTeamDepotsData type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DescribeTeamDepotsData{}

// DescribeTeamDepotsData 封装返回值
type DescribeTeamDepotsData struct {
	// 仓库列表
	DepotList []CodingCITeamDepot `json:"DepotList,omitempty"`
	// 仓库类型是否被授权，如 Github 是否被授权
	IsBound *bool `json:"IsBound,omitempty"`
}

// NewDescribeTeamDepotsData instantiates a new DescribeTeamDepotsData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeTeamDepotsData() *DescribeTeamDepotsData {
	this := DescribeTeamDepotsData{}
	var isBound bool = false
	this.IsBound = &isBound
	return &this
}

// NewDescribeTeamDepotsDataWithDefaults instantiates a new DescribeTeamDepotsData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeTeamDepotsDataWithDefaults() *DescribeTeamDepotsData {
	this := DescribeTeamDepotsData{}
	var isBound bool = false
	this.IsBound = &isBound
	return &this
}

// GetDepotList returns the DepotList field value if set, zero value otherwise.
func (o *DescribeTeamDepotsData) GetDepotList() []CodingCITeamDepot {
	if o == nil || utils.IsNil(o.DepotList) {
		var ret []CodingCITeamDepot
		return ret
	}
	return o.DepotList
}

// GetDepotListOk returns a tuple with the DepotList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeTeamDepotsData) GetDepotListOk() ([]CodingCITeamDepot, bool) {
	if o == nil || utils.IsNil(o.DepotList) {
		return nil, false
	}
	return o.DepotList, true
}

// HasDepotList returns a boolean if a field has been set.
func (o *DescribeTeamDepotsData) HasDepotList() bool {
	if o != nil && !utils.IsNil(o.DepotList) {
		return true
	}

	return false
}

// SetDepotList gets a reference to the given []CodingCITeamDepot and assigns it to the DepotList field.
func (o *DescribeTeamDepotsData) SetDepotList(v []CodingCITeamDepot) {
	o.DepotList = v
}

// GetIsBound returns the IsBound field value if set, zero value otherwise.
func (o *DescribeTeamDepotsData) GetIsBound() bool {
	if o == nil || utils.IsNil(o.IsBound) {
		var ret bool
		return ret
	}
	return *o.IsBound
}

// GetIsBoundOk returns a tuple with the IsBound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeTeamDepotsData) GetIsBoundOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IsBound) {
		return nil, false
	}
	return o.IsBound, true
}

// HasIsBound returns a boolean if a field has been set.
func (o *DescribeTeamDepotsData) HasIsBound() bool {
	if o != nil && !utils.IsNil(o.IsBound) {
		return true
	}

	return false
}

// SetIsBound gets a reference to the given bool and assigns it to the IsBound field.
func (o *DescribeTeamDepotsData) SetIsBound(v bool) {
	o.IsBound = &v
}

func (o DescribeTeamDepotsData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeTeamDepotsData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.DepotList) {
		toSerialize["DepotList"] = o.DepotList
	}
	if !utils.IsNil(o.IsBound) {
		toSerialize["IsBound"] = o.IsBound
	}
	return toSerialize, nil
}

type NullableDescribeTeamDepotsData struct {
	value *DescribeTeamDepotsData
	isSet bool
}

func (v NullableDescribeTeamDepotsData) Get() *DescribeTeamDepotsData {
	return v.value
}

func (v *NullableDescribeTeamDepotsData) Set(val *DescribeTeamDepotsData) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeTeamDepotsData) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeTeamDepotsData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeTeamDepotsData(val *DescribeTeamDepotsData) *NullableDescribeTeamDepotsData {
	return &NullableDescribeTeamDepotsData{value: val, isSet: true}
}

func (v NullableDescribeTeamDepotsData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeTeamDepotsData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


