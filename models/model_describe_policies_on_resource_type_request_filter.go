/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DescribePoliciesOnResourceTypeRequestFilter type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DescribePoliciesOnResourceTypeRequestFilter{}

// DescribePoliciesOnResourceTypeRequestFilter 获取指定资源类型对应的权限组列表的查询条件
type DescribePoliciesOnResourceTypeRequestFilter struct {
	// 权限组显示名称，模糊匹配
	PolicyAlias *string `json:"PolicyAlias,omitempty"`
	// 资源类型，精确匹配
	ResourceType string `json:"ResourceType"`
	// 可见范围（默认 true），all：全部；true：用户可见；false：界面不可见（逻辑权限组）
	Visible *string `json:"Visible,omitempty"`
}

type _DescribePoliciesOnResourceTypeRequestFilter DescribePoliciesOnResourceTypeRequestFilter

// NewDescribePoliciesOnResourceTypeRequestFilter instantiates a new DescribePoliciesOnResourceTypeRequestFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribePoliciesOnResourceTypeRequestFilter(resourceType string) *DescribePoliciesOnResourceTypeRequestFilter {
	this := DescribePoliciesOnResourceTypeRequestFilter{}
	var policyAlias string = ""
	this.PolicyAlias = &policyAlias
	this.ResourceType = resourceType
	var visible string = ""
	this.Visible = &visible
	return &this
}

// NewDescribePoliciesOnResourceTypeRequestFilterWithDefaults instantiates a new DescribePoliciesOnResourceTypeRequestFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribePoliciesOnResourceTypeRequestFilterWithDefaults() *DescribePoliciesOnResourceTypeRequestFilter {
	this := DescribePoliciesOnResourceTypeRequestFilter{}
	var policyAlias string = ""
	this.PolicyAlias = &policyAlias
	var resourceType string = ""
	this.ResourceType = resourceType
	var visible string = ""
	this.Visible = &visible
	return &this
}

// GetPolicyAlias returns the PolicyAlias field value if set, zero value otherwise.
func (o *DescribePoliciesOnResourceTypeRequestFilter) GetPolicyAlias() string {
	if o == nil || utils.IsNil(o.PolicyAlias) {
		var ret string
		return ret
	}
	return *o.PolicyAlias
}

// GetPolicyAliasOk returns a tuple with the PolicyAlias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribePoliciesOnResourceTypeRequestFilter) GetPolicyAliasOk() (*string, bool) {
	if o == nil || utils.IsNil(o.PolicyAlias) {
		return nil, false
	}
	return o.PolicyAlias, true
}

// HasPolicyAlias returns a boolean if a field has been set.
func (o *DescribePoliciesOnResourceTypeRequestFilter) HasPolicyAlias() bool {
	if o != nil && !utils.IsNil(o.PolicyAlias) {
		return true
	}

	return false
}

// SetPolicyAlias gets a reference to the given string and assigns it to the PolicyAlias field.
func (o *DescribePoliciesOnResourceTypeRequestFilter) SetPolicyAlias(v string) {
	o.PolicyAlias = &v
}

// GetResourceType returns the ResourceType field value
func (o *DescribePoliciesOnResourceTypeRequestFilter) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *DescribePoliciesOnResourceTypeRequestFilter) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *DescribePoliciesOnResourceTypeRequestFilter) SetResourceType(v string) {
	o.ResourceType = v
}

// GetVisible returns the Visible field value if set, zero value otherwise.
func (o *DescribePoliciesOnResourceTypeRequestFilter) GetVisible() string {
	if o == nil || utils.IsNil(o.Visible) {
		var ret string
		return ret
	}
	return *o.Visible
}

// GetVisibleOk returns a tuple with the Visible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribePoliciesOnResourceTypeRequestFilter) GetVisibleOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Visible) {
		return nil, false
	}
	return o.Visible, true
}

// HasVisible returns a boolean if a field has been set.
func (o *DescribePoliciesOnResourceTypeRequestFilter) HasVisible() bool {
	if o != nil && !utils.IsNil(o.Visible) {
		return true
	}

	return false
}

// SetVisible gets a reference to the given string and assigns it to the Visible field.
func (o *DescribePoliciesOnResourceTypeRequestFilter) SetVisible(v string) {
	o.Visible = &v
}

func (o DescribePoliciesOnResourceTypeRequestFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribePoliciesOnResourceTypeRequestFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.PolicyAlias) {
		toSerialize["PolicyAlias"] = o.PolicyAlias
	}
	toSerialize["ResourceType"] = o.ResourceType
	if !utils.IsNil(o.Visible) {
		toSerialize["Visible"] = o.Visible
	}
	return toSerialize, nil
}

func (o *DescribePoliciesOnResourceTypeRequestFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ResourceType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescribePoliciesOnResourceTypeRequestFilter := _DescribePoliciesOnResourceTypeRequestFilter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDescribePoliciesOnResourceTypeRequestFilter)

	if err != nil {
		return err
	}

	*o = DescribePoliciesOnResourceTypeRequestFilter(varDescribePoliciesOnResourceTypeRequestFilter)

	return err
}

type NullableDescribePoliciesOnResourceTypeRequestFilter struct {
	value *DescribePoliciesOnResourceTypeRequestFilter
	isSet bool
}

func (v NullableDescribePoliciesOnResourceTypeRequestFilter) Get() *DescribePoliciesOnResourceTypeRequestFilter {
	return v.value
}

func (v *NullableDescribePoliciesOnResourceTypeRequestFilter) Set(val *DescribePoliciesOnResourceTypeRequestFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribePoliciesOnResourceTypeRequestFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribePoliciesOnResourceTypeRequestFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribePoliciesOnResourceTypeRequestFilter(val *DescribePoliciesOnResourceTypeRequestFilter) *NullableDescribePoliciesOnResourceTypeRequestFilter {
	return &NullableDescribePoliciesOnResourceTypeRequestFilter{value: val, isSet: true}
}

func (v NullableDescribePoliciesOnResourceTypeRequestFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribePoliciesOnResourceTypeRequestFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


