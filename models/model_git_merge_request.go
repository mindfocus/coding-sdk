/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the GitMergeRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &GitMergeRequest{}

// GitMergeRequest Git合并请求信息
type GitMergeRequest struct {
	// 代码仓库的唯一编号
	DepotId *int32 `json:"DepotId,omitempty"`
	// 仓库路径
	DepotPath utils.NullableString `json:"DepotPath,omitempty"`
	// 定位一个项目的内的资源的 ID
	IId *int32 `json:"IId,omitempty"`
	// 定位一个项目的内的MR资源的 ID
	MergeId *int32 `json:"MergeId,omitempty"`
	// 项目 ID
	ProjectId *int32 `json:"ProjectId,omitempty"`
}

// NewGitMergeRequest instantiates a new GitMergeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitMergeRequest() *GitMergeRequest {
	this := GitMergeRequest{}
	var depotPath string = ""
	this.DepotPath = *utils.NewNullableString(&depotPath)
	return &this
}

// NewGitMergeRequestWithDefaults instantiates a new GitMergeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitMergeRequestWithDefaults() *GitMergeRequest {
	this := GitMergeRequest{}
	var depotPath string = ""
	this.DepotPath = *utils.NewNullableString(&depotPath)
	return &this
}

// GetDepotId returns the DepotId field value if set, zero value otherwise.
func (o *GitMergeRequest) GetDepotId() int32 {
	if o == nil || utils.IsNil(o.DepotId) {
		var ret int32
		return ret
	}
	return *o.DepotId
}

// GetDepotIdOk returns a tuple with the DepotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitMergeRequest) GetDepotIdOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.DepotId) {
		return nil, false
	}
	return o.DepotId, true
}

// HasDepotId returns a boolean if a field has been set.
func (o *GitMergeRequest) HasDepotId() bool {
	if o != nil && !utils.IsNil(o.DepotId) {
		return true
	}

	return false
}

// SetDepotId gets a reference to the given int32 and assigns it to the DepotId field.
func (o *GitMergeRequest) SetDepotId(v int32) {
	o.DepotId = &v
}

// GetDepotPath returns the DepotPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GitMergeRequest) GetDepotPath() string {
	if o == nil || utils.IsNil(o.DepotPath.Get()) {
		var ret string
		return ret
	}
	return *o.DepotPath.Get()
}

// GetDepotPathOk returns a tuple with the DepotPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GitMergeRequest) GetDepotPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DepotPath.Get(), o.DepotPath.IsSet()
}

// HasDepotPath returns a boolean if a field has been set.
func (o *GitMergeRequest) HasDepotPath() bool {
	if o != nil && o.DepotPath.IsSet() {
		return true
	}

	return false
}

// SetDepotPath gets a reference to the given utils.NullableString and assigns it to the DepotPath field.
func (o *GitMergeRequest) SetDepotPath(v string) {
	o.DepotPath.Set(&v)
}
// SetDepotPathNil sets the value for DepotPath to be an explicit nil
func (o *GitMergeRequest) SetDepotPathNil() {
	o.DepotPath.Set(nil)
}

// UnsetDepotPath ensures that no value is present for DepotPath, not even an explicit nil
func (o *GitMergeRequest) UnsetDepotPath() {
	o.DepotPath.Unset()
}

// GetIId returns the IId field value if set, zero value otherwise.
func (o *GitMergeRequest) GetIId() int32 {
	if o == nil || utils.IsNil(o.IId) {
		var ret int32
		return ret
	}
	return *o.IId
}

// GetIIdOk returns a tuple with the IId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitMergeRequest) GetIIdOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.IId) {
		return nil, false
	}
	return o.IId, true
}

// HasIId returns a boolean if a field has been set.
func (o *GitMergeRequest) HasIId() bool {
	if o != nil && !utils.IsNil(o.IId) {
		return true
	}

	return false
}

// SetIId gets a reference to the given int32 and assigns it to the IId field.
func (o *GitMergeRequest) SetIId(v int32) {
	o.IId = &v
}

// GetMergeId returns the MergeId field value if set, zero value otherwise.
func (o *GitMergeRequest) GetMergeId() int32 {
	if o == nil || utils.IsNil(o.MergeId) {
		var ret int32
		return ret
	}
	return *o.MergeId
}

// GetMergeIdOk returns a tuple with the MergeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitMergeRequest) GetMergeIdOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.MergeId) {
		return nil, false
	}
	return o.MergeId, true
}

// HasMergeId returns a boolean if a field has been set.
func (o *GitMergeRequest) HasMergeId() bool {
	if o != nil && !utils.IsNil(o.MergeId) {
		return true
	}

	return false
}

// SetMergeId gets a reference to the given int32 and assigns it to the MergeId field.
func (o *GitMergeRequest) SetMergeId(v int32) {
	o.MergeId = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *GitMergeRequest) GetProjectId() int32 {
	if o == nil || utils.IsNil(o.ProjectId) {
		var ret int32
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitMergeRequest) GetProjectIdOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *GitMergeRequest) HasProjectId() bool {
	if o != nil && !utils.IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given int32 and assigns it to the ProjectId field.
func (o *GitMergeRequest) SetProjectId(v int32) {
	o.ProjectId = &v
}

func (o GitMergeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitMergeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.DepotId) {
		toSerialize["DepotId"] = o.DepotId
	}
	if o.DepotPath.IsSet() {
		toSerialize["DepotPath"] = o.DepotPath.Get()
	}
	if !utils.IsNil(o.IId) {
		toSerialize["IId"] = o.IId
	}
	if !utils.IsNil(o.MergeId) {
		toSerialize["MergeId"] = o.MergeId
	}
	if !utils.IsNil(o.ProjectId) {
		toSerialize["ProjectId"] = o.ProjectId
	}
	return toSerialize, nil
}

type NullableGitMergeRequest struct {
	value *GitMergeRequest
	isSet bool
}

func (v NullableGitMergeRequest) Get() *GitMergeRequest {
	return v.value
}

func (v *NullableGitMergeRequest) Set(val *GitMergeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGitMergeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGitMergeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitMergeRequest(val *GitMergeRequest) *NullableGitMergeRequest {
	return &NullableGitMergeRequest{value: val, isSet: true}
}

func (v NullableGitMergeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitMergeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


