/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the CreateCdTaskRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CreateCdTaskRequest{}

// CreateCdTaskRequest struct for CreateCdTaskRequest
type CreateCdTaskRequest struct {
	// 任务 JSON 配置
	TaskJsonContent string `json:"TaskJsonContent"`
}

type _CreateCdTaskRequest CreateCdTaskRequest

// NewCreateCdTaskRequest instantiates a new CreateCdTaskRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateCdTaskRequest(taskJsonContent string) *CreateCdTaskRequest {
	this := CreateCdTaskRequest{}
	this.TaskJsonContent = taskJsonContent
	return &this
}

// NewCreateCdTaskRequestWithDefaults instantiates a new CreateCdTaskRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateCdTaskRequestWithDefaults() *CreateCdTaskRequest {
	this := CreateCdTaskRequest{}
	return &this
}

// GetTaskJsonContent returns the TaskJsonContent field value
func (o *CreateCdTaskRequest) GetTaskJsonContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TaskJsonContent
}

// GetTaskJsonContentOk returns a tuple with the TaskJsonContent field value
// and a boolean to check if the value has been set.
func (o *CreateCdTaskRequest) GetTaskJsonContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaskJsonContent, true
}

// SetTaskJsonContent sets field value
func (o *CreateCdTaskRequest) SetTaskJsonContent(v string) {
	o.TaskJsonContent = v
}

func (o CreateCdTaskRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateCdTaskRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["TaskJsonContent"] = o.TaskJsonContent
	return toSerialize, nil
}

func (o *CreateCdTaskRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"TaskJsonContent",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateCdTaskRequest := _CreateCdTaskRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateCdTaskRequest)

	if err != nil {
		return err
	}

	*o = CreateCdTaskRequest(varCreateCdTaskRequest)

	return err
}

type NullableCreateCdTaskRequest struct {
	value *CreateCdTaskRequest
	isSet bool
}

func (v NullableCreateCdTaskRequest) Get() *CreateCdTaskRequest {
	return v.value
}

func (v *NullableCreateCdTaskRequest) Set(val *CreateCdTaskRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateCdTaskRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateCdTaskRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateCdTaskRequest(val *CreateCdTaskRequest) *NullableCreateCdTaskRequest {
	return &NullableCreateCdTaskRequest{value: val, isSet: true}
}

func (v NullableCreateCdTaskRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateCdTaskRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


