/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the RelatedCase type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &RelatedCase{}

// RelatedCase 测试用例
type RelatedCase struct {
	// 用例ID
	Id *int64 `json:"Id,omitempty"`
	// 用例名称
	Name *string `json:"Name,omitempty"`
	// 优先级, 0 => '紧急', 1 => '高', 2 => '中', 3 => '低
	Priority *int64 `json:"Priority,omitempty"`
}

// NewRelatedCase instantiates a new RelatedCase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelatedCase() *RelatedCase {
	this := RelatedCase{}
	var name string = ""
	this.Name = &name
	return &this
}

// NewRelatedCaseWithDefaults instantiates a new RelatedCase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelatedCaseWithDefaults() *RelatedCase {
	this := RelatedCase{}
	var name string = ""
	this.Name = &name
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RelatedCase) GetId() int64 {
	if o == nil || utils.IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelatedCase) GetIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RelatedCase) HasId() bool {
	if o != nil && !utils.IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *RelatedCase) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RelatedCase) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelatedCase) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RelatedCase) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RelatedCase) SetName(v string) {
	o.Name = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *RelatedCase) GetPriority() int64 {
	if o == nil || utils.IsNil(o.Priority) {
		var ret int64
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelatedCase) GetPriorityOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *RelatedCase) HasPriority() bool {
	if o != nil && !utils.IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int64 and assigns it to the Priority field.
func (o *RelatedCase) SetPriority(v int64) {
	o.Priority = &v
}

func (o RelatedCase) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RelatedCase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !utils.IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !utils.IsNil(o.Priority) {
		toSerialize["Priority"] = o.Priority
	}
	return toSerialize, nil
}

type NullableRelatedCase struct {
	value *RelatedCase
	isSet bool
}

func (v NullableRelatedCase) Get() *RelatedCase {
	return v.value
}

func (v *NullableRelatedCase) Set(val *RelatedCase) {
	v.value = val
	v.isSet = true
}

func (v NullableRelatedCase) IsSet() bool {
	return v.isSet
}

func (v *NullableRelatedCase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelatedCase(val *RelatedCase) *NullableRelatedCase {
	return &NullableRelatedCase{value: val, isSet: true}
}

func (v NullableRelatedCase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelatedCase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


