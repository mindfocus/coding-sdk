/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the ProjectMemberMemberRef type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ProjectMemberMemberRef{}

// ProjectMemberMemberRef 
type ProjectMemberMemberRef struct {
	// 是否管理员
	Assignee utils.NullableBool `json:"Assignee"`
	// 部门ID
	DepartmentId utils.NullableInt64 `json:"DepartmentId"`
	// 部门成员ID
	DepartmentMemberId utils.NullableInt64 `json:"DepartmentMemberId"`
	// 部门名
	DepartmentName utils.NullableString `json:"DepartmentName"`
	// 描述ID
	DescribeId utils.NullableString `json:"DescribeId"`
	// 是否是当前查询部门的直接成员
	Pointer utils.NullableBool `json:"Pointer"`
}

type _ProjectMemberMemberRef ProjectMemberMemberRef

// NewProjectMemberMemberRef instantiates a new ProjectMemberMemberRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectMemberMemberRef(assignee utils.NullableBool, departmentId utils.NullableInt64, departmentMemberId utils.NullableInt64, departmentName utils.NullableString, describeId utils.NullableString, pointer utils.NullableBool) *ProjectMemberMemberRef {
	this := ProjectMemberMemberRef{}
	this.Assignee = assignee
	this.DepartmentId = departmentId
	this.DepartmentMemberId = departmentMemberId
	this.DepartmentName = departmentName
	this.DescribeId = describeId
	this.Pointer = pointer
	return &this
}

// NewProjectMemberMemberRefWithDefaults instantiates a new ProjectMemberMemberRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectMemberMemberRefWithDefaults() *ProjectMemberMemberRef {
	this := ProjectMemberMemberRef{}
	var assignee bool = false
	this.Assignee = *utils.NewNullableBool(&assignee)
	var departmentName string = ""
	this.DepartmentName = *utils.NewNullableString(&departmentName)
	var describeId string = ""
	this.DescribeId = *utils.NewNullableString(&describeId)
	var pointer bool = false
	this.Pointer = *utils.NewNullableBool(&pointer)
	return &this
}

// GetAssignee returns the Assignee field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *ProjectMemberMemberRef) GetAssignee() bool {
	if o == nil || o.Assignee.Get() == nil {
		var ret bool
		return ret
	}

	return *o.Assignee.Get()
}

// GetAssigneeOk returns a tuple with the Assignee field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectMemberMemberRef) GetAssigneeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Assignee.Get(), o.Assignee.IsSet()
}

// SetAssignee sets field value
func (o *ProjectMemberMemberRef) SetAssignee(v bool) {
	o.Assignee.Set(&v)
}

// GetDepartmentId returns the DepartmentId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *ProjectMemberMemberRef) GetDepartmentId() int64 {
	if o == nil || o.DepartmentId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.DepartmentId.Get()
}

// GetDepartmentIdOk returns a tuple with the DepartmentId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectMemberMemberRef) GetDepartmentIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DepartmentId.Get(), o.DepartmentId.IsSet()
}

// SetDepartmentId sets field value
func (o *ProjectMemberMemberRef) SetDepartmentId(v int64) {
	o.DepartmentId.Set(&v)
}

// GetDepartmentMemberId returns the DepartmentMemberId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *ProjectMemberMemberRef) GetDepartmentMemberId() int64 {
	if o == nil || o.DepartmentMemberId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.DepartmentMemberId.Get()
}

// GetDepartmentMemberIdOk returns a tuple with the DepartmentMemberId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectMemberMemberRef) GetDepartmentMemberIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DepartmentMemberId.Get(), o.DepartmentMemberId.IsSet()
}

// SetDepartmentMemberId sets field value
func (o *ProjectMemberMemberRef) SetDepartmentMemberId(v int64) {
	o.DepartmentMemberId.Set(&v)
}

// GetDepartmentName returns the DepartmentName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ProjectMemberMemberRef) GetDepartmentName() string {
	if o == nil || o.DepartmentName.Get() == nil {
		var ret string
		return ret
	}

	return *o.DepartmentName.Get()
}

// GetDepartmentNameOk returns a tuple with the DepartmentName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectMemberMemberRef) GetDepartmentNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DepartmentName.Get(), o.DepartmentName.IsSet()
}

// SetDepartmentName sets field value
func (o *ProjectMemberMemberRef) SetDepartmentName(v string) {
	o.DepartmentName.Set(&v)
}

// GetDescribeId returns the DescribeId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ProjectMemberMemberRef) GetDescribeId() string {
	if o == nil || o.DescribeId.Get() == nil {
		var ret string
		return ret
	}

	return *o.DescribeId.Get()
}

// GetDescribeIdOk returns a tuple with the DescribeId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectMemberMemberRef) GetDescribeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DescribeId.Get(), o.DescribeId.IsSet()
}

// SetDescribeId sets field value
func (o *ProjectMemberMemberRef) SetDescribeId(v string) {
	o.DescribeId.Set(&v)
}

// GetPointer returns the Pointer field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *ProjectMemberMemberRef) GetPointer() bool {
	if o == nil || o.Pointer.Get() == nil {
		var ret bool
		return ret
	}

	return *o.Pointer.Get()
}

// GetPointerOk returns a tuple with the Pointer field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectMemberMemberRef) GetPointerOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Pointer.Get(), o.Pointer.IsSet()
}

// SetPointer sets field value
func (o *ProjectMemberMemberRef) SetPointer(v bool) {
	o.Pointer.Set(&v)
}

func (o ProjectMemberMemberRef) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectMemberMemberRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Assignee"] = o.Assignee.Get()
	toSerialize["DepartmentId"] = o.DepartmentId.Get()
	toSerialize["DepartmentMemberId"] = o.DepartmentMemberId.Get()
	toSerialize["DepartmentName"] = o.DepartmentName.Get()
	toSerialize["DescribeId"] = o.DescribeId.Get()
	toSerialize["Pointer"] = o.Pointer.Get()
	return toSerialize, nil
}

func (o *ProjectMemberMemberRef) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Assignee",
		"DepartmentId",
		"DepartmentMemberId",
		"DepartmentName",
		"DescribeId",
		"Pointer",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectMemberMemberRef := _ProjectMemberMemberRef{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProjectMemberMemberRef)

	if err != nil {
		return err
	}

	*o = ProjectMemberMemberRef(varProjectMemberMemberRef)

	return err
}

type NullableProjectMemberMemberRef struct {
	value *ProjectMemberMemberRef
	isSet bool
}

func (v NullableProjectMemberMemberRef) Get() *ProjectMemberMemberRef {
	return v.value
}

func (v *NullableProjectMemberMemberRef) Set(val *ProjectMemberMemberRef) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectMemberMemberRef) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectMemberMemberRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectMemberMemberRef(val *ProjectMemberMemberRef) *NullableProjectMemberMemberRef {
	return &NullableProjectMemberMemberRef{value: val, isSet: true}
}

func (v NullableProjectMemberMemberRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectMemberMemberRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


