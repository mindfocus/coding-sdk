/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the MergeRequestInfo type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &MergeRequestInfo{}

// MergeRequestInfo 合并请求详情
type MergeRequestInfo struct {
	// 操作时间
	ActionAt *int64 `json:"ActionAt,omitempty"`
	ActionAuthor *CodingUser `json:"ActionAuthor,omitempty"`
	Author *CodingUser `json:"Author,omitempty"`
	// 基础Sha
	BaseSha *string `json:"BaseSha,omitempty"`
	// 评论数
	CommentCount *int64 `json:"CommentCount,omitempty"`
	// 冲突文件列表
	Conflicts []string `json:"Conflicts,omitempty"`
	// 创建时间
	CreatedAt *int64 `json:"CreatedAt,omitempty"`
	// 仓库ID
	DepotId *int64 `json:"DepotId,omitempty"`
	// 描述,为 markdown 格式
	Describe *string `json:"Describe,omitempty"`
	// 是否授权
	Granted *int64 `json:"Granted,omitempty"`
	// 合并请求ID
	Id *int64 `json:"Id,omitempty"`
	// 合并请求标签列表
	Labels []string `json:"Labels,omitempty"`
	// 合并Commit Sha
	MergeCommitSha *string `json:"MergeCommitSha,omitempty"`
	// 合并请求iid
	MergeId *int64 `json:"MergeId,omitempty"`
	Mission *Mission `json:"Mission,omitempty"`
	// 合并请求 web 页面路径
	Path *string `json:"Path,omitempty"`
	// 项目ID
	ProjectId *int64 `json:"ProjectId,omitempty"`
	// 是否提醒
	Reminded utils.NullableBool `json:"Reminded,omitempty"`
	// MR评审者
	Reviewers []CodingUser `json:"Reviewers,omitempty"`
	// 源分支
	SourceBranch *string `json:"SourceBranch,omitempty"`
	// 源分支Commit Sha
	SourceBranchSha *string `json:"SourceBranchSha,omitempty"`
	// 合并状态,CANMERGE(状态可自动合并),ACCEPTED(状态已接受), CANNOTMERGE(状态不可自动合并), REFUSED(状态已拒绝(关闭)), CANCEL(取消), MERGING(正在合并中), ABNORMAL(状态异常)
	Status *string `json:"Status,omitempty"`
	// MR阻塞点
	StickingPoint *string `json:"StickingPoint,omitempty"`
	// 目标分支
	TargetBranch *string `json:"TargetBranch,omitempty"`
	// 目标分支是否为保护分支
	TargetBranchProtected *bool `json:"TargetBranchProtected,omitempty"`
	// 目标分支Commit Sha
	TargetBranchSha *string `json:"TargetBranchSha,omitempty"`
	// 合并标题
	Title *string `json:"Title,omitempty"`
	// 更新时间
	UpdatedAt *int64 `json:"UpdatedAt,omitempty"`
}

// NewMergeRequestInfo instantiates a new MergeRequestInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMergeRequestInfo() *MergeRequestInfo {
	this := MergeRequestInfo{}
	var baseSha string = ""
	this.BaseSha = &baseSha
	var describe string = ""
	this.Describe = &describe
	var mergeCommitSha string = ""
	this.MergeCommitSha = &mergeCommitSha
	var path string = ""
	this.Path = &path
	var reminded bool = false
	this.Reminded = *utils.NewNullableBool(&reminded)
	var sourceBranch string = ""
	this.SourceBranch = &sourceBranch
	var sourceBranchSha string = ""
	this.SourceBranchSha = &sourceBranchSha
	var status string = ""
	this.Status = &status
	var stickingPoint string = ""
	this.StickingPoint = &stickingPoint
	var targetBranch string = ""
	this.TargetBranch = &targetBranch
	var targetBranchProtected bool = false
	this.TargetBranchProtected = &targetBranchProtected
	var targetBranchSha string = ""
	this.TargetBranchSha = &targetBranchSha
	var title string = ""
	this.Title = &title
	return &this
}

// NewMergeRequestInfoWithDefaults instantiates a new MergeRequestInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMergeRequestInfoWithDefaults() *MergeRequestInfo {
	this := MergeRequestInfo{}
	var baseSha string = ""
	this.BaseSha = &baseSha
	var describe string = ""
	this.Describe = &describe
	var mergeCommitSha string = ""
	this.MergeCommitSha = &mergeCommitSha
	var path string = ""
	this.Path = &path
	var reminded bool = false
	this.Reminded = *utils.NewNullableBool(&reminded)
	var sourceBranch string = ""
	this.SourceBranch = &sourceBranch
	var sourceBranchSha string = ""
	this.SourceBranchSha = &sourceBranchSha
	var status string = ""
	this.Status = &status
	var stickingPoint string = ""
	this.StickingPoint = &stickingPoint
	var targetBranch string = ""
	this.TargetBranch = &targetBranch
	var targetBranchProtected bool = false
	this.TargetBranchProtected = &targetBranchProtected
	var targetBranchSha string = ""
	this.TargetBranchSha = &targetBranchSha
	var title string = ""
	this.Title = &title
	return &this
}

// GetActionAt returns the ActionAt field value if set, zero value otherwise.
func (o *MergeRequestInfo) GetActionAt() int64 {
	if o == nil || utils.IsNil(o.ActionAt) {
		var ret int64
		return ret
	}
	return *o.ActionAt
}

// GetActionAtOk returns a tuple with the ActionAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRequestInfo) GetActionAtOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.ActionAt) {
		return nil, false
	}
	return o.ActionAt, true
}

// HasActionAt returns a boolean if a field has been set.
func (o *MergeRequestInfo) HasActionAt() bool {
	if o != nil && !utils.IsNil(o.ActionAt) {
		return true
	}

	return false
}

// SetActionAt gets a reference to the given int64 and assigns it to the ActionAt field.
func (o *MergeRequestInfo) SetActionAt(v int64) {
	o.ActionAt = &v
}

// GetActionAuthor returns the ActionAuthor field value if set, zero value otherwise.
func (o *MergeRequestInfo) GetActionAuthor() CodingUser {
	if o == nil || utils.IsNil(o.ActionAuthor) {
		var ret CodingUser
		return ret
	}
	return *o.ActionAuthor
}

// GetActionAuthorOk returns a tuple with the ActionAuthor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRequestInfo) GetActionAuthorOk() (*CodingUser, bool) {
	if o == nil || utils.IsNil(o.ActionAuthor) {
		return nil, false
	}
	return o.ActionAuthor, true
}

// HasActionAuthor returns a boolean if a field has been set.
func (o *MergeRequestInfo) HasActionAuthor() bool {
	if o != nil && !utils.IsNil(o.ActionAuthor) {
		return true
	}

	return false
}

// SetActionAuthor gets a reference to the given CodingUser and assigns it to the ActionAuthor field.
func (o *MergeRequestInfo) SetActionAuthor(v CodingUser) {
	o.ActionAuthor = &v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *MergeRequestInfo) GetAuthor() CodingUser {
	if o == nil || utils.IsNil(o.Author) {
		var ret CodingUser
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRequestInfo) GetAuthorOk() (*CodingUser, bool) {
	if o == nil || utils.IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *MergeRequestInfo) HasAuthor() bool {
	if o != nil && !utils.IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given CodingUser and assigns it to the Author field.
func (o *MergeRequestInfo) SetAuthor(v CodingUser) {
	o.Author = &v
}

// GetBaseSha returns the BaseSha field value if set, zero value otherwise.
func (o *MergeRequestInfo) GetBaseSha() string {
	if o == nil || utils.IsNil(o.BaseSha) {
		var ret string
		return ret
	}
	return *o.BaseSha
}

// GetBaseShaOk returns a tuple with the BaseSha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRequestInfo) GetBaseShaOk() (*string, bool) {
	if o == nil || utils.IsNil(o.BaseSha) {
		return nil, false
	}
	return o.BaseSha, true
}

// HasBaseSha returns a boolean if a field has been set.
func (o *MergeRequestInfo) HasBaseSha() bool {
	if o != nil && !utils.IsNil(o.BaseSha) {
		return true
	}

	return false
}

// SetBaseSha gets a reference to the given string and assigns it to the BaseSha field.
func (o *MergeRequestInfo) SetBaseSha(v string) {
	o.BaseSha = &v
}

// GetCommentCount returns the CommentCount field value if set, zero value otherwise.
func (o *MergeRequestInfo) GetCommentCount() int64 {
	if o == nil || utils.IsNil(o.CommentCount) {
		var ret int64
		return ret
	}
	return *o.CommentCount
}

// GetCommentCountOk returns a tuple with the CommentCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRequestInfo) GetCommentCountOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.CommentCount) {
		return nil, false
	}
	return o.CommentCount, true
}

// HasCommentCount returns a boolean if a field has been set.
func (o *MergeRequestInfo) HasCommentCount() bool {
	if o != nil && !utils.IsNil(o.CommentCount) {
		return true
	}

	return false
}

// SetCommentCount gets a reference to the given int64 and assigns it to the CommentCount field.
func (o *MergeRequestInfo) SetCommentCount(v int64) {
	o.CommentCount = &v
}

// GetConflicts returns the Conflicts field value if set, zero value otherwise.
func (o *MergeRequestInfo) GetConflicts() []string {
	if o == nil || utils.IsNil(o.Conflicts) {
		var ret []string
		return ret
	}
	return o.Conflicts
}

// GetConflictsOk returns a tuple with the Conflicts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRequestInfo) GetConflictsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Conflicts) {
		return nil, false
	}
	return o.Conflicts, true
}

// HasConflicts returns a boolean if a field has been set.
func (o *MergeRequestInfo) HasConflicts() bool {
	if o != nil && !utils.IsNil(o.Conflicts) {
		return true
	}

	return false
}

// SetConflicts gets a reference to the given []string and assigns it to the Conflicts field.
func (o *MergeRequestInfo) SetConflicts(v []string) {
	o.Conflicts = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *MergeRequestInfo) GetCreatedAt() int64 {
	if o == nil || utils.IsNil(o.CreatedAt) {
		var ret int64
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRequestInfo) GetCreatedAtOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *MergeRequestInfo) HasCreatedAt() bool {
	if o != nil && !utils.IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int64 and assigns it to the CreatedAt field.
func (o *MergeRequestInfo) SetCreatedAt(v int64) {
	o.CreatedAt = &v
}

// GetDepotId returns the DepotId field value if set, zero value otherwise.
func (o *MergeRequestInfo) GetDepotId() int64 {
	if o == nil || utils.IsNil(o.DepotId) {
		var ret int64
		return ret
	}
	return *o.DepotId
}

// GetDepotIdOk returns a tuple with the DepotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRequestInfo) GetDepotIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.DepotId) {
		return nil, false
	}
	return o.DepotId, true
}

// HasDepotId returns a boolean if a field has been set.
func (o *MergeRequestInfo) HasDepotId() bool {
	if o != nil && !utils.IsNil(o.DepotId) {
		return true
	}

	return false
}

// SetDepotId gets a reference to the given int64 and assigns it to the DepotId field.
func (o *MergeRequestInfo) SetDepotId(v int64) {
	o.DepotId = &v
}

// GetDescribe returns the Describe field value if set, zero value otherwise.
func (o *MergeRequestInfo) GetDescribe() string {
	if o == nil || utils.IsNil(o.Describe) {
		var ret string
		return ret
	}
	return *o.Describe
}

// GetDescribeOk returns a tuple with the Describe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRequestInfo) GetDescribeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Describe) {
		return nil, false
	}
	return o.Describe, true
}

// HasDescribe returns a boolean if a field has been set.
func (o *MergeRequestInfo) HasDescribe() bool {
	if o != nil && !utils.IsNil(o.Describe) {
		return true
	}

	return false
}

// SetDescribe gets a reference to the given string and assigns it to the Describe field.
func (o *MergeRequestInfo) SetDescribe(v string) {
	o.Describe = &v
}

// GetGranted returns the Granted field value if set, zero value otherwise.
func (o *MergeRequestInfo) GetGranted() int64 {
	if o == nil || utils.IsNil(o.Granted) {
		var ret int64
		return ret
	}
	return *o.Granted
}

// GetGrantedOk returns a tuple with the Granted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRequestInfo) GetGrantedOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Granted) {
		return nil, false
	}
	return o.Granted, true
}

// HasGranted returns a boolean if a field has been set.
func (o *MergeRequestInfo) HasGranted() bool {
	if o != nil && !utils.IsNil(o.Granted) {
		return true
	}

	return false
}

// SetGranted gets a reference to the given int64 and assigns it to the Granted field.
func (o *MergeRequestInfo) SetGranted(v int64) {
	o.Granted = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MergeRequestInfo) GetId() int64 {
	if o == nil || utils.IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRequestInfo) GetIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MergeRequestInfo) HasId() bool {
	if o != nil && !utils.IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *MergeRequestInfo) SetId(v int64) {
	o.Id = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MergeRequestInfo) GetLabels() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MergeRequestInfo) GetLabelsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *MergeRequestInfo) HasLabels() bool {
	if o != nil && !utils.IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *MergeRequestInfo) SetLabels(v []string) {
	o.Labels = v
}

// GetMergeCommitSha returns the MergeCommitSha field value if set, zero value otherwise.
func (o *MergeRequestInfo) GetMergeCommitSha() string {
	if o == nil || utils.IsNil(o.MergeCommitSha) {
		var ret string
		return ret
	}
	return *o.MergeCommitSha
}

// GetMergeCommitShaOk returns a tuple with the MergeCommitSha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRequestInfo) GetMergeCommitShaOk() (*string, bool) {
	if o == nil || utils.IsNil(o.MergeCommitSha) {
		return nil, false
	}
	return o.MergeCommitSha, true
}

// HasMergeCommitSha returns a boolean if a field has been set.
func (o *MergeRequestInfo) HasMergeCommitSha() bool {
	if o != nil && !utils.IsNil(o.MergeCommitSha) {
		return true
	}

	return false
}

// SetMergeCommitSha gets a reference to the given string and assigns it to the MergeCommitSha field.
func (o *MergeRequestInfo) SetMergeCommitSha(v string) {
	o.MergeCommitSha = &v
}

// GetMergeId returns the MergeId field value if set, zero value otherwise.
func (o *MergeRequestInfo) GetMergeId() int64 {
	if o == nil || utils.IsNil(o.MergeId) {
		var ret int64
		return ret
	}
	return *o.MergeId
}

// GetMergeIdOk returns a tuple with the MergeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRequestInfo) GetMergeIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.MergeId) {
		return nil, false
	}
	return o.MergeId, true
}

// HasMergeId returns a boolean if a field has been set.
func (o *MergeRequestInfo) HasMergeId() bool {
	if o != nil && !utils.IsNil(o.MergeId) {
		return true
	}

	return false
}

// SetMergeId gets a reference to the given int64 and assigns it to the MergeId field.
func (o *MergeRequestInfo) SetMergeId(v int64) {
	o.MergeId = &v
}

// GetMission returns the Mission field value if set, zero value otherwise.
func (o *MergeRequestInfo) GetMission() Mission {
	if o == nil || utils.IsNil(o.Mission) {
		var ret Mission
		return ret
	}
	return *o.Mission
}

// GetMissionOk returns a tuple with the Mission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRequestInfo) GetMissionOk() (*Mission, bool) {
	if o == nil || utils.IsNil(o.Mission) {
		return nil, false
	}
	return o.Mission, true
}

// HasMission returns a boolean if a field has been set.
func (o *MergeRequestInfo) HasMission() bool {
	if o != nil && !utils.IsNil(o.Mission) {
		return true
	}

	return false
}

// SetMission gets a reference to the given Mission and assigns it to the Mission field.
func (o *MergeRequestInfo) SetMission(v Mission) {
	o.Mission = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *MergeRequestInfo) GetPath() string {
	if o == nil || utils.IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRequestInfo) GetPathOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *MergeRequestInfo) HasPath() bool {
	if o != nil && !utils.IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *MergeRequestInfo) SetPath(v string) {
	o.Path = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *MergeRequestInfo) GetProjectId() int64 {
	if o == nil || utils.IsNil(o.ProjectId) {
		var ret int64
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRequestInfo) GetProjectIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *MergeRequestInfo) HasProjectId() bool {
	if o != nil && !utils.IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given int64 and assigns it to the ProjectId field.
func (o *MergeRequestInfo) SetProjectId(v int64) {
	o.ProjectId = &v
}

// GetReminded returns the Reminded field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MergeRequestInfo) GetReminded() bool {
	if o == nil || utils.IsNil(o.Reminded.Get()) {
		var ret bool
		return ret
	}
	return *o.Reminded.Get()
}

// GetRemindedOk returns a tuple with the Reminded field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MergeRequestInfo) GetRemindedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reminded.Get(), o.Reminded.IsSet()
}

// HasReminded returns a boolean if a field has been set.
func (o *MergeRequestInfo) HasReminded() bool {
	if o != nil && o.Reminded.IsSet() {
		return true
	}

	return false
}

// SetReminded gets a reference to the given utils.NullableBool and assigns it to the Reminded field.
func (o *MergeRequestInfo) SetReminded(v bool) {
	o.Reminded.Set(&v)
}
// SetRemindedNil sets the value for Reminded to be an explicit nil
func (o *MergeRequestInfo) SetRemindedNil() {
	o.Reminded.Set(nil)
}

// UnsetReminded ensures that no value is present for Reminded, not even an explicit nil
func (o *MergeRequestInfo) UnsetReminded() {
	o.Reminded.Unset()
}

// GetReviewers returns the Reviewers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MergeRequestInfo) GetReviewers() []CodingUser {
	if o == nil {
		var ret []CodingUser
		return ret
	}
	return o.Reviewers
}

// GetReviewersOk returns a tuple with the Reviewers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MergeRequestInfo) GetReviewersOk() ([]CodingUser, bool) {
	if o == nil || utils.IsNil(o.Reviewers) {
		return nil, false
	}
	return o.Reviewers, true
}

// HasReviewers returns a boolean if a field has been set.
func (o *MergeRequestInfo) HasReviewers() bool {
	if o != nil && !utils.IsNil(o.Reviewers) {
		return true
	}

	return false
}

// SetReviewers gets a reference to the given []CodingUser and assigns it to the Reviewers field.
func (o *MergeRequestInfo) SetReviewers(v []CodingUser) {
	o.Reviewers = v
}

// GetSourceBranch returns the SourceBranch field value if set, zero value otherwise.
func (o *MergeRequestInfo) GetSourceBranch() string {
	if o == nil || utils.IsNil(o.SourceBranch) {
		var ret string
		return ret
	}
	return *o.SourceBranch
}

// GetSourceBranchOk returns a tuple with the SourceBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRequestInfo) GetSourceBranchOk() (*string, bool) {
	if o == nil || utils.IsNil(o.SourceBranch) {
		return nil, false
	}
	return o.SourceBranch, true
}

// HasSourceBranch returns a boolean if a field has been set.
func (o *MergeRequestInfo) HasSourceBranch() bool {
	if o != nil && !utils.IsNil(o.SourceBranch) {
		return true
	}

	return false
}

// SetSourceBranch gets a reference to the given string and assigns it to the SourceBranch field.
func (o *MergeRequestInfo) SetSourceBranch(v string) {
	o.SourceBranch = &v
}

// GetSourceBranchSha returns the SourceBranchSha field value if set, zero value otherwise.
func (o *MergeRequestInfo) GetSourceBranchSha() string {
	if o == nil || utils.IsNil(o.SourceBranchSha) {
		var ret string
		return ret
	}
	return *o.SourceBranchSha
}

// GetSourceBranchShaOk returns a tuple with the SourceBranchSha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRequestInfo) GetSourceBranchShaOk() (*string, bool) {
	if o == nil || utils.IsNil(o.SourceBranchSha) {
		return nil, false
	}
	return o.SourceBranchSha, true
}

// HasSourceBranchSha returns a boolean if a field has been set.
func (o *MergeRequestInfo) HasSourceBranchSha() bool {
	if o != nil && !utils.IsNil(o.SourceBranchSha) {
		return true
	}

	return false
}

// SetSourceBranchSha gets a reference to the given string and assigns it to the SourceBranchSha field.
func (o *MergeRequestInfo) SetSourceBranchSha(v string) {
	o.SourceBranchSha = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *MergeRequestInfo) GetStatus() string {
	if o == nil || utils.IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRequestInfo) GetStatusOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *MergeRequestInfo) HasStatus() bool {
	if o != nil && !utils.IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *MergeRequestInfo) SetStatus(v string) {
	o.Status = &v
}

// GetStickingPoint returns the StickingPoint field value if set, zero value otherwise.
func (o *MergeRequestInfo) GetStickingPoint() string {
	if o == nil || utils.IsNil(o.StickingPoint) {
		var ret string
		return ret
	}
	return *o.StickingPoint
}

// GetStickingPointOk returns a tuple with the StickingPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRequestInfo) GetStickingPointOk() (*string, bool) {
	if o == nil || utils.IsNil(o.StickingPoint) {
		return nil, false
	}
	return o.StickingPoint, true
}

// HasStickingPoint returns a boolean if a field has been set.
func (o *MergeRequestInfo) HasStickingPoint() bool {
	if o != nil && !utils.IsNil(o.StickingPoint) {
		return true
	}

	return false
}

// SetStickingPoint gets a reference to the given string and assigns it to the StickingPoint field.
func (o *MergeRequestInfo) SetStickingPoint(v string) {
	o.StickingPoint = &v
}

// GetTargetBranch returns the TargetBranch field value if set, zero value otherwise.
func (o *MergeRequestInfo) GetTargetBranch() string {
	if o == nil || utils.IsNil(o.TargetBranch) {
		var ret string
		return ret
	}
	return *o.TargetBranch
}

// GetTargetBranchOk returns a tuple with the TargetBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRequestInfo) GetTargetBranchOk() (*string, bool) {
	if o == nil || utils.IsNil(o.TargetBranch) {
		return nil, false
	}
	return o.TargetBranch, true
}

// HasTargetBranch returns a boolean if a field has been set.
func (o *MergeRequestInfo) HasTargetBranch() bool {
	if o != nil && !utils.IsNil(o.TargetBranch) {
		return true
	}

	return false
}

// SetTargetBranch gets a reference to the given string and assigns it to the TargetBranch field.
func (o *MergeRequestInfo) SetTargetBranch(v string) {
	o.TargetBranch = &v
}

// GetTargetBranchProtected returns the TargetBranchProtected field value if set, zero value otherwise.
func (o *MergeRequestInfo) GetTargetBranchProtected() bool {
	if o == nil || utils.IsNil(o.TargetBranchProtected) {
		var ret bool
		return ret
	}
	return *o.TargetBranchProtected
}

// GetTargetBranchProtectedOk returns a tuple with the TargetBranchProtected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRequestInfo) GetTargetBranchProtectedOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.TargetBranchProtected) {
		return nil, false
	}
	return o.TargetBranchProtected, true
}

// HasTargetBranchProtected returns a boolean if a field has been set.
func (o *MergeRequestInfo) HasTargetBranchProtected() bool {
	if o != nil && !utils.IsNil(o.TargetBranchProtected) {
		return true
	}

	return false
}

// SetTargetBranchProtected gets a reference to the given bool and assigns it to the TargetBranchProtected field.
func (o *MergeRequestInfo) SetTargetBranchProtected(v bool) {
	o.TargetBranchProtected = &v
}

// GetTargetBranchSha returns the TargetBranchSha field value if set, zero value otherwise.
func (o *MergeRequestInfo) GetTargetBranchSha() string {
	if o == nil || utils.IsNil(o.TargetBranchSha) {
		var ret string
		return ret
	}
	return *o.TargetBranchSha
}

// GetTargetBranchShaOk returns a tuple with the TargetBranchSha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRequestInfo) GetTargetBranchShaOk() (*string, bool) {
	if o == nil || utils.IsNil(o.TargetBranchSha) {
		return nil, false
	}
	return o.TargetBranchSha, true
}

// HasTargetBranchSha returns a boolean if a field has been set.
func (o *MergeRequestInfo) HasTargetBranchSha() bool {
	if o != nil && !utils.IsNil(o.TargetBranchSha) {
		return true
	}

	return false
}

// SetTargetBranchSha gets a reference to the given string and assigns it to the TargetBranchSha field.
func (o *MergeRequestInfo) SetTargetBranchSha(v string) {
	o.TargetBranchSha = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *MergeRequestInfo) GetTitle() string {
	if o == nil || utils.IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRequestInfo) GetTitleOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *MergeRequestInfo) HasTitle() bool {
	if o != nil && !utils.IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *MergeRequestInfo) SetTitle(v string) {
	o.Title = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *MergeRequestInfo) GetUpdatedAt() int64 {
	if o == nil || utils.IsNil(o.UpdatedAt) {
		var ret int64
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRequestInfo) GetUpdatedAtOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *MergeRequestInfo) HasUpdatedAt() bool {
	if o != nil && !utils.IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given int64 and assigns it to the UpdatedAt field.
func (o *MergeRequestInfo) SetUpdatedAt(v int64) {
	o.UpdatedAt = &v
}

func (o MergeRequestInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MergeRequestInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.ActionAt) {
		toSerialize["ActionAt"] = o.ActionAt
	}
	if !utils.IsNil(o.ActionAuthor) {
		toSerialize["ActionAuthor"] = o.ActionAuthor
	}
	if !utils.IsNil(o.Author) {
		toSerialize["Author"] = o.Author
	}
	if !utils.IsNil(o.BaseSha) {
		toSerialize["BaseSha"] = o.BaseSha
	}
	if !utils.IsNil(o.CommentCount) {
		toSerialize["CommentCount"] = o.CommentCount
	}
	if !utils.IsNil(o.Conflicts) {
		toSerialize["Conflicts"] = o.Conflicts
	}
	if !utils.IsNil(o.CreatedAt) {
		toSerialize["CreatedAt"] = o.CreatedAt
	}
	if !utils.IsNil(o.DepotId) {
		toSerialize["DepotId"] = o.DepotId
	}
	if !utils.IsNil(o.Describe) {
		toSerialize["Describe"] = o.Describe
	}
	if !utils.IsNil(o.Granted) {
		toSerialize["Granted"] = o.Granted
	}
	if !utils.IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if o.Labels != nil {
		toSerialize["Labels"] = o.Labels
	}
	if !utils.IsNil(o.MergeCommitSha) {
		toSerialize["MergeCommitSha"] = o.MergeCommitSha
	}
	if !utils.IsNil(o.MergeId) {
		toSerialize["MergeId"] = o.MergeId
	}
	if !utils.IsNil(o.Mission) {
		toSerialize["Mission"] = o.Mission
	}
	if !utils.IsNil(o.Path) {
		toSerialize["Path"] = o.Path
	}
	if !utils.IsNil(o.ProjectId) {
		toSerialize["ProjectId"] = o.ProjectId
	}
	if o.Reminded.IsSet() {
		toSerialize["Reminded"] = o.Reminded.Get()
	}
	if o.Reviewers != nil {
		toSerialize["Reviewers"] = o.Reviewers
	}
	if !utils.IsNil(o.SourceBranch) {
		toSerialize["SourceBranch"] = o.SourceBranch
	}
	if !utils.IsNil(o.SourceBranchSha) {
		toSerialize["SourceBranchSha"] = o.SourceBranchSha
	}
	if !utils.IsNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	if !utils.IsNil(o.StickingPoint) {
		toSerialize["StickingPoint"] = o.StickingPoint
	}
	if !utils.IsNil(o.TargetBranch) {
		toSerialize["TargetBranch"] = o.TargetBranch
	}
	if !utils.IsNil(o.TargetBranchProtected) {
		toSerialize["TargetBranchProtected"] = o.TargetBranchProtected
	}
	if !utils.IsNil(o.TargetBranchSha) {
		toSerialize["TargetBranchSha"] = o.TargetBranchSha
	}
	if !utils.IsNil(o.Title) {
		toSerialize["Title"] = o.Title
	}
	if !utils.IsNil(o.UpdatedAt) {
		toSerialize["UpdatedAt"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableMergeRequestInfo struct {
	value *MergeRequestInfo
	isSet bool
}

func (v NullableMergeRequestInfo) Get() *MergeRequestInfo {
	return v.value
}

func (v *NullableMergeRequestInfo) Set(val *MergeRequestInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableMergeRequestInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableMergeRequestInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMergeRequestInfo(val *MergeRequestInfo) *NullableMergeRequestInfo {
	return &NullableMergeRequestInfo{value: val, isSet: true}
}

func (v NullableMergeRequestInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMergeRequestInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


