/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the ModifyCdPipelineRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ModifyCdPipelineRequest{}

// ModifyCdPipelineRequest struct for ModifyCdPipelineRequest
type ModifyCdPipelineRequest struct {
	// 部署流程 ID
	PipelineConfigId string `json:"PipelineConfigId"`
	// 部署流程 JSON 配置
	PipelineJsonContent string `json:"PipelineJsonContent"`
}

type _ModifyCdPipelineRequest ModifyCdPipelineRequest

// NewModifyCdPipelineRequest instantiates a new ModifyCdPipelineRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModifyCdPipelineRequest(pipelineConfigId string, pipelineJsonContent string) *ModifyCdPipelineRequest {
	this := ModifyCdPipelineRequest{}
	this.PipelineConfigId = pipelineConfigId
	this.PipelineJsonContent = pipelineJsonContent
	return &this
}

// NewModifyCdPipelineRequestWithDefaults instantiates a new ModifyCdPipelineRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModifyCdPipelineRequestWithDefaults() *ModifyCdPipelineRequest {
	this := ModifyCdPipelineRequest{}
	return &this
}

// GetPipelineConfigId returns the PipelineConfigId field value
func (o *ModifyCdPipelineRequest) GetPipelineConfigId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PipelineConfigId
}

// GetPipelineConfigIdOk returns a tuple with the PipelineConfigId field value
// and a boolean to check if the value has been set.
func (o *ModifyCdPipelineRequest) GetPipelineConfigIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PipelineConfigId, true
}

// SetPipelineConfigId sets field value
func (o *ModifyCdPipelineRequest) SetPipelineConfigId(v string) {
	o.PipelineConfigId = v
}

// GetPipelineJsonContent returns the PipelineJsonContent field value
func (o *ModifyCdPipelineRequest) GetPipelineJsonContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PipelineJsonContent
}

// GetPipelineJsonContentOk returns a tuple with the PipelineJsonContent field value
// and a boolean to check if the value has been set.
func (o *ModifyCdPipelineRequest) GetPipelineJsonContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PipelineJsonContent, true
}

// SetPipelineJsonContent sets field value
func (o *ModifyCdPipelineRequest) SetPipelineJsonContent(v string) {
	o.PipelineJsonContent = v
}

func (o ModifyCdPipelineRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModifyCdPipelineRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["PipelineConfigId"] = o.PipelineConfigId
	toSerialize["PipelineJsonContent"] = o.PipelineJsonContent
	return toSerialize, nil
}

func (o *ModifyCdPipelineRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"PipelineConfigId",
		"PipelineJsonContent",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModifyCdPipelineRequest := _ModifyCdPipelineRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModifyCdPipelineRequest)

	if err != nil {
		return err
	}

	*o = ModifyCdPipelineRequest(varModifyCdPipelineRequest)

	return err
}

type NullableModifyCdPipelineRequest struct {
	value *ModifyCdPipelineRequest
	isSet bool
}

func (v NullableModifyCdPipelineRequest) Get() *ModifyCdPipelineRequest {
	return v.value
}

func (v *NullableModifyCdPipelineRequest) Set(val *ModifyCdPipelineRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableModifyCdPipelineRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableModifyCdPipelineRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModifyCdPipelineRequest(val *ModifyCdPipelineRequest) *NullableModifyCdPipelineRequest {
	return &NullableModifyCdPipelineRequest{value: val, isSet: true}
}

func (v NullableModifyCdPipelineRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModifyCdPipelineRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


