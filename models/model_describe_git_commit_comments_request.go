/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DescribeGitCommitCommentsRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DescribeGitCommitCommentsRequest{}

// DescribeGitCommitCommentsRequest struct for DescribeGitCommitCommentsRequest
type DescribeGitCommitCommentsRequest struct {
	// 仓库路径
	DepotPath string `json:"DepotPath"`
	// 页码数量
	PageNumber int64 `json:"PageNumber"`
	// 页码大小
	PageSize int64 `json:"PageSize"`
	// 提交Sha
	Sha string `json:"Sha"`
}

type _DescribeGitCommitCommentsRequest DescribeGitCommitCommentsRequest

// NewDescribeGitCommitCommentsRequest instantiates a new DescribeGitCommitCommentsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeGitCommitCommentsRequest(depotPath string, pageNumber int64, pageSize int64, sha string) *DescribeGitCommitCommentsRequest {
	this := DescribeGitCommitCommentsRequest{}
	this.DepotPath = depotPath
	this.PageNumber = pageNumber
	this.PageSize = pageSize
	this.Sha = sha
	return &this
}

// NewDescribeGitCommitCommentsRequestWithDefaults instantiates a new DescribeGitCommitCommentsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeGitCommitCommentsRequestWithDefaults() *DescribeGitCommitCommentsRequest {
	this := DescribeGitCommitCommentsRequest{}
	return &this
}

// GetDepotPath returns the DepotPath field value
func (o *DescribeGitCommitCommentsRequest) GetDepotPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DepotPath
}

// GetDepotPathOk returns a tuple with the DepotPath field value
// and a boolean to check if the value has been set.
func (o *DescribeGitCommitCommentsRequest) GetDepotPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepotPath, true
}

// SetDepotPath sets field value
func (o *DescribeGitCommitCommentsRequest) SetDepotPath(v string) {
	o.DepotPath = v
}

// GetPageNumber returns the PageNumber field value
func (o *DescribeGitCommitCommentsRequest) GetPageNumber() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.PageNumber
}

// GetPageNumberOk returns a tuple with the PageNumber field value
// and a boolean to check if the value has been set.
func (o *DescribeGitCommitCommentsRequest) GetPageNumberOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PageNumber, true
}

// SetPageNumber sets field value
func (o *DescribeGitCommitCommentsRequest) SetPageNumber(v int64) {
	o.PageNumber = v
}

// GetPageSize returns the PageSize field value
func (o *DescribeGitCommitCommentsRequest) GetPageSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value
// and a boolean to check if the value has been set.
func (o *DescribeGitCommitCommentsRequest) GetPageSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PageSize, true
}

// SetPageSize sets field value
func (o *DescribeGitCommitCommentsRequest) SetPageSize(v int64) {
	o.PageSize = v
}

// GetSha returns the Sha field value
func (o *DescribeGitCommitCommentsRequest) GetSha() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sha
}

// GetShaOk returns a tuple with the Sha field value
// and a boolean to check if the value has been set.
func (o *DescribeGitCommitCommentsRequest) GetShaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sha, true
}

// SetSha sets field value
func (o *DescribeGitCommitCommentsRequest) SetSha(v string) {
	o.Sha = v
}

func (o DescribeGitCommitCommentsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeGitCommitCommentsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["DepotPath"] = o.DepotPath
	toSerialize["PageNumber"] = o.PageNumber
	toSerialize["PageSize"] = o.PageSize
	toSerialize["Sha"] = o.Sha
	return toSerialize, nil
}

func (o *DescribeGitCommitCommentsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"DepotPath",
		"PageNumber",
		"PageSize",
		"Sha",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescribeGitCommitCommentsRequest := _DescribeGitCommitCommentsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDescribeGitCommitCommentsRequest)

	if err != nil {
		return err
	}

	*o = DescribeGitCommitCommentsRequest(varDescribeGitCommitCommentsRequest)

	return err
}

type NullableDescribeGitCommitCommentsRequest struct {
	value *DescribeGitCommitCommentsRequest
	isSet bool
}

func (v NullableDescribeGitCommitCommentsRequest) Get() *DescribeGitCommitCommentsRequest {
	return v.value
}

func (v *NullableDescribeGitCommitCommentsRequest) Set(val *DescribeGitCommitCommentsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeGitCommitCommentsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeGitCommitCommentsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeGitCommitCommentsRequest(val *DescribeGitCommitCommentsRequest) *NullableDescribeGitCommitCommentsRequest {
	return &NullableDescribeGitCommitCommentsRequest{value: val, isSet: true}
}

func (v NullableDescribeGitCommitCommentsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeGitCommitCommentsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


