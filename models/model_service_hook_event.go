/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the ServiceHookEvent type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ServiceHookEvent{}

// ServiceHookEvent 事件详情
type ServiceHookEvent struct {
	// 分组名
	GroupLabel *string `json:"GroupLabel,omitempty"`
	// 分组标识
	GroupName *string `json:"GroupName,omitempty"`
	// 事件名
	Label *string `json:"Label,omitempty"`
	// 事件标识
	Name *string `json:"Name,omitempty"`
}

// NewServiceHookEvent instantiates a new ServiceHookEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceHookEvent() *ServiceHookEvent {
	this := ServiceHookEvent{}
	var groupLabel string = ""
	this.GroupLabel = &groupLabel
	var groupName string = ""
	this.GroupName = &groupName
	var label string = ""
	this.Label = &label
	var name string = ""
	this.Name = &name
	return &this
}

// NewServiceHookEventWithDefaults instantiates a new ServiceHookEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceHookEventWithDefaults() *ServiceHookEvent {
	this := ServiceHookEvent{}
	var groupLabel string = ""
	this.GroupLabel = &groupLabel
	var groupName string = ""
	this.GroupName = &groupName
	var label string = ""
	this.Label = &label
	var name string = ""
	this.Name = &name
	return &this
}

// GetGroupLabel returns the GroupLabel field value if set, zero value otherwise.
func (o *ServiceHookEvent) GetGroupLabel() string {
	if o == nil || utils.IsNil(o.GroupLabel) {
		var ret string
		return ret
	}
	return *o.GroupLabel
}

// GetGroupLabelOk returns a tuple with the GroupLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceHookEvent) GetGroupLabelOk() (*string, bool) {
	if o == nil || utils.IsNil(o.GroupLabel) {
		return nil, false
	}
	return o.GroupLabel, true
}

// HasGroupLabel returns a boolean if a field has been set.
func (o *ServiceHookEvent) HasGroupLabel() bool {
	if o != nil && !utils.IsNil(o.GroupLabel) {
		return true
	}

	return false
}

// SetGroupLabel gets a reference to the given string and assigns it to the GroupLabel field.
func (o *ServiceHookEvent) SetGroupLabel(v string) {
	o.GroupLabel = &v
}

// GetGroupName returns the GroupName field value if set, zero value otherwise.
func (o *ServiceHookEvent) GetGroupName() string {
	if o == nil || utils.IsNil(o.GroupName) {
		var ret string
		return ret
	}
	return *o.GroupName
}

// GetGroupNameOk returns a tuple with the GroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceHookEvent) GetGroupNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.GroupName) {
		return nil, false
	}
	return o.GroupName, true
}

// HasGroupName returns a boolean if a field has been set.
func (o *ServiceHookEvent) HasGroupName() bool {
	if o != nil && !utils.IsNil(o.GroupName) {
		return true
	}

	return false
}

// SetGroupName gets a reference to the given string and assigns it to the GroupName field.
func (o *ServiceHookEvent) SetGroupName(v string) {
	o.GroupName = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *ServiceHookEvent) GetLabel() string {
	if o == nil || utils.IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceHookEvent) GetLabelOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *ServiceHookEvent) HasLabel() bool {
	if o != nil && !utils.IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *ServiceHookEvent) SetLabel(v string) {
	o.Label = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ServiceHookEvent) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceHookEvent) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ServiceHookEvent) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ServiceHookEvent) SetName(v string) {
	o.Name = &v
}

func (o ServiceHookEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceHookEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.GroupLabel) {
		toSerialize["GroupLabel"] = o.GroupLabel
	}
	if !utils.IsNil(o.GroupName) {
		toSerialize["GroupName"] = o.GroupName
	}
	if !utils.IsNil(o.Label) {
		toSerialize["Label"] = o.Label
	}
	if !utils.IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	return toSerialize, nil
}

type NullableServiceHookEvent struct {
	value *ServiceHookEvent
	isSet bool
}

func (v NullableServiceHookEvent) Get() *ServiceHookEvent {
	return v.value
}

func (v *NullableServiceHookEvent) Set(val *ServiceHookEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceHookEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceHookEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceHookEvent(val *ServiceHookEvent) *NullableServiceHookEvent {
	return &NullableServiceHookEvent{value: val, isSet: true}
}

func (v NullableServiceHookEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceHookEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


