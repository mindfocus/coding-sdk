/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the CreateGitCommitRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CreateGitCommitRequest{}

// CreateGitCommitRequest struct for CreateGitCommitRequest
type CreateGitCommitRequest struct {
	// 文件列表
	CommitFiles []CommitFile `json:"CommitFiles"`
	// 仓库路径
	DepotPath string `json:"DepotPath"`
	// 最后次提交 Sha
	LastCommitSha string `json:"LastCommitSha"`
	// 提交文本
	Message string `json:"Message"`
	// 新分支
	NewRef *string `json:"NewRef,omitempty"`
	// 基于改动的分支
	Ref string `json:"Ref"`
}

type _CreateGitCommitRequest CreateGitCommitRequest

// NewCreateGitCommitRequest instantiates a new CreateGitCommitRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateGitCommitRequest(commitFiles []CommitFile, depotPath string, lastCommitSha string, message string, ref string) *CreateGitCommitRequest {
	this := CreateGitCommitRequest{}
	this.CommitFiles = commitFiles
	this.DepotPath = depotPath
	this.LastCommitSha = lastCommitSha
	this.Message = message
	this.Ref = ref
	return &this
}

// NewCreateGitCommitRequestWithDefaults instantiates a new CreateGitCommitRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateGitCommitRequestWithDefaults() *CreateGitCommitRequest {
	this := CreateGitCommitRequest{}
	return &this
}

// GetCommitFiles returns the CommitFiles field value
func (o *CreateGitCommitRequest) GetCommitFiles() []CommitFile {
	if o == nil {
		var ret []CommitFile
		return ret
	}

	return o.CommitFiles
}

// GetCommitFilesOk returns a tuple with the CommitFiles field value
// and a boolean to check if the value has been set.
func (o *CreateGitCommitRequest) GetCommitFilesOk() ([]CommitFile, bool) {
	if o == nil {
		return nil, false
	}
	return o.CommitFiles, true
}

// SetCommitFiles sets field value
func (o *CreateGitCommitRequest) SetCommitFiles(v []CommitFile) {
	o.CommitFiles = v
}

// GetDepotPath returns the DepotPath field value
func (o *CreateGitCommitRequest) GetDepotPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DepotPath
}

// GetDepotPathOk returns a tuple with the DepotPath field value
// and a boolean to check if the value has been set.
func (o *CreateGitCommitRequest) GetDepotPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepotPath, true
}

// SetDepotPath sets field value
func (o *CreateGitCommitRequest) SetDepotPath(v string) {
	o.DepotPath = v
}

// GetLastCommitSha returns the LastCommitSha field value
func (o *CreateGitCommitRequest) GetLastCommitSha() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastCommitSha
}

// GetLastCommitShaOk returns a tuple with the LastCommitSha field value
// and a boolean to check if the value has been set.
func (o *CreateGitCommitRequest) GetLastCommitShaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastCommitSha, true
}

// SetLastCommitSha sets field value
func (o *CreateGitCommitRequest) SetLastCommitSha(v string) {
	o.LastCommitSha = v
}

// GetMessage returns the Message field value
func (o *CreateGitCommitRequest) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *CreateGitCommitRequest) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *CreateGitCommitRequest) SetMessage(v string) {
	o.Message = v
}

// GetNewRef returns the NewRef field value if set, zero value otherwise.
func (o *CreateGitCommitRequest) GetNewRef() string {
	if o == nil || utils.IsNil(o.NewRef) {
		var ret string
		return ret
	}
	return *o.NewRef
}

// GetNewRefOk returns a tuple with the NewRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateGitCommitRequest) GetNewRefOk() (*string, bool) {
	if o == nil || utils.IsNil(o.NewRef) {
		return nil, false
	}
	return o.NewRef, true
}

// HasNewRef returns a boolean if a field has been set.
func (o *CreateGitCommitRequest) HasNewRef() bool {
	if o != nil && !utils.IsNil(o.NewRef) {
		return true
	}

	return false
}

// SetNewRef gets a reference to the given string and assigns it to the NewRef field.
func (o *CreateGitCommitRequest) SetNewRef(v string) {
	o.NewRef = &v
}

// GetRef returns the Ref field value
func (o *CreateGitCommitRequest) GetRef() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ref
}

// GetRefOk returns a tuple with the Ref field value
// and a boolean to check if the value has been set.
func (o *CreateGitCommitRequest) GetRefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ref, true
}

// SetRef sets field value
func (o *CreateGitCommitRequest) SetRef(v string) {
	o.Ref = v
}

func (o CreateGitCommitRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateGitCommitRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["CommitFiles"] = o.CommitFiles
	toSerialize["DepotPath"] = o.DepotPath
	toSerialize["LastCommitSha"] = o.LastCommitSha
	toSerialize["Message"] = o.Message
	if !utils.IsNil(o.NewRef) {
		toSerialize["NewRef"] = o.NewRef
	}
	toSerialize["Ref"] = o.Ref
	return toSerialize, nil
}

func (o *CreateGitCommitRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"CommitFiles",
		"DepotPath",
		"LastCommitSha",
		"Message",
		"Ref",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateGitCommitRequest := _CreateGitCommitRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateGitCommitRequest)

	if err != nil {
		return err
	}

	*o = CreateGitCommitRequest(varCreateGitCommitRequest)

	return err
}

type NullableCreateGitCommitRequest struct {
	value *CreateGitCommitRequest
	isSet bool
}

func (v NullableCreateGitCommitRequest) Get() *CreateGitCommitRequest {
	return v.value
}

func (v *NullableCreateGitCommitRequest) Set(val *CreateGitCommitRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateGitCommitRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateGitCommitRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateGitCommitRequest(val *CreateGitCommitRequest) *NullableCreateGitCommitRequest {
	return &NullableCreateGitCommitRequest{value: val, isSet: true}
}

func (v NullableCreateGitCommitRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateGitCommitRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


