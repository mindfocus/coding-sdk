/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the TeamMemberData type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &TeamMemberData{}

// TeamMemberData 团队成员分页信息
type TeamMemberData struct {
	// 第几页
	PageNumber *int32 `json:"PageNumber,omitempty"`
	// 每页条数
	PageSize *int32 `json:"PageSize,omitempty"`
	// 成员列表信息
	TeamMembers []UserData `json:"TeamMembers,omitempty"`
	// 总条数
	TotalCount *int64 `json:"TotalCount,omitempty"`
}

// NewTeamMemberData instantiates a new TeamMemberData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamMemberData() *TeamMemberData {
	this := TeamMemberData{}
	return &this
}

// NewTeamMemberDataWithDefaults instantiates a new TeamMemberData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamMemberDataWithDefaults() *TeamMemberData {
	this := TeamMemberData{}
	return &this
}

// GetPageNumber returns the PageNumber field value if set, zero value otherwise.
func (o *TeamMemberData) GetPageNumber() int32 {
	if o == nil || utils.IsNil(o.PageNumber) {
		var ret int32
		return ret
	}
	return *o.PageNumber
}

// GetPageNumberOk returns a tuple with the PageNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamMemberData) GetPageNumberOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.PageNumber) {
		return nil, false
	}
	return o.PageNumber, true
}

// HasPageNumber returns a boolean if a field has been set.
func (o *TeamMemberData) HasPageNumber() bool {
	if o != nil && !utils.IsNil(o.PageNumber) {
		return true
	}

	return false
}

// SetPageNumber gets a reference to the given int32 and assigns it to the PageNumber field.
func (o *TeamMemberData) SetPageNumber(v int32) {
	o.PageNumber = &v
}

// GetPageSize returns the PageSize field value if set, zero value otherwise.
func (o *TeamMemberData) GetPageSize() int32 {
	if o == nil || utils.IsNil(o.PageSize) {
		var ret int32
		return ret
	}
	return *o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamMemberData) GetPageSizeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.PageSize) {
		return nil, false
	}
	return o.PageSize, true
}

// HasPageSize returns a boolean if a field has been set.
func (o *TeamMemberData) HasPageSize() bool {
	if o != nil && !utils.IsNil(o.PageSize) {
		return true
	}

	return false
}

// SetPageSize gets a reference to the given int32 and assigns it to the PageSize field.
func (o *TeamMemberData) SetPageSize(v int32) {
	o.PageSize = &v
}

// GetTeamMembers returns the TeamMembers field value if set, zero value otherwise.
func (o *TeamMemberData) GetTeamMembers() []UserData {
	if o == nil || utils.IsNil(o.TeamMembers) {
		var ret []UserData
		return ret
	}
	return o.TeamMembers
}

// GetTeamMembersOk returns a tuple with the TeamMembers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamMemberData) GetTeamMembersOk() ([]UserData, bool) {
	if o == nil || utils.IsNil(o.TeamMembers) {
		return nil, false
	}
	return o.TeamMembers, true
}

// HasTeamMembers returns a boolean if a field has been set.
func (o *TeamMemberData) HasTeamMembers() bool {
	if o != nil && !utils.IsNil(o.TeamMembers) {
		return true
	}

	return false
}

// SetTeamMembers gets a reference to the given []UserData and assigns it to the TeamMembers field.
func (o *TeamMemberData) SetTeamMembers(v []UserData) {
	o.TeamMembers = v
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *TeamMemberData) GetTotalCount() int64 {
	if o == nil || utils.IsNil(o.TotalCount) {
		var ret int64
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamMemberData) GetTotalCountOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.TotalCount) {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *TeamMemberData) HasTotalCount() bool {
	if o != nil && !utils.IsNil(o.TotalCount) {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int64 and assigns it to the TotalCount field.
func (o *TeamMemberData) SetTotalCount(v int64) {
	o.TotalCount = &v
}

func (o TeamMemberData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamMemberData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.PageNumber) {
		toSerialize["PageNumber"] = o.PageNumber
	}
	if !utils.IsNil(o.PageSize) {
		toSerialize["PageSize"] = o.PageSize
	}
	if !utils.IsNil(o.TeamMembers) {
		toSerialize["TeamMembers"] = o.TeamMembers
	}
	if !utils.IsNil(o.TotalCount) {
		toSerialize["TotalCount"] = o.TotalCount
	}
	return toSerialize, nil
}

type NullableTeamMemberData struct {
	value *TeamMemberData
	isSet bool
}

func (v NullableTeamMemberData) Get() *TeamMemberData {
	return v.value
}

func (v *NullableTeamMemberData) Set(val *TeamMemberData) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamMemberData) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamMemberData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamMemberData(val *TeamMemberData) *NullableTeamMemberData {
	return &NullableTeamMemberData{value: val, isSet: true}
}

func (v NullableTeamMemberData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamMemberData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


