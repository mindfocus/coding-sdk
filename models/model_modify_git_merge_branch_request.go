/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the ModifyGitMergeBranchRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ModifyGitMergeBranchRequest{}

// ModifyGitMergeBranchRequest struct for ModifyGitMergeBranchRequest
type ModifyGitMergeBranchRequest struct {
	// 提交信息
	CommitMessage string `json:"CommitMessage"`
	// 仓库路径或仓库ID
	DepotPath string `json:"DepotPath"`
	// 源分支
	FromBranch string `json:"FromBranch"`
	// 目标分支
	ToBranch string `json:"ToBranch"`
}

type _ModifyGitMergeBranchRequest ModifyGitMergeBranchRequest

// NewModifyGitMergeBranchRequest instantiates a new ModifyGitMergeBranchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModifyGitMergeBranchRequest(commitMessage string, depotPath string, fromBranch string, toBranch string) *ModifyGitMergeBranchRequest {
	this := ModifyGitMergeBranchRequest{}
	this.CommitMessage = commitMessage
	this.DepotPath = depotPath
	this.FromBranch = fromBranch
	this.ToBranch = toBranch
	return &this
}

// NewModifyGitMergeBranchRequestWithDefaults instantiates a new ModifyGitMergeBranchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModifyGitMergeBranchRequestWithDefaults() *ModifyGitMergeBranchRequest {
	this := ModifyGitMergeBranchRequest{}
	return &this
}

// GetCommitMessage returns the CommitMessage field value
func (o *ModifyGitMergeBranchRequest) GetCommitMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommitMessage
}

// GetCommitMessageOk returns a tuple with the CommitMessage field value
// and a boolean to check if the value has been set.
func (o *ModifyGitMergeBranchRequest) GetCommitMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommitMessage, true
}

// SetCommitMessage sets field value
func (o *ModifyGitMergeBranchRequest) SetCommitMessage(v string) {
	o.CommitMessage = v
}

// GetDepotPath returns the DepotPath field value
func (o *ModifyGitMergeBranchRequest) GetDepotPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DepotPath
}

// GetDepotPathOk returns a tuple with the DepotPath field value
// and a boolean to check if the value has been set.
func (o *ModifyGitMergeBranchRequest) GetDepotPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepotPath, true
}

// SetDepotPath sets field value
func (o *ModifyGitMergeBranchRequest) SetDepotPath(v string) {
	o.DepotPath = v
}

// GetFromBranch returns the FromBranch field value
func (o *ModifyGitMergeBranchRequest) GetFromBranch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FromBranch
}

// GetFromBranchOk returns a tuple with the FromBranch field value
// and a boolean to check if the value has been set.
func (o *ModifyGitMergeBranchRequest) GetFromBranchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromBranch, true
}

// SetFromBranch sets field value
func (o *ModifyGitMergeBranchRequest) SetFromBranch(v string) {
	o.FromBranch = v
}

// GetToBranch returns the ToBranch field value
func (o *ModifyGitMergeBranchRequest) GetToBranch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToBranch
}

// GetToBranchOk returns a tuple with the ToBranch field value
// and a boolean to check if the value has been set.
func (o *ModifyGitMergeBranchRequest) GetToBranchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToBranch, true
}

// SetToBranch sets field value
func (o *ModifyGitMergeBranchRequest) SetToBranch(v string) {
	o.ToBranch = v
}

func (o ModifyGitMergeBranchRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModifyGitMergeBranchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["CommitMessage"] = o.CommitMessage
	toSerialize["DepotPath"] = o.DepotPath
	toSerialize["FromBranch"] = o.FromBranch
	toSerialize["ToBranch"] = o.ToBranch
	return toSerialize, nil
}

func (o *ModifyGitMergeBranchRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"CommitMessage",
		"DepotPath",
		"FromBranch",
		"ToBranch",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModifyGitMergeBranchRequest := _ModifyGitMergeBranchRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModifyGitMergeBranchRequest)

	if err != nil {
		return err
	}

	*o = ModifyGitMergeBranchRequest(varModifyGitMergeBranchRequest)

	return err
}

type NullableModifyGitMergeBranchRequest struct {
	value *ModifyGitMergeBranchRequest
	isSet bool
}

func (v NullableModifyGitMergeBranchRequest) Get() *ModifyGitMergeBranchRequest {
	return v.value
}

func (v *NullableModifyGitMergeBranchRequest) Set(val *ModifyGitMergeBranchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableModifyGitMergeBranchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableModifyGitMergeBranchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModifyGitMergeBranchRequest(val *ModifyGitMergeBranchRequest) *NullableModifyGitMergeBranchRequest {
	return &NullableModifyGitMergeBranchRequest{value: val, isSet: true}
}

func (v NullableModifyGitMergeBranchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModifyGitMergeBranchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


