/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DescribeTeamMemberByEmail200Response type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DescribeTeamMemberByEmail200Response{}

// DescribeTeamMemberByEmail200Response struct for DescribeTeamMemberByEmail200Response
type DescribeTeamMemberByEmail200Response struct {
	Response *DescribeTeamMemberByEmail200ResponseResponse `json:"Response,omitempty"`
}

// NewDescribeTeamMemberByEmail200Response instantiates a new DescribeTeamMemberByEmail200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeTeamMemberByEmail200Response() *DescribeTeamMemberByEmail200Response {
	this := DescribeTeamMemberByEmail200Response{}
	return &this
}

// NewDescribeTeamMemberByEmail200ResponseWithDefaults instantiates a new DescribeTeamMemberByEmail200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeTeamMemberByEmail200ResponseWithDefaults() *DescribeTeamMemberByEmail200Response {
	this := DescribeTeamMemberByEmail200Response{}
	return &this
}

// GetResponse returns the Response field value if set, zero value otherwise.
func (o *DescribeTeamMemberByEmail200Response) GetResponse() DescribeTeamMemberByEmail200ResponseResponse {
	if o == nil || utils.IsNil(o.Response) {
		var ret DescribeTeamMemberByEmail200ResponseResponse
		return ret
	}
	return *o.Response
}

// GetResponseOk returns a tuple with the Response field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeTeamMemberByEmail200Response) GetResponseOk() (*DescribeTeamMemberByEmail200ResponseResponse, bool) {
	if o == nil || utils.IsNil(o.Response) {
		return nil, false
	}
	return o.Response, true
}

// HasResponse returns a boolean if a field has been set.
func (o *DescribeTeamMemberByEmail200Response) HasResponse() bool {
	if o != nil && !utils.IsNil(o.Response) {
		return true
	}

	return false
}

// SetResponse gets a reference to the given DescribeTeamMemberByEmail200ResponseResponse and assigns it to the Response field.
func (o *DescribeTeamMemberByEmail200Response) SetResponse(v DescribeTeamMemberByEmail200ResponseResponse) {
	o.Response = &v
}

func (o DescribeTeamMemberByEmail200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeTeamMemberByEmail200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Response) {
		toSerialize["Response"] = o.Response
	}
	return toSerialize, nil
}

type NullableDescribeTeamMemberByEmail200Response struct {
	value *DescribeTeamMemberByEmail200Response
	isSet bool
}

func (v NullableDescribeTeamMemberByEmail200Response) Get() *DescribeTeamMemberByEmail200Response {
	return v.value
}

func (v *NullableDescribeTeamMemberByEmail200Response) Set(val *DescribeTeamMemberByEmail200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeTeamMemberByEmail200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeTeamMemberByEmail200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeTeamMemberByEmail200Response(val *DescribeTeamMemberByEmail200Response) *NullableDescribeTeamMemberByEmail200Response {
	return &NullableDescribeTeamMemberByEmail200Response{value: val, isSet: true}
}

func (v NullableDescribeTeamMemberByEmail200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeTeamMemberByEmail200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


