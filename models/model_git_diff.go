/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the GitDiff type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &GitDiff{}

// GitDiff git diff 信息详情
type GitDiff struct {
	// 文件改变类型
	ChangeType *string `json:"ChangeType,omitempty"`
	// diff信息内容
	Content *string `json:"Content,omitempty"`
	// 一共删除几行
	Deletions *int64 `json:"Deletions,omitempty"`
	// 一共新增几行
	Insertions *int64 `json:"Insertions,omitempty"`
	// diff每行信息拆解后的集合信息
	Lines []Line `json:"Lines,omitempty"`
	// 修改后文件的权限
	NewMode *string `json:"NewMode,omitempty"`
	// 修改前文件的权限
	OldMode *string `json:"OldMode,omitempty"`
	// 文件路径
	Path *string `json:"Path,omitempty"`
}

// NewGitDiff instantiates a new GitDiff object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitDiff() *GitDiff {
	this := GitDiff{}
	var changeType string = ""
	this.ChangeType = &changeType
	var content string = ""
	this.Content = &content
	var newMode string = ""
	this.NewMode = &newMode
	var oldMode string = ""
	this.OldMode = &oldMode
	var path string = ""
	this.Path = &path
	return &this
}

// NewGitDiffWithDefaults instantiates a new GitDiff object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitDiffWithDefaults() *GitDiff {
	this := GitDiff{}
	var changeType string = ""
	this.ChangeType = &changeType
	var content string = ""
	this.Content = &content
	var newMode string = ""
	this.NewMode = &newMode
	var oldMode string = ""
	this.OldMode = &oldMode
	var path string = ""
	this.Path = &path
	return &this
}

// GetChangeType returns the ChangeType field value if set, zero value otherwise.
func (o *GitDiff) GetChangeType() string {
	if o == nil || utils.IsNil(o.ChangeType) {
		var ret string
		return ret
	}
	return *o.ChangeType
}

// GetChangeTypeOk returns a tuple with the ChangeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitDiff) GetChangeTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ChangeType) {
		return nil, false
	}
	return o.ChangeType, true
}

// HasChangeType returns a boolean if a field has been set.
func (o *GitDiff) HasChangeType() bool {
	if o != nil && !utils.IsNil(o.ChangeType) {
		return true
	}

	return false
}

// SetChangeType gets a reference to the given string and assigns it to the ChangeType field.
func (o *GitDiff) SetChangeType(v string) {
	o.ChangeType = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *GitDiff) GetContent() string {
	if o == nil || utils.IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitDiff) GetContentOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *GitDiff) HasContent() bool {
	if o != nil && !utils.IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *GitDiff) SetContent(v string) {
	o.Content = &v
}

// GetDeletions returns the Deletions field value if set, zero value otherwise.
func (o *GitDiff) GetDeletions() int64 {
	if o == nil || utils.IsNil(o.Deletions) {
		var ret int64
		return ret
	}
	return *o.Deletions
}

// GetDeletionsOk returns a tuple with the Deletions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitDiff) GetDeletionsOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Deletions) {
		return nil, false
	}
	return o.Deletions, true
}

// HasDeletions returns a boolean if a field has been set.
func (o *GitDiff) HasDeletions() bool {
	if o != nil && !utils.IsNil(o.Deletions) {
		return true
	}

	return false
}

// SetDeletions gets a reference to the given int64 and assigns it to the Deletions field.
func (o *GitDiff) SetDeletions(v int64) {
	o.Deletions = &v
}

// GetInsertions returns the Insertions field value if set, zero value otherwise.
func (o *GitDiff) GetInsertions() int64 {
	if o == nil || utils.IsNil(o.Insertions) {
		var ret int64
		return ret
	}
	return *o.Insertions
}

// GetInsertionsOk returns a tuple with the Insertions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitDiff) GetInsertionsOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Insertions) {
		return nil, false
	}
	return o.Insertions, true
}

// HasInsertions returns a boolean if a field has been set.
func (o *GitDiff) HasInsertions() bool {
	if o != nil && !utils.IsNil(o.Insertions) {
		return true
	}

	return false
}

// SetInsertions gets a reference to the given int64 and assigns it to the Insertions field.
func (o *GitDiff) SetInsertions(v int64) {
	o.Insertions = &v
}

// GetLines returns the Lines field value if set, zero value otherwise.
func (o *GitDiff) GetLines() []Line {
	if o == nil || utils.IsNil(o.Lines) {
		var ret []Line
		return ret
	}
	return o.Lines
}

// GetLinesOk returns a tuple with the Lines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitDiff) GetLinesOk() ([]Line, bool) {
	if o == nil || utils.IsNil(o.Lines) {
		return nil, false
	}
	return o.Lines, true
}

// HasLines returns a boolean if a field has been set.
func (o *GitDiff) HasLines() bool {
	if o != nil && !utils.IsNil(o.Lines) {
		return true
	}

	return false
}

// SetLines gets a reference to the given []Line and assigns it to the Lines field.
func (o *GitDiff) SetLines(v []Line) {
	o.Lines = v
}

// GetNewMode returns the NewMode field value if set, zero value otherwise.
func (o *GitDiff) GetNewMode() string {
	if o == nil || utils.IsNil(o.NewMode) {
		var ret string
		return ret
	}
	return *o.NewMode
}

// GetNewModeOk returns a tuple with the NewMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitDiff) GetNewModeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.NewMode) {
		return nil, false
	}
	return o.NewMode, true
}

// HasNewMode returns a boolean if a field has been set.
func (o *GitDiff) HasNewMode() bool {
	if o != nil && !utils.IsNil(o.NewMode) {
		return true
	}

	return false
}

// SetNewMode gets a reference to the given string and assigns it to the NewMode field.
func (o *GitDiff) SetNewMode(v string) {
	o.NewMode = &v
}

// GetOldMode returns the OldMode field value if set, zero value otherwise.
func (o *GitDiff) GetOldMode() string {
	if o == nil || utils.IsNil(o.OldMode) {
		var ret string
		return ret
	}
	return *o.OldMode
}

// GetOldModeOk returns a tuple with the OldMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitDiff) GetOldModeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.OldMode) {
		return nil, false
	}
	return o.OldMode, true
}

// HasOldMode returns a boolean if a field has been set.
func (o *GitDiff) HasOldMode() bool {
	if o != nil && !utils.IsNil(o.OldMode) {
		return true
	}

	return false
}

// SetOldMode gets a reference to the given string and assigns it to the OldMode field.
func (o *GitDiff) SetOldMode(v string) {
	o.OldMode = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *GitDiff) GetPath() string {
	if o == nil || utils.IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitDiff) GetPathOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *GitDiff) HasPath() bool {
	if o != nil && !utils.IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *GitDiff) SetPath(v string) {
	o.Path = &v
}

func (o GitDiff) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitDiff) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.ChangeType) {
		toSerialize["ChangeType"] = o.ChangeType
	}
	if !utils.IsNil(o.Content) {
		toSerialize["Content"] = o.Content
	}
	if !utils.IsNil(o.Deletions) {
		toSerialize["Deletions"] = o.Deletions
	}
	if !utils.IsNil(o.Insertions) {
		toSerialize["Insertions"] = o.Insertions
	}
	if !utils.IsNil(o.Lines) {
		toSerialize["Lines"] = o.Lines
	}
	if !utils.IsNil(o.NewMode) {
		toSerialize["NewMode"] = o.NewMode
	}
	if !utils.IsNil(o.OldMode) {
		toSerialize["OldMode"] = o.OldMode
	}
	if !utils.IsNil(o.Path) {
		toSerialize["Path"] = o.Path
	}
	return toSerialize, nil
}

type NullableGitDiff struct {
	value *GitDiff
	isSet bool
}

func (v NullableGitDiff) Get() *GitDiff {
	return v.value
}

func (v *NullableGitDiff) Set(val *GitDiff) {
	v.value = val
	v.isSet = true
}

func (v NullableGitDiff) IsSet() bool {
	return v.isSet
}

func (v *NullableGitDiff) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitDiff(val *GitDiff) *NullableGitDiff {
	return &NullableGitDiff{value: val, isSet: true}
}

func (v NullableGitDiff) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitDiff) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


