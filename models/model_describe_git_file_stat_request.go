/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the DescribeGitFileStatRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DescribeGitFileStatRequest{}

// DescribeGitFileStatRequest struct for DescribeGitFileStatRequest
type DescribeGitFileStatRequest struct {
	// 仓库路径，格式：<team>/<project>/<depot>
	DepotPath string `json:"DepotPath"`
	// 文件路径
	Path string `json:"Path"`
	// tag | branch | commit
	Ref string `json:"Ref"`
}

type _DescribeGitFileStatRequest DescribeGitFileStatRequest

// NewDescribeGitFileStatRequest instantiates a new DescribeGitFileStatRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeGitFileStatRequest(depotPath string, path string, ref string) *DescribeGitFileStatRequest {
	this := DescribeGitFileStatRequest{}
	this.DepotPath = depotPath
	this.Path = path
	this.Ref = ref
	return &this
}

// NewDescribeGitFileStatRequestWithDefaults instantiates a new DescribeGitFileStatRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeGitFileStatRequestWithDefaults() *DescribeGitFileStatRequest {
	this := DescribeGitFileStatRequest{}
	return &this
}

// GetDepotPath returns the DepotPath field value
func (o *DescribeGitFileStatRequest) GetDepotPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DepotPath
}

// GetDepotPathOk returns a tuple with the DepotPath field value
// and a boolean to check if the value has been set.
func (o *DescribeGitFileStatRequest) GetDepotPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepotPath, true
}

// SetDepotPath sets field value
func (o *DescribeGitFileStatRequest) SetDepotPath(v string) {
	o.DepotPath = v
}

// GetPath returns the Path field value
func (o *DescribeGitFileStatRequest) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *DescribeGitFileStatRequest) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *DescribeGitFileStatRequest) SetPath(v string) {
	o.Path = v
}

// GetRef returns the Ref field value
func (o *DescribeGitFileStatRequest) GetRef() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ref
}

// GetRefOk returns a tuple with the Ref field value
// and a boolean to check if the value has been set.
func (o *DescribeGitFileStatRequest) GetRefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ref, true
}

// SetRef sets field value
func (o *DescribeGitFileStatRequest) SetRef(v string) {
	o.Ref = v
}

func (o DescribeGitFileStatRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeGitFileStatRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["DepotPath"] = o.DepotPath
	toSerialize["Path"] = o.Path
	toSerialize["Ref"] = o.Ref
	return toSerialize, nil
}

func (o *DescribeGitFileStatRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"DepotPath",
		"Path",
		"Ref",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescribeGitFileStatRequest := _DescribeGitFileStatRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDescribeGitFileStatRequest)

	if err != nil {
		return err
	}

	*o = DescribeGitFileStatRequest(varDescribeGitFileStatRequest)

	return err
}

type NullableDescribeGitFileStatRequest struct {
	value *DescribeGitFileStatRequest
	isSet bool
}

func (v NullableDescribeGitFileStatRequest) Get() *DescribeGitFileStatRequest {
	return v.value
}

func (v *NullableDescribeGitFileStatRequest) Set(val *DescribeGitFileStatRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeGitFileStatRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeGitFileStatRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeGitFileStatRequest(val *DescribeGitFileStatRequest) *NullableDescribeGitFileStatRequest {
	return &NullableDescribeGitFileStatRequest{value: val, isSet: true}
}

func (v NullableDescribeGitFileStatRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeGitFileStatRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


