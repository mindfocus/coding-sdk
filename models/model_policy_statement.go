/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the PolicyStatement type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &PolicyStatement{}

// PolicyStatement 权限组授权句柄
type PolicyStatement struct {
	// 权限 action 的二段式描述
	Action []string `json:"Action"`
	// 效能：ALLOW | DENY
	Effect string `json:"Effect"`
	// 授权资源的三段式描述，一般填 * 即可
	Resource []string `json:"Resource"`
}

type _PolicyStatement PolicyStatement

// NewPolicyStatement instantiates a new PolicyStatement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyStatement(action []string, effect string, resource []string) *PolicyStatement {
	this := PolicyStatement{}
	this.Action = action
	this.Effect = effect
	this.Resource = resource
	return &this
}

// NewPolicyStatementWithDefaults instantiates a new PolicyStatement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyStatementWithDefaults() *PolicyStatement {
	this := PolicyStatement{}
	var effect string = ""
	this.Effect = effect
	return &this
}

// GetAction returns the Action field value
func (o *PolicyStatement) GetAction() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *PolicyStatement) GetActionOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Action, true
}

// SetAction sets field value
func (o *PolicyStatement) SetAction(v []string) {
	o.Action = v
}

// GetEffect returns the Effect field value
func (o *PolicyStatement) GetEffect() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Effect
}

// GetEffectOk returns a tuple with the Effect field value
// and a boolean to check if the value has been set.
func (o *PolicyStatement) GetEffectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Effect, true
}

// SetEffect sets field value
func (o *PolicyStatement) SetEffect(v string) {
	o.Effect = v
}

// GetResource returns the Resource field value
func (o *PolicyStatement) GetResource() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Resource
}

// GetResourceOk returns a tuple with the Resource field value
// and a boolean to check if the value has been set.
func (o *PolicyStatement) GetResourceOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Resource, true
}

// SetResource sets field value
func (o *PolicyStatement) SetResource(v []string) {
	o.Resource = v
}

func (o PolicyStatement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyStatement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Action"] = o.Action
	toSerialize["Effect"] = o.Effect
	toSerialize["Resource"] = o.Resource
	return toSerialize, nil
}

func (o *PolicyStatement) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Action",
		"Effect",
		"Resource",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPolicyStatement := _PolicyStatement{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPolicyStatement)

	if err != nil {
		return err
	}

	*o = PolicyStatement(varPolicyStatement)

	return err
}

type NullablePolicyStatement struct {
	value *PolicyStatement
	isSet bool
}

func (v NullablePolicyStatement) Get() *PolicyStatement {
	return v.value
}

func (v *NullablePolicyStatement) Set(val *PolicyStatement) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyStatement) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyStatement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyStatement(val *PolicyStatement) *NullablePolicyStatement {
	return &NullablePolicyStatement{value: val, isSet: true}
}

func (v NullablePolicyStatement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyStatement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


