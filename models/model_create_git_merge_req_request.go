/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the CreateGitMergeReqRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CreateGitMergeReqRequest{}

// CreateGitMergeReqRequest struct for CreateGitMergeReqRequest
type CreateGitMergeReqRequest struct {
	// 合并请求内容
	Content string `json:"Content"`
	// 仓库id
	DepotId int64 `json:"DepotId"`
	// 仓库路径与depotId选择其一就可以
	DepotPath *string `json:"DepotPath,omitempty"`
	// 目标分支
	DestBranch string `json:"DestBranch"`
	// 评审者
	Reviewers *string `json:"Reviewers,omitempty"`
	// 源分支
	SrcBranch string `json:"SrcBranch"`
	// 合并请求title
	Title string `json:"Title"`
}

type _CreateGitMergeReqRequest CreateGitMergeReqRequest

// NewCreateGitMergeReqRequest instantiates a new CreateGitMergeReqRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateGitMergeReqRequest(content string, depotId int64, destBranch string, srcBranch string, title string) *CreateGitMergeReqRequest {
	this := CreateGitMergeReqRequest{}
	this.Content = content
	this.DepotId = depotId
	this.DestBranch = destBranch
	this.SrcBranch = srcBranch
	this.Title = title
	return &this
}

// NewCreateGitMergeReqRequestWithDefaults instantiates a new CreateGitMergeReqRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateGitMergeReqRequestWithDefaults() *CreateGitMergeReqRequest {
	this := CreateGitMergeReqRequest{}
	return &this
}

// GetContent returns the Content field value
func (o *CreateGitMergeReqRequest) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *CreateGitMergeReqRequest) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *CreateGitMergeReqRequest) SetContent(v string) {
	o.Content = v
}

// GetDepotId returns the DepotId field value
func (o *CreateGitMergeReqRequest) GetDepotId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DepotId
}

// GetDepotIdOk returns a tuple with the DepotId field value
// and a boolean to check if the value has been set.
func (o *CreateGitMergeReqRequest) GetDepotIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepotId, true
}

// SetDepotId sets field value
func (o *CreateGitMergeReqRequest) SetDepotId(v int64) {
	o.DepotId = v
}

// GetDepotPath returns the DepotPath field value if set, zero value otherwise.
func (o *CreateGitMergeReqRequest) GetDepotPath() string {
	if o == nil || utils.IsNil(o.DepotPath) {
		var ret string
		return ret
	}
	return *o.DepotPath
}

// GetDepotPathOk returns a tuple with the DepotPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateGitMergeReqRequest) GetDepotPathOk() (*string, bool) {
	if o == nil || utils.IsNil(o.DepotPath) {
		return nil, false
	}
	return o.DepotPath, true
}

// HasDepotPath returns a boolean if a field has been set.
func (o *CreateGitMergeReqRequest) HasDepotPath() bool {
	if o != nil && !utils.IsNil(o.DepotPath) {
		return true
	}

	return false
}

// SetDepotPath gets a reference to the given string and assigns it to the DepotPath field.
func (o *CreateGitMergeReqRequest) SetDepotPath(v string) {
	o.DepotPath = &v
}

// GetDestBranch returns the DestBranch field value
func (o *CreateGitMergeReqRequest) GetDestBranch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestBranch
}

// GetDestBranchOk returns a tuple with the DestBranch field value
// and a boolean to check if the value has been set.
func (o *CreateGitMergeReqRequest) GetDestBranchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestBranch, true
}

// SetDestBranch sets field value
func (o *CreateGitMergeReqRequest) SetDestBranch(v string) {
	o.DestBranch = v
}

// GetReviewers returns the Reviewers field value if set, zero value otherwise.
func (o *CreateGitMergeReqRequest) GetReviewers() string {
	if o == nil || utils.IsNil(o.Reviewers) {
		var ret string
		return ret
	}
	return *o.Reviewers
}

// GetReviewersOk returns a tuple with the Reviewers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateGitMergeReqRequest) GetReviewersOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Reviewers) {
		return nil, false
	}
	return o.Reviewers, true
}

// HasReviewers returns a boolean if a field has been set.
func (o *CreateGitMergeReqRequest) HasReviewers() bool {
	if o != nil && !utils.IsNil(o.Reviewers) {
		return true
	}

	return false
}

// SetReviewers gets a reference to the given string and assigns it to the Reviewers field.
func (o *CreateGitMergeReqRequest) SetReviewers(v string) {
	o.Reviewers = &v
}

// GetSrcBranch returns the SrcBranch field value
func (o *CreateGitMergeReqRequest) GetSrcBranch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SrcBranch
}

// GetSrcBranchOk returns a tuple with the SrcBranch field value
// and a boolean to check if the value has been set.
func (o *CreateGitMergeReqRequest) GetSrcBranchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SrcBranch, true
}

// SetSrcBranch sets field value
func (o *CreateGitMergeReqRequest) SetSrcBranch(v string) {
	o.SrcBranch = v
}

// GetTitle returns the Title field value
func (o *CreateGitMergeReqRequest) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *CreateGitMergeReqRequest) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *CreateGitMergeReqRequest) SetTitle(v string) {
	o.Title = v
}

func (o CreateGitMergeReqRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateGitMergeReqRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Content"] = o.Content
	toSerialize["DepotId"] = o.DepotId
	if !utils.IsNil(o.DepotPath) {
		toSerialize["DepotPath"] = o.DepotPath
	}
	toSerialize["DestBranch"] = o.DestBranch
	if !utils.IsNil(o.Reviewers) {
		toSerialize["Reviewers"] = o.Reviewers
	}
	toSerialize["SrcBranch"] = o.SrcBranch
	toSerialize["Title"] = o.Title
	return toSerialize, nil
}

func (o *CreateGitMergeReqRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Content",
		"DepotId",
		"DestBranch",
		"SrcBranch",
		"Title",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateGitMergeReqRequest := _CreateGitMergeReqRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateGitMergeReqRequest)

	if err != nil {
		return err
	}

	*o = CreateGitMergeReqRequest(varCreateGitMergeReqRequest)

	return err
}

type NullableCreateGitMergeReqRequest struct {
	value *CreateGitMergeReqRequest
	isSet bool
}

func (v NullableCreateGitMergeReqRequest) Get() *CreateGitMergeReqRequest {
	return v.value
}

func (v *NullableCreateGitMergeReqRequest) Set(val *CreateGitMergeReqRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateGitMergeReqRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateGitMergeReqRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateGitMergeReqRequest(val *CreateGitMergeReqRequest) *NullableCreateGitMergeReqRequest {
	return &NullableCreateGitMergeReqRequest{value: val, isSet: true}
}

func (v NullableCreateGitMergeReqRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateGitMergeReqRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


