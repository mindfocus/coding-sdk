/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"; "github.com/mindfocus/coding-sdk/utils"
)

// checks if the ArtifactRepositoryFile type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ArtifactRepositoryFile{}

// ArtifactRepositoryFile 制品库文件列表
type ArtifactRepositoryFile struct {
	// 制品类型
	ArtifactType *string `json:"ArtifactType,omitempty"`
	// 符合对应制品标准协议的下载链接（有效期：300 s）
	DownloadUrl *string `json:"DownloadUrl,omitempty"`
	// 制品版本 Hash
	Hash *string `json:"Hash,omitempty"`
	// 制品仓库 Host
	Host *string `json:"Host,omitempty"`
	// 制品包名称
	PackageName *string `json:"PackageName,omitempty"`
	// 相对于仓库级别的文件路径
	Path *string `json:"Path,omitempty"`
	// 项目名称
	Project *string `json:"Project,omitempty"`
	// 制品仓库名称
	Repository *string `json:"Repository,omitempty"`
	// 制品版本
	VersionName *string `json:"VersionName,omitempty"`
}

// NewArtifactRepositoryFile instantiates a new ArtifactRepositoryFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArtifactRepositoryFile() *ArtifactRepositoryFile {
	this := ArtifactRepositoryFile{}
	var artifactType string = ""
	this.ArtifactType = &artifactType
	var downloadUrl string = ""
	this.DownloadUrl = &downloadUrl
	var hash string = ""
	this.Hash = &hash
	var host string = ""
	this.Host = &host
	var packageName string = ""
	this.PackageName = &packageName
	var path string = ""
	this.Path = &path
	var project string = ""
	this.Project = &project
	var repository string = ""
	this.Repository = &repository
	var versionName string = ""
	this.VersionName = &versionName
	return &this
}

// NewArtifactRepositoryFileWithDefaults instantiates a new ArtifactRepositoryFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArtifactRepositoryFileWithDefaults() *ArtifactRepositoryFile {
	this := ArtifactRepositoryFile{}
	var artifactType string = ""
	this.ArtifactType = &artifactType
	var downloadUrl string = ""
	this.DownloadUrl = &downloadUrl
	var hash string = ""
	this.Hash = &hash
	var host string = ""
	this.Host = &host
	var packageName string = ""
	this.PackageName = &packageName
	var path string = ""
	this.Path = &path
	var project string = ""
	this.Project = &project
	var repository string = ""
	this.Repository = &repository
	var versionName string = ""
	this.VersionName = &versionName
	return &this
}

// GetArtifactType returns the ArtifactType field value if set, zero value otherwise.
func (o *ArtifactRepositoryFile) GetArtifactType() string {
	if o == nil || utils.IsNil(o.ArtifactType) {
		var ret string
		return ret
	}
	return *o.ArtifactType
}

// GetArtifactTypeOk returns a tuple with the ArtifactType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactRepositoryFile) GetArtifactTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ArtifactType) {
		return nil, false
	}
	return o.ArtifactType, true
}

// HasArtifactType returns a boolean if a field has been set.
func (o *ArtifactRepositoryFile) HasArtifactType() bool {
	if o != nil && !utils.IsNil(o.ArtifactType) {
		return true
	}

	return false
}

// SetArtifactType gets a reference to the given string and assigns it to the ArtifactType field.
func (o *ArtifactRepositoryFile) SetArtifactType(v string) {
	o.ArtifactType = &v
}

// GetDownloadUrl returns the DownloadUrl field value if set, zero value otherwise.
func (o *ArtifactRepositoryFile) GetDownloadUrl() string {
	if o == nil || utils.IsNil(o.DownloadUrl) {
		var ret string
		return ret
	}
	return *o.DownloadUrl
}

// GetDownloadUrlOk returns a tuple with the DownloadUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactRepositoryFile) GetDownloadUrlOk() (*string, bool) {
	if o == nil || utils.IsNil(o.DownloadUrl) {
		return nil, false
	}
	return o.DownloadUrl, true
}

// HasDownloadUrl returns a boolean if a field has been set.
func (o *ArtifactRepositoryFile) HasDownloadUrl() bool {
	if o != nil && !utils.IsNil(o.DownloadUrl) {
		return true
	}

	return false
}

// SetDownloadUrl gets a reference to the given string and assigns it to the DownloadUrl field.
func (o *ArtifactRepositoryFile) SetDownloadUrl(v string) {
	o.DownloadUrl = &v
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *ArtifactRepositoryFile) GetHash() string {
	if o == nil || utils.IsNil(o.Hash) {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactRepositoryFile) GetHashOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Hash) {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *ArtifactRepositoryFile) HasHash() bool {
	if o != nil && !utils.IsNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *ArtifactRepositoryFile) SetHash(v string) {
	o.Hash = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *ArtifactRepositoryFile) GetHost() string {
	if o == nil || utils.IsNil(o.Host) {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactRepositoryFile) GetHostOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *ArtifactRepositoryFile) HasHost() bool {
	if o != nil && !utils.IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *ArtifactRepositoryFile) SetHost(v string) {
	o.Host = &v
}

// GetPackageName returns the PackageName field value if set, zero value otherwise.
func (o *ArtifactRepositoryFile) GetPackageName() string {
	if o == nil || utils.IsNil(o.PackageName) {
		var ret string
		return ret
	}
	return *o.PackageName
}

// GetPackageNameOk returns a tuple with the PackageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactRepositoryFile) GetPackageNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.PackageName) {
		return nil, false
	}
	return o.PackageName, true
}

// HasPackageName returns a boolean if a field has been set.
func (o *ArtifactRepositoryFile) HasPackageName() bool {
	if o != nil && !utils.IsNil(o.PackageName) {
		return true
	}

	return false
}

// SetPackageName gets a reference to the given string and assigns it to the PackageName field.
func (o *ArtifactRepositoryFile) SetPackageName(v string) {
	o.PackageName = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *ArtifactRepositoryFile) GetPath() string {
	if o == nil || utils.IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactRepositoryFile) GetPathOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *ArtifactRepositoryFile) HasPath() bool {
	if o != nil && !utils.IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *ArtifactRepositoryFile) SetPath(v string) {
	o.Path = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *ArtifactRepositoryFile) GetProject() string {
	if o == nil || utils.IsNil(o.Project) {
		var ret string
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactRepositoryFile) GetProjectOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *ArtifactRepositoryFile) HasProject() bool {
	if o != nil && !utils.IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given string and assigns it to the Project field.
func (o *ArtifactRepositoryFile) SetProject(v string) {
	o.Project = &v
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *ArtifactRepositoryFile) GetRepository() string {
	if o == nil || utils.IsNil(o.Repository) {
		var ret string
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactRepositoryFile) GetRepositoryOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Repository) {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *ArtifactRepositoryFile) HasRepository() bool {
	if o != nil && !utils.IsNil(o.Repository) {
		return true
	}

	return false
}

// SetRepository gets a reference to the given string and assigns it to the Repository field.
func (o *ArtifactRepositoryFile) SetRepository(v string) {
	o.Repository = &v
}

// GetVersionName returns the VersionName field value if set, zero value otherwise.
func (o *ArtifactRepositoryFile) GetVersionName() string {
	if o == nil || utils.IsNil(o.VersionName) {
		var ret string
		return ret
	}
	return *o.VersionName
}

// GetVersionNameOk returns a tuple with the VersionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactRepositoryFile) GetVersionNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.VersionName) {
		return nil, false
	}
	return o.VersionName, true
}

// HasVersionName returns a boolean if a field has been set.
func (o *ArtifactRepositoryFile) HasVersionName() bool {
	if o != nil && !utils.IsNil(o.VersionName) {
		return true
	}

	return false
}

// SetVersionName gets a reference to the given string and assigns it to the VersionName field.
func (o *ArtifactRepositoryFile) SetVersionName(v string) {
	o.VersionName = &v
}

func (o ArtifactRepositoryFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArtifactRepositoryFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.ArtifactType) {
		toSerialize["ArtifactType"] = o.ArtifactType
	}
	if !utils.IsNil(o.DownloadUrl) {
		toSerialize["DownloadUrl"] = o.DownloadUrl
	}
	if !utils.IsNil(o.Hash) {
		toSerialize["Hash"] = o.Hash
	}
	if !utils.IsNil(o.Host) {
		toSerialize["Host"] = o.Host
	}
	if !utils.IsNil(o.PackageName) {
		toSerialize["PackageName"] = o.PackageName
	}
	if !utils.IsNil(o.Path) {
		toSerialize["Path"] = o.Path
	}
	if !utils.IsNil(o.Project) {
		toSerialize["Project"] = o.Project
	}
	if !utils.IsNil(o.Repository) {
		toSerialize["Repository"] = o.Repository
	}
	if !utils.IsNil(o.VersionName) {
		toSerialize["VersionName"] = o.VersionName
	}
	return toSerialize, nil
}

type NullableArtifactRepositoryFile struct {
	value *ArtifactRepositoryFile
	isSet bool
}

func (v NullableArtifactRepositoryFile) Get() *ArtifactRepositoryFile {
	return v.value
}

func (v *NullableArtifactRepositoryFile) Set(val *ArtifactRepositoryFile) {
	v.value = val
	v.isSet = true
}

func (v NullableArtifactRepositoryFile) IsSet() bool {
	return v.isSet
}

func (v *NullableArtifactRepositoryFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArtifactRepositoryFile(val *ArtifactRepositoryFile) *NullableArtifactRepositoryFile {
	return &NullableArtifactRepositoryFile{value: val, isSet: true}
}

func (v NullableArtifactRepositoryFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArtifactRepositoryFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


