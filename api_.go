/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	. "github.com/mindfocus/coding-sdk/models"
	"io"
	"net/http"
	"net/url"
)

// DefaultApiService DefaultApi service
type DefaultApiService service

type ApiArchiveTestRunRequest struct {
	ctx                   context.Context
	ApiService            *DefaultApiService
	authorization         *string
	action                *string
	archiveTestRunRequest *ArchiveTestRunRequest
}

// 认证信息
func (r ApiArchiveTestRunRequest) Authorization(authorization string) ApiArchiveTestRunRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiArchiveTestRunRequest) Action(action string) ApiArchiveTestRunRequest {
	r.action = &action
	return r
}

func (r ApiArchiveTestRunRequest) ArchiveTestRunRequest(archiveTestRunRequest ArchiveTestRunRequest) ApiArchiveTestRunRequest {
	r.archiveTestRunRequest = &archiveTestRunRequest
	return r
}

func (r ApiArchiveTestRunRequest) Execute() (*ArchiveTestRun200Response, *http.Response, error) {
	return r.ApiService.ArchiveTestRunExecute(r)
}

/*
ArchiveTestRun 测试计划归档

✨ 测试计划归档

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiArchiveTestRunRequest
*/
func (a *DefaultApiService) ArchiveTestRun(ctx context.Context) ApiArchiveTestRunRequest {
	return ApiArchiveTestRunRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ArchiveTestRun200Response
func (a *DefaultApiService) ArchiveTestRunExecute(r ApiArchiveTestRunRequest) (*ArchiveTestRun200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ArchiveTestRun200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ArchiveTestRun")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=ArchiveTestRun"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.archiveTestRunRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAttachResourceScopeToPolicyRequest struct {
	ctx                                context.Context
	ApiService                         *DefaultApiService
	authorization                      *string
	action                             *string
	attachResourceScopeToPolicyRequest *AttachResourceScopeToPolicyRequest
}

// 认证信息
func (r ApiAttachResourceScopeToPolicyRequest) Authorization(authorization string) ApiAttachResourceScopeToPolicyRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiAttachResourceScopeToPolicyRequest) Action(action string) ApiAttachResourceScopeToPolicyRequest {
	r.action = &action
	return r
}

func (r ApiAttachResourceScopeToPolicyRequest) AttachResourceScopeToPolicyRequest(attachResourceScopeToPolicyRequest AttachResourceScopeToPolicyRequest) ApiAttachResourceScopeToPolicyRequest {
	r.attachResourceScopeToPolicyRequest = &attachResourceScopeToPolicyRequest
	return r
}

func (r ApiAttachResourceScopeToPolicyRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.AttachResourceScopeToPolicyExecute(r)
}

/*
AttachResourceScopeToPolicy 权限组添加可用的资源，原有其它资源不受影响，若已存在的资源不再进行追加

✨ 为指定权限组添加可用的资源，原有其它资源不受影响，若已存在的资源不再进行追加

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAttachResourceScopeToPolicyRequest
*/
func (a *DefaultApiService) AttachResourceScopeToPolicy(ctx context.Context) ApiAttachResourceScopeToPolicyRequest {
	return ApiAttachResourceScopeToPolicyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) AttachResourceScopeToPolicyExecute(r ApiAttachResourceScopeToPolicyRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.AttachResourceScopeToPolicy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=AttachResourceScopeToPolicy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.attachResourceScopeToPolicyRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAttachToResourceRequest struct {
	ctx                       context.Context
	ApiService                *DefaultApiService
	authorization             *string
	action                    *string
	detachFromResourceRequest *DetachFromResourceRequest
}

// 认证信息
func (r ApiAttachToResourceRequest) Authorization(authorization string) ApiAttachToResourceRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiAttachToResourceRequest) Action(action string) ApiAttachToResourceRequest {
	r.action = &action
	return r
}

func (r ApiAttachToResourceRequest) DetachFromResourceRequest(detachFromResourceRequest DetachFromResourceRequest) ApiAttachToResourceRequest {
	r.detachFromResourceRequest = &detachFromResourceRequest
	return r
}

func (r ApiAttachToResourceRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.AttachToResourceExecute(r)
}

/*
AttachToResource 授权追加，原有其它授权不受影响，若授权已存在不再进行追加

✨ 授权追加，原有其它授权不受影响，若授权已存在不再进行追加

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAttachToResourceRequest
*/
func (a *DefaultApiService) AttachToResource(ctx context.Context) ApiAttachToResourceRequest {
	return ApiAttachToResourceRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) AttachToResourceExecute(r ApiAttachToResourceRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.AttachToResource")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=AttachToResource"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.detachFromResourceRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBindCdApplicationToProjectRequest struct {
	ctx                               context.Context
	ApiService                        *DefaultApiService
	authorization                     *string
	action                            *string
	bindCdApplicationToProjectRequest *BindCdApplicationToProjectRequest
}

// 认证信息
func (r ApiBindCdApplicationToProjectRequest) Authorization(authorization string) ApiBindCdApplicationToProjectRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiBindCdApplicationToProjectRequest) Action(action string) ApiBindCdApplicationToProjectRequest {
	r.action = &action
	return r
}

func (r ApiBindCdApplicationToProjectRequest) BindCdApplicationToProjectRequest(bindCdApplicationToProjectRequest BindCdApplicationToProjectRequest) ApiBindCdApplicationToProjectRequest {
	r.bindCdApplicationToProjectRequest = &bindCdApplicationToProjectRequest
	return r
}

func (r ApiBindCdApplicationToProjectRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.BindCdApplicationToProjectExecute(r)
}

/*
BindCdApplicationToProject 绑定 CD 应用到项目

✨ 绑定 CD 应用到项目

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiBindCdApplicationToProjectRequest
*/
func (a *DefaultApiService) BindCdApplicationToProject(ctx context.Context) ApiBindCdApplicationToProjectRequest {
	return ApiBindCdApplicationToProjectRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) BindCdApplicationToProjectExecute(r ApiBindCdApplicationToProjectRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.BindCdApplicationToProject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=BindCdApplicationToProject"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.bindCdApplicationToProjectRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBoundExternalDepotRequest struct {
	ctx                       context.Context
	ApiService                *DefaultApiService
	authorization             *string
	action                    *string
	boundExternalDepotRequest *BoundExternalDepotRequest
}

// 认证信息
func (r ApiBoundExternalDepotRequest) Authorization(authorization string) ApiBoundExternalDepotRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiBoundExternalDepotRequest) Action(action string) ApiBoundExternalDepotRequest {
	r.action = &action
	return r
}

func (r ApiBoundExternalDepotRequest) BoundExternalDepotRequest(boundExternalDepotRequest BoundExternalDepotRequest) ApiBoundExternalDepotRequest {
	r.boundExternalDepotRequest = &boundExternalDepotRequest
	return r
}

func (r ApiBoundExternalDepotRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.BoundExternalDepotExecute(r)
}

/*
BoundExternalDepot 外部仓库关联

✨ 关联外部仓库

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiBoundExternalDepotRequest
*/
func (a *DefaultApiService) BoundExternalDepot(ctx context.Context) ApiBoundExternalDepotRequest {
	return ApiBoundExternalDepotRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) BoundExternalDepotExecute(r ApiBoundExternalDepotRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.BoundExternalDepot")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=BoundExternalDepot"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.boundExternalDepotRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCancelCdPipelineRequest struct {
	ctx                     context.Context
	ApiService              *DefaultApiService
	authorization           *string
	action                  *string
	cancelCdPipelineRequest *CancelCdPipelineRequest
}

// 认证信息
func (r ApiCancelCdPipelineRequest) Authorization(authorization string) ApiCancelCdPipelineRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCancelCdPipelineRequest) Action(action string) ApiCancelCdPipelineRequest {
	r.action = &action
	return r
}

func (r ApiCancelCdPipelineRequest) CancelCdPipelineRequest(cancelCdPipelineRequest CancelCdPipelineRequest) ApiCancelCdPipelineRequest {
	r.cancelCdPipelineRequest = &cancelCdPipelineRequest
	return r
}

func (r ApiCancelCdPipelineRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.CancelCdPipelineExecute(r)
}

/*
CancelCdPipeline CD 部署流程取消执行

✨ 取消执行中的 CD 部署流程

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCancelCdPipelineRequest
*/
func (a *DefaultApiService) CancelCdPipeline(ctx context.Context) ApiCancelCdPipelineRequest {
	return ApiCancelCdPipelineRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) CancelCdPipelineExecute(r ApiCancelCdPipelineRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CancelCdPipeline")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CancelCdPipeline"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.cancelCdPipelineRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiClearCodingCIJobCacheRequest struct {
	ctx                          context.Context
	ApiService                   *DefaultApiService
	authorization                *string
	action                       *string
	clearCodingCIJobCacheRequest *ClearCodingCIJobCacheRequest
}

// 认证信息
func (r ApiClearCodingCIJobCacheRequest) Authorization(authorization string) ApiClearCodingCIJobCacheRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiClearCodingCIJobCacheRequest) Action(action string) ApiClearCodingCIJobCacheRequest {
	r.action = &action
	return r
}

func (r ApiClearCodingCIJobCacheRequest) ClearCodingCIJobCacheRequest(clearCodingCIJobCacheRequest ClearCodingCIJobCacheRequest) ApiClearCodingCIJobCacheRequest {
	r.clearCodingCIJobCacheRequest = &clearCodingCIJobCacheRequest
	return r
}

func (r ApiClearCodingCIJobCacheRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.ClearCodingCIJobCacheExecute(r)
}

/*
ClearCodingCIJobCache 构建计划缓存清理

✨ 清理构建计划缓存

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiClearCodingCIJobCacheRequest
*/
func (a *DefaultApiService) ClearCodingCIJobCache(ctx context.Context) ApiClearCodingCIJobCacheRequest {
	return ApiClearCodingCIJobCacheRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) ClearCodingCIJobCacheExecute(r ApiClearCodingCIJobCacheRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ClearCodingCIJobCache")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=ClearCodingCIJobCache"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.clearCodingCIJobCacheRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateArtifactCreditRequest struct {
	ctx                         context.Context
	ApiService                  *DefaultApiService
	authorization               *string
	action                      *string
	createArtifactCreditRequest *CreateArtifactCreditRequest
}

// 认证信息
func (r ApiCreateArtifactCreditRequest) Authorization(authorization string) ApiCreateArtifactCreditRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateArtifactCreditRequest) Action(action string) ApiCreateArtifactCreditRequest {
	r.action = &action
	return r
}

func (r ApiCreateArtifactCreditRequest) CreateArtifactCreditRequest(createArtifactCreditRequest CreateArtifactCreditRequest) ApiCreateArtifactCreditRequest {
	r.createArtifactCreditRequest = &createArtifactCreditRequest
	return r
}

func (r ApiCreateArtifactCreditRequest) Execute() (*CreateArtifactCredit200Response, *http.Response, error) {
	return r.ApiService.CreateArtifactCreditExecute(r)
}

/*
CreateArtifactCredit 制品授信清单创建

✨ 制品授信清单创建

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateArtifactCreditRequest
*/
func (a *DefaultApiService) CreateArtifactCredit(ctx context.Context) ApiCreateArtifactCreditRequest {
	return ApiCreateArtifactCreditRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateArtifactCredit200Response
func (a *DefaultApiService) CreateArtifactCreditExecute(r ApiCreateArtifactCreditRequest) (*CreateArtifactCredit200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateArtifactCredit200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateArtifactCredit")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateArtifactCredit"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createArtifactCreditRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateArtifactPropertiesRequest struct {
	ctx                             context.Context
	ApiService                      *DefaultApiService
	authorization                   *string
	action                          *string
	modifyArtifactPropertiesRequest *ModifyArtifactPropertiesRequest
}

// 认证信息
func (r ApiCreateArtifactPropertiesRequest) Authorization(authorization string) ApiCreateArtifactPropertiesRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateArtifactPropertiesRequest) Action(action string) ApiCreateArtifactPropertiesRequest {
	r.action = &action
	return r
}

func (r ApiCreateArtifactPropertiesRequest) ModifyArtifactPropertiesRequest(modifyArtifactPropertiesRequest ModifyArtifactPropertiesRequest) ApiCreateArtifactPropertiesRequest {
	r.modifyArtifactPropertiesRequest = &modifyArtifactPropertiesRequest
	return r
}

func (r ApiCreateArtifactPropertiesRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.CreateArtifactPropertiesExecute(r)
}

/*
CreateArtifactProperties 制品属性新增（指定版本）

✨ 制品属性新增（指定版本）

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateArtifactPropertiesRequest
*/
func (a *DefaultApiService) CreateArtifactProperties(ctx context.Context) ApiCreateArtifactPropertiesRequest {
	return ApiCreateArtifactPropertiesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) CreateArtifactPropertiesExecute(r ApiCreateArtifactPropertiesRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateArtifactProperties")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateArtifactProperties"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyArtifactPropertiesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateArtifactRepositoryRequest struct {
	ctx                             context.Context
	ApiService                      *DefaultApiService
	authorization                   *string
	action                          *string
	createArtifactRepositoryRequest *CreateArtifactRepositoryRequest
}

// 认证信息
func (r ApiCreateArtifactRepositoryRequest) Authorization(authorization string) ApiCreateArtifactRepositoryRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateArtifactRepositoryRequest) Action(action string) ApiCreateArtifactRepositoryRequest {
	r.action = &action
	return r
}

func (r ApiCreateArtifactRepositoryRequest) CreateArtifactRepositoryRequest(createArtifactRepositoryRequest CreateArtifactRepositoryRequest) ApiCreateArtifactRepositoryRequest {
	r.createArtifactRepositoryRequest = &createArtifactRepositoryRequest
	return r
}

func (r ApiCreateArtifactRepositoryRequest) Execute() (*CreateArtifactRepository200Response, *http.Response, error) {
	return r.ApiService.CreateArtifactRepositoryExecute(r)
}

/*
CreateArtifactRepository 制品仓库创建

✨ 制品仓库创建

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateArtifactRepositoryRequest
*/
func (a *DefaultApiService) CreateArtifactRepository(ctx context.Context) ApiCreateArtifactRepositoryRequest {
	return ApiCreateArtifactRepositoryRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateArtifactRepository200Response
func (a *DefaultApiService) CreateArtifactRepositoryExecute(r ApiCreateArtifactRepositoryRequest) (*CreateArtifactRepository200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateArtifactRepository200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateArtifactRepository")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateArtifactRepository"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createArtifactRepositoryRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateAttachmentPrepareSignUrlRequest struct {
	ctx                                   context.Context
	ApiService                            *DefaultApiService
	authorization                         *string
	action                                *string
	createAttachmentPrepareSignUrlRequest *CreateAttachmentPrepareSignUrlRequest
}

// 认证信息
func (r ApiCreateAttachmentPrepareSignUrlRequest) Authorization(authorization string) ApiCreateAttachmentPrepareSignUrlRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateAttachmentPrepareSignUrlRequest) Action(action string) ApiCreateAttachmentPrepareSignUrlRequest {
	r.action = &action
	return r
}

func (r ApiCreateAttachmentPrepareSignUrlRequest) CreateAttachmentPrepareSignUrlRequest(createAttachmentPrepareSignUrlRequest CreateAttachmentPrepareSignUrlRequest) ApiCreateAttachmentPrepareSignUrlRequest {
	r.createAttachmentPrepareSignUrlRequest = &createAttachmentPrepareSignUrlRequest
	return r
}

func (r ApiCreateAttachmentPrepareSignUrlRequest) Execute() (*CreateAttachmentPrepareSignUrl200Response, *http.Response, error) {
	return r.ApiService.CreateAttachmentPrepareSignUrlExecute(r)
}

/*
CreateAttachmentPrepareSignUrl 附件预上传信息生成

✨ 生成附件预上传信息

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateAttachmentPrepareSignUrlRequest
*/
func (a *DefaultApiService) CreateAttachmentPrepareSignUrl(ctx context.Context) ApiCreateAttachmentPrepareSignUrlRequest {
	return ApiCreateAttachmentPrepareSignUrlRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateAttachmentPrepareSignUrl200Response
func (a *DefaultApiService) CreateAttachmentPrepareSignUrlExecute(r ApiCreateAttachmentPrepareSignUrlRequest) (*CreateAttachmentPrepareSignUrl200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateAttachmentPrepareSignUrl200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateAttachmentPrepareSignUrl")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateAttachmentPrepareSignUrl"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createAttachmentPrepareSignUrlRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateBinaryFilesRequest struct {
	ctx                      context.Context
	ApiService               *DefaultApiService
	authorization            *string
	action                   *string
	createBinaryFilesRequest *CreateBinaryFilesRequest
}

// 认证信息
func (r ApiCreateBinaryFilesRequest) Authorization(authorization string) ApiCreateBinaryFilesRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateBinaryFilesRequest) Action(action string) ApiCreateBinaryFilesRequest {
	r.action = &action
	return r
}

func (r ApiCreateBinaryFilesRequest) CreateBinaryFilesRequest(createBinaryFilesRequest CreateBinaryFilesRequest) ApiCreateBinaryFilesRequest {
	r.createBinaryFilesRequest = &createBinaryFilesRequest
	return r
}

func (r ApiCreateBinaryFilesRequest) Execute() (*CreateBinaryFiles200Response, *http.Response, error) {
	return r.ApiService.CreateBinaryFilesExecute(r)
}

/*
CreateBinaryFiles Git文件-Git仓库创建二进制文件

✨ Git仓库创建二进制文件，文件总大小不能超过10Mb

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateBinaryFilesRequest
*/
func (a *DefaultApiService) CreateBinaryFiles(ctx context.Context) ApiCreateBinaryFilesRequest {
	return ApiCreateBinaryFilesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateBinaryFiles200Response
func (a *DefaultApiService) CreateBinaryFilesExecute(r ApiCreateBinaryFilesRequest) (*CreateBinaryFiles200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateBinaryFiles200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateBinaryFiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/CreateBinaryFiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createBinaryFilesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateBranchProtectionRequest struct {
	ctx                           context.Context
	ApiService                    *DefaultApiService
	authorization                 *string
	action                        *string
	createBranchProtectionRequest *CreateBranchProtectionRequest
}

// 认证信息
func (r ApiCreateBranchProtectionRequest) Authorization(authorization string) ApiCreateBranchProtectionRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateBranchProtectionRequest) Action(action string) ApiCreateBranchProtectionRequest {
	r.action = &action
	return r
}

func (r ApiCreateBranchProtectionRequest) CreateBranchProtectionRequest(createBranchProtectionRequest CreateBranchProtectionRequest) ApiCreateBranchProtectionRequest {
	r.createBranchProtectionRequest = &createBranchProtectionRequest
	return r
}

func (r ApiCreateBranchProtectionRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.CreateBranchProtectionExecute(r)
}

/*
CreateBranchProtection 仓库设置-新增代码保护规则

✨ 新增代码保护规则

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateBranchProtectionRequest
*/
func (a *DefaultApiService) CreateBranchProtection(ctx context.Context) ApiCreateBranchProtectionRequest {
	return ApiCreateBranchProtectionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) CreateBranchProtectionExecute(r ApiCreateBranchProtectionRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateBranchProtection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/CreateBranchProtection"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createBranchProtectionRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateBranchProtectionMemberRequest struct {
	ctx                                 context.Context
	ApiService                          *DefaultApiService
	authorization                       *string
	action                              *string
	createBranchProtectionMemberRequest *CreateBranchProtectionMemberRequest
}

// 认证信息
func (r ApiCreateBranchProtectionMemberRequest) Authorization(authorization string) ApiCreateBranchProtectionMemberRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateBranchProtectionMemberRequest) Action(action string) ApiCreateBranchProtectionMemberRequest {
	r.action = &action
	return r
}

func (r ApiCreateBranchProtectionMemberRequest) CreateBranchProtectionMemberRequest(createBranchProtectionMemberRequest CreateBranchProtectionMemberRequest) ApiCreateBranchProtectionMemberRequest {
	r.createBranchProtectionMemberRequest = &createBranchProtectionMemberRequest
	return r
}

func (r ApiCreateBranchProtectionMemberRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.CreateBranchProtectionMemberExecute(r)
}

/*
CreateBranchProtectionMember 仓库设置-新增保护分支规则管理员

✨ 新增保护分支规则管理员

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateBranchProtectionMemberRequest
*/
func (a *DefaultApiService) CreateBranchProtectionMember(ctx context.Context) ApiCreateBranchProtectionMemberRequest {
	return ApiCreateBranchProtectionMemberRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) CreateBranchProtectionMemberExecute(r ApiCreateBranchProtectionMemberRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateBranchProtectionMember")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/CreateBranchProtectionMember"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createBranchProtectionMemberRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateCaseResultRequest struct {
	ctx                     context.Context
	ApiService              *DefaultApiService
	authorization           *string
	action                  *string
	createCaseResultRequest *CreateCaseResultRequest
}

// 认证信息
func (r ApiCreateCaseResultRequest) Authorization(authorization string) ApiCreateCaseResultRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateCaseResultRequest) Action(action string) ApiCreateCaseResultRequest {
	r.action = &action
	return r
}

func (r ApiCreateCaseResultRequest) CreateCaseResultRequest(createCaseResultRequest CreateCaseResultRequest) ApiCreateCaseResultRequest {
	r.createCaseResultRequest = &createCaseResultRequest
	return r
}

func (r ApiCreateCaseResultRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.CreateCaseResultExecute(r)
}

/*
CreateCaseResult 测试用例添加测试结果

✨ 测试用例添加测试结果

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateCaseResultRequest
*/
func (a *DefaultApiService) CreateCaseResult(ctx context.Context) ApiCreateCaseResultRequest {
	return ApiCreateCaseResultRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) CreateCaseResultExecute(r ApiCreateCaseResultRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateCaseResult")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateCaseResult"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createCaseResultRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateCdCloudAccountRequest struct {
	ctx                         context.Context
	ApiService                  *DefaultApiService
	authorization               *string
	action                      *string
	createCdCloudAccountRequest *CreateCdCloudAccountRequest
}

// 认证信息
func (r ApiCreateCdCloudAccountRequest) Authorization(authorization string) ApiCreateCdCloudAccountRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateCdCloudAccountRequest) Action(action string) ApiCreateCdCloudAccountRequest {
	r.action = &action
	return r
}

func (r ApiCreateCdCloudAccountRequest) CreateCdCloudAccountRequest(createCdCloudAccountRequest CreateCdCloudAccountRequest) ApiCreateCdCloudAccountRequest {
	r.createCdCloudAccountRequest = &createCdCloudAccountRequest
	return r
}

func (r ApiCreateCdCloudAccountRequest) Execute() (*CreateCdCloudAccount200Response, *http.Response, error) {
	return r.ApiService.CreateCdCloudAccountExecute(r)
}

/*
CreateCdCloudAccount CD 云账号添加

✨ CD 云账号添加

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateCdCloudAccountRequest
*/
func (a *DefaultApiService) CreateCdCloudAccount(ctx context.Context) ApiCreateCdCloudAccountRequest {
	return ApiCreateCdCloudAccountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateCdCloudAccount200Response
func (a *DefaultApiService) CreateCdCloudAccountExecute(r ApiCreateCdCloudAccountRequest) (*CreateCdCloudAccount200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateCdCloudAccount200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateCdCloudAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateCdCloudAccount"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createCdCloudAccountRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateCdHostServerGroupRequest struct {
	ctx                            context.Context
	ApiService                     *DefaultApiService
	authorization                  *string
	action                         *string
	createCdHostServerGroupRequest *CreateCdHostServerGroupRequest
}

// 认证信息
func (r ApiCreateCdHostServerGroupRequest) Authorization(authorization string) ApiCreateCdHostServerGroupRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateCdHostServerGroupRequest) Action(action string) ApiCreateCdHostServerGroupRequest {
	r.action = &action
	return r
}

func (r ApiCreateCdHostServerGroupRequest) CreateCdHostServerGroupRequest(createCdHostServerGroupRequest CreateCdHostServerGroupRequest) ApiCreateCdHostServerGroupRequest {
	r.createCdHostServerGroupRequest = &createCdHostServerGroupRequest
	return r
}

func (r ApiCreateCdHostServerGroupRequest) Execute() (*CreateCdHostServerGroup200Response, *http.Response, error) {
	return r.ApiService.CreateCdHostServerGroupExecute(r)
}

/*
CreateCdHostServerGroup CD 主机组添加

✨ CD 主机组添加

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateCdHostServerGroupRequest
*/
func (a *DefaultApiService) CreateCdHostServerGroup(ctx context.Context) ApiCreateCdHostServerGroupRequest {
	return ApiCreateCdHostServerGroupRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateCdHostServerGroup200Response
func (a *DefaultApiService) CreateCdHostServerGroupExecute(r ApiCreateCdHostServerGroupRequest) (*CreateCdHostServerGroup200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateCdHostServerGroup200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateCdHostServerGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateCdHostServerGroup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createCdHostServerGroupRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateCdPipelineRequest struct {
	ctx                     context.Context
	ApiService              *DefaultApiService
	authorization           *string
	action                  *string
	createCdPipelineRequest *CreateCdPipelineRequest
}

// 认证信息
func (r ApiCreateCdPipelineRequest) Authorization(authorization string) ApiCreateCdPipelineRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateCdPipelineRequest) Action(action string) ApiCreateCdPipelineRequest {
	r.action = &action
	return r
}

func (r ApiCreateCdPipelineRequest) CreateCdPipelineRequest(createCdPipelineRequest CreateCdPipelineRequest) ApiCreateCdPipelineRequest {
	r.createCdPipelineRequest = &createCdPipelineRequest
	return r
}

func (r ApiCreateCdPipelineRequest) Execute() (*CreateCdPipeline200Response, *http.Response, error) {
	return r.ApiService.CreateCdPipelineExecute(r)
}

/*
CreateCdPipeline CD 部署流程创建

✨ CD 部署流程创建

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateCdPipelineRequest
*/
func (a *DefaultApiService) CreateCdPipeline(ctx context.Context) ApiCreateCdPipelineRequest {
	return ApiCreateCdPipelineRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateCdPipeline200Response
func (a *DefaultApiService) CreateCdPipelineExecute(r ApiCreateCdPipelineRequest) (*CreateCdPipeline200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateCdPipeline200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateCdPipeline")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateCdPipeline"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createCdPipelineRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateCdTaskRequest struct {
	ctx                 context.Context
	ApiService          *DefaultApiService
	authorization       *string
	action              *string
	createCdTaskRequest *CreateCdTaskRequest
}

// 认证信息
func (r ApiCreateCdTaskRequest) Authorization(authorization string) ApiCreateCdTaskRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateCdTaskRequest) Action(action string) ApiCreateCdTaskRequest {
	r.action = &action
	return r
}

func (r ApiCreateCdTaskRequest) CreateCdTaskRequest(createCdTaskRequest CreateCdTaskRequest) ApiCreateCdTaskRequest {
	r.createCdTaskRequest = &createCdTaskRequest
	return r
}

func (r ApiCreateCdTaskRequest) Execute() (*CreateCdTask200Response, *http.Response, error) {
	return r.ApiService.CreateCdTaskExecute(r)
}

/*
CreateCdTask CD 任务执行

✨ CD 任务执行

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateCdTaskRequest
*/
func (a *DefaultApiService) CreateCdTask(ctx context.Context) ApiCreateCdTaskRequest {
	return ApiCreateCdTaskRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateCdTask200Response
func (a *DefaultApiService) CreateCdTaskExecute(r ApiCreateCdTaskRequest) (*CreateCdTask200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateCdTask200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateCdTask")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateCdTask"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createCdTaskRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateCodingCIJobRequest struct {
	ctx                      context.Context
	ApiService               *DefaultApiService
	authorization            *string
	action                   *string
	createCodingCIJobRequest *CreateCodingCIJobRequest
}

// 认证信息
func (r ApiCreateCodingCIJobRequest) Authorization(authorization string) ApiCreateCodingCIJobRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateCodingCIJobRequest) Action(action string) ApiCreateCodingCIJobRequest {
	r.action = &action
	return r
}

func (r ApiCreateCodingCIJobRequest) CreateCodingCIJobRequest(createCodingCIJobRequest CreateCodingCIJobRequest) ApiCreateCodingCIJobRequest {
	r.createCodingCIJobRequest = &createCodingCIJobRequest
	return r
}

func (r ApiCreateCodingCIJobRequest) Execute() (*CreateCodingCIJob200Response, *http.Response, error) {
	return r.ApiService.CreateCodingCIJobExecute(r)
}

/*
CreateCodingCIJob 构建计划创建

✨ 创建构建计划

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateCodingCIJobRequest
*/
func (a *DefaultApiService) CreateCodingCIJob(ctx context.Context) ApiCreateCodingCIJobRequest {
	return ApiCreateCodingCIJobRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateCodingCIJob200Response
func (a *DefaultApiService) CreateCodingCIJobExecute(r ApiCreateCodingCIJobRequest) (*CreateCodingCIJob200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateCodingCIJob200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateCodingCIJob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateCodingCIJob"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createCodingCIJobRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateCodingCIJobByTeamTemplateRequest struct {
	ctx                                    context.Context
	ApiService                             *DefaultApiService
	authorization                          *string
	action                                 *string
	createCodingCIJobByTeamTemplateRequest *CreateCodingCIJobByTeamTemplateRequest
}

// 认证信息
func (r ApiCreateCodingCIJobByTeamTemplateRequest) Authorization(authorization string) ApiCreateCodingCIJobByTeamTemplateRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateCodingCIJobByTeamTemplateRequest) Action(action string) ApiCreateCodingCIJobByTeamTemplateRequest {
	r.action = &action
	return r
}

func (r ApiCreateCodingCIJobByTeamTemplateRequest) CreateCodingCIJobByTeamTemplateRequest(createCodingCIJobByTeamTemplateRequest CreateCodingCIJobByTeamTemplateRequest) ApiCreateCodingCIJobByTeamTemplateRequest {
	r.createCodingCIJobByTeamTemplateRequest = &createCodingCIJobByTeamTemplateRequest
	return r
}

func (r ApiCreateCodingCIJobByTeamTemplateRequest) Execute() (*CreateCodingCIJobByTeamTemplate200Response, *http.Response, error) {
	return r.ApiService.CreateCodingCIJobByTeamTemplateExecute(r)
}

/*
CreateCodingCIJobByTeamTemplate 构建计划-根据团队模版创建

✨ 根据团队模版创建构建计划

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateCodingCIJobByTeamTemplateRequest
*/
func (a *DefaultApiService) CreateCodingCIJobByTeamTemplate(ctx context.Context) ApiCreateCodingCIJobByTeamTemplateRequest {
	return ApiCreateCodingCIJobByTeamTemplateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateCodingCIJobByTeamTemplate200Response
func (a *DefaultApiService) CreateCodingCIJobByTeamTemplateExecute(r ApiCreateCodingCIJobByTeamTemplateRequest) (*CreateCodingCIJobByTeamTemplate200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateCodingCIJobByTeamTemplate200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateCodingCIJobByTeamTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateCodingCIJobByTeamTemplate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createCodingCIJobByTeamTemplateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateCodingProjectRequest struct {
	ctx                        context.Context
	ApiService                 *DefaultApiService
	action                     string
	createCodingProjectRequest *CreateCodingProjectRequest
}

func (r ApiCreateCodingProjectRequest) CreateCodingProjectRequest(createCodingProjectRequest CreateCodingProjectRequest) ApiCreateCodingProjectRequest {
	r.action = "CreateCodingProject"
	r.createCodingProjectRequest = &createCodingProjectRequest
	return r
}

func (r ApiCreateCodingProjectRequest) Execute() (*CreateCodingProject200Response, *http.Response, error) {
	return r.ApiService.CreateCodingProjectExecute(r)
}

/*
CreateCodingProject 项目创建

✨ Coding项目创建

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateCodingProjectRequest
*/
func (a *DefaultApiService) CreateCodingProject(ctx context.Context) ApiCreateCodingProjectRequest {
	return ApiCreateCodingProjectRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateCodingProject200Response
func (a *DefaultApiService) CreateCodingProjectExecute(r ApiCreateCodingProjectRequest) (*CreateCodingProject200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateCodingProject200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateCodingProject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateCodingProject"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createCodingProjectRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateDepartmentRequest struct {
	ctx                     context.Context
	ApiService              *DefaultApiService
	authorization           *string
	action                  *string
	createDepartmentRequest *CreateDepartmentRequest
}

// 认证信息
func (r ApiCreateDepartmentRequest) Authorization(authorization string) ApiCreateDepartmentRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateDepartmentRequest) Action(action string) ApiCreateDepartmentRequest {
	r.action = &action
	return r
}

func (r ApiCreateDepartmentRequest) CreateDepartmentRequest(createDepartmentRequest CreateDepartmentRequest) ApiCreateDepartmentRequest {
	r.createDepartmentRequest = &createDepartmentRequest
	return r
}

func (r ApiCreateDepartmentRequest) Execute() (*CreateDepartment200Response, *http.Response, error) {
	return r.ApiService.CreateDepartmentExecute(r)
}

/*
CreateDepartment 部门创建

✨ 部门创建

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateDepartmentRequest
*/
func (a *DefaultApiService) CreateDepartment(ctx context.Context) ApiCreateDepartmentRequest {
	return ApiCreateDepartmentRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateDepartment200Response
func (a *DefaultApiService) CreateDepartmentExecute(r ApiCreateDepartmentRequest) (*CreateDepartment200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateDepartment200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateDepartment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateDepartment"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createDepartmentRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateDepotByTemplateRequest struct {
	ctx                          context.Context
	ApiService                   *DefaultApiService
	authorization                *string
	action                       *string
	createDepotByTemplateRequest *CreateDepotByTemplateRequest
}

// 认证信息
func (r ApiCreateDepotByTemplateRequest) Authorization(authorization string) ApiCreateDepotByTemplateRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateDepotByTemplateRequest) Action(action string) ApiCreateDepotByTemplateRequest {
	r.action = &action
	return r
}

func (r ApiCreateDepotByTemplateRequest) CreateDepotByTemplateRequest(createDepotByTemplateRequest CreateDepotByTemplateRequest) ApiCreateDepotByTemplateRequest {
	r.createDepotByTemplateRequest = &createDepotByTemplateRequest
	return r
}

func (r ApiCreateDepotByTemplateRequest) Execute() (*CreateDepotByTemplate200Response, *http.Response, error) {
	return r.ApiService.CreateDepotByTemplateExecute(r)
}

/*
CreateDepotByTemplate 仓库信息-根据模板创建仓库

✨ 根据模板创建仓库

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateDepotByTemplateRequest
*/
func (a *DefaultApiService) CreateDepotByTemplate(ctx context.Context) ApiCreateDepotByTemplateRequest {
	return ApiCreateDepotByTemplateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateDepotByTemplate200Response
func (a *DefaultApiService) CreateDepotByTemplateExecute(r ApiCreateDepotByTemplateRequest) (*CreateDepotByTemplate200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateDepotByTemplate200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateDepotByTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/CreateDepotByTemplate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createDepotByTemplateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateDepotFilePushRuleRequest struct {
	ctx                            context.Context
	ApiService                     *DefaultApiService
	authorization                  *string
	action                         *string
	createDepotFilePushRuleRequest *CreateDepotFilePushRuleRequest
}

// 认证信息
func (r ApiCreateDepotFilePushRuleRequest) Authorization(authorization string) ApiCreateDepotFilePushRuleRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateDepotFilePushRuleRequest) Action(action string) ApiCreateDepotFilePushRuleRequest {
	r.action = &action
	return r
}

func (r ApiCreateDepotFilePushRuleRequest) CreateDepotFilePushRuleRequest(createDepotFilePushRuleRequest CreateDepotFilePushRuleRequest) ApiCreateDepotFilePushRuleRequest {
	r.createDepotFilePushRuleRequest = &createDepotFilePushRuleRequest
	return r
}

func (r ApiCreateDepotFilePushRuleRequest) Execute() (*DeleteDepotFilePushRuleDenyPrivilege200Response, *http.Response, error) {
	return r.ApiService.CreateDepotFilePushRuleExecute(r)
}

/*
CreateDepotFilePushRule 仓库设置-新增git仓库文件推送规则

✨ 新增 git 仓库文件推送规则

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateDepotFilePushRuleRequest
*/
func (a *DefaultApiService) CreateDepotFilePushRule(ctx context.Context) ApiCreateDepotFilePushRuleRequest {
	return ApiCreateDepotFilePushRuleRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteDepotFilePushRuleDenyPrivilege200Response
func (a *DefaultApiService) CreateDepotFilePushRuleExecute(r ApiCreateDepotFilePushRuleRequest) (*DeleteDepotFilePushRuleDenyPrivilege200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteDepotFilePushRuleDenyPrivilege200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateDepotFilePushRule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/CreateDepotFilePushRule"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createDepotFilePushRuleRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateDepotFilePushRulePrivilegeRequest struct {
	ctx                                         context.Context
	ApiService                                  *DefaultApiService
	authorization                               *string
	action                                      *string
	modifyDepotFilePushRuleDenyPrivilegeRequest *ModifyDepotFilePushRuleDenyPrivilegeRequest
}

// 认证信息
func (r ApiCreateDepotFilePushRulePrivilegeRequest) Authorization(authorization string) ApiCreateDepotFilePushRulePrivilegeRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateDepotFilePushRulePrivilegeRequest) Action(action string) ApiCreateDepotFilePushRulePrivilegeRequest {
	r.action = &action
	return r
}

func (r ApiCreateDepotFilePushRulePrivilegeRequest) ModifyDepotFilePushRuleDenyPrivilegeRequest(modifyDepotFilePushRuleDenyPrivilegeRequest ModifyDepotFilePushRuleDenyPrivilegeRequest) ApiCreateDepotFilePushRulePrivilegeRequest {
	r.modifyDepotFilePushRuleDenyPrivilegeRequest = &modifyDepotFilePushRuleDenyPrivilegeRequest
	return r
}

func (r ApiCreateDepotFilePushRulePrivilegeRequest) Execute() (*DeleteDepotFilePushRuleDenyPrivilege200Response, *http.Response, error) {
	return r.ApiService.CreateDepotFilePushRulePrivilegeExecute(r)
}

/*
CreateDepotFilePushRulePrivilege 仓库设置-新增git仓库文件推送规则特权者

✨ 新增git仓库文件推送规则特权者

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateDepotFilePushRulePrivilegeRequest
*/
func (a *DefaultApiService) CreateDepotFilePushRulePrivilege(ctx context.Context) ApiCreateDepotFilePushRulePrivilegeRequest {
	return ApiCreateDepotFilePushRulePrivilegeRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteDepotFilePushRuleDenyPrivilege200Response
func (a *DefaultApiService) CreateDepotFilePushRulePrivilegeExecute(r ApiCreateDepotFilePushRulePrivilegeRequest) (*DeleteDepotFilePushRuleDenyPrivilege200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteDepotFilePushRuleDenyPrivilege200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateDepotFilePushRulePrivilege")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/CreateDepotFilePushRulePrivilege"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyDepotFilePushRuleDenyPrivilegeRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateFileRequest struct {
	ctx               context.Context
	ApiService        *DefaultApiService
	authorization     *string
	action            *string
	createFileRequest *CreateFileRequest
}

// 认证信息
func (r ApiCreateFileRequest) Authorization(authorization string) ApiCreateFileRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateFileRequest) Action(action string) ApiCreateFileRequest {
	r.action = &action
	return r
}

func (r ApiCreateFileRequest) CreateFileRequest(createFileRequest CreateFileRequest) ApiCreateFileRequest {
	r.createFileRequest = &createFileRequest
	return r
}

func (r ApiCreateFileRequest) Execute() (*CreateFile200Response, *http.Response, error) {
	return r.ApiService.CreateFileExecute(r)
}

/*
CreateFile 文件创建

✨ "

	 文件上传

	  1. 获取预签名URL

	  Action： 固定为 DescribePreSignUploadUrl
	ProjectName: 项目名称
	ContentType: 内容类型，和web端的文件上传时content-type是一样的。可以参考web端上传文件时，Http Header: Content-Type
	FolderType :文件夹类型，0: 常规文件夹, 1:隐藏文件夹。 如果是用于项目协同上传附件的场景，配置为1；如果是上传到文件网盘则配置为0。
	FolderId:  若上传项目协同附件场景时，不需要配置或默认为0即可。若用于上传到文件网盘，可以设置文件夹ID, 用于文件存放位置，ID值通过  open api 【创建文件夹】获取。
	FileName: 保存的文件名。
	  POST https://e.coding.net/open-api
	Accept: application/json
	Authorization: token 79dfe***
	  {
	    "Action":"DescribePreSignUploadUrl",
	    "ProjectName":"zhishiguanli",
	    "FolderId":0,
	    "FolderType":1,
	    "FileName": "20220727_1.csv",
	    "ContentType": "image/jpeg"
	  }

	响应数据:
	UploadLink: 上传文件的URL
	StorageKey: 上传到存储的文件路径
	AuthToken: 用于校验身份数据的token，后续接口中使用
	headers: 上传时需要的token信息

	  ```
	  {
	    "Response": {
	      "RequestId": "99b1fbfb-8477-44b3-b19f-35acbcdbdf77",
	      "Data": {
	        "UploadLink": "https://coding-net-production-file-1257242599.cos.ap-shanghai.myqcloud.com/c69883ec-4ae6-45eb-a28d-b73dcfa83d02.csv?sign=q-sign-algorithm%3Dsha1%26q-ak%3DAKID7B14xvfnJxWtNpV95c1sAqIwms4_GnHMa-eCuULWfvXWTqp0qv8czbirX1BlXEXd%26q-sign-time%3D1661352589%3B1661354389%26q-key-time%3D1661352589%3B1661354389%26q-header-list%3Dhost%26q-url-param-list%3D%26q-signature%3D337c3118dd1385d33f5ada4c0492755ac7d00419",
	        "StorageKey": "c69883ec-4ae6-45eb-a28d-b73dcfa83d02.csv",
	        "Headers": "{\"x-cos-security-token\":\"0ZVlbeAyb6cqcbI2HcZg75xppfMACLPac9f0c5517a5d13d9731b0adb708c2ecdhK1-UdtMEqc-XpsQW5v1bB1BGeHXMlwutOM24SaUfX6lSP531QDfVrKJzLl8-NpCgKZfUE_-_Pg29lfqSvWpbd0D-4pENoBL5IDhkXO1RmmDncvxbwm_aMGRMlPL3YwQEyjPGv8KJ36ZUDm1k5ERnKYf2_OllQtoW5lSeRRnvCQUd7cAvvzSIl6WD-VxXJ2N9jX5Z_bh6B9zFXtCWjr0is550-QaLSM32V0NP0wPV4bBy9PwNLA32gxhsf24dfUZZsBZZVF67lfFGWgcK7SuZRrE_QPiEd9L4et-4KxBj4pXsAxCTWmATrcAonNq6xJ-\"}",
	        "AuthToken": "819321faa15086676c9c474b8823d6ce67aa4ec907a4e8a37fa396f990bd610c"
	      }
	    }
	  }
	  ```




	  2. 上传文件CreateFile
	  这个步骤需要客户端自己完成。
	  上传URL 可以参考 项目协同中描述内容中的上传文件的 COS URL。

	  2.1 COS上传
	参考脚本如下:
	#!/bin/bash

	  file=本地文件路径
	  storageKey=返回的StorageKey
	  url=https://域名/${storageKey}


	  # 腾讯云COS上传 curl, 注意Authorization值为sign参数，经过urldecode转化后的值。x-cos-security-token 使用 响应中的Headers中返回的值，

	  curl -X PUT "${url}" \
	  -H 'Authorization:q-sign-algorithm=sha1&q-ak=AKIDr0xilQrTFEUhvpLvJ9Ro3Ds_REhKTtYv-dXFbNBY8w1aDZR7rpUNPq6hXn_SdANN&q-sign-time=1661351394;1661353194&q-key-time=1661351394;1661353194&q-header-list=host&q-url-param-list=&q-signature=2574959eebb2ddf7dd5e6e19f30126c7a63cec58' \
	  -H 'x-cos-security-token:0ZVlbeAyb6cqcbI2HcZg75xppfMACLPaba476ee7278aba618b8794dcf090c81fhK1-UdtMEqc-XpsQW5v1bHRl8XcitKZd-0CGmDfln5OqFJigfAursov8MRS8h_abNT0Bns7F7D5tN26wXra6oBlvhxZ4wU11Zk2peuDXq4eWSUWOCtvf-3IaxoCs2KEwMtSFcds1byn_00Zj2YxG8ajHQrVT6Gtry9PW3ULfNe-YPpWaX_XArXpoyjWuaXpBjIFvEhR5sB0gGSTtyXhf9S6wWJAisNlwvOls5xAdnNRHJWyt8Td_f-Lc6yYIXV-aD9ZoGyl5NEQcxEip7GQRtb-p8QD9MG_rfYsJiQ0blMGQQGzexo7YHRhRTws6dlXU' \
	  -H 'user-agent:tencentcloud-cos-postman' \
	  -H 'cosclientagent:cos_mc_v4' \
	  -H 'cosclientip:219.136.173.47' -T "${file}"



	  2.2 minio上传
	  minio 上传脚本DEMO如下：
	  bucket=file-storage
	  file='～/Downloads/测试简单格式1.md (2).zip'

	  # 测试导入1.zip

	  storageKey=c5318506-8807-4612-9ad8-d751c863983d.zip
	  s3_key=***
	  s3_secret=***
	  host=minio.nh51daup.dev.coding.io

	  resource="/${bucket}/${storageKey}"

	  # content_type="application/octet-stream"

	  content_type="application/zip"
	  date=`date -R`
	  _signature="PUT\n\n${content_type}\n${date}\n${resource}"
	  signature=`echo -en ${_signature} | openssl sha1 -hmac ${s3_secret} -binary | base64`

	  # minio文件上传 curl 命令

	  curl -X PUT -T "${file}" \
	-H "Host: ${host}" \
	-H "Date: ${date}" \
	-H "Content-Type: ${content_type}" \
	-H "Authorization: AWS ${s3_key}:${signature}" \
	  http://${host}${resource}

	  3. 保存文件
	StorageKey: 获取预签名URL接口返回的 StorageKey
	AuthToken: 获取预签名URL接口返回的 AuthToken

	  POST https://e.coding.net/open-api
	Accept: application/json
	Authorization: token 79dfe1d**ab

	  {
	    "Action":"CreateFile",
	    "StorageKey": "2bdb7eea-57b4-495d-a5d0-67446822cea5.csv",
	    "AuthToken": "76ee1e30ef6df0552f0bd939f1f0359510d60d1806028f5c64fa31c116cf3f22"
	  }


	响应数据格式:
	Id: 保存后的文件ID。
	Name: 保存后的文件名称

	  ```
	  {
	    "Response": {
	      "RequestId": "9958d6b7-ead6-4674-9ae8-21cd3054282b",
	      "Data": {
	        "Id": 28909581,
	        "Name": "20220727_1.csv"
	      }
	    }
	  }
	  ```



	  4. 创建事项DEMO
	  更详细参数说明参考open api文档
	ProjectName: 项目名称
	  Name： 事项名称
	FileIds: 数组类型，CreateFile 后响应的ID列表


	  POST https://e.coding.net/open-api
	Accept: application/json
	Authorization: token 79dfe1d9e53a2**e0ddc57ab

	  ```
	  {
	    "Action":"CreateIssue",
	    "ProjectName":"zhishiguanli",
	    "Type":"DEFECT",
	    "Name":"需求清221101",
	    "Priority":"0",
	    "FileIds":[28909581]
	  }
	  ```


	  4.1 项目协同需求描述图片同步方案

	  ## 方案一

	  需求系统在通过 OpenAPI 写入 CODING 需求时，通过正则方式提取所有图片，调用 CODING OpenAPI 上传图片到文件网盘，再替换需求内图片地址。
	  方案前提：
	  需求系统展示需求数据来源客户需求系统。
	  具体步骤：

	  1. 需求系统创建或更新图片时，调用 COIDNG 项目协同创建或编辑 OpenAPI
	  2. 获取需求系统需求描述
	  3. 正则提取图片地址
	  4. 调用 CODING OpenAPI 上传图片到文件网盘，获取到文件 ID
	  5. 通过文件 ID 和项目 ID 拼接成 CODING 图片相对地址，/api/project/{projectId}/files/{imageFileId}/imagePreview
	  6. 保存到 CODING 系统前，通过字符替换原图片地址为/api/project/{projectId}/files/{imageFileId}/imagePreview
	  7. 完成

	  ## 方案二

	  CODING 侧在项目协同 OpenAPI 创建或者编辑需求时，将外站图片地址转存（或者不过滤）。

	  ## 结论

	  方案一，无需依赖 CODING 更新，可直接开始。
	  方案二，需要依赖 CODING 更新，正在评估预计时间。

	  5. 创建文件夹
	  该接口可用于文件网盘中创建文件夹。
	ProjectName: 项目名称
	FoldName: 文件夹名称
	ParentId: 父文件夹ID,如果是根路径，传 0。
	  POST https://e.coding.net/open-api
	Accept: application/json
	Authorization: token 79dfe1d9**a6e0ddc57ab

	  ```
	  {
	    "Action":"CreateFolder",
	    "ProjectName":"zhishiguanli",
	    "FoldName": "Hello-sub-test-1",
	    "ParentId": 0
	  }
	  ```

	  响应：

	  ```
	  {
	    "Response": {
	      "RequestId": "e48d9d36-7473-4fac-b005-6fdc46afa69f",
	      "Data": {
	        "Id": 28909737,
	        "Name": "Hello-sub-test-1"
	      }
	    }
	  }
	  ```

"

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateFileRequest
*/
func (a *DefaultApiService) CreateFile(ctx context.Context) ApiCreateFileRequest {
	return ApiCreateFileRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateFile200Response
func (a *DefaultApiService) CreateFileExecute(r ApiCreateFileRequest) (*CreateFile200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateFile200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateFile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateFile"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createFileRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateFolderRequest struct {
	ctx                 context.Context
	ApiService          *DefaultApiService
	authorization       *string
	action              *string
	createFolderRequest *CreateFolderRequest
}

// 认证信息
func (r ApiCreateFolderRequest) Authorization(authorization string) ApiCreateFolderRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateFolderRequest) Action(action string) ApiCreateFolderRequest {
	r.action = &action
	return r
}

func (r ApiCreateFolderRequest) CreateFolderRequest(createFolderRequest CreateFolderRequest) ApiCreateFolderRequest {
	r.createFolderRequest = &createFolderRequest
	return r
}

func (r ApiCreateFolderRequest) Execute() (*CreateFolder200Response, *http.Response, error) {
	return r.ApiService.CreateFolderExecute(r)
}

/*
CreateFolder 文件夹创建

✨ 文件夹创建

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateFolderRequest
*/
func (a *DefaultApiService) CreateFolder(ctx context.Context) ApiCreateFolderRequest {
	return ApiCreateFolderRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateFolder200Response
func (a *DefaultApiService) CreateFolderExecute(r ApiCreateFolderRequest) (*CreateFolder200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateFolder200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateFolder")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateFolder"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createFolderRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateGitBranchRequest struct {
	ctx                    context.Context
	ApiService             *DefaultApiService
	authorization          *string
	action                 *string
	createGitBranchRequest *CreateGitBranchRequest
}

// 认证信息
func (r ApiCreateGitBranchRequest) Authorization(authorization string) ApiCreateGitBranchRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateGitBranchRequest) Action(action string) ApiCreateGitBranchRequest {
	r.action = &action
	return r
}

func (r ApiCreateGitBranchRequest) CreateGitBranchRequest(createGitBranchRequest CreateGitBranchRequest) ApiCreateGitBranchRequest {
	r.createGitBranchRequest = &createGitBranchRequest
	return r
}

func (r ApiCreateGitBranchRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.CreateGitBranchExecute(r)
}

/*
CreateGitBranch 仓库分支-用于代码仓库新建分支

✨ 用于代码仓库新建分支

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateGitBranchRequest
*/
func (a *DefaultApiService) CreateGitBranch(ctx context.Context) ApiCreateGitBranchRequest {
	return ApiCreateGitBranchRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) CreateGitBranchExecute(r ApiCreateGitBranchRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateGitBranch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/CreateGitBranch"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createGitBranchRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateGitCommitRequest struct {
	ctx                    context.Context
	ApiService             *DefaultApiService
	authorization          *string
	action                 *string
	createGitCommitRequest *CreateGitCommitRequest
}

// 认证信息
func (r ApiCreateGitCommitRequest) Authorization(authorization string) ApiCreateGitCommitRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateGitCommitRequest) Action(action string) ApiCreateGitCommitRequest {
	r.action = &action
	return r
}

func (r ApiCreateGitCommitRequest) CreateGitCommitRequest(createGitCommitRequest CreateGitCommitRequest) ApiCreateGitCommitRequest {
	r.createGitCommitRequest = &createGitCommitRequest
	return r
}

func (r ApiCreateGitCommitRequest) Execute() (*CreateGitCommit200Response, *http.Response, error) {
	return r.ApiService.CreateGitCommitExecute(r)
}

/*
CreateGitCommit Git提交-创建一次提交

✨ 创建一次提交

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateGitCommitRequest
*/
func (a *DefaultApiService) CreateGitCommit(ctx context.Context) ApiCreateGitCommitRequest {
	return ApiCreateGitCommitRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateGitCommit200Response
func (a *DefaultApiService) CreateGitCommitExecute(r ApiCreateGitCommitRequest) (*CreateGitCommit200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateGitCommit200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateGitCommit")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/CreateGitCommit"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createGitCommitRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateGitCommitCommentRequest struct {
	ctx                           context.Context
	ApiService                    *DefaultApiService
	authorization                 *string
	action                        *string
	createGitCommitCommentRequest *CreateGitCommitCommentRequest
}

// 认证信息
func (r ApiCreateGitCommitCommentRequest) Authorization(authorization string) ApiCreateGitCommitCommentRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateGitCommitCommentRequest) Action(action string) ApiCreateGitCommitCommentRequest {
	r.action = &action
	return r
}

func (r ApiCreateGitCommitCommentRequest) CreateGitCommitCommentRequest(createGitCommitCommentRequest CreateGitCommitCommentRequest) ApiCreateGitCommitCommentRequest {
	r.createGitCommitCommentRequest = &createGitCommitCommentRequest
	return r
}

func (r ApiCreateGitCommitCommentRequest) Execute() (*CreateGitCommitComment200Response, *http.Response, error) {
	return r.ApiService.CreateGitCommitCommentExecute(r)
}

/*
CreateGitCommitComment Git提交-为某次提交创建一条评论

✨ 为某次提交创建一条评论

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateGitCommitCommentRequest
*/
func (a *DefaultApiService) CreateGitCommitComment(ctx context.Context) ApiCreateGitCommitCommentRequest {
	return ApiCreateGitCommitCommentRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateGitCommitComment200Response
func (a *DefaultApiService) CreateGitCommitCommentExecute(r ApiCreateGitCommitCommentRequest) (*CreateGitCommitComment200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateGitCommitComment200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateGitCommitComment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/CreateGitCommitComment"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createGitCommitCommentRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateGitCommitNoteRequest struct {
	ctx                        context.Context
	ApiService                 *DefaultApiService
	authorization              *string
	action                     *string
	createGitCommitNoteRequest *CreateGitCommitNoteRequest
}

// 认证信息
func (r ApiCreateGitCommitNoteRequest) Authorization(authorization string) ApiCreateGitCommitNoteRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateGitCommitNoteRequest) Action(action string) ApiCreateGitCommitNoteRequest {
	r.action = &action
	return r
}

func (r ApiCreateGitCommitNoteRequest) CreateGitCommitNoteRequest(createGitCommitNoteRequest CreateGitCommitNoteRequest) ApiCreateGitCommitNoteRequest {
	r.createGitCommitNoteRequest = &createGitCommitNoteRequest
	return r
}

func (r ApiCreateGitCommitNoteRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.CreateGitCommitNoteExecute(r)
}

/*
CreateGitCommitNote Git提交-创建提交注释。注意：对于 NotesRef 参数建议默认为空，因为git会使用默认的ref ：refs/notes/commits，如果填了这个参数，会用这个参数指定的ref来保存您的git note，有可能会覆盖您原有的ref。

✨ 创建提交注释,注意：对于 NotesRef 参数建议默认为空，因为 git 会使用默认的 ref ：refs/notes/commits，如果填了这个参数，会用这个参数指定的 ref 来保存您的 git note，有可能会覆盖您原有的 ref。

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateGitCommitNoteRequest
*/
func (a *DefaultApiService) CreateGitCommitNote(ctx context.Context) ApiCreateGitCommitNoteRequest {
	return ApiCreateGitCommitNoteRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) CreateGitCommitNoteExecute(r ApiCreateGitCommitNoteRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateGitCommitNote")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/CreateGitCommitNote"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createGitCommitNoteRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateGitDeployKeyRequest struct {
	ctx                       context.Context
	ApiService                *DefaultApiService
	authorization             *string
	action                    *string
	createGitDeployKeyRequest *CreateGitDeployKeyRequest
}

// 认证信息
func (r ApiCreateGitDeployKeyRequest) Authorization(authorization string) ApiCreateGitDeployKeyRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateGitDeployKeyRequest) Action(action string) ApiCreateGitDeployKeyRequest {
	r.action = &action
	return r
}

func (r ApiCreateGitDeployKeyRequest) CreateGitDeployKeyRequest(createGitDeployKeyRequest CreateGitDeployKeyRequest) ApiCreateGitDeployKeyRequest {
	r.createGitDeployKeyRequest = &createGitDeployKeyRequest
	return r
}

func (r ApiCreateGitDeployKeyRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.CreateGitDeployKeyExecute(r)
}

/*
CreateGitDeployKey 仓库设置-新建部署公钥

✨ 新建部署公钥

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateGitDeployKeyRequest
*/
func (a *DefaultApiService) CreateGitDeployKey(ctx context.Context) ApiCreateGitDeployKeyRequest {
	return ApiCreateGitDeployKeyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) CreateGitDeployKeyExecute(r ApiCreateGitDeployKeyRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateGitDeployKey")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/CreateGitDeployKey"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createGitDeployKeyRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateGitDepotRequest struct {
	ctx                   context.Context
	ApiService            *DefaultApiService
	authorization         *string
	action                *string
	createGitDepotRequest *CreateGitDepotRequest
}

// 认证信息
func (r ApiCreateGitDepotRequest) Authorization(authorization string) ApiCreateGitDepotRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateGitDepotRequest) Action(action string) ApiCreateGitDepotRequest {
	r.action = &action
	return r
}

func (r ApiCreateGitDepotRequest) CreateGitDepotRequest(createGitDepotRequest CreateGitDepotRequest) ApiCreateGitDepotRequest {
	r.createGitDepotRequest = &createGitDepotRequest
	return r
}

func (r ApiCreateGitDepotRequest) Execute() (*CreateGitDepot200Response, *http.Response, error) {
	return r.ApiService.CreateGitDepotExecute(r)
}

/*
CreateGitDepot 仓库信息-创建代码仓库

✨ 创建代码仓库

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateGitDepotRequest
*/
func (a *DefaultApiService) CreateGitDepot(ctx context.Context) ApiCreateGitDepotRequest {
	return ApiCreateGitDepotRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateGitDepot200Response
func (a *DefaultApiService) CreateGitDepotExecute(r ApiCreateGitDepotRequest) (*CreateGitDepot200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateGitDepot200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateGitDepot")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateGitDepot"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createGitDepotRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateGitFilesRequest struct {
	ctx                   context.Context
	ApiService            *DefaultApiService
	authorization         *string
	action                *string
	createGitFilesRequest *CreateGitFilesRequest
}

// 认证信息
func (r ApiCreateGitFilesRequest) Authorization(authorization string) ApiCreateGitFilesRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateGitFilesRequest) Action(action string) ApiCreateGitFilesRequest {
	r.action = &action
	return r
}

func (r ApiCreateGitFilesRequest) CreateGitFilesRequest(createGitFilesRequest CreateGitFilesRequest) ApiCreateGitFilesRequest {
	r.createGitFilesRequest = &createGitFilesRequest
	return r
}

func (r ApiCreateGitFilesRequest) Execute() (*CreateGitFiles200Response, *http.Response, error) {
	return r.ApiService.CreateGitFilesExecute(r)
}

/*
CreateGitFiles Git文件-创建仓库文件

✨ 创建仓库文件

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateGitFilesRequest
*/
func (a *DefaultApiService) CreateGitFiles(ctx context.Context) ApiCreateGitFilesRequest {
	return ApiCreateGitFilesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateGitFiles200Response
func (a *DefaultApiService) CreateGitFilesExecute(r ApiCreateGitFilesRequest) (*CreateGitFiles200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateGitFiles200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateGitFiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/CreateGitFiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createGitFilesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateGitMergeReqRequest struct {
	ctx                      context.Context
	ApiService               *DefaultApiService
	authorization            *string
	action                   *string
	createGitMergeReqRequest *CreateGitMergeReqRequest
}

// 认证信息
func (r ApiCreateGitMergeReqRequest) Authorization(authorization string) ApiCreateGitMergeReqRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateGitMergeReqRequest) Action(action string) ApiCreateGitMergeReqRequest {
	r.action = &action
	return r
}

func (r ApiCreateGitMergeReqRequest) CreateGitMergeReqRequest(createGitMergeReqRequest CreateGitMergeReqRequest) ApiCreateGitMergeReqRequest {
	r.createGitMergeReqRequest = &createGitMergeReqRequest
	return r
}

func (r ApiCreateGitMergeReqRequest) Execute() (*CreateGitMergeReq200Response, *http.Response, error) {
	return r.ApiService.CreateGitMergeReqExecute(r)
}

/*
CreateGitMergeReq 合并请求-创建git合并请求

✨ 创建git合并请求

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateGitMergeReqRequest
*/
func (a *DefaultApiService) CreateGitMergeReq(ctx context.Context) ApiCreateGitMergeReqRequest {
	return ApiCreateGitMergeReqRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateGitMergeReq200Response
func (a *DefaultApiService) CreateGitMergeReqExecute(r ApiCreateGitMergeReqRequest) (*CreateGitMergeReq200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateGitMergeReq200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateGitMergeReq")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/CreateGitMergeReq"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createGitMergeReqRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateGitMergeRequestRequest struct {
	ctx                          context.Context
	ApiService                   *DefaultApiService
	authorization                *string
	action                       *string
	createGitMergeRequestRequest *CreateGitMergeRequestRequest
}

// 认证信息
func (r ApiCreateGitMergeRequestRequest) Authorization(authorization string) ApiCreateGitMergeRequestRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateGitMergeRequestRequest) Action(action string) ApiCreateGitMergeRequestRequest {
	r.action = &action
	return r
}

func (r ApiCreateGitMergeRequestRequest) CreateGitMergeRequestRequest(createGitMergeRequestRequest CreateGitMergeRequestRequest) ApiCreateGitMergeRequestRequest {
	r.createGitMergeRequestRequest = &createGitMergeRequestRequest
	return r
}

func (r ApiCreateGitMergeRequestRequest) Execute() (*CreateGitMergeRequest200Response, *http.Response, error) {
	return r.ApiService.CreateGitMergeRequestExecute(r)
}

/*
CreateGitMergeRequest 合并请求-创建Git合并请求mr

✨ 创建 Git 合并请求mr

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateGitMergeRequestRequest
*/
func (a *DefaultApiService) CreateGitMergeRequest(ctx context.Context) ApiCreateGitMergeRequestRequest {
	return ApiCreateGitMergeRequestRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateGitMergeRequest200Response
func (a *DefaultApiService) CreateGitMergeRequestExecute(r ApiCreateGitMergeRequestRequest) (*CreateGitMergeRequest200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateGitMergeRequest200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateGitMergeRequest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/CreateGitMergeRequest"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createGitMergeRequestRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateGitProtectedTagRuleRequest struct {
	ctx                              context.Context
	ApiService                       *DefaultApiService
	authorization                    *string
	action                           *string
	createGitProtectedTagRuleRequest *CreateGitProtectedTagRuleRequest
}

// 认证信息
func (r ApiCreateGitProtectedTagRuleRequest) Authorization(authorization string) ApiCreateGitProtectedTagRuleRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateGitProtectedTagRuleRequest) Action(action string) ApiCreateGitProtectedTagRuleRequest {
	r.action = &action
	return r
}

func (r ApiCreateGitProtectedTagRuleRequest) CreateGitProtectedTagRuleRequest(createGitProtectedTagRuleRequest CreateGitProtectedTagRuleRequest) ApiCreateGitProtectedTagRuleRequest {
	r.createGitProtectedTagRuleRequest = &createGitProtectedTagRuleRequest
	return r
}

func (r ApiCreateGitProtectedTagRuleRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.CreateGitProtectedTagRuleExecute(r)
}

/*
CreateGitProtectedTagRule 仓库设置-创建标签保护规则

✨ 创建标签保护规则

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateGitProtectedTagRuleRequest
*/
func (a *DefaultApiService) CreateGitProtectedTagRule(ctx context.Context) ApiCreateGitProtectedTagRuleRequest {
	return ApiCreateGitProtectedTagRuleRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) CreateGitProtectedTagRuleExecute(r ApiCreateGitProtectedTagRuleRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateGitProtectedTagRule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/CreateGitProtectedTagRule"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createGitProtectedTagRuleRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateGitProtectedTagRulesRequest struct {
	ctx                               context.Context
	ApiService                        *DefaultApiService
	authorization                     *string
	action                            *string
	createGitProtectedTagRulesRequest *CreateGitProtectedTagRulesRequest
}

// 认证信息
func (r ApiCreateGitProtectedTagRulesRequest) Authorization(authorization string) ApiCreateGitProtectedTagRulesRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateGitProtectedTagRulesRequest) Action(action string) ApiCreateGitProtectedTagRulesRequest {
	r.action = &action
	return r
}

func (r ApiCreateGitProtectedTagRulesRequest) CreateGitProtectedTagRulesRequest(createGitProtectedTagRulesRequest CreateGitProtectedTagRulesRequest) ApiCreateGitProtectedTagRulesRequest {
	r.createGitProtectedTagRulesRequest = &createGitProtectedTagRulesRequest
	return r
}

func (r ApiCreateGitProtectedTagRulesRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.CreateGitProtectedTagRulesExecute(r)
}

/*
CreateGitProtectedTagRules 仓库设置-批量创建标签保护规则

✨ 批量创建标签保护规则

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateGitProtectedTagRulesRequest
*/
func (a *DefaultApiService) CreateGitProtectedTagRules(ctx context.Context) ApiCreateGitProtectedTagRulesRequest {
	return ApiCreateGitProtectedTagRulesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) CreateGitProtectedTagRulesExecute(r ApiCreateGitProtectedTagRulesRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateGitProtectedTagRules")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/CreateGitProtectedTagRules"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createGitProtectedTagRulesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateGitReleaseRequest struct {
	ctx                     context.Context
	ApiService              *DefaultApiService
	authorization           *string
	action                  *string
	createGitReleaseRequest *CreateGitReleaseRequest
}

// 认证信息
func (r ApiCreateGitReleaseRequest) Authorization(authorization string) ApiCreateGitReleaseRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateGitReleaseRequest) Action(action string) ApiCreateGitReleaseRequest {
	r.action = &action
	return r
}

func (r ApiCreateGitReleaseRequest) CreateGitReleaseRequest(createGitReleaseRequest CreateGitReleaseRequest) ApiCreateGitReleaseRequest {
	r.createGitReleaseRequest = &createGitReleaseRequest
	return r
}

func (r ApiCreateGitReleaseRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.CreateGitReleaseExecute(r)
}

/*
CreateGitRelease 版本信息-新建git版本

✨ 新建 git 版本

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateGitReleaseRequest
*/
func (a *DefaultApiService) CreateGitRelease(ctx context.Context) ApiCreateGitReleaseRequest {
	return ApiCreateGitReleaseRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) CreateGitReleaseExecute(r ApiCreateGitReleaseRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateGitRelease")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/CreateGitRelease"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createGitReleaseRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateGitTagRequest struct {
	ctx                 context.Context
	ApiService          *DefaultApiService
	authorization       *string
	action              *string
	createGitTagRequest *CreateGitTagRequest
}

// 认证信息
func (r ApiCreateGitTagRequest) Authorization(authorization string) ApiCreateGitTagRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateGitTagRequest) Action(action string) ApiCreateGitTagRequest {
	r.action = &action
	return r
}

func (r ApiCreateGitTagRequest) CreateGitTagRequest(createGitTagRequest CreateGitTagRequest) ApiCreateGitTagRequest {
	r.createGitTagRequest = &createGitTagRequest
	return r
}

func (r ApiCreateGitTagRequest) Execute() (*CreateGitTag200Response, *http.Response, error) {
	return r.ApiService.CreateGitTagExecute(r)
}

/*
CreateGitTag 标签信息-创建标签

✨ 创建标签

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateGitTagRequest
*/
func (a *DefaultApiService) CreateGitTag(ctx context.Context) ApiCreateGitTagRequest {
	return ApiCreateGitTagRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateGitTag200Response
func (a *DefaultApiService) CreateGitTagExecute(r ApiCreateGitTagRequest) (*CreateGitTag200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateGitTag200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateGitTag")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/CreateGitTag"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createGitTagRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateIssueRequest struct {
	ctx                context.Context
	ApiService         *DefaultApiService
	authorization      *string
	action             *string
	createIssueRequest *CreateIssueRequest
}

// 认证信息
func (r ApiCreateIssueRequest) Authorization(authorization string) ApiCreateIssueRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateIssueRequest) Action(action string) ApiCreateIssueRequest {
	r.action = &action
	return r
}

func (r ApiCreateIssueRequest) CreateIssueRequest(createIssueRequest CreateIssueRequest) ApiCreateIssueRequest {
	r.createIssueRequest = &createIssueRequest
	return r
}

func (r ApiCreateIssueRequest) Execute() (*CreateIssue200Response, *http.Response, error) {
	return r.ApiService.CreateIssueExecute(r)
}

/*
CreateIssue 事项创建

✨ 创建事项

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateIssueRequest
*/
func (a *DefaultApiService) CreateIssue(ctx context.Context) ApiCreateIssueRequest {
	return ApiCreateIssueRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateIssue200Response
func (a *DefaultApiService) CreateIssueExecute(r ApiCreateIssueRequest) (*CreateIssue200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateIssue200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateIssue")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/CreateIssue"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createIssueRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateIssueBlockRequest struct {
	ctx                     context.Context
	ApiService              *DefaultApiService
	authorization           *string
	action                  *string
	createIssueBlockRequest *CreateIssueBlockRequest
}

// 认证信息
func (r ApiCreateIssueBlockRequest) Authorization(authorization string) ApiCreateIssueBlockRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateIssueBlockRequest) Action(action string) ApiCreateIssueBlockRequest {
	r.action = &action
	return r
}

func (r ApiCreateIssueBlockRequest) CreateIssueBlockRequest(createIssueBlockRequest CreateIssueBlockRequest) ApiCreateIssueBlockRequest {
	r.createIssueBlockRequest = &createIssueBlockRequest
	return r
}

func (r ApiCreateIssueBlockRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.CreateIssueBlockExecute(r)
}

/*
CreateIssueBlock 前置事项添加

✨ 添加前置事项

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateIssueBlockRequest
*/
func (a *DefaultApiService) CreateIssueBlock(ctx context.Context) ApiCreateIssueBlockRequest {
	return ApiCreateIssueBlockRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) CreateIssueBlockExecute(r ApiCreateIssueBlockRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateIssueBlock")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateIssueBlock"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createIssueBlockRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateIssueCommentRequest struct {
	ctx                       context.Context
	ApiService                *DefaultApiService
	authorization             *string
	action                    *string
	createIssueCommentRequest *CreateIssueCommentRequest
}

// 认证信息
func (r ApiCreateIssueCommentRequest) Authorization(authorization string) ApiCreateIssueCommentRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateIssueCommentRequest) Action(action string) ApiCreateIssueCommentRequest {
	r.action = &action
	return r
}

func (r ApiCreateIssueCommentRequest) CreateIssueCommentRequest(createIssueCommentRequest CreateIssueCommentRequest) ApiCreateIssueCommentRequest {
	r.createIssueCommentRequest = &createIssueCommentRequest
	return r
}

func (r ApiCreateIssueCommentRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.CreateIssueCommentExecute(r)
}

/*
CreateIssueComment 事项评论创建

✨ 创建事项评论

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateIssueCommentRequest
*/
func (a *DefaultApiService) CreateIssueComment(ctx context.Context) ApiCreateIssueCommentRequest {
	return ApiCreateIssueCommentRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) CreateIssueCommentExecute(r ApiCreateIssueCommentRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateIssueComment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateIssueComment"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createIssueCommentRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateIssueModuleRequest struct {
	ctx                      context.Context
	ApiService               *DefaultApiService
	authorization            *string
	action                   *string
	createIssueModuleRequest *CreateIssueModuleRequest
}

// 认证信息
func (r ApiCreateIssueModuleRequest) Authorization(authorization string) ApiCreateIssueModuleRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateIssueModuleRequest) Action(action string) ApiCreateIssueModuleRequest {
	r.action = &action
	return r
}

func (r ApiCreateIssueModuleRequest) CreateIssueModuleRequest(createIssueModuleRequest CreateIssueModuleRequest) ApiCreateIssueModuleRequest {
	r.createIssueModuleRequest = &createIssueModuleRequest
	return r
}

func (r ApiCreateIssueModuleRequest) Execute() (*CreateIssueModule200Response, *http.Response, error) {
	return r.ApiService.CreateIssueModuleExecute(r)
}

/*
CreateIssueModule 事项模块创建

✨ 创建事项模块

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateIssueModuleRequest
*/
func (a *DefaultApiService) CreateIssueModule(ctx context.Context) ApiCreateIssueModuleRequest {
	return ApiCreateIssueModuleRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateIssueModule200Response
func (a *DefaultApiService) CreateIssueModuleExecute(r ApiCreateIssueModuleRequest) (*CreateIssueModule200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateIssueModule200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateIssueModule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/CreateIssueModule"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createIssueModuleRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateIssueWorkHoursRequest struct {
	ctx                         context.Context
	ApiService                  *DefaultApiService
	authorization               *string
	action                      *string
	createIssueWorkHoursRequest *CreateIssueWorkHoursRequest
}

// 认证信息
func (r ApiCreateIssueWorkHoursRequest) Authorization(authorization string) ApiCreateIssueWorkHoursRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateIssueWorkHoursRequest) Action(action string) ApiCreateIssueWorkHoursRequest {
	r.action = &action
	return r
}

func (r ApiCreateIssueWorkHoursRequest) CreateIssueWorkHoursRequest(createIssueWorkHoursRequest CreateIssueWorkHoursRequest) ApiCreateIssueWorkHoursRequest {
	r.createIssueWorkHoursRequest = &createIssueWorkHoursRequest
	return r
}

func (r ApiCreateIssueWorkHoursRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.CreateIssueWorkHoursExecute(r)
}

/*
CreateIssueWorkHours 工时登记

✨ 登记工时

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateIssueWorkHoursRequest
*/
func (a *DefaultApiService) CreateIssueWorkHours(ctx context.Context) ApiCreateIssueWorkHoursRequest {
	return ApiCreateIssueWorkHoursRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) CreateIssueWorkHoursExecute(r ApiCreateIssueWorkHoursRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateIssueWorkHours")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateIssueWorkHours"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createIssueWorkHoursRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateIterationRequest struct {
	ctx                    context.Context
	ApiService             *DefaultApiService
	authorization          *string
	action                 *string
	createIterationRequest *CreateIterationRequest
}

// 认证信息
func (r ApiCreateIterationRequest) Authorization(authorization string) ApiCreateIterationRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateIterationRequest) Action(action string) ApiCreateIterationRequest {
	r.action = &action
	return r
}

func (r ApiCreateIterationRequest) CreateIterationRequest(createIterationRequest CreateIterationRequest) ApiCreateIterationRequest {
	r.createIterationRequest = &createIterationRequest
	return r
}

func (r ApiCreateIterationRequest) Execute() (*CreateIteration200Response, *http.Response, error) {
	return r.ApiService.CreateIterationExecute(r)
}

/*
CreateIteration 迭代创建

✨ 创建迭代

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateIterationRequest
*/
func (a *DefaultApiService) CreateIteration(ctx context.Context) ApiCreateIterationRequest {
	return ApiCreateIterationRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateIteration200Response
func (a *DefaultApiService) CreateIterationExecute(r ApiCreateIterationRequest) (*CreateIteration200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateIteration200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateIteration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateIteration"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createIterationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateMemberSshKeyRequest struct {
	ctx                       context.Context
	ApiService                *DefaultApiService
	authorization             *string
	action                    *string
	createMemberSshKeyRequest *CreateMemberSshKeyRequest
}

// 认证信息
func (r ApiCreateMemberSshKeyRequest) Authorization(authorization string) ApiCreateMemberSshKeyRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateMemberSshKeyRequest) Action(action string) ApiCreateMemberSshKeyRequest {
	r.action = &action
	return r
}

func (r ApiCreateMemberSshKeyRequest) CreateMemberSshKeyRequest(createMemberSshKeyRequest CreateMemberSshKeyRequest) ApiCreateMemberSshKeyRequest {
	r.createMemberSshKeyRequest = &createMemberSshKeyRequest
	return r
}

func (r ApiCreateMemberSshKeyRequest) Execute() (*CreateMemberSshKey200Response, *http.Response, error) {
	return r.ApiService.CreateMemberSshKeyExecute(r)
}

/*
CreateMemberSshKey 仓库设置-导入团队成员SSH公钥

✨ 导入团队成员SSH公钥

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateMemberSshKeyRequest
*/
func (a *DefaultApiService) CreateMemberSshKey(ctx context.Context) ApiCreateMemberSshKeyRequest {
	return ApiCreateMemberSshKeyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateMemberSshKey200Response
func (a *DefaultApiService) CreateMemberSshKeyExecute(r ApiCreateMemberSshKeyRequest) (*CreateMemberSshKey200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateMemberSshKey200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateMemberSshKey")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/CreateMemberSshKey"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createMemberSshKeyRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateMergeRequestNoteRequest struct {
	ctx                           context.Context
	ApiService                    *DefaultApiService
	authorization                 *string
	action                        *string
	createMergeRequestNoteRequest *CreateMergeRequestNoteRequest
}

// 认证信息
func (r ApiCreateMergeRequestNoteRequest) Authorization(authorization string) ApiCreateMergeRequestNoteRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateMergeRequestNoteRequest) Action(action string) ApiCreateMergeRequestNoteRequest {
	r.action = &action
	return r
}

func (r ApiCreateMergeRequestNoteRequest) CreateMergeRequestNoteRequest(createMergeRequestNoteRequest CreateMergeRequestNoteRequest) ApiCreateMergeRequestNoteRequest {
	r.createMergeRequestNoteRequest = &createMergeRequestNoteRequest
	return r
}

func (r ApiCreateMergeRequestNoteRequest) Execute() (*CreateMergeRequestNote200Response, *http.Response, error) {
	return r.ApiService.CreateMergeRequestNoteExecute(r)
}

/*
CreateMergeRequestNote 合并请求-创建合并请求行评论和改动文件diff行评论

✨ 创建合并请求行评论和改动文件diff行评论

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateMergeRequestNoteRequest
*/
func (a *DefaultApiService) CreateMergeRequestNote(ctx context.Context) ApiCreateMergeRequestNoteRequest {
	return ApiCreateMergeRequestNoteRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateMergeRequestNote200Response
func (a *DefaultApiService) CreateMergeRequestNoteExecute(r ApiCreateMergeRequestNoteRequest) (*CreateMergeRequestNote200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateMergeRequestNote200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateMergeRequestNote")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/CreateMergeRequestNote"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createMergeRequestNoteRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateMergeRequestReviewerRequest struct {
	ctx                               context.Context
	ApiService                        *DefaultApiService
	authorization                     *string
	action                            *string
	createMergeRequestReviewerRequest *CreateMergeRequestReviewerRequest
}

// 认证信息
func (r ApiCreateMergeRequestReviewerRequest) Authorization(authorization string) ApiCreateMergeRequestReviewerRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateMergeRequestReviewerRequest) Action(action string) ApiCreateMergeRequestReviewerRequest {
	r.action = &action
	return r
}

func (r ApiCreateMergeRequestReviewerRequest) CreateMergeRequestReviewerRequest(createMergeRequestReviewerRequest CreateMergeRequestReviewerRequest) ApiCreateMergeRequestReviewerRequest {
	r.createMergeRequestReviewerRequest = &createMergeRequestReviewerRequest
	return r
}

func (r ApiCreateMergeRequestReviewerRequest) Execute() (*CreateMergeRequestReviewer200Response, *http.Response, error) {
	return r.ApiService.CreateMergeRequestReviewerExecute(r)
}

/*
CreateMergeRequestReviewer 合并请求-新增合并请求评审者

✨ 新增合并请求评审者

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateMergeRequestReviewerRequest
*/
func (a *DefaultApiService) CreateMergeRequestReviewer(ctx context.Context) ApiCreateMergeRequestReviewerRequest {
	return ApiCreateMergeRequestReviewerRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateMergeRequestReviewer200Response
func (a *DefaultApiService) CreateMergeRequestReviewerExecute(r ApiCreateMergeRequestReviewerRequest) (*CreateMergeRequestReviewer200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateMergeRequestReviewer200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateMergeRequestReviewer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/CreateMergeRequestReviewer"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createMergeRequestReviewerRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreatePolicyRequest struct {
	ctx                 context.Context
	ApiService          *DefaultApiService
	authorization       *string
	action              *string
	createPolicyRequest *CreatePolicyRequest
}

// 认证信息
func (r ApiCreatePolicyRequest) Authorization(authorization string) ApiCreatePolicyRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreatePolicyRequest) Action(action string) ApiCreatePolicyRequest {
	r.action = &action
	return r
}

func (r ApiCreatePolicyRequest) CreatePolicyRequest(createPolicyRequest CreatePolicyRequest) ApiCreatePolicyRequest {
	r.createPolicyRequest = &createPolicyRequest
	return r
}

func (r ApiCreatePolicyRequest) Execute() (*ModifyPolicy200Response, *http.Response, error) {
	return r.ApiService.CreatePolicyExecute(r)
}

/*
CreatePolicy 权限组创建

✨ 权限组创建

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreatePolicyRequest
*/
func (a *DefaultApiService) CreatePolicy(ctx context.Context) ApiCreatePolicyRequest {
	return ApiCreatePolicyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModifyPolicy200Response
func (a *DefaultApiService) CreatePolicyExecute(r ApiCreatePolicyRequest) (*ModifyPolicy200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModifyPolicy200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreatePolicy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreatePolicy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createPolicyRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateProgramRequest struct {
	ctx                  context.Context
	ApiService           *DefaultApiService
	authorization        *string
	action               *string
	createProgramRequest *CreateProgramRequest
}

// 认证信息
func (r ApiCreateProgramRequest) Authorization(authorization string) ApiCreateProgramRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateProgramRequest) Action(action string) ApiCreateProgramRequest {
	r.action = &action
	return r
}

func (r ApiCreateProgramRequest) CreateProgramRequest(createProgramRequest CreateProgramRequest) ApiCreateProgramRequest {
	r.createProgramRequest = &createProgramRequest
	return r
}

func (r ApiCreateProgramRequest) Execute() (*CreateProgram200Response, *http.Response, error) {
	return r.ApiService.CreateProgramExecute(r)
}

/*
CreateProgram 项目集创建

✨ 项目集创建

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateProgramRequest
*/
func (a *DefaultApiService) CreateProgram(ctx context.Context) ApiCreateProgramRequest {
	return ApiCreateProgramRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateProgram200Response
func (a *DefaultApiService) CreateProgramExecute(r ApiCreateProgramRequest) (*CreateProgram200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateProgram200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateProgram")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateProgram"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createProgramRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateProgramMemberPolicyRequest struct {
	ctx                              context.Context
	ApiService                       *DefaultApiService
	authorization                    *string
	action                           *string
	createProgramMemberPolicyRequest *CreateProgramMemberPolicyRequest
}

// 认证信息
func (r ApiCreateProgramMemberPolicyRequest) Authorization(authorization string) ApiCreateProgramMemberPolicyRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateProgramMemberPolicyRequest) Action(action string) ApiCreateProgramMemberPolicyRequest {
	r.action = &action
	return r
}

func (r ApiCreateProgramMemberPolicyRequest) CreateProgramMemberPolicyRequest(createProgramMemberPolicyRequest CreateProgramMemberPolicyRequest) ApiCreateProgramMemberPolicyRequest {
	r.createProgramMemberPolicyRequest = &createProgramMemberPolicyRequest
	return r
}

func (r ApiCreateProgramMemberPolicyRequest) Execute() (*CreateProgramMemberPolicy200Response, *http.Response, error) {
	return r.ApiService.CreateProgramMemberPolicyExecute(r)
}

/*
CreateProgramMemberPolicy 项目集成员权限组添加

✨ 项目集成员权限组添加

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateProgramMemberPolicyRequest
*/
func (a *DefaultApiService) CreateProgramMemberPolicy(ctx context.Context) ApiCreateProgramMemberPolicyRequest {
	return ApiCreateProgramMemberPolicyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateProgramMemberPolicy200Response
func (a *DefaultApiService) CreateProgramMemberPolicyExecute(r ApiCreateProgramMemberPolicyRequest) (*CreateProgramMemberPolicy200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateProgramMemberPolicy200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateProgramMemberPolicy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateProgramMemberPolicy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createProgramMemberPolicyRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateProgramProjectsRequest struct {
	ctx                          context.Context
	ApiService                   *DefaultApiService
	authorization                *string
	action                       *string
	createProgramProjectsRequest *CreateProgramProjectsRequest
}

// 认证信息
func (r ApiCreateProgramProjectsRequest) Authorization(authorization string) ApiCreateProgramProjectsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateProgramProjectsRequest) Action(action string) ApiCreateProgramProjectsRequest {
	r.action = &action
	return r
}

func (r ApiCreateProgramProjectsRequest) CreateProgramProjectsRequest(createProgramProjectsRequest CreateProgramProjectsRequest) ApiCreateProgramProjectsRequest {
	r.createProgramProjectsRequest = &createProgramProjectsRequest
	return r
}

func (r ApiCreateProgramProjectsRequest) Execute() (*CreateProgramProjects200Response, *http.Response, error) {
	return r.ApiService.CreateProgramProjectsExecute(r)
}

/*
CreateProgramProjects 项目集中添加项目

✨ 项目集中添加项目

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateProgramProjectsRequest
*/
func (a *DefaultApiService) CreateProgramProjects(ctx context.Context) ApiCreateProgramProjectsRequest {
	return ApiCreateProgramProjectsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateProgramProjects200Response
func (a *DefaultApiService) CreateProgramProjectsExecute(r ApiCreateProgramProjectsRequest) (*CreateProgramProjects200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateProgramProjects200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateProgramProjects")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateProgramProjects"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createProgramProjectsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateProjectAnnouncementRequest struct {
	ctx                              context.Context
	ApiService                       *DefaultApiService
	authorization                    *string
	action                           *string
	createProjectAnnouncementRequest *CreateProjectAnnouncementRequest
}

// 认证信息
func (r ApiCreateProjectAnnouncementRequest) Authorization(authorization string) ApiCreateProjectAnnouncementRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateProjectAnnouncementRequest) Action(action string) ApiCreateProjectAnnouncementRequest {
	r.action = &action
	return r
}

func (r ApiCreateProjectAnnouncementRequest) CreateProjectAnnouncementRequest(createProjectAnnouncementRequest CreateProjectAnnouncementRequest) ApiCreateProjectAnnouncementRequest {
	r.createProjectAnnouncementRequest = &createProjectAnnouncementRequest
	return r
}

func (r ApiCreateProjectAnnouncementRequest) Execute() (*CreateProjectAnnouncement200Response, *http.Response, error) {
	return r.ApiService.CreateProjectAnnouncementExecute(r)
}

/*
CreateProjectAnnouncement 项目公告创建

✨ 项目公告创建

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateProjectAnnouncementRequest
*/
func (a *DefaultApiService) CreateProjectAnnouncement(ctx context.Context) ApiCreateProjectAnnouncementRequest {
	return ApiCreateProjectAnnouncementRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateProjectAnnouncement200Response
func (a *DefaultApiService) CreateProjectAnnouncementExecute(r ApiCreateProjectAnnouncementRequest) (*CreateProjectAnnouncement200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateProjectAnnouncement200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateProjectAnnouncement")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateProjectAnnouncement"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createProjectAnnouncementRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateProjectLabelRequest struct {
	ctx                       context.Context
	ApiService                *DefaultApiService
	authorization             *string
	action                    *string
	createProjectLabelRequest *CreateProjectLabelRequest
}

// 认证信息
func (r ApiCreateProjectLabelRequest) Authorization(authorization string) ApiCreateProjectLabelRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateProjectLabelRequest) Action(action string) ApiCreateProjectLabelRequest {
	r.action = &action
	return r
}

func (r ApiCreateProjectLabelRequest) CreateProjectLabelRequest(createProjectLabelRequest CreateProjectLabelRequest) ApiCreateProjectLabelRequest {
	r.createProjectLabelRequest = &createProjectLabelRequest
	return r
}

func (r ApiCreateProjectLabelRequest) Execute() (*ModifyProjectLabel200Response, *http.Response, error) {
	return r.ApiService.CreateProjectLabelExecute(r)
}

/*
CreateProjectLabel 项目标签创建

✨ 项目标签创建

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateProjectLabelRequest
*/
func (a *DefaultApiService) CreateProjectLabel(ctx context.Context) ApiCreateProjectLabelRequest {
	return ApiCreateProjectLabelRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModifyProjectLabel200Response
func (a *DefaultApiService) CreateProjectLabelExecute(r ApiCreateProjectLabelRequest) (*ModifyProjectLabel200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModifyProjectLabel200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateProjectLabel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateProjectLabel"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createProjectLabelRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateProjectMemberPrincipalRequest struct {
	ctx                                 context.Context
	ApiService                          *DefaultApiService
	authorization                       *string
	action                              *string
	createProjectMemberPrincipalRequest *CreateProjectMemberPrincipalRequest
}

// 认证信息
func (r ApiCreateProjectMemberPrincipalRequest) Authorization(authorization string) ApiCreateProjectMemberPrincipalRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateProjectMemberPrincipalRequest) Action(action string) ApiCreateProjectMemberPrincipalRequest {
	r.action = &action
	return r
}

func (r ApiCreateProjectMemberPrincipalRequest) CreateProjectMemberPrincipalRequest(createProjectMemberPrincipalRequest CreateProjectMemberPrincipalRequest) ApiCreateProjectMemberPrincipalRequest {
	r.createProjectMemberPrincipalRequest = &createProjectMemberPrincipalRequest
	return r
}

func (r ApiCreateProjectMemberPrincipalRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.CreateProjectMemberPrincipalExecute(r)
}

/*
CreateProjectMemberPrincipal 项目成员主体新增(包含用户组、部门、成员)

✨ 项目成员主体新增(包含用户组、部门、成员)

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateProjectMemberPrincipalRequest
*/
func (a *DefaultApiService) CreateProjectMemberPrincipal(ctx context.Context) ApiCreateProjectMemberPrincipalRequest {
	return ApiCreateProjectMemberPrincipalRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) CreateProjectMemberPrincipalExecute(r ApiCreateProjectMemberPrincipalRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateProjectMemberPrincipal")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateProjectMemberPrincipal"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createProjectMemberPrincipalRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateProjectWithTemplateRequest struct {
	ctx                              context.Context
	ApiService                       *DefaultApiService
	authorization                    *string
	action                           *string
	createProjectWithTemplateRequest *CreateProjectWithTemplateRequest
}

// 认证信息
func (r ApiCreateProjectWithTemplateRequest) Authorization(authorization string) ApiCreateProjectWithTemplateRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateProjectWithTemplateRequest) Action(action string) ApiCreateProjectWithTemplateRequest {
	r.action = &action
	return r
}

func (r ApiCreateProjectWithTemplateRequest) CreateProjectWithTemplateRequest(createProjectWithTemplateRequest CreateProjectWithTemplateRequest) ApiCreateProjectWithTemplateRequest {
	r.createProjectWithTemplateRequest = &createProjectWithTemplateRequest
	return r
}

func (r ApiCreateProjectWithTemplateRequest) Execute() (*CreateProjectWithTemplate200Response, *http.Response, error) {
	return r.ApiService.CreateProjectWithTemplateExecute(r)
}

/*
CreateProjectWithTemplate 模版项目创建

✨ 模版项目创建

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateProjectWithTemplateRequest
*/
func (a *DefaultApiService) CreateProjectWithTemplate(ctx context.Context) ApiCreateProjectWithTemplateRequest {
	return ApiCreateProjectWithTemplateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateProjectWithTemplate200Response
func (a *DefaultApiService) CreateProjectWithTemplateExecute(r ApiCreateProjectWithTemplateRequest) (*CreateProjectWithTemplate200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateProjectWithTemplate200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateProjectWithTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateProjectWithTemplate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createProjectWithTemplateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateReadOnlyRefRequest struct {
	ctx                      context.Context
	ApiService               *DefaultApiService
	authorization            *string
	action                   *string
	createReadOnlyRefRequest *CreateReadOnlyRefRequest
}

// 认证信息
func (r ApiCreateReadOnlyRefRequest) Authorization(authorization string) ApiCreateReadOnlyRefRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateReadOnlyRefRequest) Action(action string) ApiCreateReadOnlyRefRequest {
	r.action = &action
	return r
}

func (r ApiCreateReadOnlyRefRequest) CreateReadOnlyRefRequest(createReadOnlyRefRequest CreateReadOnlyRefRequest) ApiCreateReadOnlyRefRequest {
	r.createReadOnlyRefRequest = &createReadOnlyRefRequest
	return r
}

func (r ApiCreateReadOnlyRefRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.CreateReadOnlyRefExecute(r)
}

/*
CreateReadOnlyRef 仓库分支-创建只读分支

✨ 创建只读分支

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateReadOnlyRefRequest
*/
func (a *DefaultApiService) CreateReadOnlyRef(ctx context.Context) ApiCreateReadOnlyRefRequest {
	return ApiCreateReadOnlyRefRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) CreateReadOnlyRefExecute(r ApiCreateReadOnlyRefRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateReadOnlyRef")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateReadOnlyRef"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createReadOnlyRefRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateReleaseRequest struct {
	ctx                  context.Context
	ApiService           *DefaultApiService
	authorization        *string
	action               *string
	createReleaseRequest *CreateReleaseRequest
}

// 认证信息
func (r ApiCreateReleaseRequest) Authorization(authorization string) ApiCreateReleaseRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateReleaseRequest) Action(action string) ApiCreateReleaseRequest {
	r.action = &action
	return r
}

func (r ApiCreateReleaseRequest) CreateReleaseRequest(createReleaseRequest CreateReleaseRequest) ApiCreateReleaseRequest {
	r.createReleaseRequest = &createReleaseRequest
	return r
}

func (r ApiCreateReleaseRequest) Execute() (*ModifyRelease200Response, *http.Response, error) {
	return r.ApiService.CreateReleaseExecute(r)
}

/*
CreateRelease 版本创建

✨ 创建版本

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateReleaseRequest
*/
func (a *DefaultApiService) CreateRelease(ctx context.Context) ApiCreateReleaseRequest {
	return ApiCreateReleaseRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModifyRelease200Response
func (a *DefaultApiService) CreateReleaseExecute(r ApiCreateReleaseRequest) (*ModifyRelease200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModifyRelease200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateRelease")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/CreateRelease"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createReleaseRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateReportRequest struct {
	ctx                 context.Context
	ApiService          *DefaultApiService
	authorization       *string
	action              *string
	createReportRequest *CreateReportRequest
}

// 认证信息
func (r ApiCreateReportRequest) Authorization(authorization string) ApiCreateReportRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateReportRequest) Action(action string) ApiCreateReportRequest {
	r.action = &action
	return r
}

func (r ApiCreateReportRequest) CreateReportRequest(createReportRequest CreateReportRequest) ApiCreateReportRequest {
	r.createReportRequest = &createReportRequest
	return r
}

func (r ApiCreateReportRequest) Execute() (*CreateReport200Response, *http.Response, error) {
	return r.ApiService.CreateReportExecute(r)
}

/*
CreateReport 测试报告创建

✨ 创建测试报告

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateReportRequest
*/
func (a *DefaultApiService) CreateReport(ctx context.Context) ApiCreateReportRequest {
	return ApiCreateReportRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateReport200Response
func (a *DefaultApiService) CreateReportExecute(r ApiCreateReportRequest) (*CreateReport200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateReport200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateReport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateReport"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createReportRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateRequirementDefectRelationRequest struct {
	ctx                                    context.Context
	ApiService                             *DefaultApiService
	authorization                          *string
	action                                 *string
	createRequirementDefectRelationRequest *CreateRequirementDefectRelationRequest
}

// 认证信息
func (r ApiCreateRequirementDefectRelationRequest) Authorization(authorization string) ApiCreateRequirementDefectRelationRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateRequirementDefectRelationRequest) Action(action string) ApiCreateRequirementDefectRelationRequest {
	r.action = &action
	return r
}

func (r ApiCreateRequirementDefectRelationRequest) CreateRequirementDefectRelationRequest(createRequirementDefectRelationRequest CreateRequirementDefectRelationRequest) ApiCreateRequirementDefectRelationRequest {
	r.createRequirementDefectRelationRequest = &createRequirementDefectRelationRequest
	return r
}

func (r ApiCreateRequirementDefectRelationRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.CreateRequirementDefectRelationExecute(r)
}

/*
CreateRequirementDefectRelation 需求关联缺陷

✨ 需求关联缺陷

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateRequirementDefectRelationRequest
*/
func (a *DefaultApiService) CreateRequirementDefectRelation(ctx context.Context) ApiCreateRequirementDefectRelationRequest {
	return ApiCreateRequirementDefectRelationRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) CreateRequirementDefectRelationExecute(r ApiCreateRequirementDefectRelationRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateRequirementDefectRelation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateRequirementDefectRelation"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createRequirementDefectRelationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateSshKeyRequest struct {
	ctx                 context.Context
	ApiService          *DefaultApiService
	authorization       *string
	action              *string
	createSshKeyRequest *CreateSshKeyRequest
}

// 认证信息
func (r ApiCreateSshKeyRequest) Authorization(authorization string) ApiCreateSshKeyRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateSshKeyRequest) Action(action string) ApiCreateSshKeyRequest {
	r.action = &action
	return r
}

func (r ApiCreateSshKeyRequest) CreateSshKeyRequest(createSshKeyRequest CreateSshKeyRequest) ApiCreateSshKeyRequest {
	r.createSshKeyRequest = &createSshKeyRequest
	return r
}

func (r ApiCreateSshKeyRequest) Execute() (*CreateSshKey200Response, *http.Response, error) {
	return r.ApiService.CreateSshKeyExecute(r)
}

/*
CreateSshKey 仓库设置-导入用户SSH公钥

✨ 导入用户SSH公钥

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateSshKeyRequest
*/
func (a *DefaultApiService) CreateSshKey(ctx context.Context) ApiCreateSshKeyRequest {
	return ApiCreateSshKeyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateSshKey200Response
func (a *DefaultApiService) CreateSshKeyExecute(r ApiCreateSshKeyRequest) (*CreateSshKey200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateSshKey200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateSshKey")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateSshKey"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createSshKeyRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTestCaseRequest struct {
	ctx                   context.Context
	ApiService            *DefaultApiService
	authorization         *string
	action                *string
	createTestCaseRequest *CreateTestCaseRequest
}

// 认证信息
func (r ApiCreateTestCaseRequest) Authorization(authorization string) ApiCreateTestCaseRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateTestCaseRequest) Action(action string) ApiCreateTestCaseRequest {
	r.action = &action
	return r
}

func (r ApiCreateTestCaseRequest) CreateTestCaseRequest(createTestCaseRequest CreateTestCaseRequest) ApiCreateTestCaseRequest {
	r.createTestCaseRequest = &createTestCaseRequest
	return r
}

func (r ApiCreateTestCaseRequest) Execute() (*CreateTestCase200Response, *http.Response, error) {
	return r.ApiService.CreateTestCaseExecute(r)
}

/*
CreateTestCase 测试用例创建

✨ 测试用例创建

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateTestCaseRequest
*/
func (a *DefaultApiService) CreateTestCase(ctx context.Context) ApiCreateTestCaseRequest {
	return ApiCreateTestCaseRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateTestCase200Response
func (a *DefaultApiService) CreateTestCaseExecute(r ApiCreateTestCaseRequest) (*CreateTestCase200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateTestCase200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateTestCase")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateTestCase"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createTestCaseRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTestCaseSectionRequest struct {
	ctx                          context.Context
	ApiService                   *DefaultApiService
	authorization                *string
	action                       *string
	createTestCaseSectionRequest *CreateTestCaseSectionRequest
}

// 认证信息
func (r ApiCreateTestCaseSectionRequest) Authorization(authorization string) ApiCreateTestCaseSectionRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateTestCaseSectionRequest) Action(action string) ApiCreateTestCaseSectionRequest {
	r.action = &action
	return r
}

func (r ApiCreateTestCaseSectionRequest) CreateTestCaseSectionRequest(createTestCaseSectionRequest CreateTestCaseSectionRequest) ApiCreateTestCaseSectionRequest {
	r.createTestCaseSectionRequest = &createTestCaseSectionRequest
	return r
}

func (r ApiCreateTestCaseSectionRequest) Execute() (*ModifyTestCaseSection200Response, *http.Response, error) {
	return r.ApiService.CreateTestCaseSectionExecute(r)
}

/*
CreateTestCaseSection 测试用例分组创建

✨ 测试用例分组创建

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateTestCaseSectionRequest
*/
func (a *DefaultApiService) CreateTestCaseSection(ctx context.Context) ApiCreateTestCaseSectionRequest {
	return ApiCreateTestCaseSectionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModifyTestCaseSection200Response
func (a *DefaultApiService) CreateTestCaseSectionExecute(r ApiCreateTestCaseSectionRequest) (*ModifyTestCaseSection200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModifyTestCaseSection200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateTestCaseSection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateTestCaseSection"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createTestCaseSectionRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTestDefectRequest struct {
	ctx                     context.Context
	ApiService              *DefaultApiService
	authorization           *string
	action                  *string
	createTestDefectRequest *CreateTestDefectRequest
}

// 认证信息
func (r ApiCreateTestDefectRequest) Authorization(authorization string) ApiCreateTestDefectRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateTestDefectRequest) Action(action string) ApiCreateTestDefectRequest {
	r.action = &action
	return r
}

func (r ApiCreateTestDefectRequest) CreateTestDefectRequest(createTestDefectRequest CreateTestDefectRequest) ApiCreateTestDefectRequest {
	r.createTestDefectRequest = &createTestDefectRequest
	return r
}

func (r ApiCreateTestDefectRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.CreateTestDefectExecute(r)
}

/*
CreateTestDefect 测试任务关联缺陷

✨ 测试任务关联缺陷

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateTestDefectRequest
*/
func (a *DefaultApiService) CreateTestDefect(ctx context.Context) ApiCreateTestDefectRequest {
	return ApiCreateTestDefectRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) CreateTestDefectExecute(r ApiCreateTestDefectRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateTestDefect")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateTestDefect"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createTestDefectRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTestResultRequest struct {
	ctx                     context.Context
	ApiService              *DefaultApiService
	authorization           *string
	action                  *string
	createTestResultRequest *CreateTestResultRequest
}

// 认证信息
func (r ApiCreateTestResultRequest) Authorization(authorization string) ApiCreateTestResultRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateTestResultRequest) Action(action string) ApiCreateTestResultRequest {
	r.action = &action
	return r
}

func (r ApiCreateTestResultRequest) CreateTestResultRequest(createTestResultRequest CreateTestResultRequest) ApiCreateTestResultRequest {
	r.createTestResultRequest = &createTestResultRequest
	return r
}

func (r ApiCreateTestResultRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.CreateTestResultExecute(r)
}

/*
CreateTestResult 测试任务添加测试结果

✨ 测试任务添加测试结果

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateTestResultRequest
*/
func (a *DefaultApiService) CreateTestResult(ctx context.Context) ApiCreateTestResultRequest {
	return ApiCreateTestResultRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) CreateTestResultExecute(r ApiCreateTestResultRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateTestResult")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateTestResult"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createTestResultRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTestResultsRequest struct {
	ctx                      context.Context
	ApiService               *DefaultApiService
	authorization            *string
	action                   *string
	createTestResultsRequest *CreateTestResultsRequest
}

// 认证信息
func (r ApiCreateTestResultsRequest) Authorization(authorization string) ApiCreateTestResultsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateTestResultsRequest) Action(action string) ApiCreateTestResultsRequest {
	r.action = &action
	return r
}

func (r ApiCreateTestResultsRequest) CreateTestResultsRequest(createTestResultsRequest CreateTestResultsRequest) ApiCreateTestResultsRequest {
	r.createTestResultsRequest = &createTestResultsRequest
	return r
}

func (r ApiCreateTestResultsRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.CreateTestResultsExecute(r)
}

/*
CreateTestResults 测试任务状态批量更新

✨ 测试任务状态批量更新

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateTestResultsRequest
*/
func (a *DefaultApiService) CreateTestResults(ctx context.Context) ApiCreateTestResultsRequest {
	return ApiCreateTestResultsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) CreateTestResultsExecute(r ApiCreateTestResultsRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateTestResults")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateTestResults"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createTestResultsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTestRunRequest struct {
	ctx                  context.Context
	ApiService           *DefaultApiService
	authorization        *string
	action               *string
	createTestRunRequest *CreateTestRunRequest
}

// 认证信息
func (r ApiCreateTestRunRequest) Authorization(authorization string) ApiCreateTestRunRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateTestRunRequest) Action(action string) ApiCreateTestRunRequest {
	r.action = &action
	return r
}

func (r ApiCreateTestRunRequest) CreateTestRunRequest(createTestRunRequest CreateTestRunRequest) ApiCreateTestRunRequest {
	r.createTestRunRequest = &createTestRunRequest
	return r
}

func (r ApiCreateTestRunRequest) Execute() (*ModifyTestRun200Response, *http.Response, error) {
	return r.ApiService.CreateTestRunExecute(r)
}

/*
CreateTestRun 测试计划创建

✨ 测试计划创建

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateTestRunRequest
*/
func (a *DefaultApiService) CreateTestRun(ctx context.Context) ApiCreateTestRunRequest {
	return ApiCreateTestRunRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModifyTestRun200Response
func (a *DefaultApiService) CreateTestRunExecute(r ApiCreateTestRunRequest) (*ModifyTestRun200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModifyTestRun200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateTestRun")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateTestRun"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createTestRunRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTestStepResultRequest struct {
	ctx                         context.Context
	ApiService                  *DefaultApiService
	authorization               *string
	action                      *string
	createTestStepResultRequest *CreateTestStepResultRequest
}

// 认证信息
func (r ApiCreateTestStepResultRequest) Authorization(authorization string) ApiCreateTestStepResultRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateTestStepResultRequest) Action(action string) ApiCreateTestStepResultRequest {
	r.action = &action
	return r
}

func (r ApiCreateTestStepResultRequest) CreateTestStepResultRequest(createTestStepResultRequest CreateTestStepResultRequest) ApiCreateTestStepResultRequest {
	r.createTestStepResultRequest = &createTestStepResultRequest
	return r
}

func (r ApiCreateTestStepResultRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.CreateTestStepResultExecute(r)
}

/*
CreateTestStepResult 测试任务添加某步骤的测试结果

✨ 测试任务添加某步骤的测试结果

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateTestStepResultRequest
*/
func (a *DefaultApiService) CreateTestStepResult(ctx context.Context) ApiCreateTestStepResultRequest {
	return ApiCreateTestStepResultRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) CreateTestStepResultExecute(r ApiCreateTestStepResultRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateTestStepResult")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateTestStepResult"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createTestStepResultRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateUserGroupRequest struct {
	ctx                    context.Context
	ApiService             *DefaultApiService
	authorization          *string
	action                 *string
	createUserGroupRequest *CreateUserGroupRequest
}

// 认证信息
func (r ApiCreateUserGroupRequest) Authorization(authorization string) ApiCreateUserGroupRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateUserGroupRequest) Action(action string) ApiCreateUserGroupRequest {
	r.action = &action
	return r
}

func (r ApiCreateUserGroupRequest) CreateUserGroupRequest(createUserGroupRequest CreateUserGroupRequest) ApiCreateUserGroupRequest {
	r.createUserGroupRequest = &createUserGroupRequest
	return r
}

func (r ApiCreateUserGroupRequest) Execute() (*CreateUserGroup200Response, *http.Response, error) {
	return r.ApiService.CreateUserGroupExecute(r)
}

/*
CreateUserGroup 用户组创建

✨ 用户组创建

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateUserGroupRequest
*/
func (a *DefaultApiService) CreateUserGroup(ctx context.Context) ApiCreateUserGroupRequest {
	return ApiCreateUserGroupRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateUserGroup200Response
func (a *DefaultApiService) CreateUserGroupExecute(r ApiCreateUserGroupRequest) (*CreateUserGroup200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateUserGroup200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateUserGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateUserGroup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createUserGroupRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateUserGroupUsersRequest struct {
	ctx                         context.Context
	ApiService                  *DefaultApiService
	authorization               *string
	action                      *string
	createUserGroupUsersRequest *CreateUserGroupUsersRequest
}

// 认证信息
func (r ApiCreateUserGroupUsersRequest) Authorization(authorization string) ApiCreateUserGroupUsersRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateUserGroupUsersRequest) Action(action string) ApiCreateUserGroupUsersRequest {
	r.action = &action
	return r
}

func (r ApiCreateUserGroupUsersRequest) CreateUserGroupUsersRequest(createUserGroupUsersRequest CreateUserGroupUsersRequest) ApiCreateUserGroupUsersRequest {
	r.createUserGroupUsersRequest = &createUserGroupUsersRequest
	return r
}

func (r ApiCreateUserGroupUsersRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.CreateUserGroupUsersExecute(r)
}

/*
CreateUserGroupUsers 用户组添加用户

✨ 用户组添加用户

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateUserGroupUsersRequest
*/
func (a *DefaultApiService) CreateUserGroupUsers(ctx context.Context) ApiCreateUserGroupUsersRequest {
	return ApiCreateUserGroupUsersRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) CreateUserGroupUsersExecute(r ApiCreateUserGroupUsersRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateUserGroupUsers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateUserGroupUsers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createUserGroupUsersRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteAllUsersOnGroupRequest struct {
	ctx                          context.Context
	ApiService                   *DefaultApiService
	authorization                *string
	action                       *string
	deleteAllUsersOnGroupRequest *DeleteAllUsersOnGroupRequest
}

// 认证信息
func (r ApiDeleteAllUsersOnGroupRequest) Authorization(authorization string) ApiDeleteAllUsersOnGroupRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteAllUsersOnGroupRequest) Action(action string) ApiDeleteAllUsersOnGroupRequest {
	r.action = &action
	return r
}

func (r ApiDeleteAllUsersOnGroupRequest) DeleteAllUsersOnGroupRequest(deleteAllUsersOnGroupRequest DeleteAllUsersOnGroupRequest) ApiDeleteAllUsersOnGroupRequest {
	r.deleteAllUsersOnGroupRequest = &deleteAllUsersOnGroupRequest
	return r
}

func (r ApiDeleteAllUsersOnGroupRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DeleteAllUsersOnGroupExecute(r)
}

/*
DeleteAllUsersOnGroup 用户组清理用户

✨ 用户组清理用户

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteAllUsersOnGroupRequest
*/
func (a *DefaultApiService) DeleteAllUsersOnGroup(ctx context.Context) ApiDeleteAllUsersOnGroupRequest {
	return ApiDeleteAllUsersOnGroupRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DeleteAllUsersOnGroupExecute(r ApiDeleteAllUsersOnGroupRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteAllUsersOnGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DeleteAllUsersOnGroup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteAllUsersOnGroupRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteArtifactPropertiesRequest struct {
	ctx                             context.Context
	ApiService                      *DefaultApiService
	authorization                   *string
	action                          *string
	deleteArtifactPropertiesRequest *DeleteArtifactPropertiesRequest
}

// 认证信息
func (r ApiDeleteArtifactPropertiesRequest) Authorization(authorization string) ApiDeleteArtifactPropertiesRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteArtifactPropertiesRequest) Action(action string) ApiDeleteArtifactPropertiesRequest {
	r.action = &action
	return r
}

func (r ApiDeleteArtifactPropertiesRequest) DeleteArtifactPropertiesRequest(deleteArtifactPropertiesRequest DeleteArtifactPropertiesRequest) ApiDeleteArtifactPropertiesRequest {
	r.deleteArtifactPropertiesRequest = &deleteArtifactPropertiesRequest
	return r
}

func (r ApiDeleteArtifactPropertiesRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DeleteArtifactPropertiesExecute(r)
}

/*
DeleteArtifactProperties 制品属性删除

✨ 删除指定版本制品的指定制品属性

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteArtifactPropertiesRequest
*/
func (a *DefaultApiService) DeleteArtifactProperties(ctx context.Context) ApiDeleteArtifactPropertiesRequest {
	return ApiDeleteArtifactPropertiesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DeleteArtifactPropertiesExecute(r ApiDeleteArtifactPropertiesRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteArtifactProperties")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DeleteArtifactProperties"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteArtifactPropertiesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteBranchProtectionRequest struct {
	ctx                           context.Context
	ApiService                    *DefaultApiService
	authorization                 *string
	action                        *string
	deleteBranchProtectionRequest *DeleteBranchProtectionRequest
}

// 认证信息
func (r ApiDeleteBranchProtectionRequest) Authorization(authorization string) ApiDeleteBranchProtectionRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteBranchProtectionRequest) Action(action string) ApiDeleteBranchProtectionRequest {
	r.action = &action
	return r
}

func (r ApiDeleteBranchProtectionRequest) DeleteBranchProtectionRequest(deleteBranchProtectionRequest DeleteBranchProtectionRequest) ApiDeleteBranchProtectionRequest {
	r.deleteBranchProtectionRequest = &deleteBranchProtectionRequest
	return r
}

func (r ApiDeleteBranchProtectionRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DeleteBranchProtectionExecute(r)
}

/*
DeleteBranchProtection 仓库设置-删除保护分支规则

✨ 删除保护分支规则

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteBranchProtectionRequest
*/
func (a *DefaultApiService) DeleteBranchProtection(ctx context.Context) ApiDeleteBranchProtectionRequest {
	return ApiDeleteBranchProtectionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DeleteBranchProtectionExecute(r ApiDeleteBranchProtectionRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteBranchProtection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DeleteBranchProtection"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteBranchProtectionRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteBranchProtectionMemberRequest struct {
	ctx                                 context.Context
	ApiService                          *DefaultApiService
	authorization                       *string
	action                              *string
	deleteBranchProtectionMemberRequest *DeleteBranchProtectionMemberRequest
}

// 认证信息
func (r ApiDeleteBranchProtectionMemberRequest) Authorization(authorization string) ApiDeleteBranchProtectionMemberRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteBranchProtectionMemberRequest) Action(action string) ApiDeleteBranchProtectionMemberRequest {
	r.action = &action
	return r
}

func (r ApiDeleteBranchProtectionMemberRequest) DeleteBranchProtectionMemberRequest(deleteBranchProtectionMemberRequest DeleteBranchProtectionMemberRequest) ApiDeleteBranchProtectionMemberRequest {
	r.deleteBranchProtectionMemberRequest = &deleteBranchProtectionMemberRequest
	return r
}

func (r ApiDeleteBranchProtectionMemberRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DeleteBranchProtectionMemberExecute(r)
}

/*
DeleteBranchProtectionMember 仓库设置-删除保护分支规则管理员

✨ 新增保护分支规则管理员

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteBranchProtectionMemberRequest
*/
func (a *DefaultApiService) DeleteBranchProtectionMember(ctx context.Context) ApiDeleteBranchProtectionMemberRequest {
	return ApiDeleteBranchProtectionMemberRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DeleteBranchProtectionMemberExecute(r ApiDeleteBranchProtectionMemberRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteBranchProtectionMember")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DeleteBranchProtectionMember"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteBranchProtectionMemberRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCdCloudAccountRequest struct {
	ctx                         context.Context
	ApiService                  *DefaultApiService
	authorization               *string
	action                      *string
	deleteCdCloudAccountRequest *DeleteCdCloudAccountRequest
}

// 认证信息
func (r ApiDeleteCdCloudAccountRequest) Authorization(authorization string) ApiDeleteCdCloudAccountRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteCdCloudAccountRequest) Action(action string) ApiDeleteCdCloudAccountRequest {
	r.action = &action
	return r
}

func (r ApiDeleteCdCloudAccountRequest) DeleteCdCloudAccountRequest(deleteCdCloudAccountRequest DeleteCdCloudAccountRequest) ApiDeleteCdCloudAccountRequest {
	r.deleteCdCloudAccountRequest = &deleteCdCloudAccountRequest
	return r
}

func (r ApiDeleteCdCloudAccountRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DeleteCdCloudAccountExecute(r)
}

/*
DeleteCdCloudAccount CD 云账号删除

✨ CD 云账号删除

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteCdCloudAccountRequest
*/
func (a *DefaultApiService) DeleteCdCloudAccount(ctx context.Context) ApiDeleteCdCloudAccountRequest {
	return ApiDeleteCdCloudAccountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DeleteCdCloudAccountExecute(r ApiDeleteCdCloudAccountRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteCdCloudAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DeleteCdCloudAccount"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteCdCloudAccountRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCdHostServerGroupRequest struct {
	ctx                            context.Context
	ApiService                     *DefaultApiService
	authorization                  *string
	action                         *string
	deleteCdHostServerGroupRequest *DeleteCdHostServerGroupRequest
}

// 认证信息
func (r ApiDeleteCdHostServerGroupRequest) Authorization(authorization string) ApiDeleteCdHostServerGroupRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteCdHostServerGroupRequest) Action(action string) ApiDeleteCdHostServerGroupRequest {
	r.action = &action
	return r
}

func (r ApiDeleteCdHostServerGroupRequest) DeleteCdHostServerGroupRequest(deleteCdHostServerGroupRequest DeleteCdHostServerGroupRequest) ApiDeleteCdHostServerGroupRequest {
	r.deleteCdHostServerGroupRequest = &deleteCdHostServerGroupRequest
	return r
}

func (r ApiDeleteCdHostServerGroupRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DeleteCdHostServerGroupExecute(r)
}

/*
DeleteCdHostServerGroup CD 主机组删除

✨ CD 主机组删除

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteCdHostServerGroupRequest
*/
func (a *DefaultApiService) DeleteCdHostServerGroup(ctx context.Context) ApiDeleteCdHostServerGroupRequest {
	return ApiDeleteCdHostServerGroupRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DeleteCdHostServerGroupExecute(r ApiDeleteCdHostServerGroupRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteCdHostServerGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DeleteCdHostServerGroup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteCdHostServerGroupRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCdPipelineRequest struct {
	ctx                     context.Context
	ApiService              *DefaultApiService
	authorization           *string
	action                  *string
	deleteCdPipelineRequest *DeleteCdPipelineRequest
}

// 认证信息
func (r ApiDeleteCdPipelineRequest) Authorization(authorization string) ApiDeleteCdPipelineRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteCdPipelineRequest) Action(action string) ApiDeleteCdPipelineRequest {
	r.action = &action
	return r
}

func (r ApiDeleteCdPipelineRequest) DeleteCdPipelineRequest(deleteCdPipelineRequest DeleteCdPipelineRequest) ApiDeleteCdPipelineRequest {
	r.deleteCdPipelineRequest = &deleteCdPipelineRequest
	return r
}

func (r ApiDeleteCdPipelineRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DeleteCdPipelineExecute(r)
}

/*
DeleteCdPipeline CD 部署流程删除

✨ CD 部署流程删除

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteCdPipelineRequest
*/
func (a *DefaultApiService) DeleteCdPipeline(ctx context.Context) ApiDeleteCdPipelineRequest {
	return ApiDeleteCdPipelineRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DeleteCdPipelineExecute(r ApiDeleteCdPipelineRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteCdPipeline")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DeleteCdPipeline"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteCdPipelineRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCodingCIBuildRequest struct {
	ctx                               context.Context
	ApiService                        *DefaultApiService
	authorization                     *string
	action                            *string
	describeCodingCIBuildStageRequest *DescribeCodingCIBuildStageRequest
}

// 认证信息
func (r ApiDeleteCodingCIBuildRequest) Authorization(authorization string) ApiDeleteCodingCIBuildRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteCodingCIBuildRequest) Action(action string) ApiDeleteCodingCIBuildRequest {
	r.action = &action
	return r
}

func (r ApiDeleteCodingCIBuildRequest) DescribeCodingCIBuildStageRequest(describeCodingCIBuildStageRequest DescribeCodingCIBuildStageRequest) ApiDeleteCodingCIBuildRequest {
	r.describeCodingCIBuildStageRequest = &describeCodingCIBuildStageRequest
	return r
}

func (r ApiDeleteCodingCIBuildRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DeleteCodingCIBuildExecute(r)
}

/*
DeleteCodingCIBuild 构建删除

✨ 删除构建

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteCodingCIBuildRequest
*/
func (a *DefaultApiService) DeleteCodingCIBuild(ctx context.Context) ApiDeleteCodingCIBuildRequest {
	return ApiDeleteCodingCIBuildRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DeleteCodingCIBuildExecute(r ApiDeleteCodingCIBuildRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteCodingCIBuild")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DeleteCodingCIBuild"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeCodingCIBuildStageRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCodingCIJobRequest struct {
	ctx                      context.Context
	ApiService               *DefaultApiService
	authorization            *string
	action                   *string
	deleteCodingCIJobRequest *DeleteCodingCIJobRequest
}

// 认证信息
func (r ApiDeleteCodingCIJobRequest) Authorization(authorization string) ApiDeleteCodingCIJobRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteCodingCIJobRequest) Action(action string) ApiDeleteCodingCIJobRequest {
	r.action = &action
	return r
}

func (r ApiDeleteCodingCIJobRequest) DeleteCodingCIJobRequest(deleteCodingCIJobRequest DeleteCodingCIJobRequest) ApiDeleteCodingCIJobRequest {
	r.deleteCodingCIJobRequest = &deleteCodingCIJobRequest
	return r
}

func (r ApiDeleteCodingCIJobRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DeleteCodingCIJobExecute(r)
}

/*
DeleteCodingCIJob 构建计划删除

✨ 删除构建计划

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteCodingCIJobRequest
*/
func (a *DefaultApiService) DeleteCodingCIJob(ctx context.Context) ApiDeleteCodingCIJobRequest {
	return ApiDeleteCodingCIJobRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DeleteCodingCIJobExecute(r ApiDeleteCodingCIJobRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteCodingCIJob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DeleteCodingCIJob"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteCodingCIJobRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteDepartmentRequest struct {
	ctx                     context.Context
	ApiService              *DefaultApiService
	authorization           *string
	action                  *string
	deleteDepartmentRequest *DeleteDepartmentRequest
}

// 认证信息
func (r ApiDeleteDepartmentRequest) Authorization(authorization string) ApiDeleteDepartmentRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteDepartmentRequest) Action(action string) ApiDeleteDepartmentRequest {
	r.action = &action
	return r
}

func (r ApiDeleteDepartmentRequest) DeleteDepartmentRequest(deleteDepartmentRequest DeleteDepartmentRequest) ApiDeleteDepartmentRequest {
	r.deleteDepartmentRequest = &deleteDepartmentRequest
	return r
}

func (r ApiDeleteDepartmentRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DeleteDepartmentExecute(r)
}

/*
DeleteDepartment 部门删除

✨ 部门删除

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteDepartmentRequest
*/
func (a *DefaultApiService) DeleteDepartment(ctx context.Context) ApiDeleteDepartmentRequest {
	return ApiDeleteDepartmentRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DeleteDepartmentExecute(r ApiDeleteDepartmentRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteDepartment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DeleteDepartment"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteDepartmentRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteDepotFilePushRuleRequest struct {
	ctx                            context.Context
	ApiService                     *DefaultApiService
	authorization                  *string
	action                         *string
	deleteDepotFilePushRuleRequest *DeleteDepotFilePushRuleRequest
}

// 认证信息
func (r ApiDeleteDepotFilePushRuleRequest) Authorization(authorization string) ApiDeleteDepotFilePushRuleRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteDepotFilePushRuleRequest) Action(action string) ApiDeleteDepotFilePushRuleRequest {
	r.action = &action
	return r
}

func (r ApiDeleteDepotFilePushRuleRequest) DeleteDepotFilePushRuleRequest(deleteDepotFilePushRuleRequest DeleteDepotFilePushRuleRequest) ApiDeleteDepotFilePushRuleRequest {
	r.deleteDepotFilePushRuleRequest = &deleteDepotFilePushRuleRequest
	return r
}

func (r ApiDeleteDepotFilePushRuleRequest) Execute() (*DeleteDepotFilePushRule200Response, *http.Response, error) {
	return r.ApiService.DeleteDepotFilePushRuleExecute(r)
}

/*
DeleteDepotFilePushRule 仓库设置-删除git仓库文件推送规则

✨ 删除 git 仓库文件推送规则

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteDepotFilePushRuleRequest
*/
func (a *DefaultApiService) DeleteDepotFilePushRule(ctx context.Context) ApiDeleteDepotFilePushRuleRequest {
	return ApiDeleteDepotFilePushRuleRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteDepotFilePushRule200Response
func (a *DefaultApiService) DeleteDepotFilePushRuleExecute(r ApiDeleteDepotFilePushRuleRequest) (*DeleteDepotFilePushRule200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteDepotFilePushRule200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteDepotFilePushRule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DeleteDepotFilePushRule"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteDepotFilePushRuleRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteDepotFilePushRuleDenyPrivilegeRequest struct {
	ctx                                         context.Context
	ApiService                                  *DefaultApiService
	authorization                               *string
	action                                      *string
	deleteDepotFilePushRuleDenyPrivilegeRequest *DeleteDepotFilePushRuleDenyPrivilegeRequest
}

// 认证信息
func (r ApiDeleteDepotFilePushRuleDenyPrivilegeRequest) Authorization(authorization string) ApiDeleteDepotFilePushRuleDenyPrivilegeRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteDepotFilePushRuleDenyPrivilegeRequest) Action(action string) ApiDeleteDepotFilePushRuleDenyPrivilegeRequest {
	r.action = &action
	return r
}

func (r ApiDeleteDepotFilePushRuleDenyPrivilegeRequest) DeleteDepotFilePushRuleDenyPrivilegeRequest(deleteDepotFilePushRuleDenyPrivilegeRequest DeleteDepotFilePushRuleDenyPrivilegeRequest) ApiDeleteDepotFilePushRuleDenyPrivilegeRequest {
	r.deleteDepotFilePushRuleDenyPrivilegeRequest = &deleteDepotFilePushRuleDenyPrivilegeRequest
	return r
}

func (r ApiDeleteDepotFilePushRuleDenyPrivilegeRequest) Execute() (*DeleteDepotFilePushRuleDenyPrivilege200Response, *http.Response, error) {
	return r.ApiService.DeleteDepotFilePushRuleDenyPrivilegeExecute(r)
}

/*
DeleteDepotFilePushRuleDenyPrivilege 仓库设置-删除git仓库特权者文件推送权限

✨ 删除 git 仓库特权者文件推送权限

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteDepotFilePushRuleDenyPrivilegeRequest
*/
func (a *DefaultApiService) DeleteDepotFilePushRuleDenyPrivilege(ctx context.Context) ApiDeleteDepotFilePushRuleDenyPrivilegeRequest {
	return ApiDeleteDepotFilePushRuleDenyPrivilegeRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteDepotFilePushRuleDenyPrivilege200Response
func (a *DefaultApiService) DeleteDepotFilePushRuleDenyPrivilegeExecute(r ApiDeleteDepotFilePushRuleDenyPrivilegeRequest) (*DeleteDepotFilePushRuleDenyPrivilege200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteDepotFilePushRuleDenyPrivilege200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteDepotFilePushRuleDenyPrivilege")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DeleteDepotFilePushRuleDenyPrivilege"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteDepotFilePushRuleDenyPrivilegeRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteGitBranchRequest struct {
	ctx                    context.Context
	ApiService             *DefaultApiService
	authorization          *string
	action                 *string
	deleteGitBranchRequest *DeleteGitBranchRequest
}

// 认证信息
func (r ApiDeleteGitBranchRequest) Authorization(authorization string) ApiDeleteGitBranchRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteGitBranchRequest) Action(action string) ApiDeleteGitBranchRequest {
	r.action = &action
	return r
}

func (r ApiDeleteGitBranchRequest) DeleteGitBranchRequest(deleteGitBranchRequest DeleteGitBranchRequest) ApiDeleteGitBranchRequest {
	r.deleteGitBranchRequest = &deleteGitBranchRequest
	return r
}

func (r ApiDeleteGitBranchRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DeleteGitBranchExecute(r)
}

/*
DeleteGitBranch 仓库分支-删除代码仓库分支

✨ 删除代码仓库分支

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteGitBranchRequest
*/
func (a *DefaultApiService) DeleteGitBranch(ctx context.Context) ApiDeleteGitBranchRequest {
	return ApiDeleteGitBranchRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DeleteGitBranchExecute(r ApiDeleteGitBranchRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteGitBranch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DeleteGitBranch"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteGitBranchRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteGitDeployKeyRequest struct {
	ctx                       context.Context
	ApiService                *DefaultApiService
	authorization             *string
	action                    *string
	deleteGitDeployKeyRequest *DeleteGitDeployKeyRequest
}

// 认证信息
func (r ApiDeleteGitDeployKeyRequest) Authorization(authorization string) ApiDeleteGitDeployKeyRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteGitDeployKeyRequest) Action(action string) ApiDeleteGitDeployKeyRequest {
	r.action = &action
	return r
}

func (r ApiDeleteGitDeployKeyRequest) DeleteGitDeployKeyRequest(deleteGitDeployKeyRequest DeleteGitDeployKeyRequest) ApiDeleteGitDeployKeyRequest {
	r.deleteGitDeployKeyRequest = &deleteGitDeployKeyRequest
	return r
}

func (r ApiDeleteGitDeployKeyRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DeleteGitDeployKeyExecute(r)
}

/*
DeleteGitDeployKey 仓库设置-删除部署公钥

✨ 删除部署公钥

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteGitDeployKeyRequest
*/
func (a *DefaultApiService) DeleteGitDeployKey(ctx context.Context) ApiDeleteGitDeployKeyRequest {
	return ApiDeleteGitDeployKeyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DeleteGitDeployKeyExecute(r ApiDeleteGitDeployKeyRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteGitDeployKey")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DeleteGitDeployKey"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteGitDeployKeyRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteGitDepotRequest struct {
	ctx                   context.Context
	ApiService            *DefaultApiService
	authorization         *string
	action                *string
	deleteGitDepotRequest *DeleteGitDepotRequest
}

// 认证信息
func (r ApiDeleteGitDepotRequest) Authorization(authorization string) ApiDeleteGitDepotRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteGitDepotRequest) Action(action string) ApiDeleteGitDepotRequest {
	r.action = &action
	return r
}

func (r ApiDeleteGitDepotRequest) DeleteGitDepotRequest(deleteGitDepotRequest DeleteGitDepotRequest) ApiDeleteGitDepotRequest {
	r.deleteGitDepotRequest = &deleteGitDepotRequest
	return r
}

func (r ApiDeleteGitDepotRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DeleteGitDepotExecute(r)
}

/*
DeleteGitDepot 仓库信息-删除git仓库

✨ 删除git仓库

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteGitDepotRequest
*/
func (a *DefaultApiService) DeleteGitDepot(ctx context.Context) ApiDeleteGitDepotRequest {
	return ApiDeleteGitDepotRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DeleteGitDepotExecute(r ApiDeleteGitDepotRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteGitDepot")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DeleteGitDepot"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteGitDepotRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteGitFilesRequest struct {
	ctx                   context.Context
	ApiService            *DefaultApiService
	authorization         *string
	action                *string
	deleteGitFilesRequest *DeleteGitFilesRequest
}

// 认证信息
func (r ApiDeleteGitFilesRequest) Authorization(authorization string) ApiDeleteGitFilesRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteGitFilesRequest) Action(action string) ApiDeleteGitFilesRequest {
	r.action = &action
	return r
}

func (r ApiDeleteGitFilesRequest) DeleteGitFilesRequest(deleteGitFilesRequest DeleteGitFilesRequest) ApiDeleteGitFilesRequest {
	r.deleteGitFilesRequest = &deleteGitFilesRequest
	return r
}

func (r ApiDeleteGitFilesRequest) Execute() (*DeleteGitFiles200Response, *http.Response, error) {
	return r.ApiService.DeleteGitFilesExecute(r)
}

/*
DeleteGitFiles Git文件-删除文件并提交

✨ 删除文件并提交

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteGitFilesRequest
*/
func (a *DefaultApiService) DeleteGitFiles(ctx context.Context) ApiDeleteGitFilesRequest {
	return ApiDeleteGitFilesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteGitFiles200Response
func (a *DefaultApiService) DeleteGitFilesExecute(r ApiDeleteGitFilesRequest) (*DeleteGitFiles200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteGitFiles200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteGitFiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DeleteGitFiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteGitFilesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteGitMergedBranchesRequest struct {
	ctx                            context.Context
	ApiService                     *DefaultApiService
	authorization                  *string
	action                         *string
	deleteGitMergedBranchesRequest *DeleteGitMergedBranchesRequest
}

// 认证信息
func (r ApiDeleteGitMergedBranchesRequest) Authorization(authorization string) ApiDeleteGitMergedBranchesRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteGitMergedBranchesRequest) Action(action string) ApiDeleteGitMergedBranchesRequest {
	r.action = &action
	return r
}

func (r ApiDeleteGitMergedBranchesRequest) DeleteGitMergedBranchesRequest(deleteGitMergedBranchesRequest DeleteGitMergedBranchesRequest) ApiDeleteGitMergedBranchesRequest {
	r.deleteGitMergedBranchesRequest = &deleteGitMergedBranchesRequest
	return r
}

func (r ApiDeleteGitMergedBranchesRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DeleteGitMergedBranchesExecute(r)
}

/*
DeleteGitMergedBranches 仓库分支-删除已合并到默认分支的分支（此操作不会删除受保护的分支)

✨ 删除已合并到默认分支的分支（此操作不会删除受保护的分支）

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteGitMergedBranchesRequest
*/
func (a *DefaultApiService) DeleteGitMergedBranches(ctx context.Context) ApiDeleteGitMergedBranchesRequest {
	return ApiDeleteGitMergedBranchesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DeleteGitMergedBranchesExecute(r ApiDeleteGitMergedBranchesRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteGitMergedBranches")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DeleteGitMergedBranches"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteGitMergedBranchesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteGitProtectedTagRuleRequest struct {
	ctx                              context.Context
	ApiService                       *DefaultApiService
	authorization                    *string
	action                           *string
	deleteGitProtectedTagRuleRequest *DeleteGitProtectedTagRuleRequest
}

// 认证信息
func (r ApiDeleteGitProtectedTagRuleRequest) Authorization(authorization string) ApiDeleteGitProtectedTagRuleRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteGitProtectedTagRuleRequest) Action(action string) ApiDeleteGitProtectedTagRuleRequest {
	r.action = &action
	return r
}

func (r ApiDeleteGitProtectedTagRuleRequest) DeleteGitProtectedTagRuleRequest(deleteGitProtectedTagRuleRequest DeleteGitProtectedTagRuleRequest) ApiDeleteGitProtectedTagRuleRequest {
	r.deleteGitProtectedTagRuleRequest = &deleteGitProtectedTagRuleRequest
	return r
}

func (r ApiDeleteGitProtectedTagRuleRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DeleteGitProtectedTagRuleExecute(r)
}

/*
DeleteGitProtectedTagRule 标签信息-删除标签保护规则

✨ 删除标签保护规则

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteGitProtectedTagRuleRequest
*/
func (a *DefaultApiService) DeleteGitProtectedTagRule(ctx context.Context) ApiDeleteGitProtectedTagRuleRequest {
	return ApiDeleteGitProtectedTagRuleRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DeleteGitProtectedTagRuleExecute(r ApiDeleteGitProtectedTagRuleRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteGitProtectedTagRule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DeleteGitProtectedTagRule"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteGitProtectedTagRuleRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteGitReleaseRequest struct {
	ctx                     context.Context
	ApiService              *DefaultApiService
	authorization           *string
	action                  *string
	deleteGitReleaseRequest *DeleteGitReleaseRequest
}

// 认证信息
func (r ApiDeleteGitReleaseRequest) Authorization(authorization string) ApiDeleteGitReleaseRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteGitReleaseRequest) Action(action string) ApiDeleteGitReleaseRequest {
	r.action = &action
	return r
}

func (r ApiDeleteGitReleaseRequest) DeleteGitReleaseRequest(deleteGitReleaseRequest DeleteGitReleaseRequest) ApiDeleteGitReleaseRequest {
	r.deleteGitReleaseRequest = &deleteGitReleaseRequest
	return r
}

func (r ApiDeleteGitReleaseRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DeleteGitReleaseExecute(r)
}

/*
DeleteGitRelease 版本信息-删除仓库版本

✨ 删除仓库版本

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteGitReleaseRequest
*/
func (a *DefaultApiService) DeleteGitRelease(ctx context.Context) ApiDeleteGitReleaseRequest {
	return ApiDeleteGitReleaseRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DeleteGitReleaseExecute(r ApiDeleteGitReleaseRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteGitRelease")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DeleteGitRelease"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteGitReleaseRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteGitTagRequest struct {
	ctx                 context.Context
	ApiService          *DefaultApiService
	authorization       *string
	action              *string
	deleteGitTagRequest *DeleteGitTagRequest
}

// 认证信息
func (r ApiDeleteGitTagRequest) Authorization(authorization string) ApiDeleteGitTagRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteGitTagRequest) Action(action string) ApiDeleteGitTagRequest {
	r.action = &action
	return r
}

func (r ApiDeleteGitTagRequest) DeleteGitTagRequest(deleteGitTagRequest DeleteGitTagRequest) ApiDeleteGitTagRequest {
	r.deleteGitTagRequest = &deleteGitTagRequest
	return r
}

func (r ApiDeleteGitTagRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DeleteGitTagExecute(r)
}

/*
DeleteGitTag 标签信息-代码仓库删除tag

✨ 代码仓库删除tag

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteGitTagRequest
*/
func (a *DefaultApiService) DeleteGitTag(ctx context.Context) ApiDeleteGitTagRequest {
	return ApiDeleteGitTagRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DeleteGitTagExecute(r ApiDeleteGitTagRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteGitTag")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DeleteGitTag"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteGitTagRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteIssueRequest struct {
	ctx                context.Context
	ApiService         *DefaultApiService
	authorization      *string
	action             *string
	deleteIssueRequest *DeleteIssueRequest
}

// 认证信息
func (r ApiDeleteIssueRequest) Authorization(authorization string) ApiDeleteIssueRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteIssueRequest) Action(action string) ApiDeleteIssueRequest {
	r.action = &action
	return r
}

func (r ApiDeleteIssueRequest) DeleteIssueRequest(deleteIssueRequest DeleteIssueRequest) ApiDeleteIssueRequest {
	r.deleteIssueRequest = &deleteIssueRequest
	return r
}

func (r ApiDeleteIssueRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DeleteIssueExecute(r)
}

/*
DeleteIssue 事项删除

✨ 删除事项

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteIssueRequest
*/
func (a *DefaultApiService) DeleteIssue(ctx context.Context) ApiDeleteIssueRequest {
	return ApiDeleteIssueRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DeleteIssueExecute(r ApiDeleteIssueRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteIssue")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DeleteIssue"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteIssueRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteIssueBlockRequest struct {
	ctx                     context.Context
	ApiService              *DefaultApiService
	authorization           *string
	action                  *string
	deleteIssueBlockRequest *DeleteIssueBlockRequest
}

// 认证信息
func (r ApiDeleteIssueBlockRequest) Authorization(authorization string) ApiDeleteIssueBlockRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteIssueBlockRequest) Action(action string) ApiDeleteIssueBlockRequest {
	r.action = &action
	return r
}

func (r ApiDeleteIssueBlockRequest) DeleteIssueBlockRequest(deleteIssueBlockRequest DeleteIssueBlockRequest) ApiDeleteIssueBlockRequest {
	r.deleteIssueBlockRequest = &deleteIssueBlockRequest
	return r
}

func (r ApiDeleteIssueBlockRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DeleteIssueBlockExecute(r)
}

/*
DeleteIssueBlock 前置事项删除

✨ 删除前置事项

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteIssueBlockRequest
*/
func (a *DefaultApiService) DeleteIssueBlock(ctx context.Context) ApiDeleteIssueBlockRequest {
	return ApiDeleteIssueBlockRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DeleteIssueBlockExecute(r ApiDeleteIssueBlockRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteIssueBlock")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DeleteIssueBlock"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteIssueBlockRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteIssueModuleRequest struct {
	ctx                      context.Context
	ApiService               *DefaultApiService
	authorization            *string
	action                   *string
	deleteIssueModuleRequest *DeleteIssueModuleRequest
}

// 认证信息
func (r ApiDeleteIssueModuleRequest) Authorization(authorization string) ApiDeleteIssueModuleRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteIssueModuleRequest) Action(action string) ApiDeleteIssueModuleRequest {
	r.action = &action
	return r
}

func (r ApiDeleteIssueModuleRequest) DeleteIssueModuleRequest(deleteIssueModuleRequest DeleteIssueModuleRequest) ApiDeleteIssueModuleRequest {
	r.deleteIssueModuleRequest = &deleteIssueModuleRequest
	return r
}

func (r ApiDeleteIssueModuleRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DeleteIssueModuleExecute(r)
}

/*
DeleteIssueModule 事项模块删除

✨ 删除事项模块

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteIssueModuleRequest
*/
func (a *DefaultApiService) DeleteIssueModule(ctx context.Context) ApiDeleteIssueModuleRequest {
	return ApiDeleteIssueModuleRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DeleteIssueModuleExecute(r ApiDeleteIssueModuleRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteIssueModule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DeleteIssueModule"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteIssueModuleRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteIssueWorkHoursRequest struct {
	ctx                         context.Context
	ApiService                  *DefaultApiService
	authorization               *string
	action                      *string
	deleteIssueWorkHoursRequest *DeleteIssueWorkHoursRequest
}

// 认证信息
func (r ApiDeleteIssueWorkHoursRequest) Authorization(authorization string) ApiDeleteIssueWorkHoursRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteIssueWorkHoursRequest) Action(action string) ApiDeleteIssueWorkHoursRequest {
	r.action = &action
	return r
}

func (r ApiDeleteIssueWorkHoursRequest) DeleteIssueWorkHoursRequest(deleteIssueWorkHoursRequest DeleteIssueWorkHoursRequest) ApiDeleteIssueWorkHoursRequest {
	r.deleteIssueWorkHoursRequest = &deleteIssueWorkHoursRequest
	return r
}

func (r ApiDeleteIssueWorkHoursRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DeleteIssueWorkHoursExecute(r)
}

/*
DeleteIssueWorkHours 工时日志删除

✨ 删除工时日志

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteIssueWorkHoursRequest
*/
func (a *DefaultApiService) DeleteIssueWorkHours(ctx context.Context) ApiDeleteIssueWorkHoursRequest {
	return ApiDeleteIssueWorkHoursRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DeleteIssueWorkHoursExecute(r ApiDeleteIssueWorkHoursRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteIssueWorkHours")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DeleteIssueWorkHours"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteIssueWorkHoursRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteIterationRequest struct {
	ctx                    context.Context
	ApiService             *DefaultApiService
	authorization          *string
	action                 *string
	deleteIterationRequest *DeleteIterationRequest
}

// 认证信息
func (r ApiDeleteIterationRequest) Authorization(authorization string) ApiDeleteIterationRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteIterationRequest) Action(action string) ApiDeleteIterationRequest {
	r.action = &action
	return r
}

func (r ApiDeleteIterationRequest) DeleteIterationRequest(deleteIterationRequest DeleteIterationRequest) ApiDeleteIterationRequest {
	r.deleteIterationRequest = &deleteIterationRequest
	return r
}

func (r ApiDeleteIterationRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DeleteIterationExecute(r)
}

/*
DeleteIteration 迭代删除

✨ 删除迭代

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteIterationRequest
*/
func (a *DefaultApiService) DeleteIteration(ctx context.Context) ApiDeleteIterationRequest {
	return ApiDeleteIterationRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DeleteIterationExecute(r ApiDeleteIterationRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteIteration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DeleteIteration"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteIterationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteMemberSshKeyRequest struct {
	ctx                       context.Context
	ApiService                *DefaultApiService
	authorization             *string
	action                    *string
	deleteMemberSshKeyRequest *DeleteMemberSshKeyRequest
}

// 认证信息
func (r ApiDeleteMemberSshKeyRequest) Authorization(authorization string) ApiDeleteMemberSshKeyRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteMemberSshKeyRequest) Action(action string) ApiDeleteMemberSshKeyRequest {
	r.action = &action
	return r
}

func (r ApiDeleteMemberSshKeyRequest) DeleteMemberSshKeyRequest(deleteMemberSshKeyRequest DeleteMemberSshKeyRequest) ApiDeleteMemberSshKeyRequest {
	r.deleteMemberSshKeyRequest = &deleteMemberSshKeyRequest
	return r
}

func (r ApiDeleteMemberSshKeyRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DeleteMemberSshKeyExecute(r)
}

/*
DeleteMemberSshKey 仓库设置-删除团队成员的SSH公钥

✨ 删除团队成员的SSH公钥

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteMemberSshKeyRequest
*/
func (a *DefaultApiService) DeleteMemberSshKey(ctx context.Context) ApiDeleteMemberSshKeyRequest {
	return ApiDeleteMemberSshKeyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DeleteMemberSshKeyExecute(r ApiDeleteMemberSshKeyRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteMemberSshKey")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DeleteMemberSshKey"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteMemberSshKeyRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteMergeRequestNoteRequest struct {
	ctx                           context.Context
	ApiService                    *DefaultApiService
	authorization                 *string
	action                        *string
	deleteMergeRequestNoteRequest *DeleteMergeRequestNoteRequest
}

// 认证信息
func (r ApiDeleteMergeRequestNoteRequest) Authorization(authorization string) ApiDeleteMergeRequestNoteRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteMergeRequestNoteRequest) Action(action string) ApiDeleteMergeRequestNoteRequest {
	r.action = &action
	return r
}

func (r ApiDeleteMergeRequestNoteRequest) DeleteMergeRequestNoteRequest(deleteMergeRequestNoteRequest DeleteMergeRequestNoteRequest) ApiDeleteMergeRequestNoteRequest {
	r.deleteMergeRequestNoteRequest = &deleteMergeRequestNoteRequest
	return r
}

func (r ApiDeleteMergeRequestNoteRequest) Execute() (*DeleteMergeRequestNote200Response, *http.Response, error) {
	return r.ApiService.DeleteMergeRequestNoteExecute(r)
}

/*
DeleteMergeRequestNote 合并请求-删除合并请求行评论和改动文件diff行评论

✨ 删除合并请求行评论和改动文件diff行评论

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteMergeRequestNoteRequest
*/
func (a *DefaultApiService) DeleteMergeRequestNote(ctx context.Context) ApiDeleteMergeRequestNoteRequest {
	return ApiDeleteMergeRequestNoteRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteMergeRequestNote200Response
func (a *DefaultApiService) DeleteMergeRequestNoteExecute(r ApiDeleteMergeRequestNoteRequest) (*DeleteMergeRequestNote200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteMergeRequestNote200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteMergeRequestNote")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DeleteMergeRequestNote"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteMergeRequestNoteRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteMergeRequestReviewerRequest struct {
	ctx                               context.Context
	ApiService                        *DefaultApiService
	authorization                     *string
	action                            *string
	deleteMergeRequestReviewerRequest *DeleteMergeRequestReviewerRequest
}

// 认证信息
func (r ApiDeleteMergeRequestReviewerRequest) Authorization(authorization string) ApiDeleteMergeRequestReviewerRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteMergeRequestReviewerRequest) Action(action string) ApiDeleteMergeRequestReviewerRequest {
	r.action = &action
	return r
}

func (r ApiDeleteMergeRequestReviewerRequest) DeleteMergeRequestReviewerRequest(deleteMergeRequestReviewerRequest DeleteMergeRequestReviewerRequest) ApiDeleteMergeRequestReviewerRequest {
	r.deleteMergeRequestReviewerRequest = &deleteMergeRequestReviewerRequest
	return r
}

func (r ApiDeleteMergeRequestReviewerRequest) Execute() (*DeleteMergeRequestReviewer200Response, *http.Response, error) {
	return r.ApiService.DeleteMergeRequestReviewerExecute(r)
}

/*
DeleteMergeRequestReviewer 合并请求-删除mr评审者

✨ 删除mr评审者

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteMergeRequestReviewerRequest
*/
func (a *DefaultApiService) DeleteMergeRequestReviewer(ctx context.Context) ApiDeleteMergeRequestReviewerRequest {
	return ApiDeleteMergeRequestReviewerRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteMergeRequestReviewer200Response
func (a *DefaultApiService) DeleteMergeRequestReviewerExecute(r ApiDeleteMergeRequestReviewerRequest) (*DeleteMergeRequestReviewer200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteMergeRequestReviewer200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteMergeRequestReviewer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DeleteMergeRequestReviewer"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteMergeRequestReviewerRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteOneProjectRequest struct {
	ctx                     context.Context
	ApiService              *DefaultApiService
	authorization           *string
	action                  *string
	deleteOneProjectRequest *DeleteOneProjectRequest
}

// 认证信息
func (r ApiDeleteOneProjectRequest) Authorization(authorization string) ApiDeleteOneProjectRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteOneProjectRequest) Action(action string) ApiDeleteOneProjectRequest {
	r.action = &action
	return r
}

func (r ApiDeleteOneProjectRequest) DeleteOneProjectRequest(deleteOneProjectRequest DeleteOneProjectRequest) ApiDeleteOneProjectRequest {
	r.deleteOneProjectRequest = &deleteOneProjectRequest
	return r
}

func (r ApiDeleteOneProjectRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DeleteOneProjectExecute(r)
}

/*
DeleteOneProject 单个项目删除

✨ 单个项目删除

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteOneProjectRequest
*/
func (a *DefaultApiService) DeleteOneProject(ctx context.Context) ApiDeleteOneProjectRequest {
	return ApiDeleteOneProjectRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DeleteOneProjectExecute(r ApiDeleteOneProjectRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteOneProject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DeleteOneProject"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteOneProjectRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeletePoliciesByIdRequest struct {
	ctx                       context.Context
	ApiService                *DefaultApiService
	authorization             *string
	action                    *string
	deletePoliciesByIdRequest *DeletePoliciesByIdRequest
}

// 认证信息
func (r ApiDeletePoliciesByIdRequest) Authorization(authorization string) ApiDeletePoliciesByIdRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeletePoliciesByIdRequest) Action(action string) ApiDeletePoliciesByIdRequest {
	r.action = &action
	return r
}

func (r ApiDeletePoliciesByIdRequest) DeletePoliciesByIdRequest(deletePoliciesByIdRequest DeletePoliciesByIdRequest) ApiDeletePoliciesByIdRequest {
	r.deletePoliciesByIdRequest = &deletePoliciesByIdRequest
	return r
}

func (r ApiDeletePoliciesByIdRequest) Execute() (*DeletePoliciesById200Response, *http.Response, error) {
	return r.ApiService.DeletePoliciesByIdExecute(r)
}

/*
DeletePoliciesById 权限组批量删除

✨ 权限组批量删除

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeletePoliciesByIdRequest
*/
func (a *DefaultApiService) DeletePoliciesById(ctx context.Context) ApiDeletePoliciesByIdRequest {
	return ApiDeletePoliciesByIdRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeletePoliciesById200Response
func (a *DefaultApiService) DeletePoliciesByIdExecute(r ApiDeletePoliciesByIdRequest) (*DeletePoliciesById200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeletePoliciesById200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeletePoliciesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DeletePoliciesById"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deletePoliciesByIdRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteProgramMemberPolicyRequest struct {
	ctx                              context.Context
	ApiService                       *DefaultApiService
	authorization                    *string
	action                           *string
	deleteProgramMemberPolicyRequest *DeleteProgramMemberPolicyRequest
}

// 认证信息
func (r ApiDeleteProgramMemberPolicyRequest) Authorization(authorization string) ApiDeleteProgramMemberPolicyRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteProgramMemberPolicyRequest) Action(action string) ApiDeleteProgramMemberPolicyRequest {
	r.action = &action
	return r
}

func (r ApiDeleteProgramMemberPolicyRequest) DeleteProgramMemberPolicyRequest(deleteProgramMemberPolicyRequest DeleteProgramMemberPolicyRequest) ApiDeleteProgramMemberPolicyRequest {
	r.deleteProgramMemberPolicyRequest = &deleteProgramMemberPolicyRequest
	return r
}

func (r ApiDeleteProgramMemberPolicyRequest) Execute() (*DeleteProgramMemberPolicy200Response, *http.Response, error) {
	return r.ApiService.DeleteProgramMemberPolicyExecute(r)
}

/*
DeleteProgramMemberPolicy 项目集成员权限组删除

✨ 项目集成员权限组删除

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteProgramMemberPolicyRequest
*/
func (a *DefaultApiService) DeleteProgramMemberPolicy(ctx context.Context) ApiDeleteProgramMemberPolicyRequest {
	return ApiDeleteProgramMemberPolicyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteProgramMemberPolicy200Response
func (a *DefaultApiService) DeleteProgramMemberPolicyExecute(r ApiDeleteProgramMemberPolicyRequest) (*DeleteProgramMemberPolicy200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteProgramMemberPolicy200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteProgramMemberPolicy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DeleteProgramMemberPolicy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteProgramMemberPolicyRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteProjectAnnouncementRequest struct {
	ctx                              context.Context
	ApiService                       *DefaultApiService
	authorization                    *string
	action                           *string
	deleteProjectAnnouncementRequest *DeleteProjectAnnouncementRequest
}

// 认证信息
func (r ApiDeleteProjectAnnouncementRequest) Authorization(authorization string) ApiDeleteProjectAnnouncementRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteProjectAnnouncementRequest) Action(action string) ApiDeleteProjectAnnouncementRequest {
	r.action = &action
	return r
}

func (r ApiDeleteProjectAnnouncementRequest) DeleteProjectAnnouncementRequest(deleteProjectAnnouncementRequest DeleteProjectAnnouncementRequest) ApiDeleteProjectAnnouncementRequest {
	r.deleteProjectAnnouncementRequest = &deleteProjectAnnouncementRequest
	return r
}

func (r ApiDeleteProjectAnnouncementRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DeleteProjectAnnouncementExecute(r)
}

/*
DeleteProjectAnnouncement 项目公告删除

✨ 项目公告删除

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteProjectAnnouncementRequest
*/
func (a *DefaultApiService) DeleteProjectAnnouncement(ctx context.Context) ApiDeleteProjectAnnouncementRequest {
	return ApiDeleteProjectAnnouncementRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DeleteProjectAnnouncementExecute(r ApiDeleteProjectAnnouncementRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteProjectAnnouncement")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DeleteProjectAnnouncement"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteProjectAnnouncementRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteProjectLabelRequest struct {
	ctx                       context.Context
	ApiService                *DefaultApiService
	authorization             *string
	action                    *string
	deleteProjectLabelRequest *DeleteProjectLabelRequest
}

// 认证信息
func (r ApiDeleteProjectLabelRequest) Authorization(authorization string) ApiDeleteProjectLabelRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteProjectLabelRequest) Action(action string) ApiDeleteProjectLabelRequest {
	r.action = &action
	return r
}

func (r ApiDeleteProjectLabelRequest) DeleteProjectLabelRequest(deleteProjectLabelRequest DeleteProjectLabelRequest) ApiDeleteProjectLabelRequest {
	r.deleteProjectLabelRequest = &deleteProjectLabelRequest
	return r
}

func (r ApiDeleteProjectLabelRequest) Execute() (*DeleteProjectLabel200Response, *http.Response, error) {
	return r.ApiService.DeleteProjectLabelExecute(r)
}

/*
DeleteProjectLabel 项目标签删除

✨ 项目标签删除

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteProjectLabelRequest
*/
func (a *DefaultApiService) DeleteProjectLabel(ctx context.Context) ApiDeleteProjectLabelRequest {
	return ApiDeleteProjectLabelRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteProjectLabel200Response
func (a *DefaultApiService) DeleteProjectLabelExecute(r ApiDeleteProjectLabelRequest) (*DeleteProjectLabel200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteProjectLabel200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteProjectLabel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DeleteProjectLabel"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteProjectLabelRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteProjectMemberPrincipalRequest struct {
	ctx                                 context.Context
	ApiService                          *DefaultApiService
	authorization                       *string
	action                              *string
	deleteProjectMemberPrincipalRequest *DeleteProjectMemberPrincipalRequest
}

// 认证信息
func (r ApiDeleteProjectMemberPrincipalRequest) Authorization(authorization string) ApiDeleteProjectMemberPrincipalRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteProjectMemberPrincipalRequest) Action(action string) ApiDeleteProjectMemberPrincipalRequest {
	r.action = &action
	return r
}

func (r ApiDeleteProjectMemberPrincipalRequest) DeleteProjectMemberPrincipalRequest(deleteProjectMemberPrincipalRequest DeleteProjectMemberPrincipalRequest) ApiDeleteProjectMemberPrincipalRequest {
	r.deleteProjectMemberPrincipalRequest = &deleteProjectMemberPrincipalRequest
	return r
}

func (r ApiDeleteProjectMemberPrincipalRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DeleteProjectMemberPrincipalExecute(r)
}

/*
DeleteProjectMemberPrincipal 项目成员主体删除(包含用户组、部门、成员)

✨ 项目成员主体删除(包含用户组、部门、成员)

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteProjectMemberPrincipalRequest
*/
func (a *DefaultApiService) DeleteProjectMemberPrincipal(ctx context.Context) ApiDeleteProjectMemberPrincipalRequest {
	return ApiDeleteProjectMemberPrincipalRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DeleteProjectMemberPrincipalExecute(r ApiDeleteProjectMemberPrincipalRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteProjectMemberPrincipal")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DeleteProjectMemberPrincipal"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteProjectMemberPrincipalRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteReleaseRequest struct {
	ctx                  context.Context
	ApiService           *DefaultApiService
	authorization        *string
	action               *string
	deleteReleaseRequest *DeleteReleaseRequest
}

// 认证信息
func (r ApiDeleteReleaseRequest) Authorization(authorization string) ApiDeleteReleaseRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteReleaseRequest) Action(action string) ApiDeleteReleaseRequest {
	r.action = &action
	return r
}

func (r ApiDeleteReleaseRequest) DeleteReleaseRequest(deleteReleaseRequest DeleteReleaseRequest) ApiDeleteReleaseRequest {
	r.deleteReleaseRequest = &deleteReleaseRequest
	return r
}

func (r ApiDeleteReleaseRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DeleteReleaseExecute(r)
}

/*
DeleteRelease 版本删除

✨ 删除版本

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteReleaseRequest
*/
func (a *DefaultApiService) DeleteRelease(ctx context.Context) ApiDeleteReleaseRequest {
	return ApiDeleteReleaseRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DeleteReleaseExecute(r ApiDeleteReleaseRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteRelease")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DeleteRelease"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteReleaseRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteReportRequest struct {
	ctx                 context.Context
	ApiService          *DefaultApiService
	authorization       *string
	action              *string
	deleteReportRequest *DeleteReportRequest
}

// 认证信息
func (r ApiDeleteReportRequest) Authorization(authorization string) ApiDeleteReportRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteReportRequest) Action(action string) ApiDeleteReportRequest {
	r.action = &action
	return r
}

func (r ApiDeleteReportRequest) DeleteReportRequest(deleteReportRequest DeleteReportRequest) ApiDeleteReportRequest {
	r.deleteReportRequest = &deleteReportRequest
	return r
}

func (r ApiDeleteReportRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DeleteReportExecute(r)
}

/*
DeleteReport 测试报告删除

✨ 测试报告删除

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteReportRequest
*/
func (a *DefaultApiService) DeleteReport(ctx context.Context) ApiDeleteReportRequest {
	return ApiDeleteReportRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DeleteReportExecute(r ApiDeleteReportRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteReport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DeleteReport"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteReportRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteRequirementDefectRelationRequest struct {
	ctx                                    context.Context
	ApiService                             *DefaultApiService
	authorization                          *string
	action                                 *string
	createRequirementDefectRelationRequest *CreateRequirementDefectRelationRequest
}

// 认证信息
func (r ApiDeleteRequirementDefectRelationRequest) Authorization(authorization string) ApiDeleteRequirementDefectRelationRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteRequirementDefectRelationRequest) Action(action string) ApiDeleteRequirementDefectRelationRequest {
	r.action = &action
	return r
}

func (r ApiDeleteRequirementDefectRelationRequest) CreateRequirementDefectRelationRequest(createRequirementDefectRelationRequest CreateRequirementDefectRelationRequest) ApiDeleteRequirementDefectRelationRequest {
	r.createRequirementDefectRelationRequest = &createRequirementDefectRelationRequest
	return r
}

func (r ApiDeleteRequirementDefectRelationRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DeleteRequirementDefectRelationExecute(r)
}

/*
DeleteRequirementDefectRelation 需求取消关联缺陷

✨ 需求取消关联缺陷

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteRequirementDefectRelationRequest
*/
func (a *DefaultApiService) DeleteRequirementDefectRelation(ctx context.Context) ApiDeleteRequirementDefectRelationRequest {
	return ApiDeleteRequirementDefectRelationRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DeleteRequirementDefectRelationExecute(r ApiDeleteRequirementDefectRelationRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteRequirementDefectRelation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DeleteRequirementDefectRelation"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.createRequirementDefectRelationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteSshKeyRequest struct {
	ctx                 context.Context
	ApiService          *DefaultApiService
	authorization       *string
	action              *string
	deleteSshKeyRequest *DeleteSshKeyRequest
}

// 认证信息
func (r ApiDeleteSshKeyRequest) Authorization(authorization string) ApiDeleteSshKeyRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteSshKeyRequest) Action(action string) ApiDeleteSshKeyRequest {
	r.action = &action
	return r
}

func (r ApiDeleteSshKeyRequest) DeleteSshKeyRequest(deleteSshKeyRequest DeleteSshKeyRequest) ApiDeleteSshKeyRequest {
	r.deleteSshKeyRequest = &deleteSshKeyRequest
	return r
}

func (r ApiDeleteSshKeyRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DeleteSshKeyExecute(r)
}

/*
DeleteSshKey 仓库设置-删除当前用户的SSH公钥

✨ 删除当前用户的SSH公钥

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteSshKeyRequest
*/
func (a *DefaultApiService) DeleteSshKey(ctx context.Context) ApiDeleteSshKeyRequest {
	return ApiDeleteSshKeyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DeleteSshKeyExecute(r ApiDeleteSshKeyRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteSshKey")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DeleteSshKey"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteSshKeyRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteTeamLevelDepotSpecRequest struct {
	ctx                             context.Context
	ApiService                      *DefaultApiService
	authorization                   *string
	action                          *string
	deleteTeamLevelDepotSpecRequest *DeleteTeamLevelDepotSpecRequest
}

// 认证信息
func (r ApiDeleteTeamLevelDepotSpecRequest) Authorization(authorization string) ApiDeleteTeamLevelDepotSpecRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteTeamLevelDepotSpecRequest) Action(action string) ApiDeleteTeamLevelDepotSpecRequest {
	r.action = &action
	return r
}

func (r ApiDeleteTeamLevelDepotSpecRequest) DeleteTeamLevelDepotSpecRequest(deleteTeamLevelDepotSpecRequest DeleteTeamLevelDepotSpecRequest) ApiDeleteTeamLevelDepotSpecRequest {
	r.deleteTeamLevelDepotSpecRequest = &deleteTeamLevelDepotSpecRequest
	return r
}

func (r ApiDeleteTeamLevelDepotSpecRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DeleteTeamLevelDepotSpecExecute(r)
}

/*
DeleteTeamLevelDepotSpec 仓库设置-删除团队级别的分支规范

✨ 删除团队级别的分支规范

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteTeamLevelDepotSpecRequest
*/
func (a *DefaultApiService) DeleteTeamLevelDepotSpec(ctx context.Context) ApiDeleteTeamLevelDepotSpecRequest {
	return ApiDeleteTeamLevelDepotSpecRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DeleteTeamLevelDepotSpecExecute(r ApiDeleteTeamLevelDepotSpecRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteTeamLevelDepotSpec")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DeleteTeamLevelDepotSpec"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteTeamLevelDepotSpecRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteTeamMemberRequest struct {
	ctx                     context.Context
	ApiService              *DefaultApiService
	authorization           *string
	action                  *string
	deleteTeamMemberRequest *DeleteTeamMemberRequest
}

// 认证信息
func (r ApiDeleteTeamMemberRequest) Authorization(authorization string) ApiDeleteTeamMemberRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteTeamMemberRequest) Action(action string) ApiDeleteTeamMemberRequest {
	r.action = &action
	return r
}

func (r ApiDeleteTeamMemberRequest) DeleteTeamMemberRequest(deleteTeamMemberRequest DeleteTeamMemberRequest) ApiDeleteTeamMemberRequest {
	r.deleteTeamMemberRequest = &deleteTeamMemberRequest
	return r
}

func (r ApiDeleteTeamMemberRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DeleteTeamMemberExecute(r)
}

/*
DeleteTeamMember 团队成员删除

✨ 团队成员删除

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteTeamMemberRequest
*/
func (a *DefaultApiService) DeleteTeamMember(ctx context.Context) ApiDeleteTeamMemberRequest {
	return ApiDeleteTeamMemberRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DeleteTeamMemberExecute(r ApiDeleteTeamMemberRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteTeamMember")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DeleteTeamMember"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteTeamMemberRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteTestCaseRequest struct {
	ctx                   context.Context
	ApiService            *DefaultApiService
	authorization         *string
	action                *string
	deleteTestCaseRequest *DeleteTestCaseRequest
}

// 认证信息
func (r ApiDeleteTestCaseRequest) Authorization(authorization string) ApiDeleteTestCaseRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteTestCaseRequest) Action(action string) ApiDeleteTestCaseRequest {
	r.action = &action
	return r
}

func (r ApiDeleteTestCaseRequest) DeleteTestCaseRequest(deleteTestCaseRequest DeleteTestCaseRequest) ApiDeleteTestCaseRequest {
	r.deleteTestCaseRequest = &deleteTestCaseRequest
	return r
}

func (r ApiDeleteTestCaseRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DeleteTestCaseExecute(r)
}

/*
DeleteTestCase 测试用例删除

✨ 测试用例删除

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteTestCaseRequest
*/
func (a *DefaultApiService) DeleteTestCase(ctx context.Context) ApiDeleteTestCaseRequest {
	return ApiDeleteTestCaseRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DeleteTestCaseExecute(r ApiDeleteTestCaseRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteTestCase")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DeleteTestCase"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteTestCaseRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteTestCaseSectionRequest struct {
	ctx                          context.Context
	ApiService                   *DefaultApiService
	authorization                *string
	action                       *string
	deleteTestCaseSectionRequest *DeleteTestCaseSectionRequest
}

// 认证信息
func (r ApiDeleteTestCaseSectionRequest) Authorization(authorization string) ApiDeleteTestCaseSectionRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteTestCaseSectionRequest) Action(action string) ApiDeleteTestCaseSectionRequest {
	r.action = &action
	return r
}

func (r ApiDeleteTestCaseSectionRequest) DeleteTestCaseSectionRequest(deleteTestCaseSectionRequest DeleteTestCaseSectionRequest) ApiDeleteTestCaseSectionRequest {
	r.deleteTestCaseSectionRequest = &deleteTestCaseSectionRequest
	return r
}

func (r ApiDeleteTestCaseSectionRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DeleteTestCaseSectionExecute(r)
}

/*
DeleteTestCaseSection 测试用例分组删除

✨ 测试用例分组删除

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteTestCaseSectionRequest
*/
func (a *DefaultApiService) DeleteTestCaseSection(ctx context.Context) ApiDeleteTestCaseSectionRequest {
	return ApiDeleteTestCaseSectionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DeleteTestCaseSectionExecute(r ApiDeleteTestCaseSectionRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteTestCaseSection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DeleteTestCaseSection"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteTestCaseSectionRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteTestRunRequest struct {
	ctx                  context.Context
	ApiService           *DefaultApiService
	authorization        *string
	action               *string
	deleteTestRunRequest *DeleteTestRunRequest
}

// 认证信息
func (r ApiDeleteTestRunRequest) Authorization(authorization string) ApiDeleteTestRunRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteTestRunRequest) Action(action string) ApiDeleteTestRunRequest {
	r.action = &action
	return r
}

func (r ApiDeleteTestRunRequest) DeleteTestRunRequest(deleteTestRunRequest DeleteTestRunRequest) ApiDeleteTestRunRequest {
	r.deleteTestRunRequest = &deleteTestRunRequest
	return r
}

func (r ApiDeleteTestRunRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DeleteTestRunExecute(r)
}

/*
DeleteTestRun 测试计划删除

✨ 测试计划删除

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteTestRunRequest
*/
func (a *DefaultApiService) DeleteTestRun(ctx context.Context) ApiDeleteTestRunRequest {
	return ApiDeleteTestRunRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DeleteTestRunExecute(r ApiDeleteTestRunRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteTestRun")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DeleteTestRun"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteTestRunRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteUserGroupByIdsRequest struct {
	ctx                         context.Context
	ApiService                  *DefaultApiService
	authorization               *string
	action                      *string
	deleteUserGroupByIdsRequest *DeleteUserGroupByIdsRequest
}

// 认证信息
func (r ApiDeleteUserGroupByIdsRequest) Authorization(authorization string) ApiDeleteUserGroupByIdsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteUserGroupByIdsRequest) Action(action string) ApiDeleteUserGroupByIdsRequest {
	r.action = &action
	return r
}

func (r ApiDeleteUserGroupByIdsRequest) DeleteUserGroupByIdsRequest(deleteUserGroupByIdsRequest DeleteUserGroupByIdsRequest) ApiDeleteUserGroupByIdsRequest {
	r.deleteUserGroupByIdsRequest = &deleteUserGroupByIdsRequest
	return r
}

func (r ApiDeleteUserGroupByIdsRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DeleteUserGroupByIdsExecute(r)
}

/*
DeleteUserGroupByIds 用户组删除

✨ 用户组删除

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteUserGroupByIdsRequest
*/
func (a *DefaultApiService) DeleteUserGroupByIds(ctx context.Context) ApiDeleteUserGroupByIdsRequest {
	return ApiDeleteUserGroupByIdsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DeleteUserGroupByIdsExecute(r ApiDeleteUserGroupByIdsRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteUserGroupByIds")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DeleteUserGroupByIds"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteUserGroupByIdsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteUserGroupUsersRequest struct {
	ctx                         context.Context
	ApiService                  *DefaultApiService
	authorization               *string
	action                      *string
	deleteUserGroupUsersRequest *DeleteUserGroupUsersRequest
}

// 认证信息
func (r ApiDeleteUserGroupUsersRequest) Authorization(authorization string) ApiDeleteUserGroupUsersRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteUserGroupUsersRequest) Action(action string) ApiDeleteUserGroupUsersRequest {
	r.action = &action
	return r
}

func (r ApiDeleteUserGroupUsersRequest) DeleteUserGroupUsersRequest(deleteUserGroupUsersRequest DeleteUserGroupUsersRequest) ApiDeleteUserGroupUsersRequest {
	r.deleteUserGroupUsersRequest = &deleteUserGroupUsersRequest
	return r
}

func (r ApiDeleteUserGroupUsersRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DeleteUserGroupUsersExecute(r)
}

/*
DeleteUserGroupUsers 用户组删除用户

✨ 用户组删除用户

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteUserGroupUsersRequest
*/
func (a *DefaultApiService) DeleteUserGroupUsers(ctx context.Context) ApiDeleteUserGroupUsersRequest {
	return ApiDeleteUserGroupUsersRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DeleteUserGroupUsersExecute(r ApiDeleteUserGroupUsersRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteUserGroupUsers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DeleteUserGroupUsers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteUserGroupUsersRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeAgentSecretRequest struct {
	ctx           context.Context
	ApiService    *DefaultApiService
	authorization *string
	action        *string
	body          *map[string]interface{}
}

// 认证信息
func (r ApiDescribeAgentSecretRequest) Authorization(authorization string) ApiDescribeAgentSecretRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeAgentSecretRequest) Action(action string) ApiDescribeAgentSecretRequest {
	r.action = &action
	return r
}

func (r ApiDescribeAgentSecretRequest) Body(body map[string]interface{}) ApiDescribeAgentSecretRequest {
	r.body = &body
	return r
}

func (r ApiDescribeAgentSecretRequest) Execute() (*DescribeAgentSecret200Response, *http.Response, error) {
	return r.ApiService.DescribeAgentSecretExecute(r)
}

/*
DescribeAgentSecret 堡垒机安装 Secret

✨ 在堡垒机上安装 CD 客户端必要的 Secret 凭据参数

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeAgentSecretRequest
*/
func (a *DefaultApiService) DescribeAgentSecret(ctx context.Context) ApiDescribeAgentSecretRequest {
	return ApiDescribeAgentSecretRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeAgentSecret200Response
func (a *DefaultApiService) DescribeAgentSecretExecute(r ApiDescribeAgentSecretRequest) (*DescribeAgentSecret200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeAgentSecret200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeAgentSecret")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeAgentSecret"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeAllMergeRequestNotesRequest struct {
	ctx                                 context.Context
	ApiService                          *DefaultApiService
	authorization                       *string
	action                              *string
	describeAllMergeRequestNotesRequest *DescribeAllMergeRequestNotesRequest
}

// 认证信息
func (r ApiDescribeAllMergeRequestNotesRequest) Authorization(authorization string) ApiDescribeAllMergeRequestNotesRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeAllMergeRequestNotesRequest) Action(action string) ApiDescribeAllMergeRequestNotesRequest {
	r.action = &action
	return r
}

func (r ApiDescribeAllMergeRequestNotesRequest) DescribeAllMergeRequestNotesRequest(describeAllMergeRequestNotesRequest DescribeAllMergeRequestNotesRequest) ApiDescribeAllMergeRequestNotesRequest {
	r.describeAllMergeRequestNotesRequest = &describeAllMergeRequestNotesRequest
	return r
}

func (r ApiDescribeAllMergeRequestNotesRequest) Execute() (*DescribeAllMergeRequestNotes200Response, *http.Response, error) {
	return r.ApiService.DescribeAllMergeRequestNotesExecute(r)
}

/*
DescribeAllMergeRequestNotes 合并请求-获取所有合并请求行评论和改动文件diff行评论

✨ 获取所有合并请求行评论和改动文件diff行评论

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeAllMergeRequestNotesRequest
*/
func (a *DefaultApiService) DescribeAllMergeRequestNotes(ctx context.Context) ApiDescribeAllMergeRequestNotesRequest {
	return ApiDescribeAllMergeRequestNotesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeAllMergeRequestNotes200Response
func (a *DefaultApiService) DescribeAllMergeRequestNotesExecute(r ApiDescribeAllMergeRequestNotesRequest) (*DescribeAllMergeRequestNotes200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeAllMergeRequestNotes200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeAllMergeRequestNotes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeAllMergeRequestNotes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeAllMergeRequestNotesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeAllProjectLabelsRequest struct {
	ctx                             context.Context
	ApiService                      *DefaultApiService
	authorization                   *string
	action                          *string
	describeAllProjectLabelsRequest *DescribeAllProjectLabelsRequest
}

// 认证信息
func (r ApiDescribeAllProjectLabelsRequest) Authorization(authorization string) ApiDescribeAllProjectLabelsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeAllProjectLabelsRequest) Action(action string) ApiDescribeAllProjectLabelsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeAllProjectLabelsRequest) DescribeAllProjectLabelsRequest(describeAllProjectLabelsRequest DescribeAllProjectLabelsRequest) ApiDescribeAllProjectLabelsRequest {
	r.describeAllProjectLabelsRequest = &describeAllProjectLabelsRequest
	return r
}

func (r ApiDescribeAllProjectLabelsRequest) Execute() (*DescribeAllProjectLabels200Response, *http.Response, error) {
	return r.ApiService.DescribeAllProjectLabelsExecute(r)
}

/*
DescribeAllProjectLabels 项目标签查询

✨ 项目标签查询

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeAllProjectLabelsRequest
*/
func (a *DefaultApiService) DescribeAllProjectLabels(ctx context.Context) ApiDescribeAllProjectLabelsRequest {
	return ApiDescribeAllProjectLabelsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeAllProjectLabels200Response
func (a *DefaultApiService) DescribeAllProjectLabelsExecute(r ApiDescribeAllProjectLabelsRequest) (*DescribeAllProjectLabels200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeAllProjectLabels200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeAllProjectLabels")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeAllProjectLabels"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeAllProjectLabelsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeAllProjectsIssueWorkLogListRequest struct {
	ctx                                        context.Context
	ApiService                                 *DefaultApiService
	authorization                              *string
	action                                     *string
	describeAllProjectsIssueWorkLogListRequest *DescribeAllProjectsIssueWorkLogListRequest
}

// 认证信息
func (r ApiDescribeAllProjectsIssueWorkLogListRequest) Authorization(authorization string) ApiDescribeAllProjectsIssueWorkLogListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeAllProjectsIssueWorkLogListRequest) Action(action string) ApiDescribeAllProjectsIssueWorkLogListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeAllProjectsIssueWorkLogListRequest) DescribeAllProjectsIssueWorkLogListRequest(describeAllProjectsIssueWorkLogListRequest DescribeAllProjectsIssueWorkLogListRequest) ApiDescribeAllProjectsIssueWorkLogListRequest {
	r.describeAllProjectsIssueWorkLogListRequest = &describeAllProjectsIssueWorkLogListRequest
	return r
}

func (r ApiDescribeAllProjectsIssueWorkLogListRequest) Execute() (*DescribeAllProjectsIssueWorkLogList200Response, *http.Response, error) {
	return r.ApiService.DescribeAllProjectsIssueWorkLogListExecute(r)
}

/*
DescribeAllProjectsIssueWorkLogList 工时日志列表查询

✨ 查询全部有权限的项目工时日志列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeAllProjectsIssueWorkLogListRequest
*/
func (a *DefaultApiService) DescribeAllProjectsIssueWorkLogList(ctx context.Context) ApiDescribeAllProjectsIssueWorkLogListRequest {
	return ApiDescribeAllProjectsIssueWorkLogListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeAllProjectsIssueWorkLogList200Response
func (a *DefaultApiService) DescribeAllProjectsIssueWorkLogListExecute(r ApiDescribeAllProjectsIssueWorkLogListRequest) (*DescribeAllProjectsIssueWorkLogList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeAllProjectsIssueWorkLogList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeAllProjectsIssueWorkLogList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeAllProjectsIssueWorkLogList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeAllProjectsIssueWorkLogListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeArtifactChecksumsRequest struct {
	ctx                              context.Context
	ApiService                       *DefaultApiService
	authorization                    *string
	action                           *string
	describeArtifactChecksumsRequest *DescribeArtifactChecksumsRequest
}

// 认证信息
func (r ApiDescribeArtifactChecksumsRequest) Authorization(authorization string) ApiDescribeArtifactChecksumsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeArtifactChecksumsRequest) Action(action string) ApiDescribeArtifactChecksumsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeArtifactChecksumsRequest) DescribeArtifactChecksumsRequest(describeArtifactChecksumsRequest DescribeArtifactChecksumsRequest) ApiDescribeArtifactChecksumsRequest {
	r.describeArtifactChecksumsRequest = &describeArtifactChecksumsRequest
	return r
}

func (r ApiDescribeArtifactChecksumsRequest) Execute() (*DescribeArtifactChecksums200Response, *http.Response, error) {
	return r.ApiService.DescribeArtifactChecksumsExecute(r)
}

/*
DescribeArtifactChecksums 制品Checksum列表查询

✨ 制品Checksum列表查询

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeArtifactChecksumsRequest
*/
func (a *DefaultApiService) DescribeArtifactChecksums(ctx context.Context) ApiDescribeArtifactChecksumsRequest {
	return ApiDescribeArtifactChecksumsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeArtifactChecksums200Response
func (a *DefaultApiService) DescribeArtifactChecksumsExecute(r ApiDescribeArtifactChecksumsRequest) (*DescribeArtifactChecksums200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeArtifactChecksums200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeArtifactChecksums")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeArtifactChecksums"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeArtifactChecksumsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeArtifactCreditRequest struct {
	ctx                           context.Context
	ApiService                    *DefaultApiService
	authorization                 *string
	action                        *string
	describeArtifactCreditRequest *DescribeArtifactCreditRequest
}

// 认证信息
func (r ApiDescribeArtifactCreditRequest) Authorization(authorization string) ApiDescribeArtifactCreditRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeArtifactCreditRequest) Action(action string) ApiDescribeArtifactCreditRequest {
	r.action = &action
	return r
}

func (r ApiDescribeArtifactCreditRequest) DescribeArtifactCreditRequest(describeArtifactCreditRequest DescribeArtifactCreditRequest) ApiDescribeArtifactCreditRequest {
	r.describeArtifactCreditRequest = &describeArtifactCreditRequest
	return r
}

func (r ApiDescribeArtifactCreditRequest) Execute() (*DescribeArtifactCredit200Response, *http.Response, error) {
	return r.ApiService.DescribeArtifactCreditExecute(r)
}

/*
DescribeArtifactCredit 查询制品授信清单详情

✨ 通过授信清单ID查询制品授信清单详情

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeArtifactCreditRequest
*/
func (a *DefaultApiService) DescribeArtifactCredit(ctx context.Context) ApiDescribeArtifactCreditRequest {
	return ApiDescribeArtifactCreditRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeArtifactCredit200Response
func (a *DefaultApiService) DescribeArtifactCreditExecute(r ApiDescribeArtifactCreditRequest) (*DescribeArtifactCredit200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeArtifactCredit200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeArtifactCredit")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeArtifactCredit"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeArtifactCreditRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeArtifactCreditListRequest struct {
	ctx           context.Context
	ApiService    *DefaultApiService
	authorization *string
	action        *string
	body          *map[string]interface{}
}

// 认证信息
func (r ApiDescribeArtifactCreditListRequest) Authorization(authorization string) ApiDescribeArtifactCreditListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeArtifactCreditListRequest) Action(action string) ApiDescribeArtifactCreditListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeArtifactCreditListRequest) Body(body map[string]interface{}) ApiDescribeArtifactCreditListRequest {
	r.body = &body
	return r
}

func (r ApiDescribeArtifactCreditListRequest) Execute() (*DescribeArtifactCreditList200Response, *http.Response, error) {
	return r.ApiService.DescribeArtifactCreditListExecute(r)
}

/*
DescribeArtifactCreditList 制品授信清单列表查询

✨ 制品授信清单列表查询

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeArtifactCreditListRequest
*/
func (a *DefaultApiService) DescribeArtifactCreditList(ctx context.Context) ApiDescribeArtifactCreditListRequest {
	return ApiDescribeArtifactCreditListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeArtifactCreditList200Response
func (a *DefaultApiService) DescribeArtifactCreditListExecute(r ApiDescribeArtifactCreditListRequest) (*DescribeArtifactCreditList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeArtifactCreditList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeArtifactCreditList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeArtifactCreditList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeArtifactFileDownloadUrlRequest struct {
	ctx                                    context.Context
	ApiService                             *DefaultApiService
	authorization                          *string
	action                                 *string
	describeArtifactFileDownloadUrlRequest *DescribeArtifactFileDownloadUrlRequest
}

// 认证信息
func (r ApiDescribeArtifactFileDownloadUrlRequest) Authorization(authorization string) ApiDescribeArtifactFileDownloadUrlRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeArtifactFileDownloadUrlRequest) Action(action string) ApiDescribeArtifactFileDownloadUrlRequest {
	r.action = &action
	return r
}

func (r ApiDescribeArtifactFileDownloadUrlRequest) DescribeArtifactFileDownloadUrlRequest(describeArtifactFileDownloadUrlRequest DescribeArtifactFileDownloadUrlRequest) ApiDescribeArtifactFileDownloadUrlRequest {
	r.describeArtifactFileDownloadUrlRequest = &describeArtifactFileDownloadUrlRequest
	return r
}

func (r ApiDescribeArtifactFileDownloadUrlRequest) Execute() (*DescribeArtifactFileDownloadUrl200Response, *http.Response, error) {
	return r.ApiService.DescribeArtifactFileDownloadUrlExecute(r)
}

/*
DescribeArtifactFileDownloadUrl 制品文件临时下载链接获取

✨ 制品文件临时下载链接获取

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeArtifactFileDownloadUrlRequest
*/
func (a *DefaultApiService) DescribeArtifactFileDownloadUrl(ctx context.Context) ApiDescribeArtifactFileDownloadUrlRequest {
	return ApiDescribeArtifactFileDownloadUrlRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeArtifactFileDownloadUrl200Response
func (a *DefaultApiService) DescribeArtifactFileDownloadUrlExecute(r ApiDescribeArtifactFileDownloadUrlRequest) (*DescribeArtifactFileDownloadUrl200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeArtifactFileDownloadUrl200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeArtifactFileDownloadUrl")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeArtifactFileDownloadUrl"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeArtifactFileDownloadUrlRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeArtifactPackageListRequest struct {
	ctx                                context.Context
	ApiService                         *DefaultApiService
	authorization                      *string
	action                             *string
	describeArtifactPackageListRequest *DescribeArtifactPackageListRequest
}

// 认证信息
func (r ApiDescribeArtifactPackageListRequest) Authorization(authorization string) ApiDescribeArtifactPackageListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeArtifactPackageListRequest) Action(action string) ApiDescribeArtifactPackageListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeArtifactPackageListRequest) DescribeArtifactPackageListRequest(describeArtifactPackageListRequest DescribeArtifactPackageListRequest) ApiDescribeArtifactPackageListRequest {
	r.describeArtifactPackageListRequest = &describeArtifactPackageListRequest
	return r
}

func (r ApiDescribeArtifactPackageListRequest) Execute() (*DescribeArtifactPackageList200Response, *http.Response, error) {
	return r.ApiService.DescribeArtifactPackageListExecute(r)
}

/*
DescribeArtifactPackageList 制品包（镜像）列表查询

✨ 制品包（镜像）列表查询

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeArtifactPackageListRequest
*/
func (a *DefaultApiService) DescribeArtifactPackageList(ctx context.Context) ApiDescribeArtifactPackageListRequest {
	return ApiDescribeArtifactPackageListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeArtifactPackageList200Response
func (a *DefaultApiService) DescribeArtifactPackageListExecute(r ApiDescribeArtifactPackageListRequest) (*DescribeArtifactPackageList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeArtifactPackageList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeArtifactPackageList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeArtifactPackageList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeArtifactPackageListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeArtifactPropertiesRequest struct {
	ctx                              context.Context
	ApiService                       *DefaultApiService
	authorization                    *string
	action                           *string
	describeArtifactChecksumsRequest *DescribeArtifactChecksumsRequest
}

// 认证信息
func (r ApiDescribeArtifactPropertiesRequest) Authorization(authorization string) ApiDescribeArtifactPropertiesRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeArtifactPropertiesRequest) Action(action string) ApiDescribeArtifactPropertiesRequest {
	r.action = &action
	return r
}

func (r ApiDescribeArtifactPropertiesRequest) DescribeArtifactChecksumsRequest(describeArtifactChecksumsRequest DescribeArtifactChecksumsRequest) ApiDescribeArtifactPropertiesRequest {
	r.describeArtifactChecksumsRequest = &describeArtifactChecksumsRequest
	return r
}

func (r ApiDescribeArtifactPropertiesRequest) Execute() (*DescribeArtifactProperties200Response, *http.Response, error) {
	return r.ApiService.DescribeArtifactPropertiesExecute(r)
}

/*
DescribeArtifactProperties 制品属性列表查询

✨ 指定制品版本的制品属性列表查询

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeArtifactPropertiesRequest
*/
func (a *DefaultApiService) DescribeArtifactProperties(ctx context.Context) ApiDescribeArtifactPropertiesRequest {
	return ApiDescribeArtifactPropertiesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeArtifactProperties200Response
func (a *DefaultApiService) DescribeArtifactPropertiesExecute(r ApiDescribeArtifactPropertiesRequest) (*DescribeArtifactProperties200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeArtifactProperties200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeArtifactProperties")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeArtifactProperties"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeArtifactChecksumsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeArtifactRepositoryFileListRequest struct {
	ctx                                       context.Context
	ApiService                                *DefaultApiService
	authorization                             *string
	action                                    *string
	describeArtifactRepositoryFileListRequest *DescribeArtifactRepositoryFileListRequest
}

// 认证信息
func (r ApiDescribeArtifactRepositoryFileListRequest) Authorization(authorization string) ApiDescribeArtifactRepositoryFileListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeArtifactRepositoryFileListRequest) Action(action string) ApiDescribeArtifactRepositoryFileListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeArtifactRepositoryFileListRequest) DescribeArtifactRepositoryFileListRequest(describeArtifactRepositoryFileListRequest DescribeArtifactRepositoryFileListRequest) ApiDescribeArtifactRepositoryFileListRequest {
	r.describeArtifactRepositoryFileListRequest = &describeArtifactRepositoryFileListRequest
	return r
}

func (r ApiDescribeArtifactRepositoryFileListRequest) Execute() (*DescribeArtifactRepositoryFileList200Response, *http.Response, error) {
	return r.ApiService.DescribeArtifactRepositoryFileListExecute(r)
}

/*
DescribeArtifactRepositoryFileList 制品仓库下可下载的文件列表获取

✨ 制品仓库下可下载的文件列表获取

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeArtifactRepositoryFileListRequest
*/
func (a *DefaultApiService) DescribeArtifactRepositoryFileList(ctx context.Context) ApiDescribeArtifactRepositoryFileListRequest {
	return ApiDescribeArtifactRepositoryFileListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeArtifactRepositoryFileList200Response
func (a *DefaultApiService) DescribeArtifactRepositoryFileListExecute(r ApiDescribeArtifactRepositoryFileListRequest) (*DescribeArtifactRepositoryFileList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeArtifactRepositoryFileList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeArtifactRepositoryFileList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeArtifactRepositoryFileList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeArtifactRepositoryFileListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeArtifactRepositoryListRequest struct {
	ctx                                   context.Context
	ApiService                            *DefaultApiService
	authorization                         *string
	action                                *string
	describeArtifactRepositoryListRequest *DescribeArtifactRepositoryListRequest
}

// 认证信息
func (r ApiDescribeArtifactRepositoryListRequest) Authorization(authorization string) ApiDescribeArtifactRepositoryListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeArtifactRepositoryListRequest) Action(action string) ApiDescribeArtifactRepositoryListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeArtifactRepositoryListRequest) DescribeArtifactRepositoryListRequest(describeArtifactRepositoryListRequest DescribeArtifactRepositoryListRequest) ApiDescribeArtifactRepositoryListRequest {
	r.describeArtifactRepositoryListRequest = &describeArtifactRepositoryListRequest
	return r
}

func (r ApiDescribeArtifactRepositoryListRequest) Execute() (*DescribeArtifactRepositoryList200Response, *http.Response, error) {
	return r.ApiService.DescribeArtifactRepositoryListExecute(r)
}

/*
DescribeArtifactRepositoryList 制品仓库列表查询

✨ 查询当前团队指定项目的制品仓库列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeArtifactRepositoryListRequest
*/
func (a *DefaultApiService) DescribeArtifactRepositoryList(ctx context.Context) ApiDescribeArtifactRepositoryListRequest {
	return ApiDescribeArtifactRepositoryListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeArtifactRepositoryList200Response
func (a *DefaultApiService) DescribeArtifactRepositoryListExecute(r ApiDescribeArtifactRepositoryListRequest) (*DescribeArtifactRepositoryList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeArtifactRepositoryList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeArtifactRepositoryList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeArtifactRepositoryList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeArtifactRepositoryListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeArtifactVersionFileListRequest struct {
	ctx                                    context.Context
	ApiService                             *DefaultApiService
	authorization                          *string
	action                                 *string
	describeArtifactVersionFileListRequest *DescribeArtifactVersionFileListRequest
}

// 认证信息
func (r ApiDescribeArtifactVersionFileListRequest) Authorization(authorization string) ApiDescribeArtifactVersionFileListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeArtifactVersionFileListRequest) Action(action string) ApiDescribeArtifactVersionFileListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeArtifactVersionFileListRequest) DescribeArtifactVersionFileListRequest(describeArtifactVersionFileListRequest DescribeArtifactVersionFileListRequest) ApiDescribeArtifactVersionFileListRequest {
	r.describeArtifactVersionFileListRequest = &describeArtifactVersionFileListRequest
	return r
}

func (r ApiDescribeArtifactVersionFileListRequest) Execute() (*DescribeArtifactVersionFileList200Response, *http.Response, error) {
	return r.ApiService.DescribeArtifactVersionFileListExecute(r)
}

/*
DescribeArtifactVersionFileList 制品版本可下载的文件列表获取

✨ 制品版本可下载的文件列表获取（暂仅支持类型为: 1-Generic;3-maven;4-npm;5-pypi 制品）

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeArtifactVersionFileListRequest
*/
func (a *DefaultApiService) DescribeArtifactVersionFileList(ctx context.Context) ApiDescribeArtifactVersionFileListRequest {
	return ApiDescribeArtifactVersionFileListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeArtifactVersionFileList200Response
func (a *DefaultApiService) DescribeArtifactVersionFileListExecute(r ApiDescribeArtifactVersionFileListRequest) (*DescribeArtifactVersionFileList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeArtifactVersionFileList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeArtifactVersionFileList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeArtifactVersionFileList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeArtifactVersionFileListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeArtifactVersionListRequest struct {
	ctx                                context.Context
	ApiService                         *DefaultApiService
	authorization                      *string
	action                             *string
	describeArtifactVersionListRequest *DescribeArtifactVersionListRequest
}

// 认证信息
func (r ApiDescribeArtifactVersionListRequest) Authorization(authorization string) ApiDescribeArtifactVersionListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeArtifactVersionListRequest) Action(action string) ApiDescribeArtifactVersionListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeArtifactVersionListRequest) DescribeArtifactVersionListRequest(describeArtifactVersionListRequest DescribeArtifactVersionListRequest) ApiDescribeArtifactVersionListRequest {
	r.describeArtifactVersionListRequest = &describeArtifactVersionListRequest
	return r
}

func (r ApiDescribeArtifactVersionListRequest) Execute() (*DescribeArtifactVersionList200Response, *http.Response, error) {
	return r.ApiService.DescribeArtifactVersionListExecute(r)
}

/*
DescribeArtifactVersionList 制品版本列表查询

✨ 制品版本列表查询

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeArtifactVersionListRequest
*/
func (a *DefaultApiService) DescribeArtifactVersionList(ctx context.Context) ApiDescribeArtifactVersionListRequest {
	return ApiDescribeArtifactVersionListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeArtifactVersionList200Response
func (a *DefaultApiService) DescribeArtifactVersionListExecute(r ApiDescribeArtifactVersionListRequest) (*DescribeArtifactVersionList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeArtifactVersionList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeArtifactVersionList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeArtifactVersionList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeArtifactVersionListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeAvailablePoliciesOnResourceRequest struct {
	ctx                                        context.Context
	ApiService                                 *DefaultApiService
	authorization                              *string
	action                                     *string
	describeAvailablePoliciesOnResourceRequest *DescribeAvailablePoliciesOnResourceRequest
}

// 认证信息
func (r ApiDescribeAvailablePoliciesOnResourceRequest) Authorization(authorization string) ApiDescribeAvailablePoliciesOnResourceRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeAvailablePoliciesOnResourceRequest) Action(action string) ApiDescribeAvailablePoliciesOnResourceRequest {
	r.action = &action
	return r
}

func (r ApiDescribeAvailablePoliciesOnResourceRequest) DescribeAvailablePoliciesOnResourceRequest(describeAvailablePoliciesOnResourceRequest DescribeAvailablePoliciesOnResourceRequest) ApiDescribeAvailablePoliciesOnResourceRequest {
	r.describeAvailablePoliciesOnResourceRequest = &describeAvailablePoliciesOnResourceRequest
	return r
}

func (r ApiDescribeAvailablePoliciesOnResourceRequest) Execute() (*DescribeAvailablePoliciesOnResource200Response, *http.Response, error) {
	return r.ApiService.DescribeAvailablePoliciesOnResourceExecute(r)
}

/*
DescribeAvailablePoliciesOnResource 权限组列表查询（指定资源）

✨ 权限组列表查询（指定资源）

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeAvailablePoliciesOnResourceRequest
*/
func (a *DefaultApiService) DescribeAvailablePoliciesOnResource(ctx context.Context) ApiDescribeAvailablePoliciesOnResourceRequest {
	return ApiDescribeAvailablePoliciesOnResourceRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeAvailablePoliciesOnResource200Response
func (a *DefaultApiService) DescribeAvailablePoliciesOnResourceExecute(r ApiDescribeAvailablePoliciesOnResourceRequest) (*DescribeAvailablePoliciesOnResource200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeAvailablePoliciesOnResource200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeAvailablePoliciesOnResource")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeAvailablePoliciesOnResource"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeAvailablePoliciesOnResourceRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeBlockIssueListRequest struct {
	ctx                           context.Context
	ApiService                    *DefaultApiService
	authorization                 *string
	action                        *string
	describeBlockIssueListRequest *DescribeBlockIssueListRequest
}

// 认证信息
func (r ApiDescribeBlockIssueListRequest) Authorization(authorization string) ApiDescribeBlockIssueListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeBlockIssueListRequest) Action(action string) ApiDescribeBlockIssueListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeBlockIssueListRequest) DescribeBlockIssueListRequest(describeBlockIssueListRequest DescribeBlockIssueListRequest) ApiDescribeBlockIssueListRequest {
	r.describeBlockIssueListRequest = &describeBlockIssueListRequest
	return r
}

func (r ApiDescribeBlockIssueListRequest) Execute() (*DescribeBlockIssueList200Response, *http.Response, error) {
	return r.ApiService.DescribeBlockIssueListExecute(r)
}

/*
DescribeBlockIssueList 后置事项查询

✨ 查询后置事项

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeBlockIssueListRequest
*/
func (a *DefaultApiService) DescribeBlockIssueList(ctx context.Context) ApiDescribeBlockIssueListRequest {
	return ApiDescribeBlockIssueListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeBlockIssueList200Response
func (a *DefaultApiService) DescribeBlockIssueListExecute(r ApiDescribeBlockIssueListRequest) (*DescribeBlockIssueList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeBlockIssueList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeBlockIssueList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeBlockIssueList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeBlockIssueListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeBlockedByIssueListRequest struct {
	ctx                             context.Context
	ApiService                      *DefaultApiService
	authorization                   *string
	action                          *string
	describeIssueCommentListRequest *DescribeIssueCommentListRequest
}

// 认证信息
func (r ApiDescribeBlockedByIssueListRequest) Authorization(authorization string) ApiDescribeBlockedByIssueListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeBlockedByIssueListRequest) Action(action string) ApiDescribeBlockedByIssueListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeBlockedByIssueListRequest) DescribeIssueCommentListRequest(describeIssueCommentListRequest DescribeIssueCommentListRequest) ApiDescribeBlockedByIssueListRequest {
	r.describeIssueCommentListRequest = &describeIssueCommentListRequest
	return r
}

func (r ApiDescribeBlockedByIssueListRequest) Execute() (*DescribeBlockedByIssueList200Response, *http.Response, error) {
	return r.ApiService.DescribeBlockedByIssueListExecute(r)
}

/*
DescribeBlockedByIssueList 前置事项查询

✨ 查询前置事项

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeBlockedByIssueListRequest
*/
func (a *DefaultApiService) DescribeBlockedByIssueList(ctx context.Context) ApiDescribeBlockedByIssueListRequest {
	return ApiDescribeBlockedByIssueListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeBlockedByIssueList200Response
func (a *DefaultApiService) DescribeBlockedByIssueListExecute(r ApiDescribeBlockedByIssueListRequest) (*DescribeBlockedByIssueList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeBlockedByIssueList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeBlockedByIssueList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeBlockedByIssueList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeIssueCommentListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeBranchProtectionRequest struct {
	ctx                             context.Context
	ApiService                      *DefaultApiService
	authorization                   *string
	action                          *string
	describeBranchProtectionRequest *DescribeBranchProtectionRequest
}

// 认证信息
func (r ApiDescribeBranchProtectionRequest) Authorization(authorization string) ApiDescribeBranchProtectionRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeBranchProtectionRequest) Action(action string) ApiDescribeBranchProtectionRequest {
	r.action = &action
	return r
}

func (r ApiDescribeBranchProtectionRequest) DescribeBranchProtectionRequest(describeBranchProtectionRequest DescribeBranchProtectionRequest) ApiDescribeBranchProtectionRequest {
	r.describeBranchProtectionRequest = &describeBranchProtectionRequest
	return r
}

func (r ApiDescribeBranchProtectionRequest) Execute() (*DescribeBranchProtection200Response, *http.Response, error) {
	return r.ApiService.DescribeBranchProtectionExecute(r)
}

/*
DescribeBranchProtection 仓库设置-查询单个保护分支规则

✨ 查询单个保护分支规则

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeBranchProtectionRequest
*/
func (a *DefaultApiService) DescribeBranchProtection(ctx context.Context) ApiDescribeBranchProtectionRequest {
	return ApiDescribeBranchProtectionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeBranchProtection200Response
func (a *DefaultApiService) DescribeBranchProtectionExecute(r ApiDescribeBranchProtectionRequest) (*DescribeBranchProtection200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeBranchProtection200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeBranchProtection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeBranchProtection"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeBranchProtectionRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeBranchProtectionMembersRequest struct {
	ctx                                    context.Context
	ApiService                             *DefaultApiService
	authorization                          *string
	action                                 *string
	describeBranchProtectionMembersRequest *DescribeBranchProtectionMembersRequest
}

// 认证信息
func (r ApiDescribeBranchProtectionMembersRequest) Authorization(authorization string) ApiDescribeBranchProtectionMembersRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeBranchProtectionMembersRequest) Action(action string) ApiDescribeBranchProtectionMembersRequest {
	r.action = &action
	return r
}

func (r ApiDescribeBranchProtectionMembersRequest) DescribeBranchProtectionMembersRequest(describeBranchProtectionMembersRequest DescribeBranchProtectionMembersRequest) ApiDescribeBranchProtectionMembersRequest {
	r.describeBranchProtectionMembersRequest = &describeBranchProtectionMembersRequest
	return r
}

func (r ApiDescribeBranchProtectionMembersRequest) Execute() (*DescribeBranchProtectionMembers200Response, *http.Response, error) {
	return r.ApiService.DescribeBranchProtectionMembersExecute(r)
}

/*
DescribeBranchProtectionMembers 仓库设置-查询保护分支规则下所有管理员信息

✨ 查询保护分支规则下所有管理员信息

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeBranchProtectionMembersRequest
*/
func (a *DefaultApiService) DescribeBranchProtectionMembers(ctx context.Context) ApiDescribeBranchProtectionMembersRequest {
	return ApiDescribeBranchProtectionMembersRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeBranchProtectionMembers200Response
func (a *DefaultApiService) DescribeBranchProtectionMembersExecute(r ApiDescribeBranchProtectionMembersRequest) (*DescribeBranchProtectionMembers200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeBranchProtectionMembers200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeBranchProtectionMembers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeBranchProtectionMembers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeBranchProtectionMembersRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeBranchProtectionsRequest struct {
	ctx                              context.Context
	ApiService                       *DefaultApiService
	authorization                    *string
	action                           *string
	describeBranchProtectionsRequest *DescribeBranchProtectionsRequest
}

// 认证信息
func (r ApiDescribeBranchProtectionsRequest) Authorization(authorization string) ApiDescribeBranchProtectionsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeBranchProtectionsRequest) Action(action string) ApiDescribeBranchProtectionsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeBranchProtectionsRequest) DescribeBranchProtectionsRequest(describeBranchProtectionsRequest DescribeBranchProtectionsRequest) ApiDescribeBranchProtectionsRequest {
	r.describeBranchProtectionsRequest = &describeBranchProtectionsRequest
	return r
}

func (r ApiDescribeBranchProtectionsRequest) Execute() (*DescribeBranchProtections200Response, *http.Response, error) {
	return r.ApiService.DescribeBranchProtectionsExecute(r)
}

/*
DescribeBranchProtections 仓库设置-查询仓库保护分支规则集合

✨ 查询仓库保护分支规则集合

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeBranchProtectionsRequest
*/
func (a *DefaultApiService) DescribeBranchProtections(ctx context.Context) ApiDescribeBranchProtectionsRequest {
	return ApiDescribeBranchProtectionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeBranchProtections200Response
func (a *DefaultApiService) DescribeBranchProtectionsExecute(r ApiDescribeBranchProtectionsRequest) (*DescribeBranchProtections200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeBranchProtections200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeBranchProtections")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeBranchProtections"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeBranchProtectionsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeCanMergeRequest struct {
	ctx                     context.Context
	ApiService              *DefaultApiService
	authorization           *string
	action                  *string
	describeCanMergeRequest *DescribeCanMergeRequest
}

// 认证信息
func (r ApiDescribeCanMergeRequest) Authorization(authorization string) ApiDescribeCanMergeRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeCanMergeRequest) Action(action string) ApiDescribeCanMergeRequest {
	r.action = &action
	return r
}

func (r ApiDescribeCanMergeRequest) DescribeCanMergeRequest(describeCanMergeRequest DescribeCanMergeRequest) ApiDescribeCanMergeRequest {
	r.describeCanMergeRequest = &describeCanMergeRequest
	return r
}

func (r ApiDescribeCanMergeRequest) Execute() (*DescribeCanMerge200Response, *http.Response, error) {
	return r.ApiService.DescribeCanMergeExecute(r)
}

/*
DescribeCanMerge 合并请求-查看两个分支是否可以合并

✨ 查看两个分支是否可以合并

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeCanMergeRequest
*/
func (a *DefaultApiService) DescribeCanMerge(ctx context.Context) ApiDescribeCanMergeRequest {
	return ApiDescribeCanMergeRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeCanMerge200Response
func (a *DefaultApiService) DescribeCanMergeExecute(r ApiDescribeCanMergeRequest) (*DescribeCanMerge200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeCanMerge200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeCanMerge")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeCanMerge"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeCanMergeRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeCdAgentMachinesRequest struct {
	ctx                            context.Context
	ApiService                     *DefaultApiService
	authorization                  *string
	action                         *string
	describeCdAgentMachinesRequest *DescribeCdAgentMachinesRequest
}

// 认证信息
func (r ApiDescribeCdAgentMachinesRequest) Authorization(authorization string) ApiDescribeCdAgentMachinesRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeCdAgentMachinesRequest) Action(action string) ApiDescribeCdAgentMachinesRequest {
	r.action = &action
	return r
}

func (r ApiDescribeCdAgentMachinesRequest) DescribeCdAgentMachinesRequest(describeCdAgentMachinesRequest DescribeCdAgentMachinesRequest) ApiDescribeCdAgentMachinesRequest {
	r.describeCdAgentMachinesRequest = &describeCdAgentMachinesRequest
	return r
}

func (r ApiDescribeCdAgentMachinesRequest) Execute() (*DescribeCdAgentMachines200Response, *http.Response, error) {
	return r.ApiService.DescribeCdAgentMachinesExecute(r)
}

/*
DescribeCdAgentMachines CD 堡垒机列表获取

✨ CD 堡垒机列表获取

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeCdAgentMachinesRequest
*/
func (a *DefaultApiService) DescribeCdAgentMachines(ctx context.Context) ApiDescribeCdAgentMachinesRequest {
	return ApiDescribeCdAgentMachinesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeCdAgentMachines200Response
func (a *DefaultApiService) DescribeCdAgentMachinesExecute(r ApiDescribeCdAgentMachinesRequest) (*DescribeCdAgentMachines200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeCdAgentMachines200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeCdAgentMachines")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeCdAgentMachines"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeCdAgentMachinesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeCdApplicationRequest struct {
	ctx                          context.Context
	ApiService                   *DefaultApiService
	authorization                *string
	action                       *string
	describeCdApplicationRequest *DescribeCdApplicationRequest
}

// 认证信息
func (r ApiDescribeCdApplicationRequest) Authorization(authorization string) ApiDescribeCdApplicationRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeCdApplicationRequest) Action(action string) ApiDescribeCdApplicationRequest {
	r.action = &action
	return r
}

func (r ApiDescribeCdApplicationRequest) DescribeCdApplicationRequest(describeCdApplicationRequest DescribeCdApplicationRequest) ApiDescribeCdApplicationRequest {
	r.describeCdApplicationRequest = &describeCdApplicationRequest
	return r
}

func (r ApiDescribeCdApplicationRequest) Execute() (*DescribeCdApplication200Response, *http.Response, error) {
	return r.ApiService.DescribeCdApplicationExecute(r)
}

/*
DescribeCdApplication CD 应用详情获取

✨ CD 应用详情获取

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeCdApplicationRequest
*/
func (a *DefaultApiService) DescribeCdApplication(ctx context.Context) ApiDescribeCdApplicationRequest {
	return ApiDescribeCdApplicationRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeCdApplication200Response
func (a *DefaultApiService) DescribeCdApplicationExecute(r ApiDescribeCdApplicationRequest) (*DescribeCdApplication200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeCdApplication200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeCdApplication")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeCdApplication"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeCdApplicationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeCdApplicationsRequest struct {
	ctx           context.Context
	ApiService    *DefaultApiService
	authorization *string
	action        *string
	body          *map[string]interface{}
}

// 认证信息
func (r ApiDescribeCdApplicationsRequest) Authorization(authorization string) ApiDescribeCdApplicationsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeCdApplicationsRequest) Action(action string) ApiDescribeCdApplicationsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeCdApplicationsRequest) Body(body map[string]interface{}) ApiDescribeCdApplicationsRequest {
	r.body = &body
	return r
}

func (r ApiDescribeCdApplicationsRequest) Execute() (*DescribeCdApplications200Response, *http.Response, error) {
	return r.ApiService.DescribeCdApplicationsExecute(r)
}

/*
DescribeCdApplications CD 应用列表获取

✨ CD 应用列表获取

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeCdApplicationsRequest
*/
func (a *DefaultApiService) DescribeCdApplications(ctx context.Context) ApiDescribeCdApplicationsRequest {
	return ApiDescribeCdApplicationsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeCdApplications200Response
func (a *DefaultApiService) DescribeCdApplicationsExecute(r ApiDescribeCdApplicationsRequest) (*DescribeCdApplications200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeCdApplications200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeCdApplications")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeCdApplications"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeCdApplicationsByProjectRequest struct {
	ctx                       context.Context
	ApiService                *DefaultApiService
	authorization             *string
	action                    *string
	describeAPIDocListRequest *DescribeAPIDocListRequest
}

// 认证信息
func (r ApiDescribeCdApplicationsByProjectRequest) Authorization(authorization string) ApiDescribeCdApplicationsByProjectRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeCdApplicationsByProjectRequest) Action(action string) ApiDescribeCdApplicationsByProjectRequest {
	r.action = &action
	return r
}

func (r ApiDescribeCdApplicationsByProjectRequest) DescribeAPIDocListRequest(describeAPIDocListRequest DescribeAPIDocListRequest) ApiDescribeCdApplicationsByProjectRequest {
	r.describeAPIDocListRequest = &describeAPIDocListRequest
	return r
}

func (r ApiDescribeCdApplicationsByProjectRequest) Execute() (*DescribeCdApplicationsByProject200Response, *http.Response, error) {
	return r.ApiService.DescribeCdApplicationsByProjectExecute(r)
}

/*
DescribeCdApplicationsByProject 关联应用列表获取（指定项目名）

✨ 根据项目名获取关联应用列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeCdApplicationsByProjectRequest
*/
func (a *DefaultApiService) DescribeCdApplicationsByProject(ctx context.Context) ApiDescribeCdApplicationsByProjectRequest {
	return ApiDescribeCdApplicationsByProjectRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeCdApplicationsByProject200Response
func (a *DefaultApiService) DescribeCdApplicationsByProjectExecute(r ApiDescribeCdApplicationsByProjectRequest) (*DescribeCdApplicationsByProject200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeCdApplicationsByProject200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeCdApplicationsByProject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeCdApplicationsByProject"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeAPIDocListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeCdCloudAccountsRequest struct {
	ctx                            context.Context
	ApiService                     *DefaultApiService
	authorization                  *string
	action                         *string
	describeCdCloudAccountsRequest *DescribeCdCloudAccountsRequest
}

// 认证信息
func (r ApiDescribeCdCloudAccountsRequest) Authorization(authorization string) ApiDescribeCdCloudAccountsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeCdCloudAccountsRequest) Action(action string) ApiDescribeCdCloudAccountsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeCdCloudAccountsRequest) DescribeCdCloudAccountsRequest(describeCdCloudAccountsRequest DescribeCdCloudAccountsRequest) ApiDescribeCdCloudAccountsRequest {
	r.describeCdCloudAccountsRequest = &describeCdCloudAccountsRequest
	return r
}

func (r ApiDescribeCdCloudAccountsRequest) Execute() (*DescribeCdCloudAccounts200Response, *http.Response, error) {
	return r.ApiService.DescribeCdCloudAccountsExecute(r)
}

/*
DescribeCdCloudAccounts CD 云账号列表获取

✨ CD 云账号列表获取

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeCdCloudAccountsRequest
*/
func (a *DefaultApiService) DescribeCdCloudAccounts(ctx context.Context) ApiDescribeCdCloudAccountsRequest {
	return ApiDescribeCdCloudAccountsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeCdCloudAccounts200Response
func (a *DefaultApiService) DescribeCdCloudAccountsExecute(r ApiDescribeCdCloudAccountsRequest) (*DescribeCdCloudAccounts200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeCdCloudAccounts200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeCdCloudAccounts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeCdCloudAccounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeCdCloudAccountsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeCdDeployCountByApplicationsRequest struct {
	ctx                                        context.Context
	ApiService                                 *DefaultApiService
	authorization                              *string
	action                                     *string
	describeCdDeployCountByApplicationsRequest *DescribeCdDeployCountByApplicationsRequest
}

// 认证信息
func (r ApiDescribeCdDeployCountByApplicationsRequest) Authorization(authorization string) ApiDescribeCdDeployCountByApplicationsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeCdDeployCountByApplicationsRequest) Action(action string) ApiDescribeCdDeployCountByApplicationsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeCdDeployCountByApplicationsRequest) DescribeCdDeployCountByApplicationsRequest(describeCdDeployCountByApplicationsRequest DescribeCdDeployCountByApplicationsRequest) ApiDescribeCdDeployCountByApplicationsRequest {
	r.describeCdDeployCountByApplicationsRequest = &describeCdDeployCountByApplicationsRequest
	return r
}

func (r ApiDescribeCdDeployCountByApplicationsRequest) Execute() (*DescribeCdDeployCountByApplications200Response, *http.Response, error) {
	return r.ApiService.DescribeCdDeployCountByApplicationsExecute(r)
}

/*
DescribeCdDeployCountByApplications 发布次数-根据应用名列表获取

✨ 根据应用名列表获取发布次数

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeCdDeployCountByApplicationsRequest
*/
func (a *DefaultApiService) DescribeCdDeployCountByApplications(ctx context.Context) ApiDescribeCdDeployCountByApplicationsRequest {
	return ApiDescribeCdDeployCountByApplicationsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeCdDeployCountByApplications200Response
func (a *DefaultApiService) DescribeCdDeployCountByApplicationsExecute(r ApiDescribeCdDeployCountByApplicationsRequest) (*DescribeCdDeployCountByApplications200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeCdDeployCountByApplications200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeCdDeployCountByApplications")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeCdDeployCountByApplications"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeCdDeployCountByApplicationsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeCdDeployCountByProjectRequest struct {
	ctx                                  context.Context
	ApiService                           *DefaultApiService
	authorization                        *string
	action                               *string
	describeCdDeployTimeByProjectRequest *DescribeCdDeployTimeByProjectRequest
}

// 认证信息
func (r ApiDescribeCdDeployCountByProjectRequest) Authorization(authorization string) ApiDescribeCdDeployCountByProjectRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeCdDeployCountByProjectRequest) Action(action string) ApiDescribeCdDeployCountByProjectRequest {
	r.action = &action
	return r
}

func (r ApiDescribeCdDeployCountByProjectRequest) DescribeCdDeployTimeByProjectRequest(describeCdDeployTimeByProjectRequest DescribeCdDeployTimeByProjectRequest) ApiDescribeCdDeployCountByProjectRequest {
	r.describeCdDeployTimeByProjectRequest = &describeCdDeployTimeByProjectRequest
	return r
}

func (r ApiDescribeCdDeployCountByProjectRequest) Execute() (*DescribeCdDeployCountByProject200Response, *http.Response, error) {
	return r.ApiService.DescribeCdDeployCountByProjectExecute(r)
}

/*
DescribeCdDeployCountByProject 关联应用的发布次数获取（指定项目名）

✨ 关联应用的发布次数获取（指定项目名）

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeCdDeployCountByProjectRequest
*/
func (a *DefaultApiService) DescribeCdDeployCountByProject(ctx context.Context) ApiDescribeCdDeployCountByProjectRequest {
	return ApiDescribeCdDeployCountByProjectRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeCdDeployCountByProject200Response
func (a *DefaultApiService) DescribeCdDeployCountByProjectExecute(r ApiDescribeCdDeployCountByProjectRequest) (*DescribeCdDeployCountByProject200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeCdDeployCountByProject200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeCdDeployCountByProject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeCdDeployCountByProject"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeCdDeployTimeByProjectRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeCdDeployTimeByApplicationsRequest struct {
	ctx                                       context.Context
	ApiService                                *DefaultApiService
	authorization                             *string
	action                                    *string
	describeCdDeployTimeByApplicationsRequest *DescribeCdDeployTimeByApplicationsRequest
}

// 认证信息
func (r ApiDescribeCdDeployTimeByApplicationsRequest) Authorization(authorization string) ApiDescribeCdDeployTimeByApplicationsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeCdDeployTimeByApplicationsRequest) Action(action string) ApiDescribeCdDeployTimeByApplicationsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeCdDeployTimeByApplicationsRequest) DescribeCdDeployTimeByApplicationsRequest(describeCdDeployTimeByApplicationsRequest DescribeCdDeployTimeByApplicationsRequest) ApiDescribeCdDeployTimeByApplicationsRequest {
	r.describeCdDeployTimeByApplicationsRequest = &describeCdDeployTimeByApplicationsRequest
	return r
}

func (r ApiDescribeCdDeployTimeByApplicationsRequest) Execute() (*DescribeCdDeployTimeByApplications200Response, *http.Response, error) {
	return r.ApiService.DescribeCdDeployTimeByApplicationsExecute(r)
}

/*
DescribeCdDeployTimeByApplications 发布时长-根据应用名列表获取

✨ 发布时长-根据应用名列表获取

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeCdDeployTimeByApplicationsRequest
*/
func (a *DefaultApiService) DescribeCdDeployTimeByApplications(ctx context.Context) ApiDescribeCdDeployTimeByApplicationsRequest {
	return ApiDescribeCdDeployTimeByApplicationsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeCdDeployTimeByApplications200Response
func (a *DefaultApiService) DescribeCdDeployTimeByApplicationsExecute(r ApiDescribeCdDeployTimeByApplicationsRequest) (*DescribeCdDeployTimeByApplications200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeCdDeployTimeByApplications200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeCdDeployTimeByApplications")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeCdDeployTimeByApplications"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeCdDeployTimeByApplicationsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeCdDeployTimeByProjectRequest struct {
	ctx                                  context.Context
	ApiService                           *DefaultApiService
	authorization                        *string
	action                               *string
	describeCdDeployTimeByProjectRequest *DescribeCdDeployTimeByProjectRequest
}

// 认证信息
func (r ApiDescribeCdDeployTimeByProjectRequest) Authorization(authorization string) ApiDescribeCdDeployTimeByProjectRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeCdDeployTimeByProjectRequest) Action(action string) ApiDescribeCdDeployTimeByProjectRequest {
	r.action = &action
	return r
}

func (r ApiDescribeCdDeployTimeByProjectRequest) DescribeCdDeployTimeByProjectRequest(describeCdDeployTimeByProjectRequest DescribeCdDeployTimeByProjectRequest) ApiDescribeCdDeployTimeByProjectRequest {
	r.describeCdDeployTimeByProjectRequest = &describeCdDeployTimeByProjectRequest
	return r
}

func (r ApiDescribeCdDeployTimeByProjectRequest) Execute() (*DescribeCdDeployTimeByProject200Response, *http.Response, error) {
	return r.ApiService.DescribeCdDeployTimeByProjectExecute(r)
}

/*
DescribeCdDeployTimeByProject 关联应用的发布时长-根据项目名获取

✨ 关联应用的发布时长-根据项目名获取

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeCdDeployTimeByProjectRequest
*/
func (a *DefaultApiService) DescribeCdDeployTimeByProject(ctx context.Context) ApiDescribeCdDeployTimeByProjectRequest {
	return ApiDescribeCdDeployTimeByProjectRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeCdDeployTimeByProject200Response
func (a *DefaultApiService) DescribeCdDeployTimeByProjectExecute(r ApiDescribeCdDeployTimeByProjectRequest) (*DescribeCdDeployTimeByProject200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeCdDeployTimeByProject200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeCdDeployTimeByProject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeCdDeployTimeByProject"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeCdDeployTimeByProjectRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeCdDeployTrendByApplicationsRequest struct {
	ctx                                        context.Context
	ApiService                                 *DefaultApiService
	authorization                              *string
	action                                     *string
	describeCdDeployTrendByApplicationsRequest *DescribeCdDeployTrendByApplicationsRequest
}

// 认证信息
func (r ApiDescribeCdDeployTrendByApplicationsRequest) Authorization(authorization string) ApiDescribeCdDeployTrendByApplicationsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeCdDeployTrendByApplicationsRequest) Action(action string) ApiDescribeCdDeployTrendByApplicationsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeCdDeployTrendByApplicationsRequest) DescribeCdDeployTrendByApplicationsRequest(describeCdDeployTrendByApplicationsRequest DescribeCdDeployTrendByApplicationsRequest) ApiDescribeCdDeployTrendByApplicationsRequest {
	r.describeCdDeployTrendByApplicationsRequest = &describeCdDeployTrendByApplicationsRequest
	return r
}

func (r ApiDescribeCdDeployTrendByApplicationsRequest) Execute() (*DescribeCdDeployTrendByApplications200Response, *http.Response, error) {
	return r.ApiService.DescribeCdDeployTrendByApplicationsExecute(r)
}

/*
DescribeCdDeployTrendByApplications 发布趋势-根据应用名列表获取

✨ 发布趋势-根据应用名列表获取

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeCdDeployTrendByApplicationsRequest
*/
func (a *DefaultApiService) DescribeCdDeployTrendByApplications(ctx context.Context) ApiDescribeCdDeployTrendByApplicationsRequest {
	return ApiDescribeCdDeployTrendByApplicationsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeCdDeployTrendByApplications200Response
func (a *DefaultApiService) DescribeCdDeployTrendByApplicationsExecute(r ApiDescribeCdDeployTrendByApplicationsRequest) (*DescribeCdDeployTrendByApplications200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeCdDeployTrendByApplications200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeCdDeployTrendByApplications")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeCdDeployTrendByApplications"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeCdDeployTrendByApplicationsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeCdDeployTrendByProjectRequest struct {
	ctx                                   context.Context
	ApiService                            *DefaultApiService
	authorization                         *string
	action                                *string
	describeCdDeployTrendByProjectRequest *DescribeCdDeployTrendByProjectRequest
}

// 认证信息
func (r ApiDescribeCdDeployTrendByProjectRequest) Authorization(authorization string) ApiDescribeCdDeployTrendByProjectRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeCdDeployTrendByProjectRequest) Action(action string) ApiDescribeCdDeployTrendByProjectRequest {
	r.action = &action
	return r
}

func (r ApiDescribeCdDeployTrendByProjectRequest) DescribeCdDeployTrendByProjectRequest(describeCdDeployTrendByProjectRequest DescribeCdDeployTrendByProjectRequest) ApiDescribeCdDeployTrendByProjectRequest {
	r.describeCdDeployTrendByProjectRequest = &describeCdDeployTrendByProjectRequest
	return r
}

func (r ApiDescribeCdDeployTrendByProjectRequest) Execute() (*DescribeCdDeployTrendByProject200Response, *http.Response, error) {
	return r.ApiService.DescribeCdDeployTrendByProjectExecute(r)
}

/*
DescribeCdDeployTrendByProject 关联应用的发布趋势-根据项目名获取

✨ 关联应用的发布趋势-根据项目名获取

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeCdDeployTrendByProjectRequest
*/
func (a *DefaultApiService) DescribeCdDeployTrendByProject(ctx context.Context) ApiDescribeCdDeployTrendByProjectRequest {
	return ApiDescribeCdDeployTrendByProjectRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeCdDeployTrendByProject200Response
func (a *DefaultApiService) DescribeCdDeployTrendByProjectExecute(r ApiDescribeCdDeployTrendByProjectRequest) (*DescribeCdDeployTrendByProject200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeCdDeployTrendByProject200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeCdDeployTrendByProject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeCdDeployTrendByProject"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeCdDeployTrendByProjectRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeCdHostServerGroupRequest struct {
	ctx                              context.Context
	ApiService                       *DefaultApiService
	authorization                    *string
	action                           *string
	describeCdHostServerGroupRequest *DescribeCdHostServerGroupRequest
}

// 认证信息
func (r ApiDescribeCdHostServerGroupRequest) Authorization(authorization string) ApiDescribeCdHostServerGroupRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeCdHostServerGroupRequest) Action(action string) ApiDescribeCdHostServerGroupRequest {
	r.action = &action
	return r
}

func (r ApiDescribeCdHostServerGroupRequest) DescribeCdHostServerGroupRequest(describeCdHostServerGroupRequest DescribeCdHostServerGroupRequest) ApiDescribeCdHostServerGroupRequest {
	r.describeCdHostServerGroupRequest = &describeCdHostServerGroupRequest
	return r
}

func (r ApiDescribeCdHostServerGroupRequest) Execute() (*DescribeCdHostServerGroup200Response, *http.Response, error) {
	return r.ApiService.DescribeCdHostServerGroupExecute(r)
}

/*
DescribeCdHostServerGroup CD 主机组获取

✨ CD 主机组获取

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeCdHostServerGroupRequest
*/
func (a *DefaultApiService) DescribeCdHostServerGroup(ctx context.Context) ApiDescribeCdHostServerGroupRequest {
	return ApiDescribeCdHostServerGroupRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeCdHostServerGroup200Response
func (a *DefaultApiService) DescribeCdHostServerGroupExecute(r ApiDescribeCdHostServerGroupRequest) (*DescribeCdHostServerGroup200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeCdHostServerGroup200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeCdHostServerGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeCdHostServerGroup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeCdHostServerGroupRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeCdHostServerGroupsRequest struct {
	ctx                               context.Context
	ApiService                        *DefaultApiService
	authorization                     *string
	action                            *string
	describeCdHostServerGroupsRequest *DescribeCdHostServerGroupsRequest
}

// 认证信息
func (r ApiDescribeCdHostServerGroupsRequest) Authorization(authorization string) ApiDescribeCdHostServerGroupsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeCdHostServerGroupsRequest) Action(action string) ApiDescribeCdHostServerGroupsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeCdHostServerGroupsRequest) DescribeCdHostServerGroupsRequest(describeCdHostServerGroupsRequest DescribeCdHostServerGroupsRequest) ApiDescribeCdHostServerGroupsRequest {
	r.describeCdHostServerGroupsRequest = &describeCdHostServerGroupsRequest
	return r
}

func (r ApiDescribeCdHostServerGroupsRequest) Execute() (*DescribeCdHostServerGroups200Response, *http.Response, error) {
	return r.ApiService.DescribeCdHostServerGroupsExecute(r)
}

/*
DescribeCdHostServerGroups CD 主机组列表获取

✨ CD 主机组列表获取

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeCdHostServerGroupsRequest
*/
func (a *DefaultApiService) DescribeCdHostServerGroups(ctx context.Context) ApiDescribeCdHostServerGroupsRequest {
	return ApiDescribeCdHostServerGroupsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeCdHostServerGroups200Response
func (a *DefaultApiService) DescribeCdHostServerGroupsExecute(r ApiDescribeCdHostServerGroupsRequest) (*DescribeCdHostServerGroups200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeCdHostServerGroups200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeCdHostServerGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeCdHostServerGroups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeCdHostServerGroupsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeCdPipelineRequest struct {
	ctx                       context.Context
	ApiService                *DefaultApiService
	authorization             *string
	action                    *string
	describeCdPipelineRequest *DescribeCdPipelineRequest
}

// 认证信息
func (r ApiDescribeCdPipelineRequest) Authorization(authorization string) ApiDescribeCdPipelineRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeCdPipelineRequest) Action(action string) ApiDescribeCdPipelineRequest {
	r.action = &action
	return r
}

func (r ApiDescribeCdPipelineRequest) DescribeCdPipelineRequest(describeCdPipelineRequest DescribeCdPipelineRequest) ApiDescribeCdPipelineRequest {
	r.describeCdPipelineRequest = &describeCdPipelineRequest
	return r
}

func (r ApiDescribeCdPipelineRequest) Execute() (*DescribeCdPipeline200Response, *http.Response, error) {
	return r.ApiService.DescribeCdPipelineExecute(r)
}

/*
DescribeCdPipeline CD 部署流程执行记录获取

✨ CD 部署流程执行记录获取

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeCdPipelineRequest
*/
func (a *DefaultApiService) DescribeCdPipeline(ctx context.Context) ApiDescribeCdPipelineRequest {
	return ApiDescribeCdPipelineRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeCdPipeline200Response
func (a *DefaultApiService) DescribeCdPipelineExecute(r ApiDescribeCdPipelineRequest) (*DescribeCdPipeline200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeCdPipeline200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeCdPipeline")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeCdPipeline"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeCdPipelineRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeCdPipelineConfigRequest struct {
	ctx                             context.Context
	ApiService                      *DefaultApiService
	authorization                   *string
	action                          *string
	describeCdPipelineConfigRequest *DescribeCdPipelineConfigRequest
}

// 认证信息
func (r ApiDescribeCdPipelineConfigRequest) Authorization(authorization string) ApiDescribeCdPipelineConfigRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeCdPipelineConfigRequest) Action(action string) ApiDescribeCdPipelineConfigRequest {
	r.action = &action
	return r
}

func (r ApiDescribeCdPipelineConfigRequest) DescribeCdPipelineConfigRequest(describeCdPipelineConfigRequest DescribeCdPipelineConfigRequest) ApiDescribeCdPipelineConfigRequest {
	r.describeCdPipelineConfigRequest = &describeCdPipelineConfigRequest
	return r
}

func (r ApiDescribeCdPipelineConfigRequest) Execute() (*DescribeCdPipelineConfig200Response, *http.Response, error) {
	return r.ApiService.DescribeCdPipelineConfigExecute(r)
}

/*
DescribeCdPipelineConfig CD 部署流程配置-根据名称获取

✨ CD 部署流程配置-根据名称获取

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeCdPipelineConfigRequest
*/
func (a *DefaultApiService) DescribeCdPipelineConfig(ctx context.Context) ApiDescribeCdPipelineConfigRequest {
	return ApiDescribeCdPipelineConfigRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeCdPipelineConfig200Response
func (a *DefaultApiService) DescribeCdPipelineConfigExecute(r ApiDescribeCdPipelineConfigRequest) (*DescribeCdPipelineConfig200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeCdPipelineConfig200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeCdPipelineConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeCdPipelineConfig"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeCdPipelineConfigRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeCdPipelineConfigsRequest struct {
	ctx                              context.Context
	ApiService                       *DefaultApiService
	authorization                    *string
	action                           *string
	describeCdPipelineConfigsRequest *DescribeCdPipelineConfigsRequest
}

// 认证信息
func (r ApiDescribeCdPipelineConfigsRequest) Authorization(authorization string) ApiDescribeCdPipelineConfigsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeCdPipelineConfigsRequest) Action(action string) ApiDescribeCdPipelineConfigsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeCdPipelineConfigsRequest) DescribeCdPipelineConfigsRequest(describeCdPipelineConfigsRequest DescribeCdPipelineConfigsRequest) ApiDescribeCdPipelineConfigsRequest {
	r.describeCdPipelineConfigsRequest = &describeCdPipelineConfigsRequest
	return r
}

func (r ApiDescribeCdPipelineConfigsRequest) Execute() (*DescribeCdPipelineConfigs200Response, *http.Response, error) {
	return r.ApiService.DescribeCdPipelineConfigsExecute(r)
}

/*
DescribeCdPipelineConfigs CD 应用下的所有部署流程配置获取

✨ CD 应用下的所有部署流程配置获取

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeCdPipelineConfigsRequest
*/
func (a *DefaultApiService) DescribeCdPipelineConfigs(ctx context.Context) ApiDescribeCdPipelineConfigsRequest {
	return ApiDescribeCdPipelineConfigsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeCdPipelineConfigs200Response
func (a *DefaultApiService) DescribeCdPipelineConfigsExecute(r ApiDescribeCdPipelineConfigsRequest) (*DescribeCdPipelineConfigs200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeCdPipelineConfigs200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeCdPipelineConfigs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeCdPipelineConfigs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeCdPipelineConfigsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeCdTaskRequest struct {
	ctx                   context.Context
	ApiService            *DefaultApiService
	authorization         *string
	action                *string
	describeCdTaskRequest *DescribeCdTaskRequest
}

// 认证信息
func (r ApiDescribeCdTaskRequest) Authorization(authorization string) ApiDescribeCdTaskRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeCdTaskRequest) Action(action string) ApiDescribeCdTaskRequest {
	r.action = &action
	return r
}

func (r ApiDescribeCdTaskRequest) DescribeCdTaskRequest(describeCdTaskRequest DescribeCdTaskRequest) ApiDescribeCdTaskRequest {
	r.describeCdTaskRequest = &describeCdTaskRequest
	return r
}

func (r ApiDescribeCdTaskRequest) Execute() (*DescribeCdTask200Response, *http.Response, error) {
	return r.ApiService.DescribeCdTaskExecute(r)
}

/*
DescribeCdTask CD 任务执行记录获取

✨ CD 任务执行记录获取

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeCdTaskRequest
*/
func (a *DefaultApiService) DescribeCdTask(ctx context.Context) ApiDescribeCdTaskRequest {
	return ApiDescribeCdTaskRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeCdTask200Response
func (a *DefaultApiService) DescribeCdTaskExecute(r ApiDescribeCdTaskRequest) (*DescribeCdTask200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeCdTask200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeCdTask")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeCdTask"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeCdTaskRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeCodeSearchRequest struct {
	ctx                       context.Context
	ApiService                *DefaultApiService
	authorization             *string
	action                    *string
	describeCodeSearchRequest *DescribeCodeSearchRequest
}

// 认证信息
func (r ApiDescribeCodeSearchRequest) Authorization(authorization string) ApiDescribeCodeSearchRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeCodeSearchRequest) Action(action string) ApiDescribeCodeSearchRequest {
	r.action = &action
	return r
}

func (r ApiDescribeCodeSearchRequest) DescribeCodeSearchRequest(describeCodeSearchRequest DescribeCodeSearchRequest) ApiDescribeCodeSearchRequest {
	r.describeCodeSearchRequest = &describeCodeSearchRequest
	return r
}

func (r ApiDescribeCodeSearchRequest) Execute() (*DescribeCodeSearch200Response, *http.Response, error) {
	return r.ApiService.DescribeCodeSearchExecute(r)
}

/*
DescribeCodeSearch 仓库信息-查询代码片段详细列表

✨ 查询代码片段详细列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeCodeSearchRequest
*/
func (a *DefaultApiService) DescribeCodeSearch(ctx context.Context) ApiDescribeCodeSearchRequest {
	return ApiDescribeCodeSearchRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeCodeSearch200Response
func (a *DefaultApiService) DescribeCodeSearchExecute(r ApiDescribeCodeSearchRequest) (*DescribeCodeSearch200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeCodeSearch200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeCodeSearch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeCodeSearch"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeCodeSearchRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeCodingCIBuildRequest struct {
	ctx                               context.Context
	ApiService                        *DefaultApiService
	authorization                     *string
	action                            *string
	describeCodingCIBuildStageRequest *DescribeCodingCIBuildStageRequest
}

// 认证信息
func (r ApiDescribeCodingCIBuildRequest) Authorization(authorization string) ApiDescribeCodingCIBuildRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeCodingCIBuildRequest) Action(action string) ApiDescribeCodingCIBuildRequest {
	r.action = &action
	return r
}

func (r ApiDescribeCodingCIBuildRequest) DescribeCodingCIBuildStageRequest(describeCodingCIBuildStageRequest DescribeCodingCIBuildStageRequest) ApiDescribeCodingCIBuildRequest {
	r.describeCodingCIBuildStageRequest = &describeCodingCIBuildStageRequest
	return r
}

func (r ApiDescribeCodingCIBuildRequest) Execute() (*DescribeCodingCIBuild200Response, *http.Response, error) {
	return r.ApiService.DescribeCodingCIBuildExecute(r)
}

/*
DescribeCodingCIBuild 构建记录详情查询

✨ 查询构建记录详情

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeCodingCIBuildRequest
*/
func (a *DefaultApiService) DescribeCodingCIBuild(ctx context.Context) ApiDescribeCodingCIBuildRequest {
	return ApiDescribeCodingCIBuildRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeCodingCIBuild200Response
func (a *DefaultApiService) DescribeCodingCIBuildExecute(r ApiDescribeCodingCIBuildRequest) (*DescribeCodingCIBuild200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeCodingCIBuild200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeCodingCIBuild")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeCodingCIBuild"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeCodingCIBuildStageRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeCodingCIBuildArtifactsRequest struct {
	ctx                                   context.Context
	ApiService                            *DefaultApiService
	authorization                         *string
	action                                *string
	describeCodingCIBuildArtifactsRequest *DescribeCodingCIBuildArtifactsRequest
}

// 认证信息
func (r ApiDescribeCodingCIBuildArtifactsRequest) Authorization(authorization string) ApiDescribeCodingCIBuildArtifactsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeCodingCIBuildArtifactsRequest) Action(action string) ApiDescribeCodingCIBuildArtifactsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeCodingCIBuildArtifactsRequest) DescribeCodingCIBuildArtifactsRequest(describeCodingCIBuildArtifactsRequest DescribeCodingCIBuildArtifactsRequest) ApiDescribeCodingCIBuildArtifactsRequest {
	r.describeCodingCIBuildArtifactsRequest = &describeCodingCIBuildArtifactsRequest
	return r
}

func (r ApiDescribeCodingCIBuildArtifactsRequest) Execute() (*DescribeCodingCIBuildArtifacts200Response, *http.Response, error) {
	return r.ApiService.DescribeCodingCIBuildArtifactsExecute(r)
}

/*
DescribeCodingCIBuildArtifacts 构建任务制品查询

✨ 查询构建任务制品

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeCodingCIBuildArtifactsRequest
*/
func (a *DefaultApiService) DescribeCodingCIBuildArtifacts(ctx context.Context) ApiDescribeCodingCIBuildArtifactsRequest {
	return ApiDescribeCodingCIBuildArtifactsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeCodingCIBuildArtifacts200Response
func (a *DefaultApiService) DescribeCodingCIBuildArtifactsExecute(r ApiDescribeCodingCIBuildArtifactsRequest) (*DescribeCodingCIBuildArtifacts200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeCodingCIBuildArtifacts200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeCodingCIBuildArtifacts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeCodingCIBuildArtifacts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeCodingCIBuildArtifactsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeCodingCIBuildEnvsRequest struct {
	ctx                              context.Context
	ApiService                       *DefaultApiService
	authorization                    *string
	action                           *string
	describeCodingCIBuildEnvsRequest *DescribeCodingCIBuildEnvsRequest
}

// 认证信息
func (r ApiDescribeCodingCIBuildEnvsRequest) Authorization(authorization string) ApiDescribeCodingCIBuildEnvsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeCodingCIBuildEnvsRequest) Action(action string) ApiDescribeCodingCIBuildEnvsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeCodingCIBuildEnvsRequest) DescribeCodingCIBuildEnvsRequest(describeCodingCIBuildEnvsRequest DescribeCodingCIBuildEnvsRequest) ApiDescribeCodingCIBuildEnvsRequest {
	r.describeCodingCIBuildEnvsRequest = &describeCodingCIBuildEnvsRequest
	return r
}

func (r ApiDescribeCodingCIBuildEnvsRequest) Execute() (*DescribeCodingCIBuildEnvs200Response, *http.Response, error) {
	return r.ApiService.DescribeCodingCIBuildEnvsExecute(r)
}

/*
DescribeCodingCIBuildEnvs 构建计划环境变量获取

✨ 获取构建计划环境变量

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeCodingCIBuildEnvsRequest
*/
func (a *DefaultApiService) DescribeCodingCIBuildEnvs(ctx context.Context) ApiDescribeCodingCIBuildEnvsRequest {
	return ApiDescribeCodingCIBuildEnvsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeCodingCIBuildEnvs200Response
func (a *DefaultApiService) DescribeCodingCIBuildEnvsExecute(r ApiDescribeCodingCIBuildEnvsRequest) (*DescribeCodingCIBuildEnvs200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeCodingCIBuildEnvs200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeCodingCIBuildEnvs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeCodingCIBuildEnvs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeCodingCIBuildEnvsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeCodingCIBuildHtmlReportsRequest struct {
	ctx                                   context.Context
	ApiService                            *DefaultApiService
	authorization                         *string
	action                                *string
	describeCodingCIBuildArtifactsRequest *DescribeCodingCIBuildArtifactsRequest
}

// 认证信息
func (r ApiDescribeCodingCIBuildHtmlReportsRequest) Authorization(authorization string) ApiDescribeCodingCIBuildHtmlReportsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeCodingCIBuildHtmlReportsRequest) Action(action string) ApiDescribeCodingCIBuildHtmlReportsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeCodingCIBuildHtmlReportsRequest) DescribeCodingCIBuildArtifactsRequest(describeCodingCIBuildArtifactsRequest DescribeCodingCIBuildArtifactsRequest) ApiDescribeCodingCIBuildHtmlReportsRequest {
	r.describeCodingCIBuildArtifactsRequest = &describeCodingCIBuildArtifactsRequest
	return r
}

func (r ApiDescribeCodingCIBuildHtmlReportsRequest) Execute() (*DescribeCodingCIBuildHtmlReports200Response, *http.Response, error) {
	return r.ApiService.DescribeCodingCIBuildHtmlReportsExecute(r)
}

/*
DescribeCodingCIBuildHtmlReports 构建任务网页报告查询

✨ 构建任务网页报告查询

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeCodingCIBuildHtmlReportsRequest
*/
func (a *DefaultApiService) DescribeCodingCIBuildHtmlReports(ctx context.Context) ApiDescribeCodingCIBuildHtmlReportsRequest {
	return ApiDescribeCodingCIBuildHtmlReportsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeCodingCIBuildHtmlReports200Response
func (a *DefaultApiService) DescribeCodingCIBuildHtmlReportsExecute(r ApiDescribeCodingCIBuildHtmlReportsRequest) (*DescribeCodingCIBuildHtmlReports200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeCodingCIBuildHtmlReports200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeCodingCIBuildHtmlReports")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeCodingCIBuildHtmlReports"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeCodingCIBuildArtifactsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeCodingCIBuildLogRequest struct {
	ctx                             context.Context
	ApiService                      *DefaultApiService
	authorization                   *string
	action                          *string
	describeCodingCIBuildLogRequest *DescribeCodingCIBuildLogRequest
}

// 认证信息
func (r ApiDescribeCodingCIBuildLogRequest) Authorization(authorization string) ApiDescribeCodingCIBuildLogRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeCodingCIBuildLogRequest) Action(action string) ApiDescribeCodingCIBuildLogRequest {
	r.action = &action
	return r
}

func (r ApiDescribeCodingCIBuildLogRequest) DescribeCodingCIBuildLogRequest(describeCodingCIBuildLogRequest DescribeCodingCIBuildLogRequest) ApiDescribeCodingCIBuildLogRequest {
	r.describeCodingCIBuildLogRequest = &describeCodingCIBuildLogRequest
	return r
}

func (r ApiDescribeCodingCIBuildLogRequest) Execute() (*DescribeCodingCIBuildLog200Response, *http.Response, error) {
	return r.ApiService.DescribeCodingCIBuildLogExecute(r)
}

/*
DescribeCodingCIBuildLog 构建日志获取

✨ 构建日志获取

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeCodingCIBuildLogRequest
*/
func (a *DefaultApiService) DescribeCodingCIBuildLog(ctx context.Context) ApiDescribeCodingCIBuildLogRequest {
	return ApiDescribeCodingCIBuildLogRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeCodingCIBuildLog200Response
func (a *DefaultApiService) DescribeCodingCIBuildLogExecute(r ApiDescribeCodingCIBuildLogRequest) (*DescribeCodingCIBuildLog200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeCodingCIBuildLog200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeCodingCIBuildLog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeCodingCIBuildLog"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeCodingCIBuildLogRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeCodingCIBuildLogRawRequest struct {
	ctx                                context.Context
	ApiService                         *DefaultApiService
	authorization                      *string
	action                             *string
	describeCodingCIBuildLogRawRequest *DescribeCodingCIBuildLogRawRequest
}

// 认证信息
func (r ApiDescribeCodingCIBuildLogRawRequest) Authorization(authorization string) ApiDescribeCodingCIBuildLogRawRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeCodingCIBuildLogRawRequest) Action(action string) ApiDescribeCodingCIBuildLogRawRequest {
	r.action = &action
	return r
}

func (r ApiDescribeCodingCIBuildLogRawRequest) DescribeCodingCIBuildLogRawRequest(describeCodingCIBuildLogRawRequest DescribeCodingCIBuildLogRawRequest) ApiDescribeCodingCIBuildLogRawRequest {
	r.describeCodingCIBuildLogRawRequest = &describeCodingCIBuildLogRawRequest
	return r
}

func (r ApiDescribeCodingCIBuildLogRawRequest) Execute() (*DescribeCodingCIBuildLogRaw200Response, *http.Response, error) {
	return r.ApiService.DescribeCodingCIBuildLogRawExecute(r)
}

/*
DescribeCodingCIBuildLogRaw 构建完整日志查询（原始日志 Raw）

✨ 构建完整日志查询（原始日志 Raw）

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeCodingCIBuildLogRawRequest
*/
func (a *DefaultApiService) DescribeCodingCIBuildLogRaw(ctx context.Context) ApiDescribeCodingCIBuildLogRawRequest {
	return ApiDescribeCodingCIBuildLogRawRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeCodingCIBuildLogRaw200Response
func (a *DefaultApiService) DescribeCodingCIBuildLogRawExecute(r ApiDescribeCodingCIBuildLogRawRequest) (*DescribeCodingCIBuildLogRaw200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeCodingCIBuildLogRaw200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeCodingCIBuildLogRaw")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeCodingCIBuildLogRaw"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeCodingCIBuildLogRawRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeCodingCIBuildMetricsRequest struct {
	ctx                                 context.Context
	ApiService                          *DefaultApiService
	authorization                       *string
	action                              *string
	describeCodingCIBuildMetricsRequest *DescribeCodingCIBuildMetricsRequest
}

// 认证信息
func (r ApiDescribeCodingCIBuildMetricsRequest) Authorization(authorization string) ApiDescribeCodingCIBuildMetricsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeCodingCIBuildMetricsRequest) Action(action string) ApiDescribeCodingCIBuildMetricsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeCodingCIBuildMetricsRequest) DescribeCodingCIBuildMetricsRequest(describeCodingCIBuildMetricsRequest DescribeCodingCIBuildMetricsRequest) ApiDescribeCodingCIBuildMetricsRequest {
	r.describeCodingCIBuildMetricsRequest = &describeCodingCIBuildMetricsRequest
	return r
}

func (r ApiDescribeCodingCIBuildMetricsRequest) Execute() (*DescribeCodingCIBuildMetrics200Response, *http.Response, error) {
	return r.ApiService.DescribeCodingCIBuildMetricsExecute(r)
}

/*
DescribeCodingCIBuildMetrics 构建计划度量查询

✨ 构建计划度量查询

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeCodingCIBuildMetricsRequest
*/
func (a *DefaultApiService) DescribeCodingCIBuildMetrics(ctx context.Context) ApiDescribeCodingCIBuildMetricsRequest {
	return ApiDescribeCodingCIBuildMetricsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeCodingCIBuildMetrics200Response
func (a *DefaultApiService) DescribeCodingCIBuildMetricsExecute(r ApiDescribeCodingCIBuildMetricsRequest) (*DescribeCodingCIBuildMetrics200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeCodingCIBuildMetrics200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeCodingCIBuildMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeCodingCIBuildMetrics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeCodingCIBuildMetricsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeCodingCIBuildStageRequest struct {
	ctx                               context.Context
	ApiService                        *DefaultApiService
	authorization                     *string
	action                            *string
	describeCodingCIBuildStageRequest *DescribeCodingCIBuildStageRequest
}

// 认证信息
func (r ApiDescribeCodingCIBuildStageRequest) Authorization(authorization string) ApiDescribeCodingCIBuildStageRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeCodingCIBuildStageRequest) Action(action string) ApiDescribeCodingCIBuildStageRequest {
	r.action = &action
	return r
}

func (r ApiDescribeCodingCIBuildStageRequest) DescribeCodingCIBuildStageRequest(describeCodingCIBuildStageRequest DescribeCodingCIBuildStageRequest) ApiDescribeCodingCIBuildStageRequest {
	r.describeCodingCIBuildStageRequest = &describeCodingCIBuildStageRequest
	return r
}

func (r ApiDescribeCodingCIBuildStageRequest) Execute() (*DescribeCodingCIBuildStage200Response, *http.Response, error) {
	return r.ApiService.DescribeCodingCIBuildStageExecute(r)
}

/*
DescribeCodingCIBuildStage 构建任务阶段获取

✨ 构建任务阶段获取

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeCodingCIBuildStageRequest
*/
func (a *DefaultApiService) DescribeCodingCIBuildStage(ctx context.Context) ApiDescribeCodingCIBuildStageRequest {
	return ApiDescribeCodingCIBuildStageRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeCodingCIBuildStage200Response
func (a *DefaultApiService) DescribeCodingCIBuildStageExecute(r ApiDescribeCodingCIBuildStageRequest) (*DescribeCodingCIBuildStage200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeCodingCIBuildStage200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeCodingCIBuildStage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeCodingCIBuildStage"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeCodingCIBuildStageRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeCodingCIBuildStatisticsRequest struct {
	ctx                                    context.Context
	ApiService                             *DefaultApiService
	authorization                          *string
	action                                 *string
	describeCodingCIBuildStatisticsRequest *DescribeCodingCIBuildStatisticsRequest
}

// 认证信息
func (r ApiDescribeCodingCIBuildStatisticsRequest) Authorization(authorization string) ApiDescribeCodingCIBuildStatisticsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeCodingCIBuildStatisticsRequest) Action(action string) ApiDescribeCodingCIBuildStatisticsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeCodingCIBuildStatisticsRequest) DescribeCodingCIBuildStatisticsRequest(describeCodingCIBuildStatisticsRequest DescribeCodingCIBuildStatisticsRequest) ApiDescribeCodingCIBuildStatisticsRequest {
	r.describeCodingCIBuildStatisticsRequest = &describeCodingCIBuildStatisticsRequest
	return r
}

func (r ApiDescribeCodingCIBuildStatisticsRequest) Execute() (*DescribeCodingCIBuildStatistics200Response, *http.Response, error) {
	return r.ApiService.DescribeCodingCIBuildStatisticsExecute(r)
}

/*
DescribeCodingCIBuildStatistics 构建任务统计

✨ 构建任务统计

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeCodingCIBuildStatisticsRequest
*/
func (a *DefaultApiService) DescribeCodingCIBuildStatistics(ctx context.Context) ApiDescribeCodingCIBuildStatisticsRequest {
	return ApiDescribeCodingCIBuildStatisticsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeCodingCIBuildStatistics200Response
func (a *DefaultApiService) DescribeCodingCIBuildStatisticsExecute(r ApiDescribeCodingCIBuildStatisticsRequest) (*DescribeCodingCIBuildStatistics200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeCodingCIBuildStatistics200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeCodingCIBuildStatistics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeCodingCIBuildStatistics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeCodingCIBuildStatisticsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeCodingCIBuildStepRequest struct {
	ctx                              context.Context
	ApiService                       *DefaultApiService
	authorization                    *string
	action                           *string
	describeCodingCIBuildStepRequest *DescribeCodingCIBuildStepRequest
}

// 认证信息
func (r ApiDescribeCodingCIBuildStepRequest) Authorization(authorization string) ApiDescribeCodingCIBuildStepRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeCodingCIBuildStepRequest) Action(action string) ApiDescribeCodingCIBuildStepRequest {
	r.action = &action
	return r
}

func (r ApiDescribeCodingCIBuildStepRequest) DescribeCodingCIBuildStepRequest(describeCodingCIBuildStepRequest DescribeCodingCIBuildStepRequest) ApiDescribeCodingCIBuildStepRequest {
	r.describeCodingCIBuildStepRequest = &describeCodingCIBuildStepRequest
	return r
}

func (r ApiDescribeCodingCIBuildStepRequest) Execute() (*DescribeCodingCIBuildStep200Response, *http.Response, error) {
	return r.ApiService.DescribeCodingCIBuildStepExecute(r)
}

/*
DescribeCodingCIBuildStep 构建任务指定阶段的步骤获取

✨ 构建任务指定阶段的步骤获取

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeCodingCIBuildStepRequest
*/
func (a *DefaultApiService) DescribeCodingCIBuildStep(ctx context.Context) ApiDescribeCodingCIBuildStepRequest {
	return ApiDescribeCodingCIBuildStepRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeCodingCIBuildStep200Response
func (a *DefaultApiService) DescribeCodingCIBuildStepExecute(r ApiDescribeCodingCIBuildStepRequest) (*DescribeCodingCIBuildStep200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeCodingCIBuildStep200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeCodingCIBuildStep")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeCodingCIBuildStep"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeCodingCIBuildStepRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeCodingCIBuildStepLogRequest struct {
	ctx                                 context.Context
	ApiService                          *DefaultApiService
	authorization                       *string
	action                              *string
	describeCodingCIBuildStepLogRequest *DescribeCodingCIBuildStepLogRequest
}

// 认证信息
func (r ApiDescribeCodingCIBuildStepLogRequest) Authorization(authorization string) ApiDescribeCodingCIBuildStepLogRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeCodingCIBuildStepLogRequest) Action(action string) ApiDescribeCodingCIBuildStepLogRequest {
	r.action = &action
	return r
}

func (r ApiDescribeCodingCIBuildStepLogRequest) DescribeCodingCIBuildStepLogRequest(describeCodingCIBuildStepLogRequest DescribeCodingCIBuildStepLogRequest) ApiDescribeCodingCIBuildStepLogRequest {
	r.describeCodingCIBuildStepLogRequest = &describeCodingCIBuildStepLogRequest
	return r
}

func (r ApiDescribeCodingCIBuildStepLogRequest) Execute() (*DescribeCodingCIBuildStepLog200Response, *http.Response, error) {
	return r.ApiService.DescribeCodingCIBuildStepLogExecute(r)
}

/*
DescribeCodingCIBuildStepLog 构建步骤日志获取

✨ 构建步骤日志获取

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeCodingCIBuildStepLogRequest
*/
func (a *DefaultApiService) DescribeCodingCIBuildStepLog(ctx context.Context) ApiDescribeCodingCIBuildStepLogRequest {
	return ApiDescribeCodingCIBuildStepLogRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeCodingCIBuildStepLog200Response
func (a *DefaultApiService) DescribeCodingCIBuildStepLogExecute(r ApiDescribeCodingCIBuildStepLogRequest) (*DescribeCodingCIBuildStepLog200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeCodingCIBuildStepLog200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeCodingCIBuildStepLog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeCodingCIBuildStepLog"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeCodingCIBuildStepLogRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeCodingCIBuildsRequest struct {
	ctx                           context.Context
	ApiService                    *DefaultApiService
	authorization                 *string
	action                        *string
	describeCodingCIBuildsRequest *DescribeCodingCIBuildsRequest
}

// 认证信息
func (r ApiDescribeCodingCIBuildsRequest) Authorization(authorization string) ApiDescribeCodingCIBuildsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeCodingCIBuildsRequest) Action(action string) ApiDescribeCodingCIBuildsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeCodingCIBuildsRequest) DescribeCodingCIBuildsRequest(describeCodingCIBuildsRequest DescribeCodingCIBuildsRequest) ApiDescribeCodingCIBuildsRequest {
	r.describeCodingCIBuildsRequest = &describeCodingCIBuildsRequest
	return r
}

func (r ApiDescribeCodingCIBuildsRequest) Execute() (*DescribeCodingCIBuilds200Response, *http.Response, error) {
	return r.ApiService.DescribeCodingCIBuildsExecute(r)
}

/*
DescribeCodingCIBuilds 构建计划的构建列表获取

✨ 构建计划的构建列表获取

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeCodingCIBuildsRequest
*/
func (a *DefaultApiService) DescribeCodingCIBuilds(ctx context.Context) ApiDescribeCodingCIBuildsRequest {
	return ApiDescribeCodingCIBuildsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeCodingCIBuilds200Response
func (a *DefaultApiService) DescribeCodingCIBuildsExecute(r ApiDescribeCodingCIBuildsRequest) (*DescribeCodingCIBuilds200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeCodingCIBuilds200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeCodingCIBuilds")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeCodingCIBuilds"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeCodingCIBuildsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeCodingCIJobRequest struct {
	ctx                      context.Context
	ApiService               *DefaultApiService
	authorization            *string
	action                   *string
	deleteCodingCIJobRequest *DeleteCodingCIJobRequest
}

// 认证信息
func (r ApiDescribeCodingCIJobRequest) Authorization(authorization string) ApiDescribeCodingCIJobRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeCodingCIJobRequest) Action(action string) ApiDescribeCodingCIJobRequest {
	r.action = &action
	return r
}

func (r ApiDescribeCodingCIJobRequest) DeleteCodingCIJobRequest(deleteCodingCIJobRequest DeleteCodingCIJobRequest) ApiDescribeCodingCIJobRequest {
	r.deleteCodingCIJobRequest = &deleteCodingCIJobRequest
	return r
}

func (r ApiDescribeCodingCIJobRequest) Execute() (*DescribeCodingCIJob200Response, *http.Response, error) {
	return r.ApiService.DescribeCodingCIJobExecute(r)
}

/*
DescribeCodingCIJob 构建计划详情获取

✨ 构建计划详情获取

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeCodingCIJobRequest
*/
func (a *DefaultApiService) DescribeCodingCIJob(ctx context.Context) ApiDescribeCodingCIJobRequest {
	return ApiDescribeCodingCIJobRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeCodingCIJob200Response
func (a *DefaultApiService) DescribeCodingCIJobExecute(r ApiDescribeCodingCIJobRequest) (*DescribeCodingCIJob200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeCodingCIJob200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeCodingCIJob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeCodingCIJob"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteCodingCIJobRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeCodingCIJobsRequest struct {
	ctx                         context.Context
	ApiService                  *DefaultApiService
	authorization               *string
	action                      *string
	describeCodingCIJobsRequest *DescribeCodingCIJobsRequest
}

// 认证信息
func (r ApiDescribeCodingCIJobsRequest) Authorization(authorization string) ApiDescribeCodingCIJobsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeCodingCIJobsRequest) Action(action string) ApiDescribeCodingCIJobsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeCodingCIJobsRequest) DescribeCodingCIJobsRequest(describeCodingCIJobsRequest DescribeCodingCIJobsRequest) ApiDescribeCodingCIJobsRequest {
	r.describeCodingCIJobsRequest = &describeCodingCIJobsRequest
	return r
}

func (r ApiDescribeCodingCIJobsRequest) Execute() (*DescribeCodingCIJobs200Response, *http.Response, error) {
	return r.ApiService.DescribeCodingCIJobsExecute(r)
}

/*
DescribeCodingCIJobs 构建计划查询（通过项目ID）

✨ 构建计划查询（通过项目ID）

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeCodingCIJobsRequest
*/
func (a *DefaultApiService) DescribeCodingCIJobs(ctx context.Context) ApiDescribeCodingCIJobsRequest {
	return ApiDescribeCodingCIJobsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeCodingCIJobs200Response
func (a *DefaultApiService) DescribeCodingCIJobsExecute(r ApiDescribeCodingCIJobsRequest) (*DescribeCodingCIJobs200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeCodingCIJobs200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeCodingCIJobs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeCodingCIJobs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeCodingCIJobsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeCodingCurrentUserRequest struct {
	ctx           context.Context
	ApiService    *DefaultApiService
	authorization *string
	action        *string
	body          *map[string]interface{}
}

// 认证信息
func (r ApiDescribeCodingCurrentUserRequest) Authorization(authorization string) ApiDescribeCodingCurrentUserRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeCodingCurrentUserRequest) Action(action string) ApiDescribeCodingCurrentUserRequest {
	r.action = &action
	return r
}

func (r ApiDescribeCodingCurrentUserRequest) Body(body map[string]interface{}) ApiDescribeCodingCurrentUserRequest {
	r.body = &body
	return r
}

func (r ApiDescribeCodingCurrentUserRequest) Execute() (*DescribeCodingCurrentUser200Response, *http.Response, error) {
	return r.ApiService.DescribeCodingCurrentUserExecute(r)
}

/*
DescribeCodingCurrentUser 当前用户信息查询

✨ 当前用户信息查询

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeCodingCurrentUserRequest
*/
func (a *DefaultApiService) DescribeCodingCurrentUser(ctx context.Context) ApiDescribeCodingCurrentUserRequest {
	return ApiDescribeCodingCurrentUserRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeCodingCurrentUser200Response
func (a *DefaultApiService) DescribeCodingCurrentUserExecute(r ApiDescribeCodingCurrentUserRequest) (*DescribeCodingCurrentUser200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeCodingCurrentUser200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeCodingCurrentUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeCodingCurrentUser"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeCodingProjectsRequest struct {
	ctx                           context.Context
	ApiService                    *DefaultApiService
	authorization                 *string
	action                        *string
	describeCodingProjectsRequest *DescribeCodingProjectsRequest
}

// 认证信息
func (r ApiDescribeCodingProjectsRequest) Authorization(authorization string) ApiDescribeCodingProjectsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeCodingProjectsRequest) Action(action string) ApiDescribeCodingProjectsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeCodingProjectsRequest) DescribeCodingProjectsRequest(describeCodingProjectsRequest DescribeCodingProjectsRequest) ApiDescribeCodingProjectsRequest {
	r.describeCodingProjectsRequest = &describeCodingProjectsRequest
	return r
}

func (r ApiDescribeCodingProjectsRequest) Execute() (*DescribeCodingProjects200Response, *http.Response, error) {
	return r.ApiService.DescribeCodingProjectsExecute(r)
}

/*
DescribeCodingProjects 项目列表查询

✨ 项目列表查询

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeCodingProjectsRequest
*/
func (a *DefaultApiService) DescribeCodingProjects(ctx context.Context) ApiDescribeCodingProjectsRequest {
	return ApiDescribeCodingProjectsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeCodingProjects200Response
func (a *DefaultApiService) DescribeCodingProjectsExecute(r ApiDescribeCodingProjectsRequest) (*DescribeCodingProjects200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeCodingProjects200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeCodingProjects")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeCodingProjects"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeCodingProjectsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeCommitRefsRequest struct {
	ctx                       context.Context
	ApiService                *DefaultApiService
	authorization             *string
	action                    *string
	describeCommitRefsRequest *DescribeCommitRefsRequest
}

// 认证信息
func (r ApiDescribeCommitRefsRequest) Authorization(authorization string) ApiDescribeCommitRefsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeCommitRefsRequest) Action(action string) ApiDescribeCommitRefsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeCommitRefsRequest) DescribeCommitRefsRequest(describeCommitRefsRequest DescribeCommitRefsRequest) ApiDescribeCommitRefsRequest {
	r.describeCommitRefsRequest = &describeCommitRefsRequest
	return r
}

func (r ApiDescribeCommitRefsRequest) Execute() (*DescribeCommitRefs200Response, *http.Response, error) {
	return r.ApiService.DescribeCommitRefsExecute(r)
}

/*
DescribeCommitRefs Git提交-查询commit的ref信息

✨ 查询commit的ref信息

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeCommitRefsRequest
*/
func (a *DefaultApiService) DescribeCommitRefs(ctx context.Context) ApiDescribeCommitRefsRequest {
	return ApiDescribeCommitRefsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeCommitRefs200Response
func (a *DefaultApiService) DescribeCommitRefsExecute(r ApiDescribeCommitRefsRequest) (*DescribeCommitRefs200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeCommitRefs200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeCommitRefs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeCommitRefs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeCommitRefsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeCommitsBetweenCommitAndCommitRequest struct {
	ctx                                          context.Context
	ApiService                                   *DefaultApiService
	authorization                                *string
	action                                       *string
	describeCommitsBetweenCommitAndCommitRequest *DescribeCommitsBetweenCommitAndCommitRequest
}

// 认证信息
func (r ApiDescribeCommitsBetweenCommitAndCommitRequest) Authorization(authorization string) ApiDescribeCommitsBetweenCommitAndCommitRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeCommitsBetweenCommitAndCommitRequest) Action(action string) ApiDescribeCommitsBetweenCommitAndCommitRequest {
	r.action = &action
	return r
}

func (r ApiDescribeCommitsBetweenCommitAndCommitRequest) DescribeCommitsBetweenCommitAndCommitRequest(describeCommitsBetweenCommitAndCommitRequest DescribeCommitsBetweenCommitAndCommitRequest) ApiDescribeCommitsBetweenCommitAndCommitRequest {
	r.describeCommitsBetweenCommitAndCommitRequest = &describeCommitsBetweenCommitAndCommitRequest
	return r
}

func (r ApiDescribeCommitsBetweenCommitAndCommitRequest) Execute() (*DescribeCommitsBetweenCommitAndCommit200Response, *http.Response, error) {
	return r.ApiService.DescribeCommitsBetweenCommitAndCommitExecute(r)
}

/*
DescribeCommitsBetweenCommitAndCommit Git提交-查询两个请求之间的请求列表（source target顺序正常）

✨ 查询两个请求之间的请求列表（source target顺序正常）

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeCommitsBetweenCommitAndCommitRequest
*/
func (a *DefaultApiService) DescribeCommitsBetweenCommitAndCommit(ctx context.Context) ApiDescribeCommitsBetweenCommitAndCommitRequest {
	return ApiDescribeCommitsBetweenCommitAndCommitRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeCommitsBetweenCommitAndCommit200Response
func (a *DefaultApiService) DescribeCommitsBetweenCommitAndCommitExecute(r ApiDescribeCommitsBetweenCommitAndCommitRequest) (*DescribeCommitsBetweenCommitAndCommit200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeCommitsBetweenCommitAndCommit200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeCommitsBetweenCommitAndCommit")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeCommitsBetweenCommitAndCommit"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeCommitsBetweenCommitAndCommitRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeConfigTemplateListRequest struct {
	ctx                               context.Context
	ApiService                        *DefaultApiService
	authorization                     *string
	action                            *string
	describeConfigTemplateListRequest *DescribeConfigTemplateListRequest
}

// 认证信息
func (r ApiDescribeConfigTemplateListRequest) Authorization(authorization string) ApiDescribeConfigTemplateListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeConfigTemplateListRequest) Action(action string) ApiDescribeConfigTemplateListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeConfigTemplateListRequest) DescribeConfigTemplateListRequest(describeConfigTemplateListRequest DescribeConfigTemplateListRequest) ApiDescribeConfigTemplateListRequest {
	r.describeConfigTemplateListRequest = &describeConfigTemplateListRequest
	return r
}

func (r ApiDescribeConfigTemplateListRequest) Execute() (*DescribeConfigTemplateList200Response, *http.Response, error) {
	return r.ApiService.DescribeConfigTemplateListExecute(r)
}

/*
DescribeConfigTemplateList 配置方案获取

✨ 获取配置方案

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeConfigTemplateListRequest
*/
func (a *DefaultApiService) DescribeConfigTemplateList(ctx context.Context) ApiDescribeConfigTemplateListRequest {
	return ApiDescribeConfigTemplateListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeConfigTemplateList200Response
func (a *DefaultApiService) DescribeConfigTemplateListExecute(r ApiDescribeConfigTemplateListRequest) (*DescribeConfigTemplateList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeConfigTemplateList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeConfigTemplateList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeConfigTemplateList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeConfigTemplateListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeDepartmentRequest struct {
	ctx                       context.Context
	ApiService                *DefaultApiService
	authorization             *string
	action                    *string
	describeDepartmentRequest *DescribeDepartmentRequest
}

// 认证信息
func (r ApiDescribeDepartmentRequest) Authorization(authorization string) ApiDescribeDepartmentRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeDepartmentRequest) Action(action string) ApiDescribeDepartmentRequest {
	r.action = &action
	return r
}

func (r ApiDescribeDepartmentRequest) DescribeDepartmentRequest(describeDepartmentRequest DescribeDepartmentRequest) ApiDescribeDepartmentRequest {
	r.describeDepartmentRequest = &describeDepartmentRequest
	return r
}

func (r ApiDescribeDepartmentRequest) Execute() (*DescribeDepartment200Response, *http.Response, error) {
	return r.ApiService.DescribeDepartmentExecute(r)
}

/*
DescribeDepartment 部门详情查询

✨ 部门详情查询

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeDepartmentRequest
*/
func (a *DefaultApiService) DescribeDepartment(ctx context.Context) ApiDescribeDepartmentRequest {
	return ApiDescribeDepartmentRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeDepartment200Response
func (a *DefaultApiService) DescribeDepartmentExecute(r ApiDescribeDepartmentRequest) (*DescribeDepartment200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeDepartment200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeDepartment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeDepartment"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeDepartmentRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeDepartmentMembersRequest struct {
	ctx                              context.Context
	ApiService                       *DefaultApiService
	authorization                    *string
	action                           *string
	describeDepartmentMembersRequest *DescribeDepartmentMembersRequest
}

// 认证信息
func (r ApiDescribeDepartmentMembersRequest) Authorization(authorization string) ApiDescribeDepartmentMembersRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeDepartmentMembersRequest) Action(action string) ApiDescribeDepartmentMembersRequest {
	r.action = &action
	return r
}

func (r ApiDescribeDepartmentMembersRequest) DescribeDepartmentMembersRequest(describeDepartmentMembersRequest DescribeDepartmentMembersRequest) ApiDescribeDepartmentMembersRequest {
	r.describeDepartmentMembersRequest = &describeDepartmentMembersRequest
	return r
}

func (r ApiDescribeDepartmentMembersRequest) Execute() (*DescribeDepartmentMembers200Response, *http.Response, error) {
	return r.ApiService.DescribeDepartmentMembersExecute(r)
}

/*
DescribeDepartmentMembers 部门成员列表查询

✨ 获取部门成员列表（分页列表）查询选中部门下面所有的成员

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeDepartmentMembersRequest
*/
func (a *DefaultApiService) DescribeDepartmentMembers(ctx context.Context) ApiDescribeDepartmentMembersRequest {
	return ApiDescribeDepartmentMembersRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeDepartmentMembers200Response
func (a *DefaultApiService) DescribeDepartmentMembersExecute(r ApiDescribeDepartmentMembersRequest) (*DescribeDepartmentMembers200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeDepartmentMembers200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeDepartmentMembers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeDepartmentMembers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeDepartmentMembersRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeDepotByNameInfoRequest struct {
	ctx                            context.Context
	ApiService                     *DefaultApiService
	authorization                  *string
	action                         *string
	describeDepotByNameInfoRequest *DescribeDepotByNameInfoRequest
}

// 认证信息
func (r ApiDescribeDepotByNameInfoRequest) Authorization(authorization string) ApiDescribeDepotByNameInfoRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeDepotByNameInfoRequest) Action(action string) ApiDescribeDepotByNameInfoRequest {
	r.action = &action
	return r
}

func (r ApiDescribeDepotByNameInfoRequest) DescribeDepotByNameInfoRequest(describeDepotByNameInfoRequest DescribeDepotByNameInfoRequest) ApiDescribeDepotByNameInfoRequest {
	r.describeDepotByNameInfoRequest = &describeDepotByNameInfoRequest
	return r
}

func (r ApiDescribeDepotByNameInfoRequest) Execute() (*DescribeDepotByNameInfo200Response, *http.Response, error) {
	return r.ApiService.DescribeDepotByNameInfoExecute(r)
}

/*
DescribeDepotByNameInfo 仓库信息-查询项目下所有的仓库信息列表

✨ 查询项目下所有的仓库信息列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeDepotByNameInfoRequest
*/
func (a *DefaultApiService) DescribeDepotByNameInfo(ctx context.Context) ApiDescribeDepotByNameInfoRequest {
	return ApiDescribeDepotByNameInfoRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeDepotByNameInfo200Response
func (a *DefaultApiService) DescribeDepotByNameInfoExecute(r ApiDescribeDepotByNameInfoRequest) (*DescribeDepotByNameInfo200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeDepotByNameInfo200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeDepotByNameInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeDepotByNameInfo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeDepotByNameInfoRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeDepotDefaultBranchRequest struct {
	ctx                               context.Context
	ApiService                        *DefaultApiService
	authorization                     *string
	action                            *string
	describeDepotDefaultBranchRequest *DescribeDepotDefaultBranchRequest
}

// 认证信息
func (r ApiDescribeDepotDefaultBranchRequest) Authorization(authorization string) ApiDescribeDepotDefaultBranchRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeDepotDefaultBranchRequest) Action(action string) ApiDescribeDepotDefaultBranchRequest {
	r.action = &action
	return r
}

func (r ApiDescribeDepotDefaultBranchRequest) DescribeDepotDefaultBranchRequest(describeDepotDefaultBranchRequest DescribeDepotDefaultBranchRequest) ApiDescribeDepotDefaultBranchRequest {
	r.describeDepotDefaultBranchRequest = &describeDepotDefaultBranchRequest
	return r
}

func (r ApiDescribeDepotDefaultBranchRequest) Execute() (*DescribeDepotDefaultBranch200Response, *http.Response, error) {
	return r.ApiService.DescribeDepotDefaultBranchExecute(r)
}

/*
DescribeDepotDefaultBranch 仓库分支-查询仓库的默认分支

✨ 查询仓库的默认分支

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeDepotDefaultBranchRequest
*/
func (a *DefaultApiService) DescribeDepotDefaultBranch(ctx context.Context) ApiDescribeDepotDefaultBranchRequest {
	return ApiDescribeDepotDefaultBranchRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeDepotDefaultBranch200Response
func (a *DefaultApiService) DescribeDepotDefaultBranchExecute(r ApiDescribeDepotDefaultBranchRequest) (*DescribeDepotDefaultBranch200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeDepotDefaultBranch200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeDepotDefaultBranch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeDepotDefaultBranch"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeDepotDefaultBranchRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeDepotFilePushRulesRequest struct {
	ctx                               context.Context
	ApiService                        *DefaultApiService
	authorization                     *string
	action                            *string
	describeDepotFilePushRulesRequest *DescribeDepotFilePushRulesRequest
}

// 认证信息
func (r ApiDescribeDepotFilePushRulesRequest) Authorization(authorization string) ApiDescribeDepotFilePushRulesRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeDepotFilePushRulesRequest) Action(action string) ApiDescribeDepotFilePushRulesRequest {
	r.action = &action
	return r
}

func (r ApiDescribeDepotFilePushRulesRequest) DescribeDepotFilePushRulesRequest(describeDepotFilePushRulesRequest DescribeDepotFilePushRulesRequest) ApiDescribeDepotFilePushRulesRequest {
	r.describeDepotFilePushRulesRequest = &describeDepotFilePushRulesRequest
	return r
}

func (r ApiDescribeDepotFilePushRulesRequest) Execute() (*DescribeDepotFilePushRules200Response, *http.Response, error) {
	return r.ApiService.DescribeDepotFilePushRulesExecute(r)
}

/*
DescribeDepotFilePushRules 仓库设置-查询git仓库文件推送规则

✨ 查询 git 仓库文件推送规则

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeDepotFilePushRulesRequest
*/
func (a *DefaultApiService) DescribeDepotFilePushRules(ctx context.Context) ApiDescribeDepotFilePushRulesRequest {
	return ApiDescribeDepotFilePushRulesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeDepotFilePushRules200Response
func (a *DefaultApiService) DescribeDepotFilePushRulesExecute(r ApiDescribeDepotFilePushRulesRequest) (*DescribeDepotFilePushRules200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeDepotFilePushRules200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeDepotFilePushRules")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeDepotFilePushRules"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeDepotFilePushRulesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeDepotMergeRequestsRequest struct {
	ctx                               context.Context
	ApiService                        *DefaultApiService
	authorization                     *string
	action                            *string
	describeDepotMergeRequestsRequest *DescribeDepotMergeRequestsRequest
}

// 认证信息
func (r ApiDescribeDepotMergeRequestsRequest) Authorization(authorization string) ApiDescribeDepotMergeRequestsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeDepotMergeRequestsRequest) Action(action string) ApiDescribeDepotMergeRequestsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeDepotMergeRequestsRequest) DescribeDepotMergeRequestsRequest(describeDepotMergeRequestsRequest DescribeDepotMergeRequestsRequest) ApiDescribeDepotMergeRequestsRequest {
	r.describeDepotMergeRequestsRequest = &describeDepotMergeRequestsRequest
	return r
}

func (r ApiDescribeDepotMergeRequestsRequest) Execute() (*DescribeDepotMergeRequests200Response, *http.Response, error) {
	return r.ApiService.DescribeDepotMergeRequestsExecute(r)
}

/*
DescribeDepotMergeRequests 合并请求-查询仓库合并请求列表

✨ 查询仓库合并请求列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeDepotMergeRequestsRequest
*/
func (a *DefaultApiService) DescribeDepotMergeRequests(ctx context.Context) ApiDescribeDepotMergeRequestsRequest {
	return ApiDescribeDepotMergeRequestsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeDepotMergeRequests200Response
func (a *DefaultApiService) DescribeDepotMergeRequestsExecute(r ApiDescribeDepotMergeRequestsRequest) (*DescribeDepotMergeRequests200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeDepotMergeRequests200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeDepotMergeRequests")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeDepotMergeRequests"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeDepotMergeRequestsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeDepotPushSettingRequest struct {
	ctx                               context.Context
	ApiService                        *DefaultApiService
	authorization                     *string
	action                            *string
	describeDepotFilePushRulesRequest *DescribeDepotFilePushRulesRequest
}

// 认证信息
func (r ApiDescribeDepotPushSettingRequest) Authorization(authorization string) ApiDescribeDepotPushSettingRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeDepotPushSettingRequest) Action(action string) ApiDescribeDepotPushSettingRequest {
	r.action = &action
	return r
}

func (r ApiDescribeDepotPushSettingRequest) DescribeDepotFilePushRulesRequest(describeDepotFilePushRulesRequest DescribeDepotFilePushRulesRequest) ApiDescribeDepotPushSettingRequest {
	r.describeDepotFilePushRulesRequest = &describeDepotFilePushRulesRequest
	return r
}

func (r ApiDescribeDepotPushSettingRequest) Execute() (*DescribeDepotPushSetting200Response, *http.Response, error) {
	return r.ApiService.DescribeDepotPushSettingExecute(r)
}

/*
DescribeDepotPushSetting 仓库设置-查询仓库推送设置

✨ 查询仓库推送设置

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeDepotPushSettingRequest
*/
func (a *DefaultApiService) DescribeDepotPushSetting(ctx context.Context) ApiDescribeDepotPushSettingRequest {
	return ApiDescribeDepotPushSettingRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeDepotPushSetting200Response
func (a *DefaultApiService) DescribeDepotPushSettingExecute(r ApiDescribeDepotPushSettingRequest) (*DescribeDepotPushSetting200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeDepotPushSetting200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeDepotPushSetting")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeDepotPushSetting"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeDepotFilePushRulesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeDepotSpecDetailRequest struct {
	ctx                            context.Context
	ApiService                     *DefaultApiService
	authorization                  *string
	action                         *string
	describeDepotSpecDetailRequest *DescribeDepotSpecDetailRequest
}

// 认证信息
func (r ApiDescribeDepotSpecDetailRequest) Authorization(authorization string) ApiDescribeDepotSpecDetailRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeDepotSpecDetailRequest) Action(action string) ApiDescribeDepotSpecDetailRequest {
	r.action = &action
	return r
}

func (r ApiDescribeDepotSpecDetailRequest) DescribeDepotSpecDetailRequest(describeDepotSpecDetailRequest DescribeDepotSpecDetailRequest) ApiDescribeDepotSpecDetailRequest {
	r.describeDepotSpecDetailRequest = &describeDepotSpecDetailRequest
	return r
}

func (r ApiDescribeDepotSpecDetailRequest) Execute() (*ModifyChooseDepotSpec200Response, *http.Response, error) {
	return r.ApiService.DescribeDepotSpecDetailExecute(r)
}

/*
DescribeDepotSpecDetail 仓库设置-查询仓库规范详情

✨ 查询仓库规范详情

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeDepotSpecDetailRequest
*/
func (a *DefaultApiService) DescribeDepotSpecDetail(ctx context.Context) ApiDescribeDepotSpecDetailRequest {
	return ApiDescribeDepotSpecDetailRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModifyChooseDepotSpec200Response
func (a *DefaultApiService) DescribeDepotSpecDetailExecute(r ApiDescribeDepotSpecDetailRequest) (*ModifyChooseDepotSpec200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModifyChooseDepotSpec200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeDepotSpecDetail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeDepotSpecDetail"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeDepotSpecDetailRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeDepotSpecsRequest struct {
	ctx           context.Context
	ApiService    *DefaultApiService
	authorization *string
	action        *string
	body          *map[string]interface{}
}

// 认证信息
func (r ApiDescribeDepotSpecsRequest) Authorization(authorization string) ApiDescribeDepotSpecsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeDepotSpecsRequest) Action(action string) ApiDescribeDepotSpecsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeDepotSpecsRequest) Body(body map[string]interface{}) ApiDescribeDepotSpecsRequest {
	r.body = &body
	return r
}

func (r ApiDescribeDepotSpecsRequest) Execute() (*DescribeDepotSpecs200Response, *http.Response, error) {
	return r.ApiService.DescribeDepotSpecsExecute(r)
}

/*
DescribeDepotSpecs 仓库设置-查询仓库规范列表

✨ 查询仓库规范列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeDepotSpecsRequest
*/
func (a *DefaultApiService) DescribeDepotSpecs(ctx context.Context) ApiDescribeDepotSpecsRequest {
	return ApiDescribeDepotSpecsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeDepotSpecs200Response
func (a *DefaultApiService) DescribeDepotSpecsExecute(r ApiDescribeDepotSpecsRequest) (*DescribeDepotSpecs200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeDepotSpecs200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeDepotSpecs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeDepotSpecs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeDifferentBetween2CommitsRequest struct {
	ctx                                     context.Context
	ApiService                              *DefaultApiService
	authorization                           *string
	action                                  *string
	describeDifferentBetween2CommitsRequest *DescribeDifferentBetween2CommitsRequest
}

// 认证信息
func (r ApiDescribeDifferentBetween2CommitsRequest) Authorization(authorization string) ApiDescribeDifferentBetween2CommitsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeDifferentBetween2CommitsRequest) Action(action string) ApiDescribeDifferentBetween2CommitsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeDifferentBetween2CommitsRequest) DescribeDifferentBetween2CommitsRequest(describeDifferentBetween2CommitsRequest DescribeDifferentBetween2CommitsRequest) ApiDescribeDifferentBetween2CommitsRequest {
	r.describeDifferentBetween2CommitsRequest = &describeDifferentBetween2CommitsRequest
	return r
}

func (r ApiDescribeDifferentBetween2CommitsRequest) Execute() (*DescribeDifferentBetween2Commits200Response, *http.Response, error) {
	return r.ApiService.DescribeDifferentBetween2CommitsExecute(r)
}

/*
DescribeDifferentBetween2Commits Git提交-两次提交之间的文件差异（source target顺序正常）

✨ 两次提交之间的文件差异

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeDifferentBetween2CommitsRequest
*/
func (a *DefaultApiService) DescribeDifferentBetween2Commits(ctx context.Context) ApiDescribeDifferentBetween2CommitsRequest {
	return ApiDescribeDifferentBetween2CommitsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeDifferentBetween2Commits200Response
func (a *DefaultApiService) DescribeDifferentBetween2CommitsExecute(r ApiDescribeDifferentBetween2CommitsRequest) (*DescribeDifferentBetween2Commits200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeDifferentBetween2Commits200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeDifferentBetween2Commits")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeDifferentBetween2Commits"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeDifferentBetween2CommitsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeDifferentBetweenTwoCommitsRequest struct {
	ctx                                       context.Context
	ApiService                                *DefaultApiService
	authorization                             *string
	action                                    *string
	describeDifferentBetweenTwoCommitsRequest *DescribeDifferentBetweenTwoCommitsRequest
}

// 认证信息
func (r ApiDescribeDifferentBetweenTwoCommitsRequest) Authorization(authorization string) ApiDescribeDifferentBetweenTwoCommitsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeDifferentBetweenTwoCommitsRequest) Action(action string) ApiDescribeDifferentBetweenTwoCommitsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeDifferentBetweenTwoCommitsRequest) DescribeDifferentBetweenTwoCommitsRequest(describeDifferentBetweenTwoCommitsRequest DescribeDifferentBetweenTwoCommitsRequest) ApiDescribeDifferentBetweenTwoCommitsRequest {
	r.describeDifferentBetweenTwoCommitsRequest = &describeDifferentBetweenTwoCommitsRequest
	return r
}

func (r ApiDescribeDifferentBetweenTwoCommitsRequest) Execute() (*DescribeDifferentBetweenTwoCommits200Response, *http.Response, error) {
	return r.ApiService.DescribeDifferentBetweenTwoCommitsExecute(r)
}

/*
DescribeDifferentBetweenTwoCommits Git提交-获取两次commit之间的文件差异详情(废弃，source target顺序不一致)

✨ 获取两次 commit 之间的文件 差异详情

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeDifferentBetweenTwoCommitsRequest
*/
func (a *DefaultApiService) DescribeDifferentBetweenTwoCommits(ctx context.Context) ApiDescribeDifferentBetweenTwoCommitsRequest {
	return ApiDescribeDifferentBetweenTwoCommitsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeDifferentBetweenTwoCommits200Response
func (a *DefaultApiService) DescribeDifferentBetweenTwoCommitsExecute(r ApiDescribeDifferentBetweenTwoCommitsRequest) (*DescribeDifferentBetweenTwoCommits200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeDifferentBetweenTwoCommits200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeDifferentBetweenTwoCommits")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeDifferentBetweenTwoCommits"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeDifferentBetweenTwoCommitsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitBlameInfoRequest struct {
	ctx                         context.Context
	ApiService                  *DefaultApiService
	authorization               *string
	action                      *string
	describeGitBlameInfoRequest *DescribeGitBlameInfoRequest
}

// 认证信息
func (r ApiDescribeGitBlameInfoRequest) Authorization(authorization string) ApiDescribeGitBlameInfoRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitBlameInfoRequest) Action(action string) ApiDescribeGitBlameInfoRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitBlameInfoRequest) DescribeGitBlameInfoRequest(describeGitBlameInfoRequest DescribeGitBlameInfoRequest) ApiDescribeGitBlameInfoRequest {
	r.describeGitBlameInfoRequest = &describeGitBlameInfoRequest
	return r
}

func (r ApiDescribeGitBlameInfoRequest) Execute() (*DescribeGitBlameInfo200Response, *http.Response, error) {
	return r.ApiService.DescribeGitBlameInfoExecute(r)
}

/*
DescribeGitBlameInfo Git提交-获取指定commit下某文件指定代码行的最后一次提交

✨ 获取指定 commit 下某文件指定代码行的最后一次提交

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitBlameInfoRequest
*/
func (a *DefaultApiService) DescribeGitBlameInfo(ctx context.Context) ApiDescribeGitBlameInfoRequest {
	return ApiDescribeGitBlameInfoRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitBlameInfo200Response
func (a *DefaultApiService) DescribeGitBlameInfoExecute(r ApiDescribeGitBlameInfoRequest) (*DescribeGitBlameInfo200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitBlameInfo200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitBlameInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitBlameInfo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitBlameInfoRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitBlobRequest struct {
	ctx                    context.Context
	ApiService             *DefaultApiService
	authorization          *string
	action                 *string
	describeGitBlobRequest *DescribeGitBlobRequest
}

// 认证信息
func (r ApiDescribeGitBlobRequest) Authorization(authorization string) ApiDescribeGitBlobRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitBlobRequest) Action(action string) ApiDescribeGitBlobRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitBlobRequest) DescribeGitBlobRequest(describeGitBlobRequest DescribeGitBlobRequest) ApiDescribeGitBlobRequest {
	r.describeGitBlobRequest = &describeGitBlobRequest
	return r
}

func (r ApiDescribeGitBlobRequest) Execute() (*DescribeGitBlob200Response, *http.Response, error) {
	return r.ApiService.DescribeGitBlobExecute(r)
}

/*
DescribeGitBlob Git文件-查询GitBlob

✨ 查询 Git Blob

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitBlobRequest
*/
func (a *DefaultApiService) DescribeGitBlob(ctx context.Context) ApiDescribeGitBlobRequest {
	return ApiDescribeGitBlobRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitBlob200Response
func (a *DefaultApiService) DescribeGitBlobExecute(r ApiDescribeGitBlobRequest) (*DescribeGitBlob200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitBlob200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitBlob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitBlob"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitBlobRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitBlobRawRequest struct {
	ctx                       context.Context
	ApiService                *DefaultApiService
	authorization             *string
	action                    *string
	describeGitBlobRawRequest *DescribeGitBlobRawRequest
}

// 认证信息
func (r ApiDescribeGitBlobRawRequest) Authorization(authorization string) ApiDescribeGitBlobRawRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitBlobRawRequest) Action(action string) ApiDescribeGitBlobRawRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitBlobRawRequest) DescribeGitBlobRawRequest(describeGitBlobRawRequest DescribeGitBlobRawRequest) ApiDescribeGitBlobRawRequest {
	r.describeGitBlobRawRequest = &describeGitBlobRawRequest
	return r
}

func (r ApiDescribeGitBlobRawRequest) Execute() (*DescribeGitBlobRaw200Response, *http.Response, error) {
	return r.ApiService.DescribeGitBlobRawExecute(r)
}

/*
DescribeGitBlobRaw Git文件-查询Git Blob raw信息

✨ 查询 Git Blob raw 信息

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitBlobRawRequest
*/
func (a *DefaultApiService) DescribeGitBlobRaw(ctx context.Context) ApiDescribeGitBlobRawRequest {
	return ApiDescribeGitBlobRawRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitBlobRaw200Response
func (a *DefaultApiService) DescribeGitBlobRawExecute(r ApiDescribeGitBlobRawRequest) (*DescribeGitBlobRaw200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitBlobRaw200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitBlobRaw")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitBlobRaw"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitBlobRawRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitBranchRequest struct {
	ctx                      context.Context
	ApiService               *DefaultApiService
	authorization            *string
	action                   *string
	describeGitBranchRequest *DescribeGitBranchRequest
}

// 认证信息
func (r ApiDescribeGitBranchRequest) Authorization(authorization string) ApiDescribeGitBranchRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitBranchRequest) Action(action string) ApiDescribeGitBranchRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitBranchRequest) DescribeGitBranchRequest(describeGitBranchRequest DescribeGitBranchRequest) ApiDescribeGitBranchRequest {
	r.describeGitBranchRequest = &describeGitBranchRequest
	return r
}

func (r ApiDescribeGitBranchRequest) Execute() (*DescribeGitBranch200Response, *http.Response, error) {
	return r.ApiService.DescribeGitBranchExecute(r)
}

/*
DescribeGitBranch 仓库分支-查询代码仓库单个分支

✨ 查询代码仓库单个分支

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitBranchRequest
*/
func (a *DefaultApiService) DescribeGitBranch(ctx context.Context) ApiDescribeGitBranchRequest {
	return ApiDescribeGitBranchRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitBranch200Response
func (a *DefaultApiService) DescribeGitBranchExecute(r ApiDescribeGitBranchRequest) (*DescribeGitBranch200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitBranch200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitBranch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitBranch"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitBranchRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitBranchListRequest struct {
	ctx                          context.Context
	ApiService                   *DefaultApiService
	authorization                *string
	action                       *string
	describeGitBranchListRequest *DescribeGitBranchListRequest
}

// 认证信息
func (r ApiDescribeGitBranchListRequest) Authorization(authorization string) ApiDescribeGitBranchListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitBranchListRequest) Action(action string) ApiDescribeGitBranchListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitBranchListRequest) DescribeGitBranchListRequest(describeGitBranchListRequest DescribeGitBranchListRequest) ApiDescribeGitBranchListRequest {
	r.describeGitBranchListRequest = &describeGitBranchListRequest
	return r
}

func (r ApiDescribeGitBranchListRequest) Execute() (*DescribeGitBranchList200Response, *http.Response, error) {
	return r.ApiService.DescribeGitBranchListExecute(r)
}

/*
DescribeGitBranchList 仓库分支-查询仓库分支列表

✨ 查询仓库分支列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitBranchListRequest
*/
func (a *DefaultApiService) DescribeGitBranchList(ctx context.Context) ApiDescribeGitBranchListRequest {
	return ApiDescribeGitBranchListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitBranchList200Response
func (a *DefaultApiService) DescribeGitBranchListExecute(r ApiDescribeGitBranchListRequest) (*DescribeGitBranchList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitBranchList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitBranchList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitBranchList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitBranchListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitBranchesRequest struct {
	ctx                        context.Context
	ApiService                 *DefaultApiService
	authorization              *string
	action                     *string
	describeGitBranchesRequest *DescribeGitBranchesRequest
}

// 认证信息
func (r ApiDescribeGitBranchesRequest) Authorization(authorization string) ApiDescribeGitBranchesRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitBranchesRequest) Action(action string) ApiDescribeGitBranchesRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitBranchesRequest) DescribeGitBranchesRequest(describeGitBranchesRequest DescribeGitBranchesRequest) ApiDescribeGitBranchesRequest {
	r.describeGitBranchesRequest = &describeGitBranchesRequest
	return r
}

func (r ApiDescribeGitBranchesRequest) Execute() (*DescribeGitBranches200Response, *http.Response, error) {
	return r.ApiService.DescribeGitBranchesExecute(r)
}

/*
DescribeGitBranches 仓库分支-查询仓库下所有分支列表

✨ 查询仓库下所有分支列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitBranchesRequest
*/
func (a *DefaultApiService) DescribeGitBranches(ctx context.Context) ApiDescribeGitBranchesRequest {
	return ApiDescribeGitBranchesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitBranches200Response
func (a *DefaultApiService) DescribeGitBranchesExecute(r ApiDescribeGitBranchesRequest) (*DescribeGitBranches200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitBranches200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitBranches")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitBranches"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitBranchesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitBranchesByShaRequest struct {
	ctx                             context.Context
	ApiService                      *DefaultApiService
	authorization                   *string
	action                          *string
	describeGitBranchesByShaRequest *DescribeGitBranchesByShaRequest
}

// 认证信息
func (r ApiDescribeGitBranchesByShaRequest) Authorization(authorization string) ApiDescribeGitBranchesByShaRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitBranchesByShaRequest) Action(action string) ApiDescribeGitBranchesByShaRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitBranchesByShaRequest) DescribeGitBranchesByShaRequest(describeGitBranchesByShaRequest DescribeGitBranchesByShaRequest) ApiDescribeGitBranchesByShaRequest {
	r.describeGitBranchesByShaRequest = &describeGitBranchesByShaRequest
	return r
}

func (r ApiDescribeGitBranchesByShaRequest) Execute() (*DescribeGitBranchesBySha200Response, *http.Response, error) {
	return r.ApiService.DescribeGitBranchesByShaExecute(r)
}

/*
DescribeGitBranchesBySha 仓库分支-根据sha值查询所在分支

✨ 根据sha值查询所在分支

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitBranchesByShaRequest
*/
func (a *DefaultApiService) DescribeGitBranchesBySha(ctx context.Context) ApiDescribeGitBranchesByShaRequest {
	return ApiDescribeGitBranchesByShaRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitBranchesBySha200Response
func (a *DefaultApiService) DescribeGitBranchesByShaExecute(r ApiDescribeGitBranchesByShaRequest) (*DescribeGitBranchesBySha200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitBranchesBySha200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitBranchesBySha")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitBranchesBySha"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitBranchesByShaRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitCommitCommentsRequest struct {
	ctx                              context.Context
	ApiService                       *DefaultApiService
	authorization                    *string
	action                           *string
	describeGitCommitCommentsRequest *DescribeGitCommitCommentsRequest
}

// 认证信息
func (r ApiDescribeGitCommitCommentsRequest) Authorization(authorization string) ApiDescribeGitCommitCommentsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitCommitCommentsRequest) Action(action string) ApiDescribeGitCommitCommentsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitCommitCommentsRequest) DescribeGitCommitCommentsRequest(describeGitCommitCommentsRequest DescribeGitCommitCommentsRequest) ApiDescribeGitCommitCommentsRequest {
	r.describeGitCommitCommentsRequest = &describeGitCommitCommentsRequest
	return r
}

func (r ApiDescribeGitCommitCommentsRequest) Execute() (*DescribeGitCommitComments200Response, *http.Response, error) {
	return r.ApiService.DescribeGitCommitCommentsExecute(r)
}

/*
DescribeGitCommitComments Git提交-获取commit评论

✨ 获取commit评论

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitCommitCommentsRequest
*/
func (a *DefaultApiService) DescribeGitCommitComments(ctx context.Context) ApiDescribeGitCommitCommentsRequest {
	return ApiDescribeGitCommitCommentsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitCommitComments200Response
func (a *DefaultApiService) DescribeGitCommitCommentsExecute(r ApiDescribeGitCommitCommentsRequest) (*DescribeGitCommitComments200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitCommitComments200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitCommitComments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitCommitComments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitCommitCommentsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitCommitDiffRequest struct {
	ctx                          context.Context
	ApiService                   *DefaultApiService
	authorization                *string
	action                       *string
	describeGitCommitDiffRequest *DescribeGitCommitDiffRequest
}

// 认证信息
func (r ApiDescribeGitCommitDiffRequest) Authorization(authorization string) ApiDescribeGitCommitDiffRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitCommitDiffRequest) Action(action string) ApiDescribeGitCommitDiffRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitCommitDiffRequest) DescribeGitCommitDiffRequest(describeGitCommitDiffRequest DescribeGitCommitDiffRequest) ApiDescribeGitCommitDiffRequest {
	r.describeGitCommitDiffRequest = &describeGitCommitDiffRequest
	return r
}

func (r ApiDescribeGitCommitDiffRequest) Execute() (*DescribeGitCommitDiff200Response, *http.Response, error) {
	return r.ApiService.DescribeGitCommitDiffExecute(r)
}

/*
DescribeGitCommitDiff Git提交-查询某次提交的diff信息

✨ 查询某次提交的diff信息

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitCommitDiffRequest
*/
func (a *DefaultApiService) DescribeGitCommitDiff(ctx context.Context) ApiDescribeGitCommitDiffRequest {
	return ApiDescribeGitCommitDiffRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitCommitDiff200Response
func (a *DefaultApiService) DescribeGitCommitDiffExecute(r ApiDescribeGitCommitDiffRequest) (*DescribeGitCommitDiff200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitCommitDiff200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitCommitDiff")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitCommitDiff"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitCommitDiffRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitCommitFilePathListRequest struct {
	ctx                                  context.Context
	ApiService                           *DefaultApiService
	authorization                        *string
	action                               *string
	describeGitCommitFilePathListRequest *DescribeGitCommitFilePathListRequest
}

// 认证信息
func (r ApiDescribeGitCommitFilePathListRequest) Authorization(authorization string) ApiDescribeGitCommitFilePathListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitCommitFilePathListRequest) Action(action string) ApiDescribeGitCommitFilePathListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitCommitFilePathListRequest) DescribeGitCommitFilePathListRequest(describeGitCommitFilePathListRequest DescribeGitCommitFilePathListRequest) ApiDescribeGitCommitFilePathListRequest {
	r.describeGitCommitFilePathListRequest = &describeGitCommitFilePathListRequest
	return r
}

func (r ApiDescribeGitCommitFilePathListRequest) Execute() (*DescribeGitCommitFilePathList200Response, *http.Response, error) {
	return r.ApiService.DescribeGitCommitFilePathListExecute(r)
}

/*
DescribeGitCommitFilePathList Git提交-查询仓库某次提交改动的文件路径列表

✨ 查询仓库某次提交改动的文件路径列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitCommitFilePathListRequest
*/
func (a *DefaultApiService) DescribeGitCommitFilePathList(ctx context.Context) ApiDescribeGitCommitFilePathListRequest {
	return ApiDescribeGitCommitFilePathListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitCommitFilePathList200Response
func (a *DefaultApiService) DescribeGitCommitFilePathListExecute(r ApiDescribeGitCommitFilePathListRequest) (*DescribeGitCommitFilePathList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitCommitFilePathList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitCommitFilePathList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitCommitFilePathList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitCommitFilePathListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitCommitInfoRequest struct {
	ctx                          context.Context
	ApiService                   *DefaultApiService
	authorization                *string
	action                       *string
	describeGitCommitInfoRequest *DescribeGitCommitInfoRequest
}

// 认证信息
func (r ApiDescribeGitCommitInfoRequest) Authorization(authorization string) ApiDescribeGitCommitInfoRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitCommitInfoRequest) Action(action string) ApiDescribeGitCommitInfoRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitCommitInfoRequest) DescribeGitCommitInfoRequest(describeGitCommitInfoRequest DescribeGitCommitInfoRequest) ApiDescribeGitCommitInfoRequest {
	r.describeGitCommitInfoRequest = &describeGitCommitInfoRequest
	return r
}

func (r ApiDescribeGitCommitInfoRequest) Execute() (*DescribeGitCommitInfo200Response, *http.Response, error) {
	return r.ApiService.DescribeGitCommitInfoExecute(r)
}

/*
DescribeGitCommitInfo Git提交-查询单个请求详情信息

✨ 查询单个请求详情信息

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitCommitInfoRequest
*/
func (a *DefaultApiService) DescribeGitCommitInfo(ctx context.Context) ApiDescribeGitCommitInfoRequest {
	return ApiDescribeGitCommitInfoRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitCommitInfo200Response
func (a *DefaultApiService) DescribeGitCommitInfoExecute(r ApiDescribeGitCommitInfoRequest) (*DescribeGitCommitInfo200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitCommitInfo200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitCommitInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitCommitInfo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitCommitInfoRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitCommitInfosRequest struct {
	ctx                             context.Context
	ApiService                      *DefaultApiService
	authorization                   *string
	action                          *string
	describeGitCommitsInPageRequest *DescribeGitCommitsInPageRequest
}

// 认证信息
func (r ApiDescribeGitCommitInfosRequest) Authorization(authorization string) ApiDescribeGitCommitInfosRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitCommitInfosRequest) Action(action string) ApiDescribeGitCommitInfosRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitCommitInfosRequest) DescribeGitCommitsInPageRequest(describeGitCommitsInPageRequest DescribeGitCommitsInPageRequest) ApiDescribeGitCommitInfosRequest {
	r.describeGitCommitsInPageRequest = &describeGitCommitsInPageRequest
	return r
}

func (r ApiDescribeGitCommitInfosRequest) Execute() (*DescribeGitCommitInfos200Response, *http.Response, error) {
	return r.ApiService.DescribeGitCommitInfosExecute(r)
}

/*
DescribeGitCommitInfos Git提交-查询仓库分支下提交列表

✨ 查询仓库分支下提交列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitCommitInfosRequest
*/
func (a *DefaultApiService) DescribeGitCommitInfos(ctx context.Context) ApiDescribeGitCommitInfosRequest {
	return ApiDescribeGitCommitInfosRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitCommitInfos200Response
func (a *DefaultApiService) DescribeGitCommitInfosExecute(r ApiDescribeGitCommitInfosRequest) (*DescribeGitCommitInfos200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitCommitInfos200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitCommitInfos")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitCommitInfos"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitCommitsInPageRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitCommitNoteRequest struct {
	ctx                          context.Context
	ApiService                   *DefaultApiService
	authorization                *string
	action                       *string
	describeGitCommitNoteRequest *DescribeGitCommitNoteRequest
}

// 认证信息
func (r ApiDescribeGitCommitNoteRequest) Authorization(authorization string) ApiDescribeGitCommitNoteRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitCommitNoteRequest) Action(action string) ApiDescribeGitCommitNoteRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitCommitNoteRequest) DescribeGitCommitNoteRequest(describeGitCommitNoteRequest DescribeGitCommitNoteRequest) ApiDescribeGitCommitNoteRequest {
	r.describeGitCommitNoteRequest = &describeGitCommitNoteRequest
	return r
}

func (r ApiDescribeGitCommitNoteRequest) Execute() (*DescribeGitCommitNote200Response, *http.Response, error) {
	return r.ApiService.DescribeGitCommitNoteExecute(r)
}

/*
DescribeGitCommitNote Git提交-获取提交注释

✨ 获取提交注释

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitCommitNoteRequest
*/
func (a *DefaultApiService) DescribeGitCommitNote(ctx context.Context) ApiDescribeGitCommitNoteRequest {
	return ApiDescribeGitCommitNoteRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitCommitNote200Response
func (a *DefaultApiService) DescribeGitCommitNoteExecute(r ApiDescribeGitCommitNoteRequest) (*DescribeGitCommitNote200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitCommitNote200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitCommitNote")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitCommitNote"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitCommitNoteRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitCommitStatusRequest struct {
	ctx                            context.Context
	ApiService                     *DefaultApiService
	authorization                  *string
	action                         *string
	describeGitCommitStatusRequest *DescribeGitCommitStatusRequest
}

// 认证信息
func (r ApiDescribeGitCommitStatusRequest) Authorization(authorization string) ApiDescribeGitCommitStatusRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitCommitStatusRequest) Action(action string) ApiDescribeGitCommitStatusRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitCommitStatusRequest) DescribeGitCommitStatusRequest(describeGitCommitStatusRequest DescribeGitCommitStatusRequest) ApiDescribeGitCommitStatusRequest {
	r.describeGitCommitStatusRequest = &describeGitCommitStatusRequest
	return r
}

func (r ApiDescribeGitCommitStatusRequest) Execute() (*DescribeGitCommitStatus200Response, *http.Response, error) {
	return r.ApiService.DescribeGitCommitStatusExecute(r)
}

/*
DescribeGitCommitStatus Git提交-查询提交对应的流水线状态

✨ 查询提交对应的流水线状态

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitCommitStatusRequest
*/
func (a *DefaultApiService) DescribeGitCommitStatus(ctx context.Context) ApiDescribeGitCommitStatusRequest {
	return ApiDescribeGitCommitStatusRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitCommitStatus200Response
func (a *DefaultApiService) DescribeGitCommitStatusExecute(r ApiDescribeGitCommitStatusRequest) (*DescribeGitCommitStatus200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitCommitStatus200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitCommitStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitCommitStatus"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitCommitStatusRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitCommitsInPageRequest struct {
	ctx                             context.Context
	ApiService                      *DefaultApiService
	authorization                   *string
	action                          *string
	describeGitCommitsInPageRequest *DescribeGitCommitsInPageRequest
}

// 认证信息
func (r ApiDescribeGitCommitsInPageRequest) Authorization(authorization string) ApiDescribeGitCommitsInPageRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitCommitsInPageRequest) Action(action string) ApiDescribeGitCommitsInPageRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitCommitsInPageRequest) DescribeGitCommitsInPageRequest(describeGitCommitsInPageRequest DescribeGitCommitsInPageRequest) ApiDescribeGitCommitsInPageRequest {
	r.describeGitCommitsInPageRequest = &describeGitCommitsInPageRequest
	return r
}

func (r ApiDescribeGitCommitsInPageRequest) Execute() (*DescribeGitCommitsInPage200Response, *http.Response, error) {
	return r.ApiService.DescribeGitCommitsInPageExecute(r)
}

/*
DescribeGitCommitsInPage Git提交-查询仓库分支下提交列表

✨ 查询仓库分支下提交列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitCommitsInPageRequest
*/
func (a *DefaultApiService) DescribeGitCommitsInPage(ctx context.Context) ApiDescribeGitCommitsInPageRequest {
	return ApiDescribeGitCommitsInPageRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitCommitsInPage200Response
func (a *DefaultApiService) DescribeGitCommitsInPageExecute(r ApiDescribeGitCommitsInPageRequest) (*DescribeGitCommitsInPage200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitCommitsInPage200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitCommitsInPage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitCommitsInPage"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitCommitsInPageRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitContributorsRequest struct {
	ctx                            context.Context
	ApiService                     *DefaultApiService
	authorization                  *string
	action                         *string
	describeGitContributorsRequest *DescribeGitContributorsRequest
}

// 认证信息
func (r ApiDescribeGitContributorsRequest) Authorization(authorization string) ApiDescribeGitContributorsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitContributorsRequest) Action(action string) ApiDescribeGitContributorsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitContributorsRequest) DescribeGitContributorsRequest(describeGitContributorsRequest DescribeGitContributorsRequest) ApiDescribeGitContributorsRequest {
	r.describeGitContributorsRequest = &describeGitContributorsRequest
	return r
}

func (r ApiDescribeGitContributorsRequest) Execute() (*DescribeGitContributors200Response, *http.Response, error) {
	return r.ApiService.DescribeGitContributorsExecute(r)
}

/*
DescribeGitContributors 仓库信息-查询git仓库的贡献者

✨ 查询 git 仓库的贡献者

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitContributorsRequest
*/
func (a *DefaultApiService) DescribeGitContributors(ctx context.Context) ApiDescribeGitContributorsRequest {
	return ApiDescribeGitContributorsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitContributors200Response
func (a *DefaultApiService) DescribeGitContributorsExecute(r ApiDescribeGitContributorsRequest) (*DescribeGitContributors200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitContributors200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitContributors")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitContributors"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitContributorsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitDepotRequest struct {
	ctx                     context.Context
	ApiService              *DefaultApiService
	authorization           *string
	action                  *string
	describeGitDepotRequest *DescribeGitDepotRequest
}

// 认证信息
func (r ApiDescribeGitDepotRequest) Authorization(authorization string) ApiDescribeGitDepotRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitDepotRequest) Action(action string) ApiDescribeGitDepotRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitDepotRequest) DescribeGitDepotRequest(describeGitDepotRequest DescribeGitDepotRequest) ApiDescribeGitDepotRequest {
	r.describeGitDepotRequest = &describeGitDepotRequest
	return r
}

func (r ApiDescribeGitDepotRequest) Execute() (*DescribeGitDepot200Response, *http.Response, error) {
	return r.ApiService.DescribeGitDepotExecute(r)
}

/*
DescribeGitDepot 仓库信息-根据代码仓库id获取代码仓库信息

✨ 根据代码仓库id获取代码仓库信息

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitDepotRequest
*/
func (a *DefaultApiService) DescribeGitDepot(ctx context.Context) ApiDescribeGitDepotRequest {
	return ApiDescribeGitDepotRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitDepot200Response
func (a *DefaultApiService) DescribeGitDepotExecute(r ApiDescribeGitDepotRequest) (*DescribeGitDepot200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitDepot200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitDepot")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitDepot"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.describeGitDepotRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitDepotDeployKeysRequest struct {
	ctx                               context.Context
	ApiService                        *DefaultApiService
	authorization                     *string
	action                            *string
	describeGitDepotDeployKeysRequest *DescribeGitDepotDeployKeysRequest
}

// 认证信息
func (r ApiDescribeGitDepotDeployKeysRequest) Authorization(authorization string) ApiDescribeGitDepotDeployKeysRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitDepotDeployKeysRequest) Action(action string) ApiDescribeGitDepotDeployKeysRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitDepotDeployKeysRequest) DescribeGitDepotDeployKeysRequest(describeGitDepotDeployKeysRequest DescribeGitDepotDeployKeysRequest) ApiDescribeGitDepotDeployKeysRequest {
	r.describeGitDepotDeployKeysRequest = &describeGitDepotDeployKeysRequest
	return r
}

func (r ApiDescribeGitDepotDeployKeysRequest) Execute() (*DescribeGitDepotDeployKeys200Response, *http.Response, error) {
	return r.ApiService.DescribeGitDepotDeployKeysExecute(r)
}

/*
DescribeGitDepotDeployKeys 仓库设置-查询某仓库下的部署公钥列表

✨ 查询某仓库下的部署公钥列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitDepotDeployKeysRequest
*/
func (a *DefaultApiService) DescribeGitDepotDeployKeys(ctx context.Context) ApiDescribeGitDepotDeployKeysRequest {
	return ApiDescribeGitDepotDeployKeysRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitDepotDeployKeys200Response
func (a *DefaultApiService) DescribeGitDepotDeployKeysExecute(r ApiDescribeGitDepotDeployKeysRequest) (*DescribeGitDepotDeployKeys200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitDepotDeployKeys200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitDepotDeployKeys")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitDepotDeployKeys"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitDepotDeployKeysRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitFileRequest struct {
	ctx                    context.Context
	ApiService             *DefaultApiService
	authorization          *string
	action                 *string
	describeGitFileRequest *DescribeGitFileRequest
}

// 认证信息
func (r ApiDescribeGitFileRequest) Authorization(authorization string) ApiDescribeGitFileRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitFileRequest) Action(action string) ApiDescribeGitFileRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitFileRequest) DescribeGitFileRequest(describeGitFileRequest DescribeGitFileRequest) ApiDescribeGitFileRequest {
	r.describeGitFileRequest = &describeGitFileRequest
	return r
}

func (r ApiDescribeGitFileRequest) Execute() (*DescribeGitFile200Response, *http.Response, error) {
	return r.ApiService.DescribeGitFileExecute(r)
}

/*
DescribeGitFile Git文件-获取文件详情

✨ 获取文件详情

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitFileRequest
*/
func (a *DefaultApiService) DescribeGitFile(ctx context.Context) ApiDescribeGitFileRequest {
	return ApiDescribeGitFileRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitFile200Response
func (a *DefaultApiService) DescribeGitFileExecute(r ApiDescribeGitFileRequest) (*DescribeGitFile200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitFile200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitFile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitFile"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitFileRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitFileContentRequest struct {
	ctx                           context.Context
	ApiService                    *DefaultApiService
	authorization                 *string
	action                        *string
	describeGitFileContentRequest *DescribeGitFileContentRequest
}

// 认证信息
func (r ApiDescribeGitFileContentRequest) Authorization(authorization string) ApiDescribeGitFileContentRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitFileContentRequest) Action(action string) ApiDescribeGitFileContentRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitFileContentRequest) DescribeGitFileContentRequest(describeGitFileContentRequest DescribeGitFileContentRequest) ApiDescribeGitFileContentRequest {
	r.describeGitFileContentRequest = &describeGitFileContentRequest
	return r
}

func (r ApiDescribeGitFileContentRequest) Execute() (*DescribeGitFileContent200Response, *http.Response, error) {
	return r.ApiService.DescribeGitFileContentExecute(r)
}

/*
DescribeGitFileContent Git提交-查询某次提交某文件的内容

✨ 查询某次提交某文件的内容

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitFileContentRequest
*/
func (a *DefaultApiService) DescribeGitFileContent(ctx context.Context) ApiDescribeGitFileContentRequest {
	return ApiDescribeGitFileContentRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitFileContent200Response
func (a *DefaultApiService) DescribeGitFileContentExecute(r ApiDescribeGitFileContentRequest) (*DescribeGitFileContent200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitFileContent200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitFileContent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitFileContent"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitFileContentRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitFileStatRequest struct {
	ctx                        context.Context
	ApiService                 *DefaultApiService
	authorization              *string
	action                     *string
	describeGitFileStatRequest *DescribeGitFileStatRequest
}

// 认证信息
func (r ApiDescribeGitFileStatRequest) Authorization(authorization string) ApiDescribeGitFileStatRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitFileStatRequest) Action(action string) ApiDescribeGitFileStatRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitFileStatRequest) DescribeGitFileStatRequest(describeGitFileStatRequest DescribeGitFileStatRequest) ApiDescribeGitFileStatRequest {
	r.describeGitFileStatRequest = &describeGitFileStatRequest
	return r
}

func (r ApiDescribeGitFileStatRequest) Execute() (*DescribeGitFileStat200Response, *http.Response, error) {
	return r.ApiService.DescribeGitFileStatExecute(r)
}

/*
DescribeGitFileStat Git文件-检查仓库文件是否存在

✨ 检查仓库文件

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitFileStatRequest
*/
func (a *DefaultApiService) DescribeGitFileStat(ctx context.Context) ApiDescribeGitFileStatRequest {
	return ApiDescribeGitFileStatRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitFileStat200Response
func (a *DefaultApiService) DescribeGitFileStatExecute(r ApiDescribeGitFileStatRequest) (*DescribeGitFileStat200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitFileStat200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitFileStat")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitFileStat"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitFileStatRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitFilesRequest struct {
	ctx                     context.Context
	ApiService              *DefaultApiService
	authorization           *string
	action                  *string
	describeGitFilesRequest *DescribeGitFilesRequest
}

// 认证信息
func (r ApiDescribeGitFilesRequest) Authorization(authorization string) ApiDescribeGitFilesRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitFilesRequest) Action(action string) ApiDescribeGitFilesRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitFilesRequest) DescribeGitFilesRequest(describeGitFilesRequest DescribeGitFilesRequest) ApiDescribeGitFilesRequest {
	r.describeGitFilesRequest = &describeGitFilesRequest
	return r
}

func (r ApiDescribeGitFilesRequest) Execute() (*DescribeGitFiles200Response, *http.Response, error) {
	return r.ApiService.DescribeGitFilesExecute(r)
}

/*
DescribeGitFiles Git文件-查询仓库目录下文件和文件夹名字

✨ 获取分支目录结构

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitFilesRequest
*/
func (a *DefaultApiService) DescribeGitFiles(ctx context.Context) ApiDescribeGitFilesRequest {
	return ApiDescribeGitFilesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitFiles200Response
func (a *DefaultApiService) DescribeGitFilesExecute(r ApiDescribeGitFilesRequest) (*DescribeGitFiles200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitFiles200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitFiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitFiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitFilesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitMergeBaseRequest struct {
	ctx                         context.Context
	ApiService                  *DefaultApiService
	authorization               *string
	action                      *string
	describeGitMergeBaseRequest *DescribeGitMergeBaseRequest
}

// 认证信息
func (r ApiDescribeGitMergeBaseRequest) Authorization(authorization string) ApiDescribeGitMergeBaseRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitMergeBaseRequest) Action(action string) ApiDescribeGitMergeBaseRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitMergeBaseRequest) DescribeGitMergeBaseRequest(describeGitMergeBaseRequest DescribeGitMergeBaseRequest) ApiDescribeGitMergeBaseRequest {
	r.describeGitMergeBaseRequest = &describeGitMergeBaseRequest
	return r
}

func (r ApiDescribeGitMergeBaseRequest) Execute() (*DescribeGitMergeBase200Response, *http.Response, error) {
	return r.ApiService.DescribeGitMergeBaseExecute(r)
}

/*
DescribeGitMergeBase 仓库分支-查询两个分支的公共祖先

✨ 查询两个分支的公共祖先

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitMergeBaseRequest
*/
func (a *DefaultApiService) DescribeGitMergeBase(ctx context.Context) ApiDescribeGitMergeBaseRequest {
	return ApiDescribeGitMergeBaseRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitMergeBase200Response
func (a *DefaultApiService) DescribeGitMergeBaseExecute(r ApiDescribeGitMergeBaseRequest) (*DescribeGitMergeBase200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitMergeBase200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitMergeBase")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitMergeBase"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitMergeBaseRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitMergeRequestDiffDetailRequest struct {
	ctx                                      context.Context
	ApiService                               *DefaultApiService
	authorization                            *string
	action                                   *string
	describeGitMergeRequestDiffDetailRequest *DescribeGitMergeRequestDiffDetailRequest
}

// 认证信息
func (r ApiDescribeGitMergeRequestDiffDetailRequest) Authorization(authorization string) ApiDescribeGitMergeRequestDiffDetailRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitMergeRequestDiffDetailRequest) Action(action string) ApiDescribeGitMergeRequestDiffDetailRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitMergeRequestDiffDetailRequest) DescribeGitMergeRequestDiffDetailRequest(describeGitMergeRequestDiffDetailRequest DescribeGitMergeRequestDiffDetailRequest) ApiDescribeGitMergeRequestDiffDetailRequest {
	r.describeGitMergeRequestDiffDetailRequest = &describeGitMergeRequestDiffDetailRequest
	return r
}

func (r ApiDescribeGitMergeRequestDiffDetailRequest) Execute() (*DescribeGitMergeRequestDiffDetail200Response, *http.Response, error) {
	return r.ApiService.DescribeGitMergeRequestDiffDetailExecute(r)
}

/*
DescribeGitMergeRequestDiffDetail 合并请求-查询合并请求文件的 diff 详情

✨ 查询合并请求文件的 diff 详情

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitMergeRequestDiffDetailRequest
*/
func (a *DefaultApiService) DescribeGitMergeRequestDiffDetail(ctx context.Context) ApiDescribeGitMergeRequestDiffDetailRequest {
	return ApiDescribeGitMergeRequestDiffDetailRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitMergeRequestDiffDetail200Response
func (a *DefaultApiService) DescribeGitMergeRequestDiffDetailExecute(r ApiDescribeGitMergeRequestDiffDetailRequest) (*DescribeGitMergeRequestDiffDetail200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitMergeRequestDiffDetail200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitMergeRequestDiffDetail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitMergeRequestDiffDetail"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitMergeRequestDiffDetailRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitMergeRequestDiffsRequest struct {
	ctx                                 context.Context
	ApiService                          *DefaultApiService
	authorization                       *string
	action                              *string
	describeGitMergeRequestDiffsRequest *DescribeGitMergeRequestDiffsRequest
}

// 认证信息
func (r ApiDescribeGitMergeRequestDiffsRequest) Authorization(authorization string) ApiDescribeGitMergeRequestDiffsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitMergeRequestDiffsRequest) Action(action string) ApiDescribeGitMergeRequestDiffsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitMergeRequestDiffsRequest) DescribeGitMergeRequestDiffsRequest(describeGitMergeRequestDiffsRequest DescribeGitMergeRequestDiffsRequest) ApiDescribeGitMergeRequestDiffsRequest {
	r.describeGitMergeRequestDiffsRequest = &describeGitMergeRequestDiffsRequest
	return r
}

func (r ApiDescribeGitMergeRequestDiffsRequest) Execute() (*DescribeGitMergeRequestDiffs200Response, *http.Response, error) {
	return r.ApiService.DescribeGitMergeRequestDiffsExecute(r)
}

/*
DescribeGitMergeRequestDiffs 合并请求-查询合并请求diff信息的文件列表

✨ 查询合并请求 diff 信息的文件列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitMergeRequestDiffsRequest
*/
func (a *DefaultApiService) DescribeGitMergeRequestDiffs(ctx context.Context) ApiDescribeGitMergeRequestDiffsRequest {
	return ApiDescribeGitMergeRequestDiffsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitMergeRequestDiffs200Response
func (a *DefaultApiService) DescribeGitMergeRequestDiffsExecute(r ApiDescribeGitMergeRequestDiffsRequest) (*DescribeGitMergeRequestDiffs200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitMergeRequestDiffs200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitMergeRequestDiffs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitMergeRequestDiffs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitMergeRequestDiffsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitMergeRequestParticipantsRequest struct {
	ctx                                        context.Context
	ApiService                                 *DefaultApiService
	authorization                              *string
	action                                     *string
	describeGitMergeRequestParticipantsRequest *DescribeGitMergeRequestParticipantsRequest
}

// 认证信息
func (r ApiDescribeGitMergeRequestParticipantsRequest) Authorization(authorization string) ApiDescribeGitMergeRequestParticipantsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitMergeRequestParticipantsRequest) Action(action string) ApiDescribeGitMergeRequestParticipantsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitMergeRequestParticipantsRequest) DescribeGitMergeRequestParticipantsRequest(describeGitMergeRequestParticipantsRequest DescribeGitMergeRequestParticipantsRequest) ApiDescribeGitMergeRequestParticipantsRequest {
	r.describeGitMergeRequestParticipantsRequest = &describeGitMergeRequestParticipantsRequest
	return r
}

func (r ApiDescribeGitMergeRequestParticipantsRequest) Execute() (*DescribeGitMergeRequestParticipants200Response, *http.Response, error) {
	return r.ApiService.DescribeGitMergeRequestParticipantsExecute(r)
}

/*
DescribeGitMergeRequestParticipants 合并请求-获取合并请求的参与者

✨ 获取合并请求的参与者

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitMergeRequestParticipantsRequest
*/
func (a *DefaultApiService) DescribeGitMergeRequestParticipants(ctx context.Context) ApiDescribeGitMergeRequestParticipantsRequest {
	return ApiDescribeGitMergeRequestParticipantsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitMergeRequestParticipants200Response
func (a *DefaultApiService) DescribeGitMergeRequestParticipantsExecute(r ApiDescribeGitMergeRequestParticipantsRequest) (*DescribeGitMergeRequestParticipants200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitMergeRequestParticipants200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitMergeRequestParticipants")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitMergeRequestParticipants"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitMergeRequestParticipantsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitMergeRequestsByShaRequest struct {
	ctx                                  context.Context
	ApiService                           *DefaultApiService
	authorization                        *string
	action                               *string
	describeGitMergeRequestsByShaRequest *DescribeGitMergeRequestsByShaRequest
}

// 认证信息
func (r ApiDescribeGitMergeRequestsByShaRequest) Authorization(authorization string) ApiDescribeGitMergeRequestsByShaRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitMergeRequestsByShaRequest) Action(action string) ApiDescribeGitMergeRequestsByShaRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitMergeRequestsByShaRequest) DescribeGitMergeRequestsByShaRequest(describeGitMergeRequestsByShaRequest DescribeGitMergeRequestsByShaRequest) ApiDescribeGitMergeRequestsByShaRequest {
	r.describeGitMergeRequestsByShaRequest = &describeGitMergeRequestsByShaRequest
	return r
}

func (r ApiDescribeGitMergeRequestsByShaRequest) Execute() (*DescribeGitMergeRequestsBySha200Response, *http.Response, error) {
	return r.ApiService.DescribeGitMergeRequestsByShaExecute(r)
}

/*
DescribeGitMergeRequestsBySha 合并请求-查询含有某次提交的合并请求

✨ 查询含有某次提交的合并请求

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitMergeRequestsByShaRequest
*/
func (a *DefaultApiService) DescribeGitMergeRequestsBySha(ctx context.Context) ApiDescribeGitMergeRequestsByShaRequest {
	return ApiDescribeGitMergeRequestsByShaRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitMergeRequestsBySha200Response
func (a *DefaultApiService) DescribeGitMergeRequestsByShaExecute(r ApiDescribeGitMergeRequestsByShaRequest) (*DescribeGitMergeRequestsBySha200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitMergeRequestsBySha200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitMergeRequestsBySha")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitMergeRequestsBySha"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitMergeRequestsByShaRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitProjectDeployKeysRequest struct {
	ctx                                 context.Context
	ApiService                          *DefaultApiService
	authorization                       *string
	action                              *string
	describeGitProjectDeployKeysRequest *DescribeGitProjectDeployKeysRequest
}

// 认证信息
func (r ApiDescribeGitProjectDeployKeysRequest) Authorization(authorization string) ApiDescribeGitProjectDeployKeysRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitProjectDeployKeysRequest) Action(action string) ApiDescribeGitProjectDeployKeysRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitProjectDeployKeysRequest) DescribeGitProjectDeployKeysRequest(describeGitProjectDeployKeysRequest DescribeGitProjectDeployKeysRequest) ApiDescribeGitProjectDeployKeysRequest {
	r.describeGitProjectDeployKeysRequest = &describeGitProjectDeployKeysRequest
	return r
}

func (r ApiDescribeGitProjectDeployKeysRequest) Execute() (*DescribeGitDepotDeployKeys200Response, *http.Response, error) {
	return r.ApiService.DescribeGitProjectDeployKeysExecute(r)
}

/*
DescribeGitProjectDeployKeys 仓库设置-查询某项目下的部署公钥列表

✨ 查询某项目下的部署公钥列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitProjectDeployKeysRequest
*/
func (a *DefaultApiService) DescribeGitProjectDeployKeys(ctx context.Context) ApiDescribeGitProjectDeployKeysRequest {
	return ApiDescribeGitProjectDeployKeysRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitDepotDeployKeys200Response
func (a *DefaultApiService) DescribeGitProjectDeployKeysExecute(r ApiDescribeGitProjectDeployKeysRequest) (*DescribeGitDepotDeployKeys200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitDepotDeployKeys200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitProjectDeployKeys")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitProjectDeployKeys"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitProjectDeployKeysRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitProtectedTagsRequest struct {
	ctx                             context.Context
	ApiService                      *DefaultApiService
	authorization                   *string
	action                          *string
	describeGitProtectedTagsRequest *DescribeGitProtectedTagsRequest
}

// 认证信息
func (r ApiDescribeGitProtectedTagsRequest) Authorization(authorization string) ApiDescribeGitProtectedTagsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitProtectedTagsRequest) Action(action string) ApiDescribeGitProtectedTagsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitProtectedTagsRequest) DescribeGitProtectedTagsRequest(describeGitProtectedTagsRequest DescribeGitProtectedTagsRequest) ApiDescribeGitProtectedTagsRequest {
	r.describeGitProtectedTagsRequest = &describeGitProtectedTagsRequest
	return r
}

func (r ApiDescribeGitProtectedTagsRequest) Execute() (*DescribeGitProtectedTags200Response, *http.Response, error) {
	return r.ApiService.DescribeGitProtectedTagsExecute(r)
}

/*
DescribeGitProtectedTags 标签信息-查询受保护的标签列表

✨ 查询受保护的标签列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitProtectedTagsRequest
*/
func (a *DefaultApiService) DescribeGitProtectedTags(ctx context.Context) ApiDescribeGitProtectedTagsRequest {
	return ApiDescribeGitProtectedTagsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitProtectedTags200Response
func (a *DefaultApiService) DescribeGitProtectedTagsExecute(r ApiDescribeGitProtectedTagsRequest) (*DescribeGitProtectedTags200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitProtectedTags200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitProtectedTags")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitProtectedTags"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitProtectedTagsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitProtectedTagsByRuleRequest struct {
	ctx                                   context.Context
	ApiService                            *DefaultApiService
	authorization                         *string
	action                                *string
	describeGitProtectedTagsByRuleRequest *DescribeGitProtectedTagsByRuleRequest
}

// 认证信息
func (r ApiDescribeGitProtectedTagsByRuleRequest) Authorization(authorization string) ApiDescribeGitProtectedTagsByRuleRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitProtectedTagsByRuleRequest) Action(action string) ApiDescribeGitProtectedTagsByRuleRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitProtectedTagsByRuleRequest) DescribeGitProtectedTagsByRuleRequest(describeGitProtectedTagsByRuleRequest DescribeGitProtectedTagsByRuleRequest) ApiDescribeGitProtectedTagsByRuleRequest {
	r.describeGitProtectedTagsByRuleRequest = &describeGitProtectedTagsByRuleRequest
	return r
}

func (r ApiDescribeGitProtectedTagsByRuleRequest) Execute() (*DescribeGitProtectedTagsByRule200Response, *http.Response, error) {
	return r.ApiService.DescribeGitProtectedTagsByRuleExecute(r)
}

/*
DescribeGitProtectedTagsByRule 标签信息-根据标签保护规则查询受保护的标签列表

✨ 根据标签保护规则查询受保护的标签列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitProtectedTagsByRuleRequest
*/
func (a *DefaultApiService) DescribeGitProtectedTagsByRule(ctx context.Context) ApiDescribeGitProtectedTagsByRuleRequest {
	return ApiDescribeGitProtectedTagsByRuleRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitProtectedTagsByRule200Response
func (a *DefaultApiService) DescribeGitProtectedTagsByRuleExecute(r ApiDescribeGitProtectedTagsByRuleRequest) (*DescribeGitProtectedTagsByRule200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitProtectedTagsByRule200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitProtectedTagsByRule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitProtectedTagsByRule"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitProtectedTagsByRuleRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitRefRequest struct {
	ctx                   context.Context
	ApiService            *DefaultApiService
	authorization         *string
	action                *string
	describeGitRefRequest *DescribeGitRefRequest
}

// 认证信息
func (r ApiDescribeGitRefRequest) Authorization(authorization string) ApiDescribeGitRefRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitRefRequest) Action(action string) ApiDescribeGitRefRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitRefRequest) DescribeGitRefRequest(describeGitRefRequest DescribeGitRefRequest) ApiDescribeGitRefRequest {
	r.describeGitRefRequest = &describeGitRefRequest
	return r
}

func (r ApiDescribeGitRefRequest) Execute() (*DescribeGitRef200Response, *http.Response, error) {
	return r.ApiService.DescribeGitRefExecute(r)
}

/*
DescribeGitRef 仓库分支-获取分支或标签信息

✨ 获取分支或标签信息

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitRefRequest
*/
func (a *DefaultApiService) DescribeGitRef(ctx context.Context) ApiDescribeGitRefRequest {
	return ApiDescribeGitRefRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitRef200Response
func (a *DefaultApiService) DescribeGitRefExecute(r ApiDescribeGitRefRequest) (*DescribeGitRef200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitRef200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitRef")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitRef"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitRefRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitRefsByShaRequest struct {
	ctx                         context.Context
	ApiService                  *DefaultApiService
	authorization               *string
	action                      *string
	describeGitRefsByShaRequest *DescribeGitRefsByShaRequest
}

// 认证信息
func (r ApiDescribeGitRefsByShaRequest) Authorization(authorization string) ApiDescribeGitRefsByShaRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitRefsByShaRequest) Action(action string) ApiDescribeGitRefsByShaRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitRefsByShaRequest) DescribeGitRefsByShaRequest(describeGitRefsByShaRequest DescribeGitRefsByShaRequest) ApiDescribeGitRefsByShaRequest {
	r.describeGitRefsByShaRequest = &describeGitRefsByShaRequest
	return r
}

func (r ApiDescribeGitRefsByShaRequest) Execute() (*DescribeGitRefsBySha200Response, *http.Response, error) {
	return r.ApiService.DescribeGitRefsByShaExecute(r)
}

/*
DescribeGitRefsBySha Git提交-查询含有某次提交的标签或分支列表

✨ 查询含有某次提交的标签或分支列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitRefsByShaRequest
*/
func (a *DefaultApiService) DescribeGitRefsBySha(ctx context.Context) ApiDescribeGitRefsByShaRequest {
	return ApiDescribeGitRefsByShaRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitRefsBySha200Response
func (a *DefaultApiService) DescribeGitRefsByShaExecute(r ApiDescribeGitRefsByShaRequest) (*DescribeGitRefsBySha200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitRefsBySha200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitRefsBySha")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitRefsBySha"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitRefsByShaRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitReleaseDetailRequest struct {
	ctx                             context.Context
	ApiService                      *DefaultApiService
	authorization                   *string
	action                          *string
	describeGitReleaseDetailRequest *DescribeGitReleaseDetailRequest
}

// 认证信息
func (r ApiDescribeGitReleaseDetailRequest) Authorization(authorization string) ApiDescribeGitReleaseDetailRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitReleaseDetailRequest) Action(action string) ApiDescribeGitReleaseDetailRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitReleaseDetailRequest) DescribeGitReleaseDetailRequest(describeGitReleaseDetailRequest DescribeGitReleaseDetailRequest) ApiDescribeGitReleaseDetailRequest {
	r.describeGitReleaseDetailRequest = &describeGitReleaseDetailRequest
	return r
}

func (r ApiDescribeGitReleaseDetailRequest) Execute() (*DescribeGitReleaseDetail200Response, *http.Response, error) {
	return r.ApiService.DescribeGitReleaseDetailExecute(r)
}

/*
DescribeGitReleaseDetail 版本信息-查询仓库的版本详情

✨ 查询仓库的版本详情

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitReleaseDetailRequest
*/
func (a *DefaultApiService) DescribeGitReleaseDetail(ctx context.Context) ApiDescribeGitReleaseDetailRequest {
	return ApiDescribeGitReleaseDetailRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitReleaseDetail200Response
func (a *DefaultApiService) DescribeGitReleaseDetailExecute(r ApiDescribeGitReleaseDetailRequest) (*DescribeGitReleaseDetail200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitReleaseDetail200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitReleaseDetail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitReleaseDetail"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitReleaseDetailRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitReleasesRequest struct {
	ctx                        context.Context
	ApiService                 *DefaultApiService
	authorization              *string
	action                     *string
	describeGitReleasesRequest *DescribeGitReleasesRequest
}

// 认证信息
func (r ApiDescribeGitReleasesRequest) Authorization(authorization string) ApiDescribeGitReleasesRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitReleasesRequest) Action(action string) ApiDescribeGitReleasesRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitReleasesRequest) DescribeGitReleasesRequest(describeGitReleasesRequest DescribeGitReleasesRequest) ApiDescribeGitReleasesRequest {
	r.describeGitReleasesRequest = &describeGitReleasesRequest
	return r
}

func (r ApiDescribeGitReleasesRequest) Execute() (*DescribeGitReleases200Response, *http.Response, error) {
	return r.ApiService.DescribeGitReleasesExecute(r)
}

/*
DescribeGitReleases 版本信息-查询仓库的版本列表

✨ 查询仓库的版本列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitReleasesRequest
*/
func (a *DefaultApiService) DescribeGitReleases(ctx context.Context) ApiDescribeGitReleasesRequest {
	return ApiDescribeGitReleasesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitReleases200Response
func (a *DefaultApiService) DescribeGitReleasesExecute(r ApiDescribeGitReleasesRequest) (*DescribeGitReleases200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitReleases200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitReleases")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitReleases"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitReleasesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitTagRequest struct {
	ctx                   context.Context
	ApiService            *DefaultApiService
	authorization         *string
	action                *string
	describeGitTagRequest *DescribeGitTagRequest
}

// 认证信息
func (r ApiDescribeGitTagRequest) Authorization(authorization string) ApiDescribeGitTagRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitTagRequest) Action(action string) ApiDescribeGitTagRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitTagRequest) DescribeGitTagRequest(describeGitTagRequest DescribeGitTagRequest) ApiDescribeGitTagRequest {
	r.describeGitTagRequest = &describeGitTagRequest
	return r
}

func (r ApiDescribeGitTagRequest) Execute() (*DescribeGitTag200Response, *http.Response, error) {
	return r.ApiService.DescribeGitTagExecute(r)
}

/*
DescribeGitTag 标签信息-查询单个tag

✨ 查询单个tag

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitTagRequest
*/
func (a *DefaultApiService) DescribeGitTag(ctx context.Context) ApiDescribeGitTagRequest {
	return ApiDescribeGitTagRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitTag200Response
func (a *DefaultApiService) DescribeGitTagExecute(r ApiDescribeGitTagRequest) (*DescribeGitTag200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitTag200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitTag")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitTag"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitTagRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitTagsRequest struct {
	ctx                    context.Context
	ApiService             *DefaultApiService
	authorization          *string
	action                 *string
	describeGitTagsRequest *DescribeGitTagsRequest
}

// 认证信息
func (r ApiDescribeGitTagsRequest) Authorization(authorization string) ApiDescribeGitTagsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitTagsRequest) Action(action string) ApiDescribeGitTagsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitTagsRequest) DescribeGitTagsRequest(describeGitTagsRequest DescribeGitTagsRequest) ApiDescribeGitTagsRequest {
	r.describeGitTagsRequest = &describeGitTagsRequest
	return r
}

func (r ApiDescribeGitTagsRequest) Execute() (*DescribeGitTags200Response, *http.Response, error) {
	return r.ApiService.DescribeGitTagsExecute(r)
}

/*
DescribeGitTags 标签信息-查询当前仓库下所有tags

✨ 查询当前仓库下所有tags

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitTagsRequest
*/
func (a *DefaultApiService) DescribeGitTags(ctx context.Context) ApiDescribeGitTagsRequest {
	return ApiDescribeGitTagsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitTags200Response
func (a *DefaultApiService) DescribeGitTagsExecute(r ApiDescribeGitTagsRequest) (*DescribeGitTags200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitTags200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitTags")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitTags"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitTagsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitTagsByBranchRequest struct {
	ctx                            context.Context
	ApiService                     *DefaultApiService
	authorization                  *string
	action                         *string
	describeGitTagsByBranchRequest *DescribeGitTagsByBranchRequest
}

// 认证信息
func (r ApiDescribeGitTagsByBranchRequest) Authorization(authorization string) ApiDescribeGitTagsByBranchRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitTagsByBranchRequest) Action(action string) ApiDescribeGitTagsByBranchRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitTagsByBranchRequest) DescribeGitTagsByBranchRequest(describeGitTagsByBranchRequest DescribeGitTagsByBranchRequest) ApiDescribeGitTagsByBranchRequest {
	r.describeGitTagsByBranchRequest = &describeGitTagsByBranchRequest
	return r
}

func (r ApiDescribeGitTagsByBranchRequest) Execute() (*DescribeGitTagsByBranch200Response, *http.Response, error) {
	return r.ApiService.DescribeGitTagsByBranchExecute(r)
}

/*
DescribeGitTagsByBranch 标签信息-根据分支获取标签列表

✨ 根据分支获取标签列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitTagsByBranchRequest
*/
func (a *DefaultApiService) DescribeGitTagsByBranch(ctx context.Context) ApiDescribeGitTagsByBranchRequest {
	return ApiDescribeGitTagsByBranchRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitTagsByBranch200Response
func (a *DefaultApiService) DescribeGitTagsByBranchExecute(r ApiDescribeGitTagsByBranchRequest) (*DescribeGitTagsByBranch200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitTagsByBranch200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitTagsByBranch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitTagsByBranch"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitTagsByBranchRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitTagsByShaRequest struct {
	ctx                         context.Context
	ApiService                  *DefaultApiService
	authorization               *string
	action                      *string
	describeGitTagsByShaRequest *DescribeGitTagsByShaRequest
}

// 认证信息
func (r ApiDescribeGitTagsByShaRequest) Authorization(authorization string) ApiDescribeGitTagsByShaRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitTagsByShaRequest) Action(action string) ApiDescribeGitTagsByShaRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitTagsByShaRequest) DescribeGitTagsByShaRequest(describeGitTagsByShaRequest DescribeGitTagsByShaRequest) ApiDescribeGitTagsByShaRequest {
	r.describeGitTagsByShaRequest = &describeGitTagsByShaRequest
	return r
}

func (r ApiDescribeGitTagsByShaRequest) Execute() (*DescribeGitTagsBySha200Response, *http.Response, error) {
	return r.ApiService.DescribeGitTagsByShaExecute(r)
}

/*
DescribeGitTagsBySha 标签信息-查询含有某次提交的标签列表

✨ 查询含有某次提交的标签列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitTagsByShaRequest
*/
func (a *DefaultApiService) DescribeGitTagsBySha(ctx context.Context) ApiDescribeGitTagsByShaRequest {
	return ApiDescribeGitTagsByShaRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitTagsBySha200Response
func (a *DefaultApiService) DescribeGitTagsByShaExecute(r ApiDescribeGitTagsByShaRequest) (*DescribeGitTagsBySha200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitTagsBySha200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitTagsBySha")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitTagsBySha"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitTagsByShaRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGitTreeRequest struct {
	ctx                    context.Context
	ApiService             *DefaultApiService
	authorization          *string
	action                 *string
	describeGitTreeRequest *DescribeGitTreeRequest
}

// 认证信息
func (r ApiDescribeGitTreeRequest) Authorization(authorization string) ApiDescribeGitTreeRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGitTreeRequest) Action(action string) ApiDescribeGitTreeRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGitTreeRequest) DescribeGitTreeRequest(describeGitTreeRequest DescribeGitTreeRequest) ApiDescribeGitTreeRequest {
	r.describeGitTreeRequest = &describeGitTreeRequest
	return r
}

func (r ApiDescribeGitTreeRequest) Execute() (*DescribeGitTree200Response, *http.Response, error) {
	return r.ApiService.DescribeGitTreeExecute(r)
}

/*
DescribeGitTree 仓库信息-查询git仓库的树

✨ 查询 git 仓库的树

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGitTreeRequest
*/
func (a *DefaultApiService) DescribeGitTree(ctx context.Context) ApiDescribeGitTreeRequest {
	return ApiDescribeGitTreeRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGitTree200Response
func (a *DefaultApiService) DescribeGitTreeExecute(r ApiDescribeGitTreeRequest) (*DescribeGitTree200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGitTree200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGitTree")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeGitTree"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGitTreeRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGrantObjectsOnResourceRequest struct {
	ctx                                   context.Context
	ApiService                            *DefaultApiService
	authorization                         *string
	action                                *string
	describeGrantObjectsOnResourceRequest *DescribeGrantObjectsOnResourceRequest
}

// 认证信息
func (r ApiDescribeGrantObjectsOnResourceRequest) Authorization(authorization string) ApiDescribeGrantObjectsOnResourceRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGrantObjectsOnResourceRequest) Action(action string) ApiDescribeGrantObjectsOnResourceRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGrantObjectsOnResourceRequest) DescribeGrantObjectsOnResourceRequest(describeGrantObjectsOnResourceRequest DescribeGrantObjectsOnResourceRequest) ApiDescribeGrantObjectsOnResourceRequest {
	r.describeGrantObjectsOnResourceRequest = &describeGrantObjectsOnResourceRequest
	return r
}

func (r ApiDescribeGrantObjectsOnResourceRequest) Execute() (*DescribeGrantObjectsOnResource200Response, *http.Response, error) {
	return r.ApiService.DescribeGrantObjectsOnResourceExecute(r)
}

/*
DescribeGrantObjectsOnResource 授权对象列表分页查询

✨ 授权对象列表分页查询

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGrantObjectsOnResourceRequest
*/
func (a *DefaultApiService) DescribeGrantObjectsOnResource(ctx context.Context) ApiDescribeGrantObjectsOnResourceRequest {
	return ApiDescribeGrantObjectsOnResourceRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGrantObjectsOnResource200Response
func (a *DefaultApiService) DescribeGrantObjectsOnResourceExecute(r ApiDescribeGrantObjectsOnResourceRequest) (*DescribeGrantObjectsOnResource200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGrantObjectsOnResource200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGrantObjectsOnResource")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeGrantObjectsOnResource"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGrantObjectsOnResourceRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeGrantUsersOnResourceRequest struct {
	ctx                                 context.Context
	ApiService                          *DefaultApiService
	authorization                       *string
	action                              *string
	describeGrantUsersOnResourceRequest *DescribeGrantUsersOnResourceRequest
}

// 认证信息
func (r ApiDescribeGrantUsersOnResourceRequest) Authorization(authorization string) ApiDescribeGrantUsersOnResourceRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeGrantUsersOnResourceRequest) Action(action string) ApiDescribeGrantUsersOnResourceRequest {
	r.action = &action
	return r
}

func (r ApiDescribeGrantUsersOnResourceRequest) DescribeGrantUsersOnResourceRequest(describeGrantUsersOnResourceRequest DescribeGrantUsersOnResourceRequest) ApiDescribeGrantUsersOnResourceRequest {
	r.describeGrantUsersOnResourceRequest = &describeGrantUsersOnResourceRequest
	return r
}

func (r ApiDescribeGrantUsersOnResourceRequest) Execute() (*DescribeGrantUsersOnResource200Response, *http.Response, error) {
	return r.ApiService.DescribeGrantUsersOnResourceExecute(r)
}

/*
DescribeGrantUsersOnResource 授权用户列表分页查询

✨ 查询指定资源下授权的用户列表，包括容器内的用户

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeGrantUsersOnResourceRequest
*/
func (a *DefaultApiService) DescribeGrantUsersOnResource(ctx context.Context) ApiDescribeGrantUsersOnResourceRequest {
	return ApiDescribeGrantUsersOnResourceRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeGrantUsersOnResource200Response
func (a *DefaultApiService) DescribeGrantUsersOnResourceExecute(r ApiDescribeGrantUsersOnResourceRequest) (*DescribeGrantUsersOnResource200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeGrantUsersOnResource200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeGrantUsersOnResource")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeGrantUsersOnResource"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeGrantUsersOnResourceRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeHostServerInstanceRequest struct {
	ctx                               context.Context
	ApiService                        *DefaultApiService
	authorization                     *string
	action                            *string
	describeHostServerInstanceRequest *DescribeHostServerInstanceRequest
}

// 认证信息
func (r ApiDescribeHostServerInstanceRequest) Authorization(authorization string) ApiDescribeHostServerInstanceRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeHostServerInstanceRequest) Action(action string) ApiDescribeHostServerInstanceRequest {
	r.action = &action
	return r
}

func (r ApiDescribeHostServerInstanceRequest) DescribeHostServerInstanceRequest(describeHostServerInstanceRequest DescribeHostServerInstanceRequest) ApiDescribeHostServerInstanceRequest {
	r.describeHostServerInstanceRequest = &describeHostServerInstanceRequest
	return r
}

func (r ApiDescribeHostServerInstanceRequest) Execute() (*DescribeHostServerInstance200Response, *http.Response, error) {
	return r.ApiService.DescribeHostServerInstanceExecute(r)
}

/*
DescribeHostServerInstance CD 主机组部署详情获取

✨ CD 主机组部署详情获取

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeHostServerInstanceRequest
*/
func (a *DefaultApiService) DescribeHostServerInstance(ctx context.Context) ApiDescribeHostServerInstanceRequest {
	return ApiDescribeHostServerInstanceRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeHostServerInstance200Response
func (a *DefaultApiService) DescribeHostServerInstanceExecute(r ApiDescribeHostServerInstanceRequest) (*DescribeHostServerInstance200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeHostServerInstance200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeHostServerInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeHostServerInstance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeHostServerInstanceRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeIssueRequest struct {
	ctx                  context.Context
	ApiService           *DefaultApiService
	authorization        *string
	action               *string
	describeIssueRequest *DescribeIssueRequest
}

// 认证信息
func (r ApiDescribeIssueRequest) Authorization(authorization string) ApiDescribeIssueRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeIssueRequest) Action(action string) ApiDescribeIssueRequest {
	r.action = &action
	return r
}

func (r ApiDescribeIssueRequest) DescribeIssueRequest(describeIssueRequest DescribeIssueRequest) ApiDescribeIssueRequest {
	r.describeIssueRequest = &describeIssueRequest
	return r
}

func (r ApiDescribeIssueRequest) Execute() (*DescribeIssue200Response, *http.Response, error) {
	return r.ApiService.DescribeIssueExecute(r)
}

/*
DescribeIssue 事项详情查询

✨ 查询事项详情

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeIssueRequest
*/
func (a *DefaultApiService) DescribeIssue(ctx context.Context) ApiDescribeIssueRequest {
	return ApiDescribeIssueRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeIssue200Response
func (a *DefaultApiService) DescribeIssueExecute(r ApiDescribeIssueRequest) (*DescribeIssue200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeIssue200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeIssue")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeIssue"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeIssueRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeIssueAttachmentPreSignedUrlRequest struct {
	ctx                                        context.Context
	ApiService                                 *DefaultApiService
	authorization                              *string
	action                                     *string
	describeIssueAttachmentPreSignedUrlRequest *DescribeIssueAttachmentPreSignedUrlRequest
}

// 认证信息
func (r ApiDescribeIssueAttachmentPreSignedUrlRequest) Authorization(authorization string) ApiDescribeIssueAttachmentPreSignedUrlRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeIssueAttachmentPreSignedUrlRequest) Action(action string) ApiDescribeIssueAttachmentPreSignedUrlRequest {
	r.action = &action
	return r
}

func (r ApiDescribeIssueAttachmentPreSignedUrlRequest) DescribeIssueAttachmentPreSignedUrlRequest(describeIssueAttachmentPreSignedUrlRequest DescribeIssueAttachmentPreSignedUrlRequest) ApiDescribeIssueAttachmentPreSignedUrlRequest {
	r.describeIssueAttachmentPreSignedUrlRequest = &describeIssueAttachmentPreSignedUrlRequest
	return r
}

func (r ApiDescribeIssueAttachmentPreSignedUrlRequest) Execute() (*DescribeIssueAttachmentPreSignedUrl200Response, *http.Response, error) {
	return r.ApiService.DescribeIssueAttachmentPreSignedUrlExecute(r)
}

/*
DescribeIssueAttachmentPreSignedUrl 预签名信息获取

✨ 拿到预签名，上传文件

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeIssueAttachmentPreSignedUrlRequest
*/
func (a *DefaultApiService) DescribeIssueAttachmentPreSignedUrl(ctx context.Context) ApiDescribeIssueAttachmentPreSignedUrlRequest {
	return ApiDescribeIssueAttachmentPreSignedUrlRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeIssueAttachmentPreSignedUrl200Response
func (a *DefaultApiService) DescribeIssueAttachmentPreSignedUrlExecute(r ApiDescribeIssueAttachmentPreSignedUrlRequest) (*DescribeIssueAttachmentPreSignedUrl200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeIssueAttachmentPreSignedUrl200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeIssueAttachmentPreSignedUrl")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeIssueAttachmentPreSignedUrl"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeIssueAttachmentPreSignedUrlRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeIssueCommentListRequest struct {
	ctx                             context.Context
	ApiService                      *DefaultApiService
	authorization                   *string
	action                          *string
	describeIssueCommentListRequest *DescribeIssueCommentListRequest
}

// 认证信息
func (r ApiDescribeIssueCommentListRequest) Authorization(authorization string) ApiDescribeIssueCommentListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeIssueCommentListRequest) Action(action string) ApiDescribeIssueCommentListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeIssueCommentListRequest) DescribeIssueCommentListRequest(describeIssueCommentListRequest DescribeIssueCommentListRequest) ApiDescribeIssueCommentListRequest {
	r.describeIssueCommentListRequest = &describeIssueCommentListRequest
	return r
}

func (r ApiDescribeIssueCommentListRequest) Execute() (*DescribeIssueCommentList200Response, *http.Response, error) {
	return r.ApiService.DescribeIssueCommentListExecute(r)
}

/*
DescribeIssueCommentList 事项评论列表查询

✨ 查询事项评论列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeIssueCommentListRequest
*/
func (a *DefaultApiService) DescribeIssueCommentList(ctx context.Context) ApiDescribeIssueCommentListRequest {
	return ApiDescribeIssueCommentListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeIssueCommentList200Response
func (a *DefaultApiService) DescribeIssueCommentListExecute(r ApiDescribeIssueCommentListRequest) (*DescribeIssueCommentList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeIssueCommentList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeIssueCommentList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeIssueCommentList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeIssueCommentListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeIssueCustomFieldLogListRequest struct {
	ctx                                    context.Context
	ApiService                             *DefaultApiService
	authorization                          *string
	action                                 *string
	describeIssueCustomFieldLogListRequest *DescribeIssueCustomFieldLogListRequest
}

// 认证信息
func (r ApiDescribeIssueCustomFieldLogListRequest) Authorization(authorization string) ApiDescribeIssueCustomFieldLogListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeIssueCustomFieldLogListRequest) Action(action string) ApiDescribeIssueCustomFieldLogListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeIssueCustomFieldLogListRequest) DescribeIssueCustomFieldLogListRequest(describeIssueCustomFieldLogListRequest DescribeIssueCustomFieldLogListRequest) ApiDescribeIssueCustomFieldLogListRequest {
	r.describeIssueCustomFieldLogListRequest = &describeIssueCustomFieldLogListRequest
	return r
}

func (r ApiDescribeIssueCustomFieldLogListRequest) Execute() (*DescribeIssueCustomFieldLogList200Response, *http.Response, error) {
	return r.ApiService.DescribeIssueCustomFieldLogListExecute(r)
}

/*
DescribeIssueCustomFieldLogList 事项的自定义属性变更日志查询

✨ 获取某个事项的自定义属性变更日志

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeIssueCustomFieldLogListRequest
*/
func (a *DefaultApiService) DescribeIssueCustomFieldLogList(ctx context.Context) ApiDescribeIssueCustomFieldLogListRequest {
	return ApiDescribeIssueCustomFieldLogListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeIssueCustomFieldLogList200Response
func (a *DefaultApiService) DescribeIssueCustomFieldLogListExecute(r ApiDescribeIssueCustomFieldLogListRequest) (*DescribeIssueCustomFieldLogList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeIssueCustomFieldLogList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeIssueCustomFieldLogList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeIssueCustomFieldLogList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeIssueCustomFieldLogListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeIssueFileUrlRequest struct {
	ctx                         context.Context
	ApiService                  *DefaultApiService
	authorization               *string
	action                      *string
	describeIssueFileUrlRequest *DescribeIssueFileUrlRequest
}

// 认证信息
func (r ApiDescribeIssueFileUrlRequest) Authorization(authorization string) ApiDescribeIssueFileUrlRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeIssueFileUrlRequest) Action(action string) ApiDescribeIssueFileUrlRequest {
	r.action = &action
	return r
}

func (r ApiDescribeIssueFileUrlRequest) DescribeIssueFileUrlRequest(describeIssueFileUrlRequest DescribeIssueFileUrlRequest) ApiDescribeIssueFileUrlRequest {
	r.describeIssueFileUrlRequest = &describeIssueFileUrlRequest
	return r
}

func (r ApiDescribeIssueFileUrlRequest) Execute() (*DescribeIssueFileUrl200Response, *http.Response, error) {
	return r.ApiService.DescribeIssueFileUrlExecute(r)
}

/*
DescribeIssueFileUrl 事项附件的下载地址查询

✨ 查询事项附件的下载地址

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeIssueFileUrlRequest
*/
func (a *DefaultApiService) DescribeIssueFileUrl(ctx context.Context) ApiDescribeIssueFileUrlRequest {
	return ApiDescribeIssueFileUrlRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeIssueFileUrl200Response
func (a *DefaultApiService) DescribeIssueFileUrlExecute(r ApiDescribeIssueFileUrlRequest) (*DescribeIssueFileUrl200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeIssueFileUrl200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeIssueFileUrl")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeIssueFileUrl"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeIssueFileUrlRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeIssueFilterListRequest struct {
	ctx                            context.Context
	ApiService                     *DefaultApiService
	authorization                  *string
	action                         *string
	describeIssueFilterListRequest *DescribeIssueFilterListRequest
}

// 认证信息
func (r ApiDescribeIssueFilterListRequest) Authorization(authorization string) ApiDescribeIssueFilterListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeIssueFilterListRequest) Action(action string) ApiDescribeIssueFilterListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeIssueFilterListRequest) DescribeIssueFilterListRequest(describeIssueFilterListRequest DescribeIssueFilterListRequest) ApiDescribeIssueFilterListRequest {
	r.describeIssueFilterListRequest = &describeIssueFilterListRequest
	return r
}

func (r ApiDescribeIssueFilterListRequest) Execute() (*DescribeIssueFilterList200Response, *http.Response, error) {
	return r.ApiService.DescribeIssueFilterListExecute(r)
}

/*
DescribeIssueFilterList 事项筛选器列表查询

✨ 查询事项筛选器列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeIssueFilterListRequest
*/
func (a *DefaultApiService) DescribeIssueFilterList(ctx context.Context) ApiDescribeIssueFilterListRequest {
	return ApiDescribeIssueFilterListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeIssueFilterList200Response
func (a *DefaultApiService) DescribeIssueFilterListExecute(r ApiDescribeIssueFilterListRequest) (*DescribeIssueFilterList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeIssueFilterList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeIssueFilterList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeIssueFilterList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeIssueFilterListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeIssueListRequest struct {
	ctx                      context.Context
	ApiService               *DefaultApiService
	authorization            *string
	action                   *string
	describeIssueListRequest *DescribeIssueListRequest
}

// 认证信息
func (r ApiDescribeIssueListRequest) Authorization(authorization string) ApiDescribeIssueListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeIssueListRequest) Action(action string) ApiDescribeIssueListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeIssueListRequest) DescribeIssueListRequest(describeIssueListRequest DescribeIssueListRequest) ApiDescribeIssueListRequest {
	r.describeIssueListRequest = &describeIssueListRequest
	return r
}

func (r ApiDescribeIssueListRequest) Execute() (*DescribeIssueList200Response, *http.Response, error) {
	return r.ApiService.DescribeIssueListExecute(r)
}

/*
DescribeIssueList 事项列表查询

✨ 查询事项列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeIssueListRequest
*/
func (a *DefaultApiService) DescribeIssueList(ctx context.Context) ApiDescribeIssueListRequest {
	return ApiDescribeIssueListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeIssueList200Response
func (a *DefaultApiService) DescribeIssueListExecute(r ApiDescribeIssueListRequest) (*DescribeIssueList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeIssueList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeIssueList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeIssueList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeIssueListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeIssueListWithPageRequest struct {
	ctx                              context.Context
	ApiService                       *DefaultApiService
	authorization                    *string
	action                           *string
	describeIssueListWithPageRequest *DescribeIssueListWithPageRequest
}

// 认证信息
func (r ApiDescribeIssueListWithPageRequest) Authorization(authorization string) ApiDescribeIssueListWithPageRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeIssueListWithPageRequest) Action(action string) ApiDescribeIssueListWithPageRequest {
	r.action = &action
	return r
}

func (r ApiDescribeIssueListWithPageRequest) DescribeIssueListWithPageRequest(describeIssueListWithPageRequest DescribeIssueListWithPageRequest) ApiDescribeIssueListWithPageRequest {
	r.describeIssueListWithPageRequest = &describeIssueListWithPageRequest
	return r
}

func (r ApiDescribeIssueListWithPageRequest) Execute() (*DescribeIssueListWithPage200Response, *http.Response, error) {
	return r.ApiService.DescribeIssueListWithPageExecute(r)
}

/*
DescribeIssueListWithPage 事项查询,返回分页信息

✨ 事项列表（新），返回分页信息

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeIssueListWithPageRequest
*/
func (a *DefaultApiService) DescribeIssueListWithPage(ctx context.Context) ApiDescribeIssueListWithPageRequest {
	return ApiDescribeIssueListWithPageRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeIssueListWithPage200Response
func (a *DefaultApiService) DescribeIssueListWithPageExecute(r ApiDescribeIssueListWithPageRequest) (*DescribeIssueListWithPage200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeIssueListWithPage200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeIssueListWithPage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeIssueListWithPage"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeIssueListWithPageRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeIssueModuleListRequest struct {
	ctx                       context.Context
	ApiService                *DefaultApiService
	authorization             *string
	action                    *string
	describeAPIDocListRequest *DescribeAPIDocListRequest
}

// 认证信息
func (r ApiDescribeIssueModuleListRequest) Authorization(authorization string) ApiDescribeIssueModuleListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeIssueModuleListRequest) Action(action string) ApiDescribeIssueModuleListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeIssueModuleListRequest) DescribeAPIDocListRequest(describeAPIDocListRequest DescribeAPIDocListRequest) ApiDescribeIssueModuleListRequest {
	r.describeAPIDocListRequest = &describeAPIDocListRequest
	return r
}

func (r ApiDescribeIssueModuleListRequest) Execute() (*DescribeIssueModuleList200Response, *http.Response, error) {
	return r.ApiService.DescribeIssueModuleListExecute(r)
}

/*
DescribeIssueModuleList 事项模块列表查询

✨ 查询事项模块列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeIssueModuleListRequest
*/
func (a *DefaultApiService) DescribeIssueModuleList(ctx context.Context) ApiDescribeIssueModuleListRequest {
	return ApiDescribeIssueModuleListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeIssueModuleList200Response
func (a *DefaultApiService) DescribeIssueModuleListExecute(r ApiDescribeIssueModuleListRequest) (*DescribeIssueModuleList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeIssueModuleList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeIssueModuleList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeIssueModuleList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeAPIDocListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeIssueReferenceResourcesRequest struct {
	ctx                                    context.Context
	ApiService                             *DefaultApiService
	authorization                          *string
	action                                 *string
	describeIssueReferenceResourcesRequest *DescribeIssueReferenceResourcesRequest
}

// 认证信息
func (r ApiDescribeIssueReferenceResourcesRequest) Authorization(authorization string) ApiDescribeIssueReferenceResourcesRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeIssueReferenceResourcesRequest) Action(action string) ApiDescribeIssueReferenceResourcesRequest {
	r.action = &action
	return r
}

func (r ApiDescribeIssueReferenceResourcesRequest) DescribeIssueReferenceResourcesRequest(describeIssueReferenceResourcesRequest DescribeIssueReferenceResourcesRequest) ApiDescribeIssueReferenceResourcesRequest {
	r.describeIssueReferenceResourcesRequest = &describeIssueReferenceResourcesRequest
	return r
}

func (r ApiDescribeIssueReferenceResourcesRequest) Execute() (*DescribeIssueReferenceResources200Response, *http.Response, error) {
	return r.ApiService.DescribeIssueReferenceResourcesExecute(r)
}

/*
DescribeIssueReferenceResources 事项的引用资源列表查询

✨ 查询事项的引用资源列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeIssueReferenceResourcesRequest
*/
func (a *DefaultApiService) DescribeIssueReferenceResources(ctx context.Context) ApiDescribeIssueReferenceResourcesRequest {
	return ApiDescribeIssueReferenceResourcesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeIssueReferenceResources200Response
func (a *DefaultApiService) DescribeIssueReferenceResourcesExecute(r ApiDescribeIssueReferenceResourcesRequest) (*DescribeIssueReferenceResources200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeIssueReferenceResources200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeIssueReferenceResources")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeIssueReferenceResources"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeIssueReferenceResourcesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeIssueRelatedWorkItemListRequest struct {
	ctx                                     context.Context
	ApiService                              *DefaultApiService
	authorization                           *string
	action                                  *string
	describeIssueRelatedWorkItemListRequest *DescribeIssueRelatedWorkItemListRequest
}

// 认证信息
func (r ApiDescribeIssueRelatedWorkItemListRequest) Authorization(authorization string) ApiDescribeIssueRelatedWorkItemListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeIssueRelatedWorkItemListRequest) Action(action string) ApiDescribeIssueRelatedWorkItemListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeIssueRelatedWorkItemListRequest) DescribeIssueRelatedWorkItemListRequest(describeIssueRelatedWorkItemListRequest DescribeIssueRelatedWorkItemListRequest) ApiDescribeIssueRelatedWorkItemListRequest {
	r.describeIssueRelatedWorkItemListRequest = &describeIssueRelatedWorkItemListRequest
	return r
}

func (r ApiDescribeIssueRelatedWorkItemListRequest) Execute() (*DescribeIssueRelatedWorkItemList200Response, *http.Response, error) {
	return r.ApiService.DescribeIssueRelatedWorkItemListExecute(r)
}

/*
DescribeIssueRelatedWorkItemList 事项关联的项目集中的工作项查询

✨ 查询事项关联的项目集中的工作项

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeIssueRelatedWorkItemListRequest
*/
func (a *DefaultApiService) DescribeIssueRelatedWorkItemList(ctx context.Context) ApiDescribeIssueRelatedWorkItemListRequest {
	return ApiDescribeIssueRelatedWorkItemListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeIssueRelatedWorkItemList200Response
func (a *DefaultApiService) DescribeIssueRelatedWorkItemListExecute(r ApiDescribeIssueRelatedWorkItemListRequest) (*DescribeIssueRelatedWorkItemList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeIssueRelatedWorkItemList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeIssueRelatedWorkItemList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeIssueRelatedWorkItemList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeIssueRelatedWorkItemListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeIssueReleaseListRequest struct {
	ctx                             context.Context
	ApiService                      *DefaultApiService
	authorization                   *string
	action                          *string
	describeIssueReleaseListRequest *DescribeIssueReleaseListRequest
}

// 认证信息
func (r ApiDescribeIssueReleaseListRequest) Authorization(authorization string) ApiDescribeIssueReleaseListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeIssueReleaseListRequest) Action(action string) ApiDescribeIssueReleaseListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeIssueReleaseListRequest) DescribeIssueReleaseListRequest(describeIssueReleaseListRequest DescribeIssueReleaseListRequest) ApiDescribeIssueReleaseListRequest {
	r.describeIssueReleaseListRequest = &describeIssueReleaseListRequest
	return r
}

func (r ApiDescribeIssueReleaseListRequest) Execute() (*DescribeIssueReleaseList200Response, *http.Response, error) {
	return r.ApiService.DescribeIssueReleaseListExecute(r)
}

/*
DescribeIssueReleaseList 事项加入的版本查询

✨ 获取某个事项加入的所有版本

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeIssueReleaseListRequest
*/
func (a *DefaultApiService) DescribeIssueReleaseList(ctx context.Context) ApiDescribeIssueReleaseListRequest {
	return ApiDescribeIssueReleaseListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeIssueReleaseList200Response
func (a *DefaultApiService) DescribeIssueReleaseListExecute(r ApiDescribeIssueReleaseListRequest) (*DescribeIssueReleaseList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeIssueReleaseList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeIssueReleaseList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeIssueReleaseList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeIssueReleaseListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeIssueStatusChangeLogListRequest struct {
	ctx                                     context.Context
	ApiService                              *DefaultApiService
	authorization                           *string
	action                                  *string
	describeIssueStatusChangeLogListRequest *DescribeIssueStatusChangeLogListRequest
}

// 认证信息
func (r ApiDescribeIssueStatusChangeLogListRequest) Authorization(authorization string) ApiDescribeIssueStatusChangeLogListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeIssueStatusChangeLogListRequest) Action(action string) ApiDescribeIssueStatusChangeLogListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeIssueStatusChangeLogListRequest) DescribeIssueStatusChangeLogListRequest(describeIssueStatusChangeLogListRequest DescribeIssueStatusChangeLogListRequest) ApiDescribeIssueStatusChangeLogListRequest {
	r.describeIssueStatusChangeLogListRequest = &describeIssueStatusChangeLogListRequest
	return r
}

func (r ApiDescribeIssueStatusChangeLogListRequest) Execute() (*DescribeIssueStatusChangeLogList200Response, *http.Response, error) {
	return r.ApiService.DescribeIssueStatusChangeLogListExecute(r)
}

/*
DescribeIssueStatusChangeLogList 事项的状态变更记录查询

✨ 状态变更记录

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeIssueStatusChangeLogListRequest
*/
func (a *DefaultApiService) DescribeIssueStatusChangeLogList(ctx context.Context) ApiDescribeIssueStatusChangeLogListRequest {
	return ApiDescribeIssueStatusChangeLogListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeIssueStatusChangeLogList200Response
func (a *DefaultApiService) DescribeIssueStatusChangeLogListExecute(r ApiDescribeIssueStatusChangeLogListRequest) (*DescribeIssueStatusChangeLogList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeIssueStatusChangeLogList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeIssueStatusChangeLogList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeIssueStatusChangeLogList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeIssueStatusChangeLogListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeIssueWorkLogListRequest struct {
	ctx                             context.Context
	ApiService                      *DefaultApiService
	authorization                   *string
	action                          *string
	describeIssueWorkLogListRequest *DescribeIssueWorkLogListRequest
}

// 认证信息
func (r ApiDescribeIssueWorkLogListRequest) Authorization(authorization string) ApiDescribeIssueWorkLogListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeIssueWorkLogListRequest) Action(action string) ApiDescribeIssueWorkLogListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeIssueWorkLogListRequest) DescribeIssueWorkLogListRequest(describeIssueWorkLogListRequest DescribeIssueWorkLogListRequest) ApiDescribeIssueWorkLogListRequest {
	r.describeIssueWorkLogListRequest = &describeIssueWorkLogListRequest
	return r
}

func (r ApiDescribeIssueWorkLogListRequest) Execute() (*DescribeIssueWorkLogList200Response, *http.Response, error) {
	return r.ApiService.DescribeIssueWorkLogListExecute(r)
}

/*
DescribeIssueWorkLogList 事项的工时日志查询

✨ 查询工时日志列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeIssueWorkLogListRequest
*/
func (a *DefaultApiService) DescribeIssueWorkLogList(ctx context.Context) ApiDescribeIssueWorkLogListRequest {
	return ApiDescribeIssueWorkLogListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeIssueWorkLogList200Response
func (a *DefaultApiService) DescribeIssueWorkLogListExecute(r ApiDescribeIssueWorkLogListRequest) (*DescribeIssueWorkLogList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeIssueWorkLogList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeIssueWorkLogList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeIssueWorkLogList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeIssueWorkLogListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeIterationRequest struct {
	ctx                    context.Context
	ApiService             *DefaultApiService
	authorization          *string
	action                 *string
	deleteIterationRequest *DeleteIterationRequest
}

// 认证信息
func (r ApiDescribeIterationRequest) Authorization(authorization string) ApiDescribeIterationRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeIterationRequest) Action(action string) ApiDescribeIterationRequest {
	r.action = &action
	return r
}

func (r ApiDescribeIterationRequest) DeleteIterationRequest(deleteIterationRequest DeleteIterationRequest) ApiDescribeIterationRequest {
	r.deleteIterationRequest = &deleteIterationRequest
	return r
}

func (r ApiDescribeIterationRequest) Execute() (*DescribeIteration200Response, *http.Response, error) {
	return r.ApiService.DescribeIterationExecute(r)
}

/*
DescribeIteration 迭代详情查询

✨ 查询迭代详情

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeIterationRequest
*/
func (a *DefaultApiService) DescribeIteration(ctx context.Context) ApiDescribeIterationRequest {
	return ApiDescribeIterationRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeIteration200Response
func (a *DefaultApiService) DescribeIterationExecute(r ApiDescribeIterationRequest) (*DescribeIteration200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeIteration200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeIteration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeIteration"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteIterationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeIterationListRequest struct {
	ctx                          context.Context
	ApiService                   *DefaultApiService
	authorization                *string
	action                       *string
	describeIterationListRequest *DescribeIterationListRequest
}

// 认证信息
func (r ApiDescribeIterationListRequest) Authorization(authorization string) ApiDescribeIterationListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeIterationListRequest) Action(action string) ApiDescribeIterationListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeIterationListRequest) DescribeIterationListRequest(describeIterationListRequest DescribeIterationListRequest) ApiDescribeIterationListRequest {
	r.describeIterationListRequest = &describeIterationListRequest
	return r
}

func (r ApiDescribeIterationListRequest) Execute() (*DescribeIterationList200Response, *http.Response, error) {
	return r.ApiService.DescribeIterationListExecute(r)
}

/*
DescribeIterationList 迭代列表获取

✨ 迭代列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeIterationListRequest
*/
func (a *DefaultApiService) DescribeIterationList(ctx context.Context) ApiDescribeIterationListRequest {
	return ApiDescribeIterationListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeIterationList200Response
func (a *DefaultApiService) DescribeIterationListExecute(r ApiDescribeIterationListRequest) (*DescribeIterationList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeIterationList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeIterationList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeIterationList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeIterationListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeMemberSshKeyRequest struct {
	ctx                         context.Context
	ApiService                  *DefaultApiService
	authorization               *string
	action                      *string
	describeMemberSshKeyRequest *DescribeMemberSshKeyRequest
}

// 认证信息
func (r ApiDescribeMemberSshKeyRequest) Authorization(authorization string) ApiDescribeMemberSshKeyRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeMemberSshKeyRequest) Action(action string) ApiDescribeMemberSshKeyRequest {
	r.action = &action
	return r
}

func (r ApiDescribeMemberSshKeyRequest) DescribeMemberSshKeyRequest(describeMemberSshKeyRequest DescribeMemberSshKeyRequest) ApiDescribeMemberSshKeyRequest {
	r.describeMemberSshKeyRequest = &describeMemberSshKeyRequest
	return r
}

func (r ApiDescribeMemberSshKeyRequest) Execute() (*DescribeMemberSshKey200Response, *http.Response, error) {
	return r.ApiService.DescribeMemberSshKeyExecute(r)
}

/*
DescribeMemberSshKey 仓库设置-获取团队成员的SSH公钥列表

✨ 获取团队成员的 SSH 公钥列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeMemberSshKeyRequest
*/
func (a *DefaultApiService) DescribeMemberSshKey(ctx context.Context) ApiDescribeMemberSshKeyRequest {
	return ApiDescribeMemberSshKeyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeMemberSshKey200Response
func (a *DefaultApiService) DescribeMemberSshKeyExecute(r ApiDescribeMemberSshKeyRequest) (*DescribeMemberSshKey200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeMemberSshKey200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeMemberSshKey")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeMemberSshKey"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeMemberSshKeyRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeMergeReqCommitsRequest struct {
	ctx                            context.Context
	ApiService                     *DefaultApiService
	authorization                  *string
	action                         *string
	describeMergeReqCommitsRequest *DescribeMergeReqCommitsRequest
}

// 认证信息
func (r ApiDescribeMergeReqCommitsRequest) Authorization(authorization string) ApiDescribeMergeReqCommitsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeMergeReqCommitsRequest) Action(action string) ApiDescribeMergeReqCommitsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeMergeReqCommitsRequest) DescribeMergeReqCommitsRequest(describeMergeReqCommitsRequest DescribeMergeReqCommitsRequest) ApiDescribeMergeReqCommitsRequest {
	r.describeMergeReqCommitsRequest = &describeMergeReqCommitsRequest
	return r
}

func (r ApiDescribeMergeReqCommitsRequest) Execute() (*DescribeMergeReqCommits200Response, *http.Response, error) {
	return r.ApiService.DescribeMergeReqCommitsExecute(r)
}

/*
DescribeMergeReqCommits 合并请求-查询合并请求列表

✨ 查询合并请求列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeMergeReqCommitsRequest
*/
func (a *DefaultApiService) DescribeMergeReqCommits(ctx context.Context) ApiDescribeMergeReqCommitsRequest {
	return ApiDescribeMergeReqCommitsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeMergeReqCommits200Response
func (a *DefaultApiService) DescribeMergeReqCommitsExecute(r ApiDescribeMergeReqCommitsRequest) (*DescribeMergeReqCommits200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeMergeReqCommits200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeMergeReqCommits")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeMergeReqCommits"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeMergeReqCommitsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeMergeReqInfoRequest struct {
	ctx                         context.Context
	ApiService                  *DefaultApiService
	authorization               *string
	action                      *string
	describeMergeReqInfoRequest *DescribeMergeReqInfoRequest
}

// 认证信息
func (r ApiDescribeMergeReqInfoRequest) Authorization(authorization string) ApiDescribeMergeReqInfoRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeMergeReqInfoRequest) Action(action string) ApiDescribeMergeReqInfoRequest {
	r.action = &action
	return r
}

func (r ApiDescribeMergeReqInfoRequest) DescribeMergeReqInfoRequest(describeMergeReqInfoRequest DescribeMergeReqInfoRequest) ApiDescribeMergeReqInfoRequest {
	r.describeMergeReqInfoRequest = &describeMergeReqInfoRequest
	return r
}

func (r ApiDescribeMergeReqInfoRequest) Execute() (*DescribeMergeReqInfo200Response, *http.Response, error) {
	return r.ApiService.DescribeMergeReqInfoExecute(r)
}

/*
DescribeMergeReqInfo 合并请求-查询合并请求详情

✨ 查询合并请求详情

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeMergeReqInfoRequest
*/
func (a *DefaultApiService) DescribeMergeReqInfo(ctx context.Context) ApiDescribeMergeReqInfoRequest {
	return ApiDescribeMergeReqInfoRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeMergeReqInfo200Response
func (a *DefaultApiService) DescribeMergeReqInfoExecute(r ApiDescribeMergeReqInfoRequest) (*DescribeMergeReqInfo200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeMergeReqInfo200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeMergeReqInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeMergeReqInfo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeMergeReqInfoRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeMergeRequestRequest struct {
	ctx                         context.Context
	ApiService                  *DefaultApiService
	authorization               *string
	action                      *string
	describeMergeRequestRequest *DescribeMergeRequestRequest
}

// 认证信息
func (r ApiDescribeMergeRequestRequest) Authorization(authorization string) ApiDescribeMergeRequestRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeMergeRequestRequest) Action(action string) ApiDescribeMergeRequestRequest {
	r.action = &action
	return r
}

func (r ApiDescribeMergeRequestRequest) DescribeMergeRequestRequest(describeMergeRequestRequest DescribeMergeRequestRequest) ApiDescribeMergeRequestRequest {
	r.describeMergeRequestRequest = &describeMergeRequestRequest
	return r
}

func (r ApiDescribeMergeRequestRequest) Execute() (*DescribeMergeRequest200Response, *http.Response, error) {
	return r.ApiService.DescribeMergeRequestExecute(r)
}

/*
DescribeMergeRequest 合并请求-查询合并请求详情信息

✨ 查询合并请求详情信息

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeMergeRequestRequest
*/
func (a *DefaultApiService) DescribeMergeRequest(ctx context.Context) ApiDescribeMergeRequestRequest {
	return ApiDescribeMergeRequestRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeMergeRequest200Response
func (a *DefaultApiService) DescribeMergeRequestExecute(r ApiDescribeMergeRequestRequest) (*DescribeMergeRequest200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeMergeRequest200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeMergeRequest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeMergeRequest"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeMergeRequestRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeMergeRequestFileDiffRequest struct {
	ctx                                 context.Context
	ApiService                          *DefaultApiService
	authorization                       *string
	action                              *string
	describeMergeRequestFileDiffRequest *DescribeMergeRequestFileDiffRequest
}

// 认证信息
func (r ApiDescribeMergeRequestFileDiffRequest) Authorization(authorization string) ApiDescribeMergeRequestFileDiffRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeMergeRequestFileDiffRequest) Action(action string) ApiDescribeMergeRequestFileDiffRequest {
	r.action = &action
	return r
}

func (r ApiDescribeMergeRequestFileDiffRequest) DescribeMergeRequestFileDiffRequest(describeMergeRequestFileDiffRequest DescribeMergeRequestFileDiffRequest) ApiDescribeMergeRequestFileDiffRequest {
	r.describeMergeRequestFileDiffRequest = &describeMergeRequestFileDiffRequest
	return r
}

func (r ApiDescribeMergeRequestFileDiffRequest) Execute() (*DescribeMergeRequestFileDiff200Response, *http.Response, error) {
	return r.ApiService.DescribeMergeRequestFileDiffExecute(r)
}

/*
DescribeMergeRequestFileDiff 合并请求-获取合并请求文件修改记录

✨ 获取合并请求文件修改记录

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeMergeRequestFileDiffRequest
*/
func (a *DefaultApiService) DescribeMergeRequestFileDiff(ctx context.Context) ApiDescribeMergeRequestFileDiffRequest {
	return ApiDescribeMergeRequestFileDiffRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeMergeRequestFileDiff200Response
func (a *DefaultApiService) DescribeMergeRequestFileDiffExecute(r ApiDescribeMergeRequestFileDiffRequest) (*DescribeMergeRequestFileDiff200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeMergeRequestFileDiff200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeMergeRequestFileDiff")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeMergeRequestFileDiff"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeMergeRequestFileDiffRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeMergeRequestLogRequest struct {
	ctx                  context.Context
	ApiService           *DefaultApiService
	authorization        *string
	action               *string
	modifyCloseMRRequest *ModifyCloseMRRequest
}

// 认证信息
func (r ApiDescribeMergeRequestLogRequest) Authorization(authorization string) ApiDescribeMergeRequestLogRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeMergeRequestLogRequest) Action(action string) ApiDescribeMergeRequestLogRequest {
	r.action = &action
	return r
}

func (r ApiDescribeMergeRequestLogRequest) ModifyCloseMRRequest(modifyCloseMRRequest ModifyCloseMRRequest) ApiDescribeMergeRequestLogRequest {
	r.modifyCloseMRRequest = &modifyCloseMRRequest
	return r
}

func (r ApiDescribeMergeRequestLogRequest) Execute() (*DescribeMergeRequestLog200Response, *http.Response, error) {
	return r.ApiService.DescribeMergeRequestLogExecute(r)
}

/*
DescribeMergeRequestLog 合并请求-查询合并请求操作记录

✨ 查询合并请求操作记录

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeMergeRequestLogRequest
*/
func (a *DefaultApiService) DescribeMergeRequestLog(ctx context.Context) ApiDescribeMergeRequestLogRequest {
	return ApiDescribeMergeRequestLogRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeMergeRequestLog200Response
func (a *DefaultApiService) DescribeMergeRequestLogExecute(r ApiDescribeMergeRequestLogRequest) (*DescribeMergeRequestLog200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeMergeRequestLog200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeMergeRequestLog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeMergeRequestLog"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyCloseMRRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeMergeRequestReviewersRequest struct {
	ctx                                  context.Context
	ApiService                           *DefaultApiService
	authorization                        *string
	action                               *string
	describeMergeRequestReviewersRequest *DescribeMergeRequestReviewersRequest
}

// 认证信息
func (r ApiDescribeMergeRequestReviewersRequest) Authorization(authorization string) ApiDescribeMergeRequestReviewersRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeMergeRequestReviewersRequest) Action(action string) ApiDescribeMergeRequestReviewersRequest {
	r.action = &action
	return r
}

func (r ApiDescribeMergeRequestReviewersRequest) DescribeMergeRequestReviewersRequest(describeMergeRequestReviewersRequest DescribeMergeRequestReviewersRequest) ApiDescribeMergeRequestReviewersRequest {
	r.describeMergeRequestReviewersRequest = &describeMergeRequestReviewersRequest
	return r
}

func (r ApiDescribeMergeRequestReviewersRequest) Execute() (*DescribeMergeRequestReviewers200Response, *http.Response, error) {
	return r.ApiService.DescribeMergeRequestReviewersExecute(r)
}

/*
DescribeMergeRequestReviewers 合并请求-获取合并请求的评审者

✨ 获取合并请求的参与者

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeMergeRequestReviewersRequest
*/
func (a *DefaultApiService) DescribeMergeRequestReviewers(ctx context.Context) ApiDescribeMergeRequestReviewersRequest {
	return ApiDescribeMergeRequestReviewersRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeMergeRequestReviewers200Response
func (a *DefaultApiService) DescribeMergeRequestReviewersExecute(r ApiDescribeMergeRequestReviewersRequest) (*DescribeMergeRequestReviewers200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeMergeRequestReviewers200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeMergeRequestReviewers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeMergeRequestReviewers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeMergeRequestReviewersRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeMyDepotsRequest struct {
	ctx                     context.Context
	ApiService              *DefaultApiService
	authorization           *string
	action                  *string
	describeMyDepotsRequest *DescribeMyDepotsRequest
}

// 认证信息
func (r ApiDescribeMyDepotsRequest) Authorization(authorization string) ApiDescribeMyDepotsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeMyDepotsRequest) Action(action string) ApiDescribeMyDepotsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeMyDepotsRequest) DescribeMyDepotsRequest(describeMyDepotsRequest DescribeMyDepotsRequest) ApiDescribeMyDepotsRequest {
	r.describeMyDepotsRequest = &describeMyDepotsRequest
	return r
}

func (r ApiDescribeMyDepotsRequest) Execute() (*DescribeMyDepots200Response, *http.Response, error) {
	return r.ApiService.DescribeMyDepotsExecute(r)
}

/*
DescribeMyDepots 仓库信息-获取当前用户拥有读权限的仓库列表

✨ 获取当前用户拥有读权限的仓库列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeMyDepotsRequest
*/
func (a *DefaultApiService) DescribeMyDepots(ctx context.Context) ApiDescribeMyDepotsRequest {
	return ApiDescribeMyDepotsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeMyDepots200Response
func (a *DefaultApiService) DescribeMyDepotsExecute(r ApiDescribeMyDepotsRequest) (*DescribeMyDepots200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeMyDepots200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeMyDepots")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeMyDepots"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeMyDepotsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeNotesByCommitsRequest struct {
	ctx                           context.Context
	ApiService                    *DefaultApiService
	authorization                 *string
	action                        *string
	describeNotesByCommitsRequest *DescribeNotesByCommitsRequest
}

// 认证信息
func (r ApiDescribeNotesByCommitsRequest) Authorization(authorization string) ApiDescribeNotesByCommitsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeNotesByCommitsRequest) Action(action string) ApiDescribeNotesByCommitsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeNotesByCommitsRequest) DescribeNotesByCommitsRequest(describeNotesByCommitsRequest DescribeNotesByCommitsRequest) ApiDescribeNotesByCommitsRequest {
	r.describeNotesByCommitsRequest = &describeNotesByCommitsRequest
	return r
}

func (r ApiDescribeNotesByCommitsRequest) Execute() (*DescribeNotesByCommits200Response, *http.Response, error) {
	return r.ApiService.DescribeNotesByCommitsExecute(r)
}

/*
DescribeNotesByCommits 仓库信息-获取提交的note信息

✨ 获取提交的note信息

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeNotesByCommitsRequest
*/
func (a *DefaultApiService) DescribeNotesByCommits(ctx context.Context) ApiDescribeNotesByCommitsRequest {
	return ApiDescribeNotesByCommitsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeNotesByCommits200Response
func (a *DefaultApiService) DescribeNotesByCommitsExecute(r ApiDescribeNotesByCommitsRequest) (*DescribeNotesByCommits200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeNotesByCommits200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeNotesByCommits")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeNotesByCommits"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeNotesByCommitsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeOneProjectRequest struct {
	ctx                       context.Context
	ApiService                *DefaultApiService
	authorization             *string
	action                    *string
	describeOneProjectRequest *DescribeOneProjectRequest
}

// 认证信息
func (r ApiDescribeOneProjectRequest) Authorization(authorization string) ApiDescribeOneProjectRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeOneProjectRequest) Action(action string) ApiDescribeOneProjectRequest {
	r.action = &action
	return r
}

func (r ApiDescribeOneProjectRequest) DescribeOneProjectRequest(describeOneProjectRequest DescribeOneProjectRequest) ApiDescribeOneProjectRequest {
	r.describeOneProjectRequest = &describeOneProjectRequest
	return r
}

func (r ApiDescribeOneProjectRequest) Execute() (*DescribeOneProject200Response, *http.Response, error) {
	return r.ApiService.DescribeOneProjectExecute(r)
}

/*
DescribeOneProject 单个项目查询

✨ 单个项目查询

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeOneProjectRequest
*/
func (a *DefaultApiService) DescribeOneProject(ctx context.Context) ApiDescribeOneProjectRequest {
	return ApiDescribeOneProjectRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeOneProject200Response
func (a *DefaultApiService) DescribeOneProjectExecute(r ApiDescribeOneProjectRequest) (*DescribeOneProject200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeOneProject200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeOneProject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeOneProject"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeOneProjectRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribePersonalExternalDepotsRequest struct {
	ctx                                   context.Context
	ApiService                            *DefaultApiService
	authorization                         *string
	action                                *string
	describePersonalExternalDepotsRequest *DescribePersonalExternalDepotsRequest
}

// 认证信息
func (r ApiDescribePersonalExternalDepotsRequest) Authorization(authorization string) ApiDescribePersonalExternalDepotsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribePersonalExternalDepotsRequest) Action(action string) ApiDescribePersonalExternalDepotsRequest {
	r.action = &action
	return r
}

func (r ApiDescribePersonalExternalDepotsRequest) DescribePersonalExternalDepotsRequest(describePersonalExternalDepotsRequest DescribePersonalExternalDepotsRequest) ApiDescribePersonalExternalDepotsRequest {
	r.describePersonalExternalDepotsRequest = &describePersonalExternalDepotsRequest
	return r
}

func (r ApiDescribePersonalExternalDepotsRequest) Execute() (*DescribePersonalExternalDepots200Response, *http.Response, error) {
	return r.ApiService.DescribePersonalExternalDepotsExecute(r)
}

/*
DescribePersonalExternalDepots 个人外部仓库获取

✨ 获取个人外部仓库

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribePersonalExternalDepotsRequest
*/
func (a *DefaultApiService) DescribePersonalExternalDepots(ctx context.Context) ApiDescribePersonalExternalDepotsRequest {
	return ApiDescribePersonalExternalDepotsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribePersonalExternalDepots200Response
func (a *DefaultApiService) DescribePersonalExternalDepotsExecute(r ApiDescribePersonalExternalDepotsRequest) (*DescribePersonalExternalDepots200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribePersonalExternalDepots200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribePersonalExternalDepots")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribePersonalExternalDepots"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describePersonalExternalDepotsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribePinyinRequest struct {
	ctx                   context.Context
	ApiService            *DefaultApiService
	authorization         *string
	action                *string
	describePinyinRequest *DescribePinyinRequest
}

// 认证信息
func (r ApiDescribePinyinRequest) Authorization(authorization string) ApiDescribePinyinRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribePinyinRequest) Action(action string) ApiDescribePinyinRequest {
	r.action = &action
	return r
}

func (r ApiDescribePinyinRequest) DescribePinyinRequest(describePinyinRequest DescribePinyinRequest) ApiDescribePinyinRequest {
	r.describePinyinRequest = &describePinyinRequest
	return r
}

func (r ApiDescribePinyinRequest) Execute() (*DescribePinyin200Response, *http.Response, error) {
	return r.ApiService.DescribePinyinExecute(r)
}

/*
DescribePinyin 汉字转拼音

✨ 汉字转拼音

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribePinyinRequest
*/
func (a *DefaultApiService) DescribePinyin(ctx context.Context) ApiDescribePinyinRequest {
	return ApiDescribePinyinRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribePinyin200Response
func (a *DefaultApiService) DescribePinyinExecute(r ApiDescribePinyinRequest) (*DescribePinyin200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribePinyin200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribePinyin")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribePinyin"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describePinyinRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribePoliciesOnResourceTypeRequest struct {
	ctx                                   context.Context
	ApiService                            *DefaultApiService
	authorization                         *string
	action                                *string
	describePoliciesOnResourceTypeRequest *DescribePoliciesOnResourceTypeRequest
}

// 认证信息
func (r ApiDescribePoliciesOnResourceTypeRequest) Authorization(authorization string) ApiDescribePoliciesOnResourceTypeRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribePoliciesOnResourceTypeRequest) Action(action string) ApiDescribePoliciesOnResourceTypeRequest {
	r.action = &action
	return r
}

func (r ApiDescribePoliciesOnResourceTypeRequest) DescribePoliciesOnResourceTypeRequest(describePoliciesOnResourceTypeRequest DescribePoliciesOnResourceTypeRequest) ApiDescribePoliciesOnResourceTypeRequest {
	r.describePoliciesOnResourceTypeRequest = &describePoliciesOnResourceTypeRequest
	return r
}

func (r ApiDescribePoliciesOnResourceTypeRequest) Execute() (*DescribePoliciesOnResourceType200Response, *http.Response, error) {
	return r.ApiService.DescribePoliciesOnResourceTypeExecute(r)
}

/*
DescribePoliciesOnResourceType 权限组列表查询（指定资源类型）

✨ 权限组列表查询（指定资源类型）

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribePoliciesOnResourceTypeRequest
*/
func (a *DefaultApiService) DescribePoliciesOnResourceType(ctx context.Context) ApiDescribePoliciesOnResourceTypeRequest {
	return ApiDescribePoliciesOnResourceTypeRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribePoliciesOnResourceType200Response
func (a *DefaultApiService) DescribePoliciesOnResourceTypeExecute(r ApiDescribePoliciesOnResourceTypeRequest) (*DescribePoliciesOnResourceType200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribePoliciesOnResourceType200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribePoliciesOnResourceType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribePoliciesOnResourceType"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describePoliciesOnResourceTypeRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribePolicyRequest struct {
	ctx                   context.Context
	ApiService            *DefaultApiService
	authorization         *string
	action                *string
	describePolicyRequest *DescribePolicyRequest
}

// 认证信息
func (r ApiDescribePolicyRequest) Authorization(authorization string) ApiDescribePolicyRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribePolicyRequest) Action(action string) ApiDescribePolicyRequest {
	r.action = &action
	return r
}

func (r ApiDescribePolicyRequest) DescribePolicyRequest(describePolicyRequest DescribePolicyRequest) ApiDescribePolicyRequest {
	r.describePolicyRequest = &describePolicyRequest
	return r
}

func (r ApiDescribePolicyRequest) Execute() (*DescribePolicy200Response, *http.Response, error) {
	return r.ApiService.DescribePolicyExecute(r)
}

/*
DescribePolicy 权限组详情获取

✨ 权限组详情获取

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribePolicyRequest
*/
func (a *DefaultApiService) DescribePolicy(ctx context.Context) ApiDescribePolicyRequest {
	return ApiDescribePolicyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribePolicy200Response
func (a *DefaultApiService) DescribePolicyExecute(r ApiDescribePolicyRequest) (*DescribePolicy200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribePolicy200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribePolicy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribePolicy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describePolicyRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribePreSignUploadUrlRequest struct {
	ctx                             context.Context
	ApiService                      *DefaultApiService
	authorization                   *string
	action                          *string
	describePreSignUploadUrlRequest *DescribePreSignUploadUrlRequest
}

// 认证信息
func (r ApiDescribePreSignUploadUrlRequest) Authorization(authorization string) ApiDescribePreSignUploadUrlRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribePreSignUploadUrlRequest) Action(action string) ApiDescribePreSignUploadUrlRequest {
	r.action = &action
	return r
}

func (r ApiDescribePreSignUploadUrlRequest) DescribePreSignUploadUrlRequest(describePreSignUploadUrlRequest DescribePreSignUploadUrlRequest) ApiDescribePreSignUploadUrlRequest {
	r.describePreSignUploadUrlRequest = &describePreSignUploadUrlRequest
	return r
}

func (r ApiDescribePreSignUploadUrlRequest) Execute() (*DescribePreSignUploadUrl200Response, *http.Response, error) {
	return r.ApiService.DescribePreSignUploadUrlExecute(r)
}

/*
DescribePreSignUploadUrl 预签名URL获取

✨ 预签名信息获取，上传文件

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribePreSignUploadUrlRequest
*/
func (a *DefaultApiService) DescribePreSignUploadUrl(ctx context.Context) ApiDescribePreSignUploadUrlRequest {
	return ApiDescribePreSignUploadUrlRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribePreSignUploadUrl200Response
func (a *DefaultApiService) DescribePreSignUploadUrlExecute(r ApiDescribePreSignUploadUrlRequest) (*DescribePreSignUploadUrl200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribePreSignUploadUrl200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribePreSignUploadUrl")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribePreSignUploadUrl"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describePreSignUploadUrlRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribePredicatePolicyOnResourceRequest struct {
	ctx                                      context.Context
	ApiService                               *DefaultApiService
	authorization                            *string
	action                                   *string
	describePredicatePolicyOnResourceRequest *DescribePredicatePolicyOnResourceRequest
}

// 认证信息
func (r ApiDescribePredicatePolicyOnResourceRequest) Authorization(authorization string) ApiDescribePredicatePolicyOnResourceRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribePredicatePolicyOnResourceRequest) Action(action string) ApiDescribePredicatePolicyOnResourceRequest {
	r.action = &action
	return r
}

func (r ApiDescribePredicatePolicyOnResourceRequest) DescribePredicatePolicyOnResourceRequest(describePredicatePolicyOnResourceRequest DescribePredicatePolicyOnResourceRequest) ApiDescribePredicatePolicyOnResourceRequest {
	r.describePredicatePolicyOnResourceRequest = &describePredicatePolicyOnResourceRequest
	return r
}

func (r ApiDescribePredicatePolicyOnResourceRequest) Execute() (*DescribePredicatePolicyOnResource200Response, *http.Response, error) {
	return r.ApiService.DescribePredicatePolicyOnResourceExecute(r)
}

/*
DescribePredicatePolicyOnResource 资源权限判定模式获取

✨ 资源权限判定模式获取

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribePredicatePolicyOnResourceRequest
*/
func (a *DefaultApiService) DescribePredicatePolicyOnResource(ctx context.Context) ApiDescribePredicatePolicyOnResourceRequest {
	return ApiDescribePredicatePolicyOnResourceRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribePredicatePolicyOnResource200Response
func (a *DefaultApiService) DescribePredicatePolicyOnResourceExecute(r ApiDescribePredicatePolicyOnResourceRequest) (*DescribePredicatePolicyOnResource200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribePredicatePolicyOnResource200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribePredicatePolicyOnResource")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribePredicatePolicyOnResource"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describePredicatePolicyOnResourceRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeProgramProjectsRequest struct {
	ctx                            context.Context
	ApiService                     *DefaultApiService
	authorization                  *string
	action                         *string
	describeProgramProjectsRequest *DescribeProgramProjectsRequest
}

// 认证信息
func (r ApiDescribeProgramProjectsRequest) Authorization(authorization string) ApiDescribeProgramProjectsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeProgramProjectsRequest) Action(action string) ApiDescribeProgramProjectsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeProgramProjectsRequest) DescribeProgramProjectsRequest(describeProgramProjectsRequest DescribeProgramProjectsRequest) ApiDescribeProgramProjectsRequest {
	r.describeProgramProjectsRequest = &describeProgramProjectsRequest
	return r
}

func (r ApiDescribeProgramProjectsRequest) Execute() (*DescribeProgramProjects200Response, *http.Response, error) {
	return r.ApiService.DescribeProgramProjectsExecute(r)
}

/*
DescribeProgramProjects 项目集下项目列表查询

✨ 项目集下项目列表查询

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeProgramProjectsRequest
*/
func (a *DefaultApiService) DescribeProgramProjects(ctx context.Context) ApiDescribeProgramProjectsRequest {
	return ApiDescribeProgramProjectsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeProgramProjects200Response
func (a *DefaultApiService) DescribeProgramProjectsExecute(r ApiDescribeProgramProjectsRequest) (*DescribeProgramProjects200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeProgramProjects200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeProgramProjects")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeProgramProjects"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeProgramProjectsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeProgramsRequest struct {
	ctx                     context.Context
	ApiService              *DefaultApiService
	authorization           *string
	action                  *string
	describeProgramsRequest *DescribeProgramsRequest
}

// 认证信息
func (r ApiDescribeProgramsRequest) Authorization(authorization string) ApiDescribeProgramsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeProgramsRequest) Action(action string) ApiDescribeProgramsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeProgramsRequest) DescribeProgramsRequest(describeProgramsRequest DescribeProgramsRequest) ApiDescribeProgramsRequest {
	r.describeProgramsRequest = &describeProgramsRequest
	return r
}

func (r ApiDescribeProgramsRequest) Execute() (*DescribePrograms200Response, *http.Response, error) {
	return r.ApiService.DescribeProgramsExecute(r)
}

/*
DescribePrograms 项目集列表查询

✨ 项目集列表查询

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeProgramsRequest
*/
func (a *DefaultApiService) DescribePrograms(ctx context.Context) ApiDescribeProgramsRequest {
	return ApiDescribeProgramsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribePrograms200Response
func (a *DefaultApiService) DescribeProgramsExecute(r ApiDescribeProgramsRequest) (*DescribePrograms200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribePrograms200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribePrograms")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribePrograms"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeProgramsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeProjectAnnouncementRequest struct {
	ctx                                context.Context
	ApiService                         *DefaultApiService
	authorization                      *string
	action                             *string
	describeProjectAnnouncementRequest *DescribeProjectAnnouncementRequest
}

// 认证信息
func (r ApiDescribeProjectAnnouncementRequest) Authorization(authorization string) ApiDescribeProjectAnnouncementRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeProjectAnnouncementRequest) Action(action string) ApiDescribeProjectAnnouncementRequest {
	r.action = &action
	return r
}

func (r ApiDescribeProjectAnnouncementRequest) DescribeProjectAnnouncementRequest(describeProjectAnnouncementRequest DescribeProjectAnnouncementRequest) ApiDescribeProjectAnnouncementRequest {
	r.describeProjectAnnouncementRequest = &describeProjectAnnouncementRequest
	return r
}

func (r ApiDescribeProjectAnnouncementRequest) Execute() (*CreateProjectAnnouncement200Response, *http.Response, error) {
	return r.ApiService.DescribeProjectAnnouncementExecute(r)
}

/*
DescribeProjectAnnouncement 项目公告查询

✨ 项目公告查询

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeProjectAnnouncementRequest
*/
func (a *DefaultApiService) DescribeProjectAnnouncement(ctx context.Context) ApiDescribeProjectAnnouncementRequest {
	return ApiDescribeProjectAnnouncementRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateProjectAnnouncement200Response
func (a *DefaultApiService) DescribeProjectAnnouncementExecute(r ApiDescribeProjectAnnouncementRequest) (*CreateProjectAnnouncement200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateProjectAnnouncement200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeProjectAnnouncement")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeProjectAnnouncement"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeProjectAnnouncementRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeProjectAnnouncementsRequest struct {
	ctx                                 context.Context
	ApiService                          *DefaultApiService
	authorization                       *string
	action                              *string
	describeProjectAnnouncementsRequest *DescribeProjectAnnouncementsRequest
}

// 认证信息
func (r ApiDescribeProjectAnnouncementsRequest) Authorization(authorization string) ApiDescribeProjectAnnouncementsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeProjectAnnouncementsRequest) Action(action string) ApiDescribeProjectAnnouncementsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeProjectAnnouncementsRequest) DescribeProjectAnnouncementsRequest(describeProjectAnnouncementsRequest DescribeProjectAnnouncementsRequest) ApiDescribeProjectAnnouncementsRequest {
	r.describeProjectAnnouncementsRequest = &describeProjectAnnouncementsRequest
	return r
}

func (r ApiDescribeProjectAnnouncementsRequest) Execute() (*DescribeProjectAnnouncements200Response, *http.Response, error) {
	return r.ApiService.DescribeProjectAnnouncementsExecute(r)
}

/*
DescribeProjectAnnouncements 项目公告列表查询

✨ 项目公告列表查询

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeProjectAnnouncementsRequest
*/
func (a *DefaultApiService) DescribeProjectAnnouncements(ctx context.Context) ApiDescribeProjectAnnouncementsRequest {
	return ApiDescribeProjectAnnouncementsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeProjectAnnouncements200Response
func (a *DefaultApiService) DescribeProjectAnnouncementsExecute(r ApiDescribeProjectAnnouncementsRequest) (*DescribeProjectAnnouncements200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeProjectAnnouncements200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeProjectAnnouncements")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeProjectAnnouncements"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeProjectAnnouncementsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeProjectByNameRequest struct {
	ctx                          context.Context
	ApiService                   *DefaultApiService
	authorization                *string
	action                       *string
	describeProjectByNameRequest *DescribeProjectByNameRequest
}

// 认证信息
func (r ApiDescribeProjectByNameRequest) Authorization(authorization string) ApiDescribeProjectByNameRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeProjectByNameRequest) Action(action string) ApiDescribeProjectByNameRequest {
	r.action = &action
	return r
}

func (r ApiDescribeProjectByNameRequest) DescribeProjectByNameRequest(describeProjectByNameRequest DescribeProjectByNameRequest) ApiDescribeProjectByNameRequest {
	r.describeProjectByNameRequest = &describeProjectByNameRequest
	return r
}

func (r ApiDescribeProjectByNameRequest) Execute() (*DescribeOneProject200Response, *http.Response, error) {
	return r.ApiService.DescribeProjectByNameExecute(r)
}

/*
DescribeProjectByName 项目查询(通过项目名称)

✨ 项目查询(通过项目名称)

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeProjectByNameRequest
*/
func (a *DefaultApiService) DescribeProjectByName(ctx context.Context) ApiDescribeProjectByNameRequest {
	return ApiDescribeProjectByNameRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeOneProject200Response
func (a *DefaultApiService) DescribeProjectByNameExecute(r ApiDescribeProjectByNameRequest) (*DescribeOneProject200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeOneProject200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeProjectByName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeProjectByName"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeProjectByNameRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeProjectCredentialsRequest struct {
	ctx                               context.Context
	ApiService                        *DefaultApiService
	authorization                     *string
	action                            *string
	describeProjectCredentialsRequest *DescribeProjectCredentialsRequest
}

// 认证信息
func (r ApiDescribeProjectCredentialsRequest) Authorization(authorization string) ApiDescribeProjectCredentialsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeProjectCredentialsRequest) Action(action string) ApiDescribeProjectCredentialsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeProjectCredentialsRequest) DescribeProjectCredentialsRequest(describeProjectCredentialsRequest DescribeProjectCredentialsRequest) ApiDescribeProjectCredentialsRequest {
	r.describeProjectCredentialsRequest = &describeProjectCredentialsRequest
	return r
}

func (r ApiDescribeProjectCredentialsRequest) Execute() (*DescribeProjectCredentials200Response, *http.Response, error) {
	return r.ApiService.DescribeProjectCredentialsExecute(r)
}

/*
DescribeProjectCredentials 项目凭据列表查询

✨ 项目凭据列表查询

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeProjectCredentialsRequest
*/
func (a *DefaultApiService) DescribeProjectCredentials(ctx context.Context) ApiDescribeProjectCredentialsRequest {
	return ApiDescribeProjectCredentialsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeProjectCredentials200Response
func (a *DefaultApiService) DescribeProjectCredentialsExecute(r ApiDescribeProjectCredentialsRequest) (*DescribeProjectCredentials200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeProjectCredentials200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeProjectCredentials")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeProjectCredentials"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeProjectCredentialsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeProjectDepotBranchesRequest struct {
	ctx                                 context.Context
	ApiService                          *DefaultApiService
	authorization                       *string
	action                              *string
	describeProjectDepotBranchesRequest *DescribeProjectDepotBranchesRequest
}

// 认证信息
func (r ApiDescribeProjectDepotBranchesRequest) Authorization(authorization string) ApiDescribeProjectDepotBranchesRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeProjectDepotBranchesRequest) Action(action string) ApiDescribeProjectDepotBranchesRequest {
	r.action = &action
	return r
}

func (r ApiDescribeProjectDepotBranchesRequest) DescribeProjectDepotBranchesRequest(describeProjectDepotBranchesRequest DescribeProjectDepotBranchesRequest) ApiDescribeProjectDepotBranchesRequest {
	r.describeProjectDepotBranchesRequest = &describeProjectDepotBranchesRequest
	return r
}

func (r ApiDescribeProjectDepotBranchesRequest) Execute() (*DescribeProjectDepotBranches200Response, *http.Response, error) {
	return r.ApiService.DescribeProjectDepotBranchesExecute(r)
}

/*
DescribeProjectDepotBranches 仓库分支列表获取

✨ 获取仓库分支列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeProjectDepotBranchesRequest
*/
func (a *DefaultApiService) DescribeProjectDepotBranches(ctx context.Context) ApiDescribeProjectDepotBranchesRequest {
	return ApiDescribeProjectDepotBranchesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeProjectDepotBranches200Response
func (a *DefaultApiService) DescribeProjectDepotBranchesExecute(r ApiDescribeProjectDepotBranchesRequest) (*DescribeProjectDepotBranches200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeProjectDepotBranches200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeProjectDepotBranches")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeProjectDepotBranches"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeProjectDepotBranchesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeProjectDepotCommitsRequest struct {
	ctx                                context.Context
	ApiService                         *DefaultApiService
	authorization                      *string
	action                             *string
	describeProjectDepotCommitsRequest *DescribeProjectDepotCommitsRequest
}

// 认证信息
func (r ApiDescribeProjectDepotCommitsRequest) Authorization(authorization string) ApiDescribeProjectDepotCommitsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeProjectDepotCommitsRequest) Action(action string) ApiDescribeProjectDepotCommitsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeProjectDepotCommitsRequest) DescribeProjectDepotCommitsRequest(describeProjectDepotCommitsRequest DescribeProjectDepotCommitsRequest) ApiDescribeProjectDepotCommitsRequest {
	r.describeProjectDepotCommitsRequest = &describeProjectDepotCommitsRequest
	return r
}

func (r ApiDescribeProjectDepotCommitsRequest) Execute() (*DescribeProjectDepotBranches200Response, *http.Response, error) {
	return r.ApiService.DescribeProjectDepotCommitsExecute(r)
}

/*
DescribeProjectDepotCommits 分支下的提交列表获取

✨ 获取分支下的提交列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeProjectDepotCommitsRequest
*/
func (a *DefaultApiService) DescribeProjectDepotCommits(ctx context.Context) ApiDescribeProjectDepotCommitsRequest {
	return ApiDescribeProjectDepotCommitsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeProjectDepotBranches200Response
func (a *DefaultApiService) DescribeProjectDepotCommitsExecute(r ApiDescribeProjectDepotCommitsRequest) (*DescribeProjectDepotBranches200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeProjectDepotBranches200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeProjectDepotCommits")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeProjectDepotCommits"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeProjectDepotCommitsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeProjectDepotInfoListRequest struct {
	ctx                                 context.Context
	ApiService                          *DefaultApiService
	authorization                       *string
	action                              *string
	describeProjectDepotInfoListRequest *DescribeProjectDepotInfoListRequest
}

// 认证信息
func (r ApiDescribeProjectDepotInfoListRequest) Authorization(authorization string) ApiDescribeProjectDepotInfoListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeProjectDepotInfoListRequest) Action(action string) ApiDescribeProjectDepotInfoListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeProjectDepotInfoListRequest) DescribeProjectDepotInfoListRequest(describeProjectDepotInfoListRequest DescribeProjectDepotInfoListRequest) ApiDescribeProjectDepotInfoListRequest {
	r.describeProjectDepotInfoListRequest = &describeProjectDepotInfoListRequest
	return r
}

func (r ApiDescribeProjectDepotInfoListRequest) Execute() (*DescribeProjectDepotInfoList200Response, *http.Response, error) {
	return r.ApiService.DescribeProjectDepotInfoListExecute(r)
}

/*
DescribeProjectDepotInfoList 仓库信息-查询项目下所有的仓库信息列表

✨ 查询项目下所有的仓库信息列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeProjectDepotInfoListRequest
*/
func (a *DefaultApiService) DescribeProjectDepotInfoList(ctx context.Context) ApiDescribeProjectDepotInfoListRequest {
	return ApiDescribeProjectDepotInfoListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeProjectDepotInfoList200Response
func (a *DefaultApiService) DescribeProjectDepotInfoListExecute(r ApiDescribeProjectDepotInfoListRequest) (*DescribeProjectDepotInfoList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeProjectDepotInfoList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeProjectDepotInfoList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeProjectDepotInfoList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeProjectDepotInfoListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeProjectDepotTagsRequest struct {
	ctx                                 context.Context
	ApiService                          *DefaultApiService
	authorization                       *string
	action                              *string
	describeProjectDepotBranchesRequest *DescribeProjectDepotBranchesRequest
}

// 认证信息
func (r ApiDescribeProjectDepotTagsRequest) Authorization(authorization string) ApiDescribeProjectDepotTagsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeProjectDepotTagsRequest) Action(action string) ApiDescribeProjectDepotTagsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeProjectDepotTagsRequest) DescribeProjectDepotBranchesRequest(describeProjectDepotBranchesRequest DescribeProjectDepotBranchesRequest) ApiDescribeProjectDepotTagsRequest {
	r.describeProjectDepotBranchesRequest = &describeProjectDepotBranchesRequest
	return r
}

func (r ApiDescribeProjectDepotTagsRequest) Execute() (*DescribeProjectDepotBranches200Response, *http.Response, error) {
	return r.ApiService.DescribeProjectDepotTagsExecute(r)
}

/*
DescribeProjectDepotTags 仓库的标签列表获取

✨ 获取仓库的标签列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeProjectDepotTagsRequest
*/
func (a *DefaultApiService) DescribeProjectDepotTags(ctx context.Context) ApiDescribeProjectDepotTagsRequest {
	return ApiDescribeProjectDepotTagsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeProjectDepotBranches200Response
func (a *DefaultApiService) DescribeProjectDepotTagsExecute(r ApiDescribeProjectDepotTagsRequest) (*DescribeProjectDepotBranches200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeProjectDepotBranches200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeProjectDepotTags")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeProjectDepotTags"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeProjectDepotBranchesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeProjectDepotsRequest struct {
	ctx                                   context.Context
	ApiService                            *DefaultApiService
	authorization                         *string
	action                                *string
	describePersonalExternalDepotsRequest *DescribePersonalExternalDepotsRequest
}

// 认证信息
func (r ApiDescribeProjectDepotsRequest) Authorization(authorization string) ApiDescribeProjectDepotsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeProjectDepotsRequest) Action(action string) ApiDescribeProjectDepotsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeProjectDepotsRequest) DescribePersonalExternalDepotsRequest(describePersonalExternalDepotsRequest DescribePersonalExternalDepotsRequest) ApiDescribeProjectDepotsRequest {
	r.describePersonalExternalDepotsRequest = &describePersonalExternalDepotsRequest
	return r
}

func (r ApiDescribeProjectDepotsRequest) Execute() (*DescribeProjectDepots200Response, *http.Response, error) {
	return r.ApiService.DescribeProjectDepotsExecute(r)
}

/*
DescribeProjectDepots 项目仓库列表获取

✨ 获取项目仓库列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeProjectDepotsRequest
*/
func (a *DefaultApiService) DescribeProjectDepots(ctx context.Context) ApiDescribeProjectDepotsRequest {
	return ApiDescribeProjectDepotsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeProjectDepots200Response
func (a *DefaultApiService) DescribeProjectDepotsExecute(r ApiDescribeProjectDepotsRequest) (*DescribeProjectDepots200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeProjectDepots200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeProjectDepots")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeProjectDepots"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describePersonalExternalDepotsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeProjectIssueFieldListRequest struct {
	ctx                                  context.Context
	ApiService                           *DefaultApiService
	authorization                        *string
	action                               *string
	describeProjectIssueFieldListRequest *DescribeProjectIssueFieldListRequest
}

// 认证信息
func (r ApiDescribeProjectIssueFieldListRequest) Authorization(authorization string) ApiDescribeProjectIssueFieldListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeProjectIssueFieldListRequest) Action(action string) ApiDescribeProjectIssueFieldListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeProjectIssueFieldListRequest) DescribeProjectIssueFieldListRequest(describeProjectIssueFieldListRequest DescribeProjectIssueFieldListRequest) ApiDescribeProjectIssueFieldListRequest {
	r.describeProjectIssueFieldListRequest = &describeProjectIssueFieldListRequest
	return r
}

func (r ApiDescribeProjectIssueFieldListRequest) Execute() (*DescribeProjectIssueFieldList200Response, *http.Response, error) {
	return r.ApiService.DescribeProjectIssueFieldListExecute(r)
}

/*
DescribeProjectIssueFieldList 具体事项类型的属性列表查询

✨ 查询具体事项类型的属性列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeProjectIssueFieldListRequest
*/
func (a *DefaultApiService) DescribeProjectIssueFieldList(ctx context.Context) ApiDescribeProjectIssueFieldListRequest {
	return ApiDescribeProjectIssueFieldListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeProjectIssueFieldList200Response
func (a *DefaultApiService) DescribeProjectIssueFieldListExecute(r ApiDescribeProjectIssueFieldListRequest) (*DescribeProjectIssueFieldList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeProjectIssueFieldList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeProjectIssueFieldList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeProjectIssueFieldList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeProjectIssueFieldListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeProjectIssueStatusListRequest struct {
	ctx                                  context.Context
	ApiService                           *DefaultApiService
	authorization                        *string
	action                               *string
	describeProjectIssueFieldListRequest *DescribeProjectIssueFieldListRequest
}

// 认证信息
func (r ApiDescribeProjectIssueStatusListRequest) Authorization(authorization string) ApiDescribeProjectIssueStatusListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeProjectIssueStatusListRequest) Action(action string) ApiDescribeProjectIssueStatusListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeProjectIssueStatusListRequest) DescribeProjectIssueFieldListRequest(describeProjectIssueFieldListRequest DescribeProjectIssueFieldListRequest) ApiDescribeProjectIssueStatusListRequest {
	r.describeProjectIssueFieldListRequest = &describeProjectIssueFieldListRequest
	return r
}

func (r ApiDescribeProjectIssueStatusListRequest) Execute() (*DescribeProjectIssueStatusList200Response, *http.Response, error) {
	return r.ApiService.DescribeProjectIssueStatusListExecute(r)
}

/*
DescribeProjectIssueStatusList 具体事项类型的状态列表查询

✨ 查询具体事项类型的状态列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeProjectIssueStatusListRequest
*/
func (a *DefaultApiService) DescribeProjectIssueStatusList(ctx context.Context) ApiDescribeProjectIssueStatusListRequest {
	return ApiDescribeProjectIssueStatusListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeProjectIssueStatusList200Response
func (a *DefaultApiService) DescribeProjectIssueStatusListExecute(r ApiDescribeProjectIssueStatusListRequest) (*DescribeProjectIssueStatusList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeProjectIssueStatusList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeProjectIssueStatusList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeProjectIssueStatusList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeProjectIssueFieldListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeProjectIssueTypeListRequest struct {
	ctx                                 context.Context
	ApiService                          *DefaultApiService
	authorization                       *string
	action                              *string
	describeProjectIssueTypeListRequest *DescribeProjectIssueTypeListRequest
}

// 认证信息
func (r ApiDescribeProjectIssueTypeListRequest) Authorization(authorization string) ApiDescribeProjectIssueTypeListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeProjectIssueTypeListRequest) Action(action string) ApiDescribeProjectIssueTypeListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeProjectIssueTypeListRequest) DescribeProjectIssueTypeListRequest(describeProjectIssueTypeListRequest DescribeProjectIssueTypeListRequest) ApiDescribeProjectIssueTypeListRequest {
	r.describeProjectIssueTypeListRequest = &describeProjectIssueTypeListRequest
	return r
}

func (r ApiDescribeProjectIssueTypeListRequest) Execute() (*DescribeProjectIssueTypeList200Response, *http.Response, error) {
	return r.ApiService.DescribeProjectIssueTypeListExecute(r)
}

/*
DescribeProjectIssueTypeList 项目事项类型列表查询

✨ 查询项目事项类型列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeProjectIssueTypeListRequest
*/
func (a *DefaultApiService) DescribeProjectIssueTypeList(ctx context.Context) ApiDescribeProjectIssueTypeListRequest {
	return ApiDescribeProjectIssueTypeListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeProjectIssueTypeList200Response
func (a *DefaultApiService) DescribeProjectIssueTypeListExecute(r ApiDescribeProjectIssueTypeListRequest) (*DescribeProjectIssueTypeList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeProjectIssueTypeList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeProjectIssueTypeList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeProjectIssueTypeList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeProjectIssueTypeListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeProjectLabelsRequest struct {
	ctx                          context.Context
	ApiService                   *DefaultApiService
	authorization                *string
	action                       *string
	describeProjectLabelsRequest *DescribeProjectLabelsRequest
}

// 认证信息
func (r ApiDescribeProjectLabelsRequest) Authorization(authorization string) ApiDescribeProjectLabelsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeProjectLabelsRequest) Action(action string) ApiDescribeProjectLabelsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeProjectLabelsRequest) DescribeProjectLabelsRequest(describeProjectLabelsRequest DescribeProjectLabelsRequest) ApiDescribeProjectLabelsRequest {
	r.describeProjectLabelsRequest = &describeProjectLabelsRequest
	return r
}

func (r ApiDescribeProjectLabelsRequest) Execute() (*DescribeProjectLabels200Response, *http.Response, error) {
	return r.ApiService.DescribeProjectLabelsExecute(r)
}

/*
DescribeProjectLabels 项目列表查询-指定项目标签

✨ 项目列表查询-指定项目标签

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeProjectLabelsRequest
*/
func (a *DefaultApiService) DescribeProjectLabels(ctx context.Context) ApiDescribeProjectLabelsRequest {
	return ApiDescribeProjectLabelsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeProjectLabels200Response
func (a *DefaultApiService) DescribeProjectLabelsExecute(r ApiDescribeProjectLabelsRequest) (*DescribeProjectLabels200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeProjectLabels200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeProjectLabels")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeProjectLabels"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeProjectLabelsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeProjectMemberPrincipalsRequest struct {
	ctx                                    context.Context
	ApiService                             *DefaultApiService
	authorization                          *string
	action                                 *string
	describeProjectMemberPrincipalsRequest *DescribeProjectMemberPrincipalsRequest
}

// 认证信息
func (r ApiDescribeProjectMemberPrincipalsRequest) Authorization(authorization string) ApiDescribeProjectMemberPrincipalsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeProjectMemberPrincipalsRequest) Action(action string) ApiDescribeProjectMemberPrincipalsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeProjectMemberPrincipalsRequest) DescribeProjectMemberPrincipalsRequest(describeProjectMemberPrincipalsRequest DescribeProjectMemberPrincipalsRequest) ApiDescribeProjectMemberPrincipalsRequest {
	r.describeProjectMemberPrincipalsRequest = &describeProjectMemberPrincipalsRequest
	return r
}

func (r ApiDescribeProjectMemberPrincipalsRequest) Execute() (*DescribeProjectMemberPrincipals200Response, *http.Response, error) {
	return r.ApiService.DescribeProjectMemberPrincipalsExecute(r)
}

/*
DescribeProjectMemberPrincipals 项目成员主体查询(包含用户组、部门、成员)

✨ 项目成员主体查询(包含用户组、部门、成员)

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeProjectMemberPrincipalsRequest
*/
func (a *DefaultApiService) DescribeProjectMemberPrincipals(ctx context.Context) ApiDescribeProjectMemberPrincipalsRequest {
	return ApiDescribeProjectMemberPrincipalsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeProjectMemberPrincipals200Response
func (a *DefaultApiService) DescribeProjectMemberPrincipalsExecute(r ApiDescribeProjectMemberPrincipalsRequest) (*DescribeProjectMemberPrincipals200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeProjectMemberPrincipals200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeProjectMemberPrincipals")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeProjectMemberPrincipals"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeProjectMemberPrincipalsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeProjectMembersRequest struct {
	ctx                           context.Context
	ApiService                    *DefaultApiService
	authorization                 *string
	action                        *string
	describeProjectMembersRequest *DescribeProjectMembersRequest
}

// 认证信息
func (r ApiDescribeProjectMembersRequest) Authorization(authorization string) ApiDescribeProjectMembersRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeProjectMembersRequest) Action(action string) ApiDescribeProjectMembersRequest {
	r.action = &action
	return r
}

func (r ApiDescribeProjectMembersRequest) DescribeProjectMembersRequest(describeProjectMembersRequest DescribeProjectMembersRequest) ApiDescribeProjectMembersRequest {
	r.describeProjectMembersRequest = &describeProjectMembersRequest
	return r
}

func (r ApiDescribeProjectMembersRequest) Execute() (*DescribeProjectMembers200Response, *http.Response, error) {
	return r.ApiService.DescribeProjectMembersExecute(r)
}

/*
DescribeProjectMembers 项目成员列表查询

✨ 项目成员列表查询

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeProjectMembersRequest
*/
func (a *DefaultApiService) DescribeProjectMembers(ctx context.Context) ApiDescribeProjectMembersRequest {
	return ApiDescribeProjectMembersRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeProjectMembers200Response
func (a *DefaultApiService) DescribeProjectMembersExecute(r ApiDescribeProjectMembersRequest) (*DescribeProjectMembers200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeProjectMembers200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeProjectMembers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeProjectMembers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeProjectMembersRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeProjectMergeRequestsRequest struct {
	ctx                                 context.Context
	ApiService                          *DefaultApiService
	authorization                       *string
	action                              *string
	describeProjectMergeRequestsRequest *DescribeProjectMergeRequestsRequest
}

// 认证信息
func (r ApiDescribeProjectMergeRequestsRequest) Authorization(authorization string) ApiDescribeProjectMergeRequestsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeProjectMergeRequestsRequest) Action(action string) ApiDescribeProjectMergeRequestsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeProjectMergeRequestsRequest) DescribeProjectMergeRequestsRequest(describeProjectMergeRequestsRequest DescribeProjectMergeRequestsRequest) ApiDescribeProjectMergeRequestsRequest {
	r.describeProjectMergeRequestsRequest = &describeProjectMergeRequestsRequest
	return r
}

func (r ApiDescribeProjectMergeRequestsRequest) Execute() (*DescribeSelfMergeRequests200Response, *http.Response, error) {
	return r.ApiService.DescribeProjectMergeRequestsExecute(r)
}

/*
DescribeProjectMergeRequests 合并请求-获取项目下的合并请求列表

✨ 获取项目下的合并请求列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeProjectMergeRequestsRequest
*/
func (a *DefaultApiService) DescribeProjectMergeRequests(ctx context.Context) ApiDescribeProjectMergeRequestsRequest {
	return ApiDescribeProjectMergeRequestsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeSelfMergeRequests200Response
func (a *DefaultApiService) DescribeProjectMergeRequestsExecute(r ApiDescribeProjectMergeRequestsRequest) (*DescribeSelfMergeRequests200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeSelfMergeRequests200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeProjectMergeRequests")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeProjectMergeRequests"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeProjectMergeRequestsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeProjectRolesRequest struct {
	ctx                         context.Context
	ApiService                  *DefaultApiService
	authorization               *string
	action                      *string
	describeProjectRolesRequest *DescribeProjectRolesRequest
}

// 认证信息
func (r ApiDescribeProjectRolesRequest) Authorization(authorization string) ApiDescribeProjectRolesRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeProjectRolesRequest) Action(action string) ApiDescribeProjectRolesRequest {
	r.action = &action
	return r
}

func (r ApiDescribeProjectRolesRequest) DescribeProjectRolesRequest(describeProjectRolesRequest DescribeProjectRolesRequest) ApiDescribeProjectRolesRequest {
	r.describeProjectRolesRequest = &describeProjectRolesRequest
	return r
}

func (r ApiDescribeProjectRolesRequest) Execute() (*DescribeProjectRoles200Response, *http.Response, error) {
	return r.ApiService.DescribeProjectRolesExecute(r)
}

/*
DescribeProjectRoles 项目用户组查询

✨ 项目用户组查询

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeProjectRolesRequest
*/
func (a *DefaultApiService) DescribeProjectRoles(ctx context.Context) ApiDescribeProjectRolesRequest {
	return ApiDescribeProjectRolesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeProjectRoles200Response
func (a *DefaultApiService) DescribeProjectRolesExecute(r ApiDescribeProjectRolesRequest) (*DescribeProjectRoles200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeProjectRoles200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeProjectRoles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeProjectRoles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeProjectRolesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeProjectsByFeatureRequest struct {
	ctx                              context.Context
	ApiService                       *DefaultApiService
	authorization                    *string
	action                           *string
	describeProjectsByFeatureRequest *DescribeProjectsByFeatureRequest
}

// 认证信息
func (r ApiDescribeProjectsByFeatureRequest) Authorization(authorization string) ApiDescribeProjectsByFeatureRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeProjectsByFeatureRequest) Action(action string) ApiDescribeProjectsByFeatureRequest {
	r.action = &action
	return r
}

func (r ApiDescribeProjectsByFeatureRequest) DescribeProjectsByFeatureRequest(describeProjectsByFeatureRequest DescribeProjectsByFeatureRequest) ApiDescribeProjectsByFeatureRequest {
	r.describeProjectsByFeatureRequest = &describeProjectsByFeatureRequest
	return r
}

func (r ApiDescribeProjectsByFeatureRequest) Execute() (*DescribeProjectsByFeature200Response, *http.Response, error) {
	return r.ApiService.DescribeProjectsByFeatureExecute(r)
}

/*
DescribeProjectsByFeature 项目查询（通过一级菜单名）

✨ 项目查询（通过一级菜单名查询开启某个模块的项目）

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeProjectsByFeatureRequest
*/
func (a *DefaultApiService) DescribeProjectsByFeature(ctx context.Context) ApiDescribeProjectsByFeatureRequest {
	return ApiDescribeProjectsByFeatureRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeProjectsByFeature200Response
func (a *DefaultApiService) DescribeProjectsByFeatureExecute(r ApiDescribeProjectsByFeatureRequest) (*DescribeProjectsByFeature200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeProjectsByFeature200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeProjectsByFeature")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeProjectsByFeature"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeProjectsByFeatureRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeProtectedBranchRequest struct {
	ctx                            context.Context
	ApiService                     *DefaultApiService
	authorization                  *string
	action                         *string
	describeProtectedBranchRequest *DescribeProtectedBranchRequest
}

// 认证信息
func (r ApiDescribeProtectedBranchRequest) Authorization(authorization string) ApiDescribeProtectedBranchRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeProtectedBranchRequest) Action(action string) ApiDescribeProtectedBranchRequest {
	r.action = &action
	return r
}

func (r ApiDescribeProtectedBranchRequest) DescribeProtectedBranchRequest(describeProtectedBranchRequest DescribeProtectedBranchRequest) ApiDescribeProtectedBranchRequest {
	r.describeProtectedBranchRequest = &describeProtectedBranchRequest
	return r
}

func (r ApiDescribeProtectedBranchRequest) Execute() (*DescribeProtectedBranch200Response, *http.Response, error) {
	return r.ApiService.DescribeProtectedBranchExecute(r)
}

/*
DescribeProtectedBranch 仓库设置-查询保护分支详情

✨ 查询保护分支详情

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeProtectedBranchRequest
*/
func (a *DefaultApiService) DescribeProtectedBranch(ctx context.Context) ApiDescribeProtectedBranchRequest {
	return ApiDescribeProtectedBranchRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeProtectedBranch200Response
func (a *DefaultApiService) DescribeProtectedBranchExecute(r ApiDescribeProtectedBranchRequest) (*DescribeProtectedBranch200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeProtectedBranch200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeProtectedBranch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeProtectedBranch"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeProtectedBranchRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeProtectedBranchMembersRequest struct {
	ctx                                   context.Context
	ApiService                            *DefaultApiService
	authorization                         *string
	action                                *string
	describeProtectedBranchMembersRequest *DescribeProtectedBranchMembersRequest
}

// 认证信息
func (r ApiDescribeProtectedBranchMembersRequest) Authorization(authorization string) ApiDescribeProtectedBranchMembersRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeProtectedBranchMembersRequest) Action(action string) ApiDescribeProtectedBranchMembersRequest {
	r.action = &action
	return r
}

func (r ApiDescribeProtectedBranchMembersRequest) DescribeProtectedBranchMembersRequest(describeProtectedBranchMembersRequest DescribeProtectedBranchMembersRequest) ApiDescribeProtectedBranchMembersRequest {
	r.describeProtectedBranchMembersRequest = &describeProtectedBranchMembersRequest
	return r
}

func (r ApiDescribeProtectedBranchMembersRequest) Execute() (*DescribeProtectedBranchMembers200Response, *http.Response, error) {
	return r.ApiService.DescribeProtectedBranchMembersExecute(r)
}

/*
DescribeProtectedBranchMembers 仓库设置-查询保护分支成员

✨ 查询保护分支成员

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeProtectedBranchMembersRequest
*/
func (a *DefaultApiService) DescribeProtectedBranchMembers(ctx context.Context) ApiDescribeProtectedBranchMembersRequest {
	return ApiDescribeProtectedBranchMembersRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeProtectedBranchMembers200Response
func (a *DefaultApiService) DescribeProtectedBranchMembersExecute(r ApiDescribeProtectedBranchMembersRequest) (*DescribeProtectedBranchMembers200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeProtectedBranchMembers200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeProtectedBranchMembers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeProtectedBranchMembers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeProtectedBranchMembersRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeProtectedBranchesRequest struct {
	ctx                              context.Context
	ApiService                       *DefaultApiService
	authorization                    *string
	action                           *string
	describeProtectedBranchesRequest *DescribeProtectedBranchesRequest
}

// 认证信息
func (r ApiDescribeProtectedBranchesRequest) Authorization(authorization string) ApiDescribeProtectedBranchesRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeProtectedBranchesRequest) Action(action string) ApiDescribeProtectedBranchesRequest {
	r.action = &action
	return r
}

func (r ApiDescribeProtectedBranchesRequest) DescribeProtectedBranchesRequest(describeProtectedBranchesRequest DescribeProtectedBranchesRequest) ApiDescribeProtectedBranchesRequest {
	r.describeProtectedBranchesRequest = &describeProtectedBranchesRequest
	return r
}

func (r ApiDescribeProtectedBranchesRequest) Execute() (*DescribeProtectedBranches200Response, *http.Response, error) {
	return r.ApiService.DescribeProtectedBranchesExecute(r)
}

/*
DescribeProtectedBranches 仓库设置-查询保护分支列表

✨ 查询保护分支

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeProtectedBranchesRequest
*/
func (a *DefaultApiService) DescribeProtectedBranches(ctx context.Context) ApiDescribeProtectedBranchesRequest {
	return ApiDescribeProtectedBranchesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeProtectedBranches200Response
func (a *DefaultApiService) DescribeProtectedBranchesExecute(r ApiDescribeProtectedBranchesRequest) (*DescribeProtectedBranches200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeProtectedBranches200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeProtectedBranches")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeProtectedBranches"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeProtectedBranchesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeRelatedCaseListRequest struct {
	ctx                            context.Context
	ApiService                     *DefaultApiService
	authorization                  *string
	action                         *string
	describeRelatedCaseListRequest *DescribeRelatedCaseListRequest
}

// 认证信息
func (r ApiDescribeRelatedCaseListRequest) Authorization(authorization string) ApiDescribeRelatedCaseListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeRelatedCaseListRequest) Action(action string) ApiDescribeRelatedCaseListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeRelatedCaseListRequest) DescribeRelatedCaseListRequest(describeRelatedCaseListRequest DescribeRelatedCaseListRequest) ApiDescribeRelatedCaseListRequest {
	r.describeRelatedCaseListRequest = &describeRelatedCaseListRequest
	return r
}

func (r ApiDescribeRelatedCaseListRequest) Execute() (*DescribeRelatedCaseList200Response, *http.Response, error) {
	return r.ApiService.DescribeRelatedCaseListExecute(r)
}

/*
DescribeRelatedCaseList 事项关联的测试用例查询

✨ 管理测试用例

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeRelatedCaseListRequest
*/
func (a *DefaultApiService) DescribeRelatedCaseList(ctx context.Context) ApiDescribeRelatedCaseListRequest {
	return ApiDescribeRelatedCaseListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeRelatedCaseList200Response
func (a *DefaultApiService) DescribeRelatedCaseListExecute(r ApiDescribeRelatedCaseListRequest) (*DescribeRelatedCaseList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeRelatedCaseList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeRelatedCaseList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeRelatedCaseList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeRelatedCaseListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeReleaseRequest struct {
	ctx                    context.Context
	ApiService             *DefaultApiService
	authorization          *string
	action                 *string
	describeReleaseRequest *DescribeReleaseRequest
}

// 认证信息
func (r ApiDescribeReleaseRequest) Authorization(authorization string) ApiDescribeReleaseRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeReleaseRequest) Action(action string) ApiDescribeReleaseRequest {
	r.action = &action
	return r
}

func (r ApiDescribeReleaseRequest) DescribeReleaseRequest(describeReleaseRequest DescribeReleaseRequest) ApiDescribeReleaseRequest {
	r.describeReleaseRequest = &describeReleaseRequest
	return r
}

func (r ApiDescribeReleaseRequest) Execute() (*ModifyRelease200Response, *http.Response, error) {
	return r.ApiService.DescribeReleaseExecute(r)
}

/*
DescribeRelease 版本详情查询

✨ 版本详情

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeReleaseRequest
*/
func (a *DefaultApiService) DescribeRelease(ctx context.Context) ApiDescribeReleaseRequest {
	return ApiDescribeReleaseRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModifyRelease200Response
func (a *DefaultApiService) DescribeReleaseExecute(r ApiDescribeReleaseRequest) (*ModifyRelease200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModifyRelease200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeRelease")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeRelease"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeReleaseRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeReleaseIssueListRequest struct {
	ctx                             context.Context
	ApiService                      *DefaultApiService
	authorization                   *string
	action                          *string
	describeReleaseIssueListRequest *DescribeReleaseIssueListRequest
}

// 认证信息
func (r ApiDescribeReleaseIssueListRequest) Authorization(authorization string) ApiDescribeReleaseIssueListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeReleaseIssueListRequest) Action(action string) ApiDescribeReleaseIssueListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeReleaseIssueListRequest) DescribeReleaseIssueListRequest(describeReleaseIssueListRequest DescribeReleaseIssueListRequest) ApiDescribeReleaseIssueListRequest {
	r.describeReleaseIssueListRequest = &describeReleaseIssueListRequest
	return r
}

func (r ApiDescribeReleaseIssueListRequest) Execute() (*DescribeReleaseIssueList200Response, *http.Response, error) {
	return r.ApiService.DescribeReleaseIssueListExecute(r)
}

/*
DescribeReleaseIssueList 版本发布范围查询

✨ 版本发布范围

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeReleaseIssueListRequest
*/
func (a *DefaultApiService) DescribeReleaseIssueList(ctx context.Context) ApiDescribeReleaseIssueListRequest {
	return ApiDescribeReleaseIssueListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeReleaseIssueList200Response
func (a *DefaultApiService) DescribeReleaseIssueListExecute(r ApiDescribeReleaseIssueListRequest) (*DescribeReleaseIssueList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeReleaseIssueList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeReleaseIssueList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeReleaseIssueList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeReleaseIssueListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeReleaseListRequest struct {
	ctx                        context.Context
	ApiService                 *DefaultApiService
	authorization              *string
	action                     *string
	describeReleaseListRequest *DescribeReleaseListRequest
}

// 认证信息
func (r ApiDescribeReleaseListRequest) Authorization(authorization string) ApiDescribeReleaseListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeReleaseListRequest) Action(action string) ApiDescribeReleaseListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeReleaseListRequest) DescribeReleaseListRequest(describeReleaseListRequest DescribeReleaseListRequest) ApiDescribeReleaseListRequest {
	r.describeReleaseListRequest = &describeReleaseListRequest
	return r
}

func (r ApiDescribeReleaseListRequest) Execute() (*DescribeReleaseList200Response, *http.Response, error) {
	return r.ApiService.DescribeReleaseListExecute(r)
}

/*
DescribeReleaseList 版本列表查询

✨ 查询项目内版本列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeReleaseListRequest
*/
func (a *DefaultApiService) DescribeReleaseList(ctx context.Context) ApiDescribeReleaseListRequest {
	return ApiDescribeReleaseListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeReleaseList200Response
func (a *DefaultApiService) DescribeReleaseListExecute(r ApiDescribeReleaseListRequest) (*DescribeReleaseList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeReleaseList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeReleaseList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeReleaseList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeReleaseListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeReportRequest struct {
	ctx                 context.Context
	ApiService          *DefaultApiService
	authorization       *string
	action              *string
	deleteReportRequest *DeleteReportRequest
}

// 认证信息
func (r ApiDescribeReportRequest) Authorization(authorization string) ApiDescribeReportRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeReportRequest) Action(action string) ApiDescribeReportRequest {
	r.action = &action
	return r
}

func (r ApiDescribeReportRequest) DeleteReportRequest(deleteReportRequest DeleteReportRequest) ApiDescribeReportRequest {
	r.deleteReportRequest = &deleteReportRequest
	return r
}

func (r ApiDescribeReportRequest) Execute() (*DescribeReport200Response, *http.Response, error) {
	return r.ApiService.DescribeReportExecute(r)
}

/*
DescribeReport 测试报告详情

✨ 测试报告详情

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeReportRequest
*/
func (a *DefaultApiService) DescribeReport(ctx context.Context) ApiDescribeReportRequest {
	return ApiDescribeReportRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeReport200Response
func (a *DefaultApiService) DescribeReportExecute(r ApiDescribeReportRequest) (*DescribeReport200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeReport200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeReport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeReport"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteReportRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeReportListRequest struct {
	ctx                       context.Context
	ApiService                *DefaultApiService
	authorization             *string
	action                    *string
	describeReportListRequest *DescribeReportListRequest
}

// 认证信息
func (r ApiDescribeReportListRequest) Authorization(authorization string) ApiDescribeReportListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeReportListRequest) Action(action string) ApiDescribeReportListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeReportListRequest) DescribeReportListRequest(describeReportListRequest DescribeReportListRequest) ApiDescribeReportListRequest {
	r.describeReportListRequest = &describeReportListRequest
	return r
}

func (r ApiDescribeReportListRequest) Execute() (*DescribeReportList200Response, *http.Response, error) {
	return r.ApiService.DescribeReportListExecute(r)
}

/*
DescribeReportList 测试报告列表

✨ 测试报告列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeReportListRequest
*/
func (a *DefaultApiService) DescribeReportList(ctx context.Context) ApiDescribeReportListRequest {
	return ApiDescribeReportListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeReportList200Response
func (a *DefaultApiService) DescribeReportListExecute(r ApiDescribeReportListRequest) (*DescribeReportList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeReportList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeReportList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeReportList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeReportListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeRequirementDefectRelationRequest struct {
	ctx                                      context.Context
	ApiService                               *DefaultApiService
	authorization                            *string
	action                                   *string
	describeRequirementDefectRelationRequest *DescribeRequirementDefectRelationRequest
}

// 认证信息
func (r ApiDescribeRequirementDefectRelationRequest) Authorization(authorization string) ApiDescribeRequirementDefectRelationRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeRequirementDefectRelationRequest) Action(action string) ApiDescribeRequirementDefectRelationRequest {
	r.action = &action
	return r
}

func (r ApiDescribeRequirementDefectRelationRequest) DescribeRequirementDefectRelationRequest(describeRequirementDefectRelationRequest DescribeRequirementDefectRelationRequest) ApiDescribeRequirementDefectRelationRequest {
	r.describeRequirementDefectRelationRequest = &describeRequirementDefectRelationRequest
	return r
}

func (r ApiDescribeRequirementDefectRelationRequest) Execute() (*DescribeRequirementDefectRelation200Response, *http.Response, error) {
	return r.ApiService.DescribeRequirementDefectRelationExecute(r)
}

/*
DescribeRequirementDefectRelation 需求关联缺陷列表查询

✨ 查询需求关联缺陷列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeRequirementDefectRelationRequest
*/
func (a *DefaultApiService) DescribeRequirementDefectRelation(ctx context.Context) ApiDescribeRequirementDefectRelationRequest {
	return ApiDescribeRequirementDefectRelationRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeRequirementDefectRelation200Response
func (a *DefaultApiService) DescribeRequirementDefectRelationExecute(r ApiDescribeRequirementDefectRelationRequest) (*DescribeRequirementDefectRelation200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeRequirementDefectRelation200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeRequirementDefectRelation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeRequirementDefectRelation"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeRequirementDefectRelationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeRequirementTestCaseListRequest struct {
	ctx                                    context.Context
	ApiService                             *DefaultApiService
	authorization                          *string
	action                                 *string
	describeRequirementTestCaseListRequest *DescribeRequirementTestCaseListRequest
}

// 认证信息
func (r ApiDescribeRequirementTestCaseListRequest) Authorization(authorization string) ApiDescribeRequirementTestCaseListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeRequirementTestCaseListRequest) Action(action string) ApiDescribeRequirementTestCaseListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeRequirementTestCaseListRequest) DescribeRequirementTestCaseListRequest(describeRequirementTestCaseListRequest DescribeRequirementTestCaseListRequest) ApiDescribeRequirementTestCaseListRequest {
	r.describeRequirementTestCaseListRequest = &describeRequirementTestCaseListRequest
	return r
}

func (r ApiDescribeRequirementTestCaseListRequest) Execute() (*DescribeTestCaseList200Response, *http.Response, error) {
	return r.ApiService.DescribeRequirementTestCaseListExecute(r)
}

/*
DescribeRequirementTestCaseList 需求关联的测试用例列表

✨ 需求关联的测试用例列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeRequirementTestCaseListRequest
*/
func (a *DefaultApiService) DescribeRequirementTestCaseList(ctx context.Context) ApiDescribeRequirementTestCaseListRequest {
	return ApiDescribeRequirementTestCaseListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeTestCaseList200Response
func (a *DefaultApiService) DescribeRequirementTestCaseListExecute(r ApiDescribeRequirementTestCaseListRequest) (*DescribeTestCaseList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeTestCaseList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeRequirementTestCaseList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeRequirementTestCaseList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeRequirementTestCaseListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeResourceReferencesRequest struct {
	ctx                               context.Context
	ApiService                        *DefaultApiService
	authorization                     *string
	action                            *string
	describeResourceReferencesRequest *DescribeResourceReferencesRequest
}

// 认证信息
func (r ApiDescribeResourceReferencesRequest) Authorization(authorization string) ApiDescribeResourceReferencesRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeResourceReferencesRequest) Action(action string) ApiDescribeResourceReferencesRequest {
	r.action = &action
	return r
}

func (r ApiDescribeResourceReferencesRequest) DescribeResourceReferencesRequest(describeResourceReferencesRequest DescribeResourceReferencesRequest) ApiDescribeResourceReferencesRequest {
	r.describeResourceReferencesRequest = &describeResourceReferencesRequest
	return r
}

func (r ApiDescribeResourceReferencesRequest) Execute() (*DescribeResourceReferences200Response, *http.Response, error) {
	return r.ApiService.DescribeResourceReferencesExecute(r)
}

/*
DescribeResourceReferences 资源引用的资源列表，如 开发任务中引用了多个需求，获取任务引用的需求列表

✨ 资源引用的资源列表，如 开发任务中引用了多个需求，获取任务引用的需求列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeResourceReferencesRequest
*/
func (a *DefaultApiService) DescribeResourceReferences(ctx context.Context) ApiDescribeResourceReferencesRequest {
	return ApiDescribeResourceReferencesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeResourceReferences200Response
func (a *DefaultApiService) DescribeResourceReferencesExecute(r ApiDescribeResourceReferencesRequest) (*DescribeResourceReferences200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeResourceReferences200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeResourceReferences")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeResourceReferences"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeResourceReferencesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeResourceReferencesCitedRequest struct {
	ctx                                     context.Context
	ApiService                              *DefaultApiService
	authorization                           *string
	action                                  *string
	describeResourceReferencesCitingRequest *DescribeResourceReferencesCitingRequest
}

// 认证信息
func (r ApiDescribeResourceReferencesCitedRequest) Authorization(authorization string) ApiDescribeResourceReferencesCitedRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeResourceReferencesCitedRequest) Action(action string) ApiDescribeResourceReferencesCitedRequest {
	r.action = &action
	return r
}

func (r ApiDescribeResourceReferencesCitedRequest) DescribeResourceReferencesCitingRequest(describeResourceReferencesCitingRequest DescribeResourceReferencesCitingRequest) ApiDescribeResourceReferencesCitedRequest {
	r.describeResourceReferencesCitingRequest = &describeResourceReferencesCitingRequest
	return r
}

func (r ApiDescribeResourceReferencesCitedRequest) Execute() (*DescribeResourceReferencesCited200Response, *http.Response, error) {
	return r.ApiService.DescribeResourceReferencesCitedExecute(r)
}

/*
DescribeResourceReferencesCited 被引用资源列表查询

✨ 被引用资源列表查询

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeResourceReferencesCitedRequest
*/
func (a *DefaultApiService) DescribeResourceReferencesCited(ctx context.Context) ApiDescribeResourceReferencesCitedRequest {
	return ApiDescribeResourceReferencesCitedRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeResourceReferencesCited200Response
func (a *DefaultApiService) DescribeResourceReferencesCitedExecute(r ApiDescribeResourceReferencesCitedRequest) (*DescribeResourceReferencesCited200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeResourceReferencesCited200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeResourceReferencesCited")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeResourceReferencesCited"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeResourceReferencesCitingRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeResourceReferencesCitingRequest struct {
	ctx                                     context.Context
	ApiService                              *DefaultApiService
	authorization                           *string
	action                                  *string
	describeResourceReferencesCitingRequest *DescribeResourceReferencesCitingRequest
}

// 认证信息
func (r ApiDescribeResourceReferencesCitingRequest) Authorization(authorization string) ApiDescribeResourceReferencesCitingRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeResourceReferencesCitingRequest) Action(action string) ApiDescribeResourceReferencesCitingRequest {
	r.action = &action
	return r
}

func (r ApiDescribeResourceReferencesCitingRequest) DescribeResourceReferencesCitingRequest(describeResourceReferencesCitingRequest DescribeResourceReferencesCitingRequest) ApiDescribeResourceReferencesCitingRequest {
	r.describeResourceReferencesCitingRequest = &describeResourceReferencesCitingRequest
	return r
}

func (r ApiDescribeResourceReferencesCitingRequest) Execute() (*DescribeResourceReferencesCiting200Response, *http.Response, error) {
	return r.ApiService.DescribeResourceReferencesCitingExecute(r)
}

/*
DescribeResourceReferencesCiting 引用资源列表查询

✨ 引用资源列表查询

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeResourceReferencesCitingRequest
*/
func (a *DefaultApiService) DescribeResourceReferencesCiting(ctx context.Context) ApiDescribeResourceReferencesCitingRequest {
	return ApiDescribeResourceReferencesCitingRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeResourceReferencesCiting200Response
func (a *DefaultApiService) DescribeResourceReferencesCitingExecute(r ApiDescribeResourceReferencesCitingRequest) (*DescribeResourceReferencesCiting200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeResourceReferencesCiting200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeResourceReferencesCiting")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeResourceReferencesCiting"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeResourceReferencesCitingRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeResourceScopeListOnPolicyRequest struct {
	ctx                                      context.Context
	ApiService                               *DefaultApiService
	authorization                            *string
	action                                   *string
	describeResourceScopeListOnPolicyRequest *DescribeResourceScopeListOnPolicyRequest
}

// 认证信息
func (r ApiDescribeResourceScopeListOnPolicyRequest) Authorization(authorization string) ApiDescribeResourceScopeListOnPolicyRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeResourceScopeListOnPolicyRequest) Action(action string) ApiDescribeResourceScopeListOnPolicyRequest {
	r.action = &action
	return r
}

func (r ApiDescribeResourceScopeListOnPolicyRequest) DescribeResourceScopeListOnPolicyRequest(describeResourceScopeListOnPolicyRequest DescribeResourceScopeListOnPolicyRequest) ApiDescribeResourceScopeListOnPolicyRequest {
	r.describeResourceScopeListOnPolicyRequest = &describeResourceScopeListOnPolicyRequest
	return r
}

func (r ApiDescribeResourceScopeListOnPolicyRequest) Execute() (*DescribeResourceScopeListOnPolicy200Response, *http.Response, error) {
	return r.ApiService.DescribeResourceScopeListOnPolicyExecute(r)
}

/*
DescribeResourceScopeListOnPolicy 权限组可用资源范围分页查询

✨ 权限组可用资源范围分页查询

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeResourceScopeListOnPolicyRequest
*/
func (a *DefaultApiService) DescribeResourceScopeListOnPolicy(ctx context.Context) ApiDescribeResourceScopeListOnPolicyRequest {
	return ApiDescribeResourceScopeListOnPolicyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeResourceScopeListOnPolicy200Response
func (a *DefaultApiService) DescribeResourceScopeListOnPolicyExecute(r ApiDescribeResourceScopeListOnPolicyRequest) (*DescribeResourceScopeListOnPolicy200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeResourceScopeListOnPolicy200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeResourceScopeListOnPolicy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeResourceScopeListOnPolicy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeResourceScopeListOnPolicyRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeSelfMergeRequestsRequest struct {
	ctx                              context.Context
	ApiService                       *DefaultApiService
	authorization                    *string
	action                           *string
	describeSelfMergeRequestsRequest *DescribeSelfMergeRequestsRequest
}

// 认证信息
func (r ApiDescribeSelfMergeRequestsRequest) Authorization(authorization string) ApiDescribeSelfMergeRequestsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeSelfMergeRequestsRequest) Action(action string) ApiDescribeSelfMergeRequestsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeSelfMergeRequestsRequest) DescribeSelfMergeRequestsRequest(describeSelfMergeRequestsRequest DescribeSelfMergeRequestsRequest) ApiDescribeSelfMergeRequestsRequest {
	r.describeSelfMergeRequestsRequest = &describeSelfMergeRequestsRequest
	return r
}

func (r ApiDescribeSelfMergeRequestsRequest) Execute() (*DescribeSelfMergeRequests200Response, *http.Response, error) {
	return r.ApiService.DescribeSelfMergeRequestsExecute(r)
}

/*
DescribeSelfMergeRequests 合并请求-获取自己的合并请求列表

✨ 获取自己的合并请求列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeSelfMergeRequestsRequest
*/
func (a *DefaultApiService) DescribeSelfMergeRequests(ctx context.Context) ApiDescribeSelfMergeRequestsRequest {
	return ApiDescribeSelfMergeRequestsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeSelfMergeRequests200Response
func (a *DefaultApiService) DescribeSelfMergeRequestsExecute(r ApiDescribeSelfMergeRequestsRequest) (*DescribeSelfMergeRequests200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeSelfMergeRequests200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeSelfMergeRequests")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeSelfMergeRequests"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeSelfMergeRequestsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeSingeMergeRequestNotesRequest struct {
	ctx                                   context.Context
	ApiService                            *DefaultApiService
	authorization                         *string
	action                                *string
	describeSingeMergeRequestNotesRequest *DescribeSingeMergeRequestNotesRequest
}

// 认证信息
func (r ApiDescribeSingeMergeRequestNotesRequest) Authorization(authorization string) ApiDescribeSingeMergeRequestNotesRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeSingeMergeRequestNotesRequest) Action(action string) ApiDescribeSingeMergeRequestNotesRequest {
	r.action = &action
	return r
}

func (r ApiDescribeSingeMergeRequestNotesRequest) DescribeSingeMergeRequestNotesRequest(describeSingeMergeRequestNotesRequest DescribeSingeMergeRequestNotesRequest) ApiDescribeSingeMergeRequestNotesRequest {
	r.describeSingeMergeRequestNotesRequest = &describeSingeMergeRequestNotesRequest
	return r
}

func (r ApiDescribeSingeMergeRequestNotesRequest) Execute() (*DescribeSingeMergeRequestNotes200Response, *http.Response, error) {
	return r.ApiService.DescribeSingeMergeRequestNotesExecute(r)
}

/*
DescribeSingeMergeRequestNotes 合并请求-获取单个合并请求行评论和改动文件diff行评论

✨ 获取单个合并请求行评论和改动文件diff行评论

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeSingeMergeRequestNotesRequest
*/
func (a *DefaultApiService) DescribeSingeMergeRequestNotes(ctx context.Context) ApiDescribeSingeMergeRequestNotesRequest {
	return ApiDescribeSingeMergeRequestNotesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeSingeMergeRequestNotes200Response
func (a *DefaultApiService) DescribeSingeMergeRequestNotesExecute(r ApiDescribeSingeMergeRequestNotesRequest) (*DescribeSingeMergeRequestNotes200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeSingeMergeRequestNotes200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeSingeMergeRequestNotes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeSingeMergeRequestNotes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeSingeMergeRequestNotesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeSshKeyRequest struct {
	ctx           context.Context
	ApiService    *DefaultApiService
	authorization *string
	action        *string
	body          *map[string]interface{}
}

// 认证信息
func (r ApiDescribeSshKeyRequest) Authorization(authorization string) ApiDescribeSshKeyRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeSshKeyRequest) Action(action string) ApiDescribeSshKeyRequest {
	r.action = &action
	return r
}

func (r ApiDescribeSshKeyRequest) Body(body map[string]interface{}) ApiDescribeSshKeyRequest {
	r.body = &body
	return r
}

func (r ApiDescribeSshKeyRequest) Execute() (*DescribeSshKey200Response, *http.Response, error) {
	return r.ApiService.DescribeSshKeyExecute(r)
}

/*
DescribeSshKey 仓库设置-获取当前用户所有SSH公钥

✨ 获取当前用户所有SSH公钥

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeSshKeyRequest
*/
func (a *DefaultApiService) DescribeSshKey(ctx context.Context) ApiDescribeSshKeyRequest {
	return ApiDescribeSshKeyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeSshKey200Response
func (a *DefaultApiService) DescribeSshKeyExecute(r ApiDescribeSshKeyRequest) (*DescribeSshKey200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeSshKey200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeSshKey")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeSshKey"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeSubIssueListRequest struct {
	ctx                         context.Context
	ApiService                  *DefaultApiService
	authorization               *string
	action                      *string
	describeSubIssueListRequest *DescribeSubIssueListRequest
}

// 认证信息
func (r ApiDescribeSubIssueListRequest) Authorization(authorization string) ApiDescribeSubIssueListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeSubIssueListRequest) Action(action string) ApiDescribeSubIssueListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeSubIssueListRequest) DescribeSubIssueListRequest(describeSubIssueListRequest DescribeSubIssueListRequest) ApiDescribeSubIssueListRequest {
	r.describeSubIssueListRequest = &describeSubIssueListRequest
	return r
}

func (r ApiDescribeSubIssueListRequest) Execute() (*DescribeSubIssueList200Response, *http.Response, error) {
	return r.ApiService.DescribeSubIssueListExecute(r)
}

/*
DescribeSubIssueList 子事项列表查询

✨ 查询子事项列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeSubIssueListRequest
*/
func (a *DefaultApiService) DescribeSubIssueList(ctx context.Context) ApiDescribeSubIssueListRequest {
	return ApiDescribeSubIssueListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeSubIssueList200Response
func (a *DefaultApiService) DescribeSubIssueListExecute(r ApiDescribeSubIssueListRequest) (*DescribeSubIssueList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeSubIssueList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeSubIssueList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeSubIssueList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeSubIssueListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeTeamRequest struct {
	ctx           context.Context
	ApiService    *DefaultApiService
	authorization *string
	action        *string
	body          *interface{}
}

// 认证信息
func (r ApiDescribeTeamRequest) Authorization(authorization string) ApiDescribeTeamRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeTeamRequest) Action(action string) ApiDescribeTeamRequest {
	r.action = &action
	return r
}

func (r ApiDescribeTeamRequest) Body(body interface{}) ApiDescribeTeamRequest {
	r.body = &body
	return r
}

func (r ApiDescribeTeamRequest) Execute() (*DescribeTeam200Response, *http.Response, error) {
	return r.ApiService.DescribeTeamExecute(r)
}

/*
DescribeTeam 团队信息查询

✨ 团队信息查询

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeTeamRequest
*/
func (a *DefaultApiService) DescribeTeam(ctx context.Context) ApiDescribeTeamRequest {
	return ApiDescribeTeamRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeTeam200Response
func (a *DefaultApiService) DescribeTeamExecute(r ApiDescribeTeamRequest) (*DescribeTeam200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeTeam200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeTeam")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeTeam"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeTeamAdminMembersRequest struct {
	ctx                             context.Context
	ApiService                      *DefaultApiService
	authorization                   *string
	action                          *string
	describeTeamAdminMembersRequest *DescribeTeamAdminMembersRequest
}

// 认证信息
func (r ApiDescribeTeamAdminMembersRequest) Authorization(authorization string) ApiDescribeTeamAdminMembersRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeTeamAdminMembersRequest) Action(action string) ApiDescribeTeamAdminMembersRequest {
	r.action = &action
	return r
}

func (r ApiDescribeTeamAdminMembersRequest) DescribeTeamAdminMembersRequest(describeTeamAdminMembersRequest DescribeTeamAdminMembersRequest) ApiDescribeTeamAdminMembersRequest {
	r.describeTeamAdminMembersRequest = &describeTeamAdminMembersRequest
	return r
}

func (r ApiDescribeTeamAdminMembersRequest) Execute() (*DescribeTeamAdminMembers200Response, *http.Response, error) {
	return r.ApiService.DescribeTeamAdminMembersExecute(r)
}

/*
DescribeTeamAdminMembers 团队管理员查询

✨ 查询团队管理员

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeTeamAdminMembersRequest
*/
func (a *DefaultApiService) DescribeTeamAdminMembers(ctx context.Context) ApiDescribeTeamAdminMembersRequest {
	return ApiDescribeTeamAdminMembersRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeTeamAdminMembers200Response
func (a *DefaultApiService) DescribeTeamAdminMembersExecute(r ApiDescribeTeamAdminMembersRequest) (*DescribeTeamAdminMembers200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeTeamAdminMembers200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeTeamAdminMembers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeTeamAdminMembers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeTeamAdminMembersRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeTeamArtifactsRequest struct {
	ctx                          context.Context
	ApiService                   *DefaultApiService
	authorization                *string
	action                       *string
	describeTeamArtifactsRequest *DescribeTeamArtifactsRequest
}

// 认证信息
func (r ApiDescribeTeamArtifactsRequest) Authorization(authorization string) ApiDescribeTeamArtifactsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeTeamArtifactsRequest) Action(action string) ApiDescribeTeamArtifactsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeTeamArtifactsRequest) DescribeTeamArtifactsRequest(describeTeamArtifactsRequest DescribeTeamArtifactsRequest) ApiDescribeTeamArtifactsRequest {
	r.describeTeamArtifactsRequest = &describeTeamArtifactsRequest
	return r
}

func (r ApiDescribeTeamArtifactsRequest) Execute() (*DescribeTeamArtifacts200Response, *http.Response, error) {
	return r.ApiService.DescribeTeamArtifactsExecute(r)
}

/*
DescribeTeamArtifacts 制品列表查询

✨ 制品列表查询

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeTeamArtifactsRequest
*/
func (a *DefaultApiService) DescribeTeamArtifacts(ctx context.Context) ApiDescribeTeamArtifactsRequest {
	return ApiDescribeTeamArtifactsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeTeamArtifacts200Response
func (a *DefaultApiService) DescribeTeamArtifactsExecute(r ApiDescribeTeamArtifactsRequest) (*DescribeTeamArtifacts200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeTeamArtifacts200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeTeamArtifacts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeTeamArtifacts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeTeamArtifactsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeTeamDepotInfoListRequest struct {
	ctx                              context.Context
	ApiService                       *DefaultApiService
	authorization                    *string
	action                           *string
	describeTeamDepotInfoListRequest *DescribeTeamDepotInfoListRequest
}

// 认证信息
func (r ApiDescribeTeamDepotInfoListRequest) Authorization(authorization string) ApiDescribeTeamDepotInfoListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeTeamDepotInfoListRequest) Action(action string) ApiDescribeTeamDepotInfoListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeTeamDepotInfoListRequest) DescribeTeamDepotInfoListRequest(describeTeamDepotInfoListRequest DescribeTeamDepotInfoListRequest) ApiDescribeTeamDepotInfoListRequest {
	r.describeTeamDepotInfoListRequest = &describeTeamDepotInfoListRequest
	return r
}

func (r ApiDescribeTeamDepotInfoListRequest) Execute() (*DescribeTeamDepotInfoList200Response, *http.Response, error) {
	return r.ApiService.DescribeTeamDepotInfoListExecute(r)
}

/*
DescribeTeamDepotInfoList 仓库信息-获取团队下仓库列表，仅团队所有者或团队管理员可以调用。

✨ 获取团队下仓库列表，仅团队所有者或团队管理员可以调用。

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeTeamDepotInfoListRequest
*/
func (a *DefaultApiService) DescribeTeamDepotInfoList(ctx context.Context) ApiDescribeTeamDepotInfoListRequest {
	return ApiDescribeTeamDepotInfoListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeTeamDepotInfoList200Response
func (a *DefaultApiService) DescribeTeamDepotInfoListExecute(r ApiDescribeTeamDepotInfoListRequest) (*DescribeTeamDepotInfoList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeTeamDepotInfoList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeTeamDepotInfoList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeTeamDepotInfoList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeTeamDepotInfoListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeTeamDepotsRequest struct {
	ctx                       context.Context
	ApiService                *DefaultApiService
	authorization             *string
	action                    *string
	describeTeamDepotsRequest *DescribeTeamDepotsRequest
}

// 认证信息
func (r ApiDescribeTeamDepotsRequest) Authorization(authorization string) ApiDescribeTeamDepotsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeTeamDepotsRequest) Action(action string) ApiDescribeTeamDepotsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeTeamDepotsRequest) DescribeTeamDepotsRequest(describeTeamDepotsRequest DescribeTeamDepotsRequest) ApiDescribeTeamDepotsRequest {
	r.describeTeamDepotsRequest = &describeTeamDepotsRequest
	return r
}

func (r ApiDescribeTeamDepotsRequest) Execute() (*DescribeTeamDepots200Response, *http.Response, error) {
	return r.ApiService.DescribeTeamDepotsExecute(r)
}

/*
DescribeTeamDepots 团队下可访问的所有仓库列表获取

✨ 获取团队下的自己可访问的所有仓库

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeTeamDepotsRequest
*/
func (a *DefaultApiService) DescribeTeamDepots(ctx context.Context) ApiDescribeTeamDepotsRequest {
	return ApiDescribeTeamDepotsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeTeamDepots200Response
func (a *DefaultApiService) DescribeTeamDepotsExecute(r ApiDescribeTeamDepotsRequest) (*DescribeTeamDepots200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeTeamDepots200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeTeamDepots")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeTeamDepots"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeTeamDepotsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeTeamIssueTypeListRequest struct {
	ctx           context.Context
	ApiService    *DefaultApiService
	authorization *string
	action        *string
	body          *map[string]interface{}
}

// 认证信息
func (r ApiDescribeTeamIssueTypeListRequest) Authorization(authorization string) ApiDescribeTeamIssueTypeListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeTeamIssueTypeListRequest) Action(action string) ApiDescribeTeamIssueTypeListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeTeamIssueTypeListRequest) Body(body map[string]interface{}) ApiDescribeTeamIssueTypeListRequest {
	r.body = &body
	return r
}

func (r ApiDescribeTeamIssueTypeListRequest) Execute() (*DescribeTeamIssueTypeList200Response, *http.Response, error) {
	return r.ApiService.DescribeTeamIssueTypeListExecute(r)
}

/*
DescribeTeamIssueTypeList 企业事项类型列表查询

✨ 查询企业事项类型列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeTeamIssueTypeListRequest
*/
func (a *DefaultApiService) DescribeTeamIssueTypeList(ctx context.Context) ApiDescribeTeamIssueTypeListRequest {
	return ApiDescribeTeamIssueTypeListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeTeamIssueTypeList200Response
func (a *DefaultApiService) DescribeTeamIssueTypeListExecute(r ApiDescribeTeamIssueTypeListRequest) (*DescribeTeamIssueTypeList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeTeamIssueTypeList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeTeamIssueTypeList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeTeamIssueTypeList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeTeamMemberRequest struct {
	ctx                       context.Context
	ApiService                *DefaultApiService
	authorization             *string
	action                    *string
	describeTeamMemberRequest *DescribeTeamMemberRequest
}

// 认证信息
func (r ApiDescribeTeamMemberRequest) Authorization(authorization string) ApiDescribeTeamMemberRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeTeamMemberRequest) Action(action string) ApiDescribeTeamMemberRequest {
	r.action = &action
	return r
}

func (r ApiDescribeTeamMemberRequest) DescribeTeamMemberRequest(describeTeamMemberRequest DescribeTeamMemberRequest) ApiDescribeTeamMemberRequest {
	r.describeTeamMemberRequest = &describeTeamMemberRequest
	return r
}

func (r ApiDescribeTeamMemberRequest) Execute() (*DescribeTeamMember200Response, *http.Response, error) {
	return r.ApiService.DescribeTeamMemberExecute(r)
}

/*
DescribeTeamMember 团队成员信息查询（通过用户 ID）

✨ 通过用户 ID 查询团队成员信息

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeTeamMemberRequest
*/
func (a *DefaultApiService) DescribeTeamMember(ctx context.Context) ApiDescribeTeamMemberRequest {
	return ApiDescribeTeamMemberRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeTeamMember200Response
func (a *DefaultApiService) DescribeTeamMemberExecute(r ApiDescribeTeamMemberRequest) (*DescribeTeamMember200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeTeamMember200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeTeamMember")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeTeamMember"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeTeamMemberRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeTeamMemberByEmailRequest struct {
	ctx                              context.Context
	ApiService                       *DefaultApiService
	authorization                    *string
	action                           *string
	describeTeamMemberByEmailRequest *DescribeTeamMemberByEmailRequest
}

// 认证信息
func (r ApiDescribeTeamMemberByEmailRequest) Authorization(authorization string) ApiDescribeTeamMemberByEmailRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeTeamMemberByEmailRequest) Action(action string) ApiDescribeTeamMemberByEmailRequest {
	r.action = &action
	return r
}

func (r ApiDescribeTeamMemberByEmailRequest) DescribeTeamMemberByEmailRequest(describeTeamMemberByEmailRequest DescribeTeamMemberByEmailRequest) ApiDescribeTeamMemberByEmailRequest {
	r.describeTeamMemberByEmailRequest = &describeTeamMemberByEmailRequest
	return r
}

func (r ApiDescribeTeamMemberByEmailRequest) Execute() (*DescribeTeamMemberByEmail200Response, *http.Response, error) {
	return r.ApiService.DescribeTeamMemberByEmailExecute(r)
}

/*
DescribeTeamMemberByEmail 团队成员信息查询（通过用户 Email）

✨ 通过用户 Email 查询团队成员信息

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeTeamMemberByEmailRequest
*/
func (a *DefaultApiService) DescribeTeamMemberByEmail(ctx context.Context) ApiDescribeTeamMemberByEmailRequest {
	return ApiDescribeTeamMemberByEmailRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeTeamMemberByEmail200Response
func (a *DefaultApiService) DescribeTeamMemberByEmailExecute(r ApiDescribeTeamMemberByEmailRequest) (*DescribeTeamMemberByEmail200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeTeamMemberByEmail200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeTeamMemberByEmail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeTeamMemberByEmail"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeTeamMemberByEmailRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeTeamMembersRequest struct {
	ctx                        context.Context
	ApiService                 *DefaultApiService
	authorization              *string
	action                     *string
	describeTeamMembersRequest *DescribeTeamMembersRequest
}

// 认证信息
func (r ApiDescribeTeamMembersRequest) Authorization(authorization string) ApiDescribeTeamMembersRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeTeamMembersRequest) Action(action string) ApiDescribeTeamMembersRequest {
	r.action = &action
	return r
}

func (r ApiDescribeTeamMembersRequest) DescribeTeamMembersRequest(describeTeamMembersRequest DescribeTeamMembersRequest) ApiDescribeTeamMembersRequest {
	r.describeTeamMembersRequest = &describeTeamMembersRequest
	return r
}

func (r ApiDescribeTeamMembersRequest) Execute() (*DescribeTeamMembers200Response, *http.Response, error) {
	return r.ApiService.DescribeTeamMembersExecute(r)
}

/*
DescribeTeamMembers 团队成员列表查询

✨ 团队成员列表查询

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeTeamMembersRequest
*/
func (a *DefaultApiService) DescribeTeamMembers(ctx context.Context) ApiDescribeTeamMembersRequest {
	return ApiDescribeTeamMembersRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeTeamMembers200Response
func (a *DefaultApiService) DescribeTeamMembersExecute(r ApiDescribeTeamMembersRequest) (*DescribeTeamMembers200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeTeamMembers200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeTeamMembers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeTeamMembers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeTeamMembersRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeTestRequest struct {
	ctx                 context.Context
	ApiService          *DefaultApiService
	authorization       *string
	action              *string
	describeTestRequest *DescribeTestRequest
}

// 认证信息
func (r ApiDescribeTestRequest) Authorization(authorization string) ApiDescribeTestRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeTestRequest) Action(action string) ApiDescribeTestRequest {
	r.action = &action
	return r
}

func (r ApiDescribeTestRequest) DescribeTestRequest(describeTestRequest DescribeTestRequest) ApiDescribeTestRequest {
	r.describeTestRequest = &describeTestRequest
	return r
}

func (r ApiDescribeTestRequest) Execute() (*DescribeTest200Response, *http.Response, error) {
	return r.ApiService.DescribeTestExecute(r)
}

/*
DescribeTest 测试任务详情

✨ 测试任务详情

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeTestRequest
*/
func (a *DefaultApiService) DescribeTest(ctx context.Context) ApiDescribeTestRequest {
	return ApiDescribeTestRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeTest200Response
func (a *DefaultApiService) DescribeTestExecute(r ApiDescribeTestRequest) (*DescribeTest200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeTest200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeTest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeTest"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeTestRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeTestCaseRequest struct {
	ctx                   context.Context
	ApiService            *DefaultApiService
	authorization         *string
	action                *string
	deleteTestCaseRequest *DeleteTestCaseRequest
}

// 认证信息
func (r ApiDescribeTestCaseRequest) Authorization(authorization string) ApiDescribeTestCaseRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeTestCaseRequest) Action(action string) ApiDescribeTestCaseRequest {
	r.action = &action
	return r
}

func (r ApiDescribeTestCaseRequest) DeleteTestCaseRequest(deleteTestCaseRequest DeleteTestCaseRequest) ApiDescribeTestCaseRequest {
	r.deleteTestCaseRequest = &deleteTestCaseRequest
	return r
}

func (r ApiDescribeTestCaseRequest) Execute() (*ModifyTestCase200Response, *http.Response, error) {
	return r.ApiService.DescribeTestCaseExecute(r)
}

/*
DescribeTestCase 测试用例详情

✨ 测试用例详情

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeTestCaseRequest
*/
func (a *DefaultApiService) DescribeTestCase(ctx context.Context) ApiDescribeTestCaseRequest {
	return ApiDescribeTestCaseRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModifyTestCase200Response
func (a *DefaultApiService) DescribeTestCaseExecute(r ApiDescribeTestCaseRequest) (*ModifyTestCase200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModifyTestCase200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeTestCase")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeTestCase"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteTestCaseRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeTestCaseListRequest struct {
	ctx                         context.Context
	ApiService                  *DefaultApiService
	authorization               *string
	action                      *string
	describeTestCaseListRequest *DescribeTestCaseListRequest
}

// 认证信息
func (r ApiDescribeTestCaseListRequest) Authorization(authorization string) ApiDescribeTestCaseListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeTestCaseListRequest) Action(action string) ApiDescribeTestCaseListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeTestCaseListRequest) DescribeTestCaseListRequest(describeTestCaseListRequest DescribeTestCaseListRequest) ApiDescribeTestCaseListRequest {
	r.describeTestCaseListRequest = &describeTestCaseListRequest
	return r
}

func (r ApiDescribeTestCaseListRequest) Execute() (*DescribeTestCaseList200Response, *http.Response, error) {
	return r.ApiService.DescribeTestCaseListExecute(r)
}

/*
DescribeTestCaseList 测试用例列表

✨ 测试用例列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeTestCaseListRequest
*/
func (a *DefaultApiService) DescribeTestCaseList(ctx context.Context) ApiDescribeTestCaseListRequest {
	return ApiDescribeTestCaseListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeTestCaseList200Response
func (a *DefaultApiService) DescribeTestCaseListExecute(r ApiDescribeTestCaseListRequest) (*DescribeTestCaseList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeTestCaseList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeTestCaseList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeTestCaseList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeTestCaseListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeTestCaseSectionListRequest struct {
	ctx                                context.Context
	ApiService                         *DefaultApiService
	authorization                      *string
	action                             *string
	describeTestCaseSectionListRequest *DescribeTestCaseSectionListRequest
}

// 认证信息
func (r ApiDescribeTestCaseSectionListRequest) Authorization(authorization string) ApiDescribeTestCaseSectionListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeTestCaseSectionListRequest) Action(action string) ApiDescribeTestCaseSectionListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeTestCaseSectionListRequest) DescribeTestCaseSectionListRequest(describeTestCaseSectionListRequest DescribeTestCaseSectionListRequest) ApiDescribeTestCaseSectionListRequest {
	r.describeTestCaseSectionListRequest = &describeTestCaseSectionListRequest
	return r
}

func (r ApiDescribeTestCaseSectionListRequest) Execute() (*DescribeTestCaseSectionList200Response, *http.Response, error) {
	return r.ApiService.DescribeTestCaseSectionListExecute(r)
}

/*
DescribeTestCaseSectionList 测试用例分组列表

✨ 测试用例分组列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeTestCaseSectionListRequest
*/
func (a *DefaultApiService) DescribeTestCaseSectionList(ctx context.Context) ApiDescribeTestCaseSectionListRequest {
	return ApiDescribeTestCaseSectionListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeTestCaseSectionList200Response
func (a *DefaultApiService) DescribeTestCaseSectionListExecute(r ApiDescribeTestCaseSectionListRequest) (*DescribeTestCaseSectionList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeTestCaseSectionList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeTestCaseSectionList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeTestCaseSectionList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeTestCaseSectionListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeTestDefectListRequest struct {
	ctx                           context.Context
	ApiService                    *DefaultApiService
	authorization                 *string
	action                        *string
	describeTestDefectListRequest *DescribeTestDefectListRequest
}

// 认证信息
func (r ApiDescribeTestDefectListRequest) Authorization(authorization string) ApiDescribeTestDefectListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeTestDefectListRequest) Action(action string) ApiDescribeTestDefectListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeTestDefectListRequest) DescribeTestDefectListRequest(describeTestDefectListRequest DescribeTestDefectListRequest) ApiDescribeTestDefectListRequest {
	r.describeTestDefectListRequest = &describeTestDefectListRequest
	return r
}

func (r ApiDescribeTestDefectListRequest) Execute() (*DescribeTestDefectList200Response, *http.Response, error) {
	return r.ApiService.DescribeTestDefectListExecute(r)
}

/*
DescribeTestDefectList 测试任务关联的缺陷列表

✨ 测试任务关联的缺陷列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeTestDefectListRequest
*/
func (a *DefaultApiService) DescribeTestDefectList(ctx context.Context) ApiDescribeTestDefectListRequest {
	return ApiDescribeTestDefectListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeTestDefectList200Response
func (a *DefaultApiService) DescribeTestDefectListExecute(r ApiDescribeTestDefectListRequest) (*DescribeTestDefectList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeTestDefectList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeTestDefectList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeTestDefectList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeTestDefectListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeTestListRequest struct {
	ctx                     context.Context
	ApiService              *DefaultApiService
	authorization           *string
	action                  *string
	describeTestListRequest *DescribeTestListRequest
}

// 认证信息
func (r ApiDescribeTestListRequest) Authorization(authorization string) ApiDescribeTestListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeTestListRequest) Action(action string) ApiDescribeTestListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeTestListRequest) DescribeTestListRequest(describeTestListRequest DescribeTestListRequest) ApiDescribeTestListRequest {
	r.describeTestListRequest = &describeTestListRequest
	return r
}

func (r ApiDescribeTestListRequest) Execute() (*DescribeTestList200Response, *http.Response, error) {
	return r.ApiService.DescribeTestListExecute(r)
}

/*
DescribeTestList 测试任务列表

✨ 测试任务列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeTestListRequest
*/
func (a *DefaultApiService) DescribeTestList(ctx context.Context) ApiDescribeTestListRequest {
	return ApiDescribeTestListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeTestList200Response
func (a *DefaultApiService) DescribeTestListExecute(r ApiDescribeTestListRequest) (*DescribeTestList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeTestList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeTestList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeTestList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeTestListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeTestRunRequest struct {
	ctx                  context.Context
	ApiService           *DefaultApiService
	authorization        *string
	action               *string
	deleteTestRunRequest *DeleteTestRunRequest
}

// 认证信息
func (r ApiDescribeTestRunRequest) Authorization(authorization string) ApiDescribeTestRunRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeTestRunRequest) Action(action string) ApiDescribeTestRunRequest {
	r.action = &action
	return r
}

func (r ApiDescribeTestRunRequest) DeleteTestRunRequest(deleteTestRunRequest DeleteTestRunRequest) ApiDescribeTestRunRequest {
	r.deleteTestRunRequest = &deleteTestRunRequest
	return r
}

func (r ApiDescribeTestRunRequest) Execute() (*DescribeTestRun200Response, *http.Response, error) {
	return r.ApiService.DescribeTestRunExecute(r)
}

/*
DescribeTestRun 测试计划详情

✨ 测试计划详情

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeTestRunRequest
*/
func (a *DefaultApiService) DescribeTestRun(ctx context.Context) ApiDescribeTestRunRequest {
	return ApiDescribeTestRunRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeTestRun200Response
func (a *DefaultApiService) DescribeTestRunExecute(r ApiDescribeTestRunRequest) (*DescribeTestRun200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeTestRun200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeTestRun")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeTestRun"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.deleteTestRunRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeTestRunListRequest struct {
	ctx                        context.Context
	ApiService                 *DefaultApiService
	authorization              *string
	action                     *string
	describeTestRunListRequest *DescribeTestRunListRequest
}

// 认证信息
func (r ApiDescribeTestRunListRequest) Authorization(authorization string) ApiDescribeTestRunListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeTestRunListRequest) Action(action string) ApiDescribeTestRunListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeTestRunListRequest) DescribeTestRunListRequest(describeTestRunListRequest DescribeTestRunListRequest) ApiDescribeTestRunListRequest {
	r.describeTestRunListRequest = &describeTestRunListRequest
	return r
}

func (r ApiDescribeTestRunListRequest) Execute() (*DescribeTestRunList200Response, *http.Response, error) {
	return r.ApiService.DescribeTestRunListExecute(r)
}

/*
DescribeTestRunList 测试计划列表

✨ 测试计划列表

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeTestRunListRequest
*/
func (a *DefaultApiService) DescribeTestRunList(ctx context.Context) ApiDescribeTestRunListRequest {
	return ApiDescribeTestRunListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeTestRunList200Response
func (a *DefaultApiService) DescribeTestRunListExecute(r ApiDescribeTestRunListRequest) (*DescribeTestRunList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeTestRunList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeTestRunList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeTestRunList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeTestRunListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeUserGroupsRequest struct {
	ctx                       context.Context
	ApiService                *DefaultApiService
	authorization             *string
	action                    *string
	describeUserGroupsRequest *DescribeUserGroupsRequest
}

// 认证信息
func (r ApiDescribeUserGroupsRequest) Authorization(authorization string) ApiDescribeUserGroupsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeUserGroupsRequest) Action(action string) ApiDescribeUserGroupsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeUserGroupsRequest) DescribeUserGroupsRequest(describeUserGroupsRequest DescribeUserGroupsRequest) ApiDescribeUserGroupsRequest {
	r.describeUserGroupsRequest = &describeUserGroupsRequest
	return r
}

func (r ApiDescribeUserGroupsRequest) Execute() (*DescribeUserGroups200Response, *http.Response, error) {
	return r.ApiService.DescribeUserGroupsExecute(r)
}

/*
DescribeUserGroups 用户组列表分页查询

✨ 用户组列表分页查询

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeUserGroupsRequest
*/
func (a *DefaultApiService) DescribeUserGroups(ctx context.Context) ApiDescribeUserGroupsRequest {
	return ApiDescribeUserGroupsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeUserGroups200Response
func (a *DefaultApiService) DescribeUserGroupsExecute(r ApiDescribeUserGroupsRequest) (*DescribeUserGroups200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeUserGroups200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeUserGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeUserGroups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeUserGroupsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeUserProjectsRequest struct {
	ctx                         context.Context
	ApiService                  *DefaultApiService
	authorization               *string
	action                      *string
	describeUserProjectsRequest *DescribeUserProjectsRequest
}

// 认证信息
func (r ApiDescribeUserProjectsRequest) Authorization(authorization string) ApiDescribeUserProjectsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeUserProjectsRequest) Action(action string) ApiDescribeUserProjectsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeUserProjectsRequest) DescribeUserProjectsRequest(describeUserProjectsRequest DescribeUserProjectsRequest) ApiDescribeUserProjectsRequest {
	r.describeUserProjectsRequest = &describeUserProjectsRequest
	return r
}

func (r ApiDescribeUserProjectsRequest) Execute() (*DescribeProjectLabels200Response, *http.Response, error) {
	return r.ApiService.DescribeUserProjectsExecute(r)
}

/*
DescribeUserProjects 项目列表查询（已加入的项目）

✨ 项目列表查询（已加入的项目）

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeUserProjectsRequest
*/
func (a *DefaultApiService) DescribeUserProjects(ctx context.Context) ApiDescribeUserProjectsRequest {
	return ApiDescribeUserProjectsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeProjectLabels200Response
func (a *DefaultApiService) DescribeUserProjectsExecute(r ApiDescribeUserProjectsRequest) (*DescribeProjectLabels200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeProjectLabels200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeUserProjects")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeUserProjects"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeUserProjectsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeUsersByGroupIdRequest struct {
	ctx                           context.Context
	ApiService                    *DefaultApiService
	authorization                 *string
	action                        *string
	describeUsersByGroupIdRequest *DescribeUsersByGroupIdRequest
}

// 认证信息
func (r ApiDescribeUsersByGroupIdRequest) Authorization(authorization string) ApiDescribeUsersByGroupIdRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeUsersByGroupIdRequest) Action(action string) ApiDescribeUsersByGroupIdRequest {
	r.action = &action
	return r
}

func (r ApiDescribeUsersByGroupIdRequest) DescribeUsersByGroupIdRequest(describeUsersByGroupIdRequest DescribeUsersByGroupIdRequest) ApiDescribeUsersByGroupIdRequest {
	r.describeUsersByGroupIdRequest = &describeUsersByGroupIdRequest
	return r
}

func (r ApiDescribeUsersByGroupIdRequest) Execute() (*DescribeUsersByGroupId200Response, *http.Response, error) {
	return r.ApiService.DescribeUsersByGroupIdExecute(r)
}

/*
DescribeUsersByGroupId 用户列表查询（根据用户组id分页查询）

✨ 用户列表查询（根据用户组id分页查询）

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeUsersByGroupIdRequest
*/
func (a *DefaultApiService) DescribeUsersByGroupId(ctx context.Context) ApiDescribeUsersByGroupIdRequest {
	return ApiDescribeUsersByGroupIdRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeUsersByGroupId200Response
func (a *DefaultApiService) DescribeUsersByGroupIdExecute(r ApiDescribeUsersByGroupIdRequest) (*DescribeUsersByGroupId200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeUsersByGroupId200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeUsersByGroupId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeUsersByGroupId"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeUsersByGroupIdRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeUsersOnResourceAndGrantObjectRequest struct {
	ctx                                          context.Context
	ApiService                                   *DefaultApiService
	authorization                                *string
	action                                       *string
	describeUsersOnResourceAndGrantObjectRequest *DescribeUsersOnResourceAndGrantObjectRequest
}

// 认证信息
func (r ApiDescribeUsersOnResourceAndGrantObjectRequest) Authorization(authorization string) ApiDescribeUsersOnResourceAndGrantObjectRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeUsersOnResourceAndGrantObjectRequest) Action(action string) ApiDescribeUsersOnResourceAndGrantObjectRequest {
	r.action = &action
	return r
}

func (r ApiDescribeUsersOnResourceAndGrantObjectRequest) DescribeUsersOnResourceAndGrantObjectRequest(describeUsersOnResourceAndGrantObjectRequest DescribeUsersOnResourceAndGrantObjectRequest) ApiDescribeUsersOnResourceAndGrantObjectRequest {
	r.describeUsersOnResourceAndGrantObjectRequest = &describeUsersOnResourceAndGrantObjectRequest
	return r
}

func (r ApiDescribeUsersOnResourceAndGrantObjectRequest) Execute() (*DescribeUsersOnResourceAndGrantObject200Response, *http.Response, error) {
	return r.ApiService.DescribeUsersOnResourceAndGrantObjectExecute(r)
}

/*
DescribeUsersOnResourceAndGrantObject 授权用户列表分页查询（指定资源）

✨ 授权用户列表分页查询（指定资源）

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeUsersOnResourceAndGrantObjectRequest
*/
func (a *DefaultApiService) DescribeUsersOnResourceAndGrantObject(ctx context.Context) ApiDescribeUsersOnResourceAndGrantObjectRequest {
	return ApiDescribeUsersOnResourceAndGrantObjectRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeUsersOnResourceAndGrantObject200Response
func (a *DefaultApiService) DescribeUsersOnResourceAndGrantObjectExecute(r ApiDescribeUsersOnResourceAndGrantObjectRequest) (*DescribeUsersOnResourceAndGrantObject200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeUsersOnResourceAndGrantObject200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeUsersOnResourceAndGrantObject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeUsersOnResourceAndGrantObject"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeUsersOnResourceAndGrantObjectRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeWorkItemSalvageRequest struct {
	ctx                            context.Context
	ApiService                     *DefaultApiService
	authorization                  *string
	action                         *string
	describeWorkItemSalvageRequest *DescribeWorkItemSalvageRequest
}

// 认证信息
func (r ApiDescribeWorkItemSalvageRequest) Authorization(authorization string) ApiDescribeWorkItemSalvageRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeWorkItemSalvageRequest) Action(action string) ApiDescribeWorkItemSalvageRequest {
	r.action = &action
	return r
}

func (r ApiDescribeWorkItemSalvageRequest) DescribeWorkItemSalvageRequest(describeWorkItemSalvageRequest DescribeWorkItemSalvageRequest) ApiDescribeWorkItemSalvageRequest {
	r.describeWorkItemSalvageRequest = &describeWorkItemSalvageRequest
	return r
}

func (r ApiDescribeWorkItemSalvageRequest) Execute() (*DescribeWorkItemSalvage200Response, *http.Response, error) {
	return r.ApiService.DescribeWorkItemSalvageExecute(r)
}

/*
DescribeWorkItemSalvage 事项分解信息查询

✨ 查询 事项分解信息

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeWorkItemSalvageRequest
*/
func (a *DefaultApiService) DescribeWorkItemSalvage(ctx context.Context) ApiDescribeWorkItemSalvageRequest {
	return ApiDescribeWorkItemSalvageRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeWorkItemSalvage200Response
func (a *DefaultApiService) DescribeWorkItemSalvageExecute(r ApiDescribeWorkItemSalvageRequest) (*DescribeWorkItemSalvage200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeWorkItemSalvage200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeWorkItemSalvage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeWorkItemSalvage"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeWorkItemSalvageRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeWorkbenchIssueListRequest struct {
	ctx                               context.Context
	ApiService                        *DefaultApiService
	authorization                     *string
	action                            *string
	describeWorkbenchIssueListRequest *DescribeWorkbenchIssueListRequest
}

// 认证信息
func (r ApiDescribeWorkbenchIssueListRequest) Authorization(authorization string) ApiDescribeWorkbenchIssueListRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeWorkbenchIssueListRequest) Action(action string) ApiDescribeWorkbenchIssueListRequest {
	r.action = &action
	return r
}

func (r ApiDescribeWorkbenchIssueListRequest) DescribeWorkbenchIssueListRequest(describeWorkbenchIssueListRequest DescribeWorkbenchIssueListRequest) ApiDescribeWorkbenchIssueListRequest {
	r.describeWorkbenchIssueListRequest = &describeWorkbenchIssueListRequest
	return r
}

func (r ApiDescribeWorkbenchIssueListRequest) Execute() (*DescribeWorkbenchIssueList200Response, *http.Response, error) {
	return r.ApiService.DescribeWorkbenchIssueListExecute(r)
}

/*
DescribeWorkbenchIssueList 用户在团队内的所有代办事项查询

✨ 获取一个用户在团队内的所有代办事项（即前端页面上个人工作台中的事项列表）

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDescribeWorkbenchIssueListRequest
*/
func (a *DefaultApiService) DescribeWorkbenchIssueList(ctx context.Context) ApiDescribeWorkbenchIssueListRequest {
	return ApiDescribeWorkbenchIssueListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DescribeWorkbenchIssueList200Response
func (a *DefaultApiService) DescribeWorkbenchIssueListExecute(r ApiDescribeWorkbenchIssueListRequest) (*DescribeWorkbenchIssueList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DescribeWorkbenchIssueList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DescribeWorkbenchIssueList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/DescribeWorkbenchIssueList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeWorkbenchIssueListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDetachFromResourceRequest struct {
	ctx                       context.Context
	ApiService                *DefaultApiService
	authorization             *string
	action                    *string
	detachFromResourceRequest *DetachFromResourceRequest
}

// 认证信息
func (r ApiDetachFromResourceRequest) Authorization(authorization string) ApiDetachFromResourceRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDetachFromResourceRequest) Action(action string) ApiDetachFromResourceRequest {
	r.action = &action
	return r
}

func (r ApiDetachFromResourceRequest) DetachFromResourceRequest(detachFromResourceRequest DetachFromResourceRequest) ApiDetachFromResourceRequest {
	r.detachFromResourceRequest = &detachFromResourceRequest
	return r
}

func (r ApiDetachFromResourceRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DetachFromResourceExecute(r)
}

/*
DetachFromResource 授权收回，只收回参数指定的授权，已有其它授权不受影响

✨ 授权收回，只收回参数指定的授权，已有其它授权不受影响

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDetachFromResourceRequest
*/
func (a *DefaultApiService) DetachFromResource(ctx context.Context) ApiDetachFromResourceRequest {
	return ApiDetachFromResourceRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DetachFromResourceExecute(r ApiDetachFromResourceRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DetachFromResource")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DetachFromResource"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.detachFromResourceRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDetachResourceScopeOnPolicyRequest struct {
	ctx                                context.Context
	ApiService                         *DefaultApiService
	authorization                      *string
	action                             *string
	detachResourceScopeOnPolicyRequest *DetachResourceScopeOnPolicyRequest
}

// 认证信息
func (r ApiDetachResourceScopeOnPolicyRequest) Authorization(authorization string) ApiDetachResourceScopeOnPolicyRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDetachResourceScopeOnPolicyRequest) Action(action string) ApiDetachResourceScopeOnPolicyRequest {
	r.action = &action
	return r
}

func (r ApiDetachResourceScopeOnPolicyRequest) DetachResourceScopeOnPolicyRequest(detachResourceScopeOnPolicyRequest DetachResourceScopeOnPolicyRequest) ApiDetachResourceScopeOnPolicyRequest {
	r.detachResourceScopeOnPolicyRequest = &detachResourceScopeOnPolicyRequest
	return r
}

func (r ApiDetachResourceScopeOnPolicyRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.DetachResourceScopeOnPolicyExecute(r)
}

/*
DetachResourceScopeOnPolicy 权限组可用资源删除，只删除参数指定的资源，已有的其它资源不受影响

✨ 权限组可用资源删除，只删除参数指定的资源，已有的其它资源不受影响

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDetachResourceScopeOnPolicyRequest
*/
func (a *DefaultApiService) DetachResourceScopeOnPolicy(ctx context.Context) ApiDetachResourceScopeOnPolicyRequest {
	return ApiDetachResourceScopeOnPolicyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) DetachResourceScopeOnPolicyExecute(r ApiDetachResourceScopeOnPolicyRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DetachResourceScopeOnPolicy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DetachResourceScopeOnPolicy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.detachResourceScopeOnPolicyRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiForbiddenArtifactVersionRequest struct {
	ctx                             context.Context
	ApiService                      *DefaultApiService
	authorization                   *string
	action                          *string
	forbiddenArtifactVersionRequest *ForbiddenArtifactVersionRequest
}

// 认证信息
func (r ApiForbiddenArtifactVersionRequest) Authorization(authorization string) ApiForbiddenArtifactVersionRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiForbiddenArtifactVersionRequest) Action(action string) ApiForbiddenArtifactVersionRequest {
	r.action = &action
	return r
}

func (r ApiForbiddenArtifactVersionRequest) ForbiddenArtifactVersionRequest(forbiddenArtifactVersionRequest ForbiddenArtifactVersionRequest) ApiForbiddenArtifactVersionRequest {
	r.forbiddenArtifactVersionRequest = &forbiddenArtifactVersionRequest
	return r
}

func (r ApiForbiddenArtifactVersionRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.ForbiddenArtifactVersionExecute(r)
}

/*
ForbiddenArtifactVersion 制品版本下载 禁止、解禁

✨ 制品版本下载 禁止、解禁

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiForbiddenArtifactVersionRequest
*/
func (a *DefaultApiService) ForbiddenArtifactVersion(ctx context.Context) ApiForbiddenArtifactVersionRequest {
	return ApiForbiddenArtifactVersionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) ForbiddenArtifactVersionExecute(r ApiForbiddenArtifactVersionRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ForbiddenArtifactVersion")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=ForbiddenArtifactVersion"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.forbiddenArtifactVersionRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyArtifactCreditRequest struct {
	ctx                         context.Context
	ApiService                  *DefaultApiService
	authorization               *string
	action                      *string
	modifyArtifactCreditRequest *ModifyArtifactCreditRequest
}

// 认证信息
func (r ApiModifyArtifactCreditRequest) Authorization(authorization string) ApiModifyArtifactCreditRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyArtifactCreditRequest) Action(action string) ApiModifyArtifactCreditRequest {
	r.action = &action
	return r
}

func (r ApiModifyArtifactCreditRequest) ModifyArtifactCreditRequest(modifyArtifactCreditRequest ModifyArtifactCreditRequest) ApiModifyArtifactCreditRequest {
	r.modifyArtifactCreditRequest = &modifyArtifactCreditRequest
	return r
}

func (r ApiModifyArtifactCreditRequest) Execute() (*ModifyArtifactCredit200Response, *http.Response, error) {
	return r.ApiService.ModifyArtifactCreditExecute(r)
}

/*
ModifyArtifactCredit 制品授信清单修改

✨ 制品授信清单修改

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyArtifactCreditRequest
*/
func (a *DefaultApiService) ModifyArtifactCredit(ctx context.Context) ApiModifyArtifactCreditRequest {
	return ApiModifyArtifactCreditRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModifyArtifactCredit200Response
func (a *DefaultApiService) ModifyArtifactCreditExecute(r ApiModifyArtifactCreditRequest) (*ModifyArtifactCredit200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModifyArtifactCredit200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyArtifactCredit")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=ModifyArtifactCredit"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyArtifactCreditRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyArtifactPropertiesRequest struct {
	ctx                             context.Context
	ApiService                      *DefaultApiService
	authorization                   *string
	action                          *string
	modifyArtifactPropertiesRequest *ModifyArtifactPropertiesRequest
}

// 认证信息
func (r ApiModifyArtifactPropertiesRequest) Authorization(authorization string) ApiModifyArtifactPropertiesRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyArtifactPropertiesRequest) Action(action string) ApiModifyArtifactPropertiesRequest {
	r.action = &action
	return r
}

func (r ApiModifyArtifactPropertiesRequest) ModifyArtifactPropertiesRequest(modifyArtifactPropertiesRequest ModifyArtifactPropertiesRequest) ApiModifyArtifactPropertiesRequest {
	r.modifyArtifactPropertiesRequest = &modifyArtifactPropertiesRequest
	return r
}

func (r ApiModifyArtifactPropertiesRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.ModifyArtifactPropertiesExecute(r)
}

/*
ModifyArtifactProperties 制品属性修改

✨ 指定版本制品的制品属性修改

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyArtifactPropertiesRequest
*/
func (a *DefaultApiService) ModifyArtifactProperties(ctx context.Context) ApiModifyArtifactPropertiesRequest {
	return ApiModifyArtifactPropertiesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) ModifyArtifactPropertiesExecute(r ApiModifyArtifactPropertiesRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyArtifactProperties")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=ModifyArtifactProperties"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyArtifactPropertiesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyBranchProtectionRequest struct {
	ctx                           context.Context
	ApiService                    *DefaultApiService
	authorization                 *string
	action                        *string
	modifyBranchProtectionRequest *ModifyBranchProtectionRequest
}

// 认证信息
func (r ApiModifyBranchProtectionRequest) Authorization(authorization string) ApiModifyBranchProtectionRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyBranchProtectionRequest) Action(action string) ApiModifyBranchProtectionRequest {
	r.action = &action
	return r
}

func (r ApiModifyBranchProtectionRequest) ModifyBranchProtectionRequest(modifyBranchProtectionRequest ModifyBranchProtectionRequest) ApiModifyBranchProtectionRequest {
	r.modifyBranchProtectionRequest = &modifyBranchProtectionRequest
	return r
}

func (r ApiModifyBranchProtectionRequest) Execute() (*ModifyBranchProtection200Response, *http.Response, error) {
	return r.ApiService.ModifyBranchProtectionExecute(r)
}

/*
ModifyBranchProtection 仓库设置-修改保护分支规则相关信息

✨ 修改保护分支规则相关信息

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyBranchProtectionRequest
*/
func (a *DefaultApiService) ModifyBranchProtection(ctx context.Context) ApiModifyBranchProtectionRequest {
	return ApiModifyBranchProtectionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModifyBranchProtection200Response
func (a *DefaultApiService) ModifyBranchProtectionExecute(r ApiModifyBranchProtectionRequest) (*ModifyBranchProtection200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModifyBranchProtection200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyBranchProtection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ModifyBranchProtection"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyBranchProtectionRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyBranchProtectionMemberPermissionRequest struct {
	ctx                                           context.Context
	ApiService                                    *DefaultApiService
	authorization                                 *string
	action                                        *string
	modifyBranchProtectionMemberPermissionRequest *ModifyBranchProtectionMemberPermissionRequest
}

// 认证信息
func (r ApiModifyBranchProtectionMemberPermissionRequest) Authorization(authorization string) ApiModifyBranchProtectionMemberPermissionRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyBranchProtectionMemberPermissionRequest) Action(action string) ApiModifyBranchProtectionMemberPermissionRequest {
	r.action = &action
	return r
}

func (r ApiModifyBranchProtectionMemberPermissionRequest) ModifyBranchProtectionMemberPermissionRequest(modifyBranchProtectionMemberPermissionRequest ModifyBranchProtectionMemberPermissionRequest) ApiModifyBranchProtectionMemberPermissionRequest {
	r.modifyBranchProtectionMemberPermissionRequest = &modifyBranchProtectionMemberPermissionRequest
	return r
}

func (r ApiModifyBranchProtectionMemberPermissionRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.ModifyBranchProtectionMemberPermissionExecute(r)
}

/*
ModifyBranchProtectionMemberPermission 仓库设置-更改保护分支管理员权限

✨ 更改保护分支管理员权限

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyBranchProtectionMemberPermissionRequest
*/
func (a *DefaultApiService) ModifyBranchProtectionMemberPermission(ctx context.Context) ApiModifyBranchProtectionMemberPermissionRequest {
	return ApiModifyBranchProtectionMemberPermissionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) ModifyBranchProtectionMemberPermissionExecute(r ApiModifyBranchProtectionMemberPermissionRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyBranchProtectionMemberPermission")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ModifyBranchProtectionMemberPermission"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyBranchProtectionMemberPermissionRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyCdCloudAccountRequest struct {
	ctx                         context.Context
	ApiService                  *DefaultApiService
	authorization               *string
	action                      *string
	modifyCdCloudAccountRequest *ModifyCdCloudAccountRequest
}

// 认证信息
func (r ApiModifyCdCloudAccountRequest) Authorization(authorization string) ApiModifyCdCloudAccountRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyCdCloudAccountRequest) Action(action string) ApiModifyCdCloudAccountRequest {
	r.action = &action
	return r
}

func (r ApiModifyCdCloudAccountRequest) ModifyCdCloudAccountRequest(modifyCdCloudAccountRequest ModifyCdCloudAccountRequest) ApiModifyCdCloudAccountRequest {
	r.modifyCdCloudAccountRequest = &modifyCdCloudAccountRequest
	return r
}

func (r ApiModifyCdCloudAccountRequest) Execute() (*ModifyCdCloudAccount200Response, *http.Response, error) {
	return r.ApiService.ModifyCdCloudAccountExecute(r)
}

/*
ModifyCdCloudAccount CD 云账号更新

✨ CD 云账号更新

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyCdCloudAccountRequest
*/
func (a *DefaultApiService) ModifyCdCloudAccount(ctx context.Context) ApiModifyCdCloudAccountRequest {
	return ApiModifyCdCloudAccountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModifyCdCloudAccount200Response
func (a *DefaultApiService) ModifyCdCloudAccountExecute(r ApiModifyCdCloudAccountRequest) (*ModifyCdCloudAccount200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModifyCdCloudAccount200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyCdCloudAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=ModifyCdCloudAccount"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyCdCloudAccountRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyCdHostServerGroupRequest struct {
	ctx                            context.Context
	ApiService                     *DefaultApiService
	authorization                  *string
	action                         *string
	modifyCdHostServerGroupRequest *ModifyCdHostServerGroupRequest
}

// 认证信息
func (r ApiModifyCdHostServerGroupRequest) Authorization(authorization string) ApiModifyCdHostServerGroupRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyCdHostServerGroupRequest) Action(action string) ApiModifyCdHostServerGroupRequest {
	r.action = &action
	return r
}

func (r ApiModifyCdHostServerGroupRequest) ModifyCdHostServerGroupRequest(modifyCdHostServerGroupRequest ModifyCdHostServerGroupRequest) ApiModifyCdHostServerGroupRequest {
	r.modifyCdHostServerGroupRequest = &modifyCdHostServerGroupRequest
	return r
}

func (r ApiModifyCdHostServerGroupRequest) Execute() (*ModifyCdHostServerGroup200Response, *http.Response, error) {
	return r.ApiService.ModifyCdHostServerGroupExecute(r)
}

/*
ModifyCdHostServerGroup CD 主机组修改

✨ CD 主机组修改

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyCdHostServerGroupRequest
*/
func (a *DefaultApiService) ModifyCdHostServerGroup(ctx context.Context) ApiModifyCdHostServerGroupRequest {
	return ApiModifyCdHostServerGroupRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModifyCdHostServerGroup200Response
func (a *DefaultApiService) ModifyCdHostServerGroupExecute(r ApiModifyCdHostServerGroupRequest) (*ModifyCdHostServerGroup200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModifyCdHostServerGroup200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyCdHostServerGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=ModifyCdHostServerGroup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyCdHostServerGroupRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyCdPipelineRequest struct {
	ctx                     context.Context
	ApiService              *DefaultApiService
	authorization           *string
	action                  *string
	modifyCdPipelineRequest *ModifyCdPipelineRequest
}

// 认证信息
func (r ApiModifyCdPipelineRequest) Authorization(authorization string) ApiModifyCdPipelineRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyCdPipelineRequest) Action(action string) ApiModifyCdPipelineRequest {
	r.action = &action
	return r
}

func (r ApiModifyCdPipelineRequest) ModifyCdPipelineRequest(modifyCdPipelineRequest ModifyCdPipelineRequest) ApiModifyCdPipelineRequest {
	r.modifyCdPipelineRequest = &modifyCdPipelineRequest
	return r
}

func (r ApiModifyCdPipelineRequest) Execute() (*ModifyCdPipeline200Response, *http.Response, error) {
	return r.ApiService.ModifyCdPipelineExecute(r)
}

/*
ModifyCdPipeline CD 部署流程修改

✨ CD 部署流程修改

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyCdPipelineRequest
*/
func (a *DefaultApiService) ModifyCdPipeline(ctx context.Context) ApiModifyCdPipelineRequest {
	return ApiModifyCdPipelineRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModifyCdPipeline200Response
func (a *DefaultApiService) ModifyCdPipelineExecute(r ApiModifyCdPipelineRequest) (*ModifyCdPipeline200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModifyCdPipeline200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyCdPipeline")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=ModifyCdPipeline"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyCdPipelineRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyChooseDepotSpecRequest struct {
	ctx                          context.Context
	ApiService                   *DefaultApiService
	authorization                *string
	action                       *string
	modifyChooseDepotSpecRequest *ModifyChooseDepotSpecRequest
}

// 认证信息
func (r ApiModifyChooseDepotSpecRequest) Authorization(authorization string) ApiModifyChooseDepotSpecRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyChooseDepotSpecRequest) Action(action string) ApiModifyChooseDepotSpecRequest {
	r.action = &action
	return r
}

func (r ApiModifyChooseDepotSpecRequest) ModifyChooseDepotSpecRequest(modifyChooseDepotSpecRequest ModifyChooseDepotSpecRequest) ApiModifyChooseDepotSpecRequest {
	r.modifyChooseDepotSpecRequest = &modifyChooseDepotSpecRequest
	return r
}

func (r ApiModifyChooseDepotSpecRequest) Execute() (*ModifyChooseDepotSpec200Response, *http.Response, error) {
	return r.ApiService.ModifyChooseDepotSpecExecute(r)
}

/*
ModifyChooseDepotSpec 仓库设置-使用、取消使用仓库规范

✨ 使用、取消使用仓库规范

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyChooseDepotSpecRequest
*/
func (a *DefaultApiService) ModifyChooseDepotSpec(ctx context.Context) ApiModifyChooseDepotSpecRequest {
	return ApiModifyChooseDepotSpecRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModifyChooseDepotSpec200Response
func (a *DefaultApiService) ModifyChooseDepotSpecExecute(r ApiModifyChooseDepotSpecRequest) (*ModifyChooseDepotSpec200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModifyChooseDepotSpec200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyChooseDepotSpec")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ModifyChooseDepotSpec"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyChooseDepotSpecRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyCloseMRRequest struct {
	ctx                  context.Context
	ApiService           *DefaultApiService
	authorization        *string
	action               *string
	modifyCloseMRRequest *ModifyCloseMRRequest
}

// 认证信息
func (r ApiModifyCloseMRRequest) Authorization(authorization string) ApiModifyCloseMRRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyCloseMRRequest) Action(action string) ApiModifyCloseMRRequest {
	r.action = &action
	return r
}

func (r ApiModifyCloseMRRequest) ModifyCloseMRRequest(modifyCloseMRRequest ModifyCloseMRRequest) ApiModifyCloseMRRequest {
	r.modifyCloseMRRequest = &modifyCloseMRRequest
	return r
}

func (r ApiModifyCloseMRRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.ModifyCloseMRExecute(r)
}

/*
ModifyCloseMR 合并请求-关闭合并请求

✨ 关闭合并请求

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyCloseMRRequest
*/
func (a *DefaultApiService) ModifyCloseMR(ctx context.Context) ApiModifyCloseMRRequest {
	return ApiModifyCloseMRRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) ModifyCloseMRExecute(r ApiModifyCloseMRRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyCloseMR")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ModifyCloseMR"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyCloseMRRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyCodingCIAgentEnableRequest struct {
	ctx                              context.Context
	ApiService                       *DefaultApiService
	authorization                    *string
	action                           *string
	modifyCodingCIAgentEnableRequest *ModifyCodingCIAgentEnableRequest
}

// 认证信息
func (r ApiModifyCodingCIAgentEnableRequest) Authorization(authorization string) ApiModifyCodingCIAgentEnableRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyCodingCIAgentEnableRequest) Action(action string) ApiModifyCodingCIAgentEnableRequest {
	r.action = &action
	return r
}

func (r ApiModifyCodingCIAgentEnableRequest) ModifyCodingCIAgentEnableRequest(modifyCodingCIAgentEnableRequest ModifyCodingCIAgentEnableRequest) ApiModifyCodingCIAgentEnableRequest {
	r.modifyCodingCIAgentEnableRequest = &modifyCodingCIAgentEnableRequest
	return r
}

func (r ApiModifyCodingCIAgentEnableRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.ModifyCodingCIAgentEnableExecute(r)
}

/*
ModifyCodingCIAgentEnable 自定义构建节点启用、禁用

✨ 自定义构建节点启用、禁用

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyCodingCIAgentEnableRequest
*/
func (a *DefaultApiService) ModifyCodingCIAgentEnable(ctx context.Context) ApiModifyCodingCIAgentEnableRequest {
	return ApiModifyCodingCIAgentEnableRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) ModifyCodingCIAgentEnableExecute(r ApiModifyCodingCIAgentEnableRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyCodingCIAgentEnable")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=ModifyCodingCIAgentEnable"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyCodingCIAgentEnableRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyCodingCIJobRequest struct {
	ctx                      context.Context
	ApiService               *DefaultApiService
	authorization            *string
	action                   *string
	modifyCodingCIJobRequest *ModifyCodingCIJobRequest
}

// 认证信息
func (r ApiModifyCodingCIJobRequest) Authorization(authorization string) ApiModifyCodingCIJobRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyCodingCIJobRequest) Action(action string) ApiModifyCodingCIJobRequest {
	r.action = &action
	return r
}

func (r ApiModifyCodingCIJobRequest) ModifyCodingCIJobRequest(modifyCodingCIJobRequest ModifyCodingCIJobRequest) ApiModifyCodingCIJobRequest {
	r.modifyCodingCIJobRequest = &modifyCodingCIJobRequest
	return r
}

func (r ApiModifyCodingCIJobRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.ModifyCodingCIJobExecute(r)
}

/*
ModifyCodingCIJob 构建计划修改

✨ 构建计划修改

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyCodingCIJobRequest
*/
func (a *DefaultApiService) ModifyCodingCIJob(ctx context.Context) ApiModifyCodingCIJobRequest {
	return ApiModifyCodingCIJobRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) ModifyCodingCIJobExecute(r ApiModifyCodingCIJobRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyCodingCIJob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=ModifyCodingCIJob"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyCodingCIJobRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyDefaultBranchRequest struct {
	ctx                        context.Context
	ApiService                 *DefaultApiService
	authorization              *string
	action                     *string
	modifyDefaultBranchRequest *ModifyDefaultBranchRequest
}

// 认证信息
func (r ApiModifyDefaultBranchRequest) Authorization(authorization string) ApiModifyDefaultBranchRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyDefaultBranchRequest) Action(action string) ApiModifyDefaultBranchRequest {
	r.action = &action
	return r
}

func (r ApiModifyDefaultBranchRequest) ModifyDefaultBranchRequest(modifyDefaultBranchRequest ModifyDefaultBranchRequest) ApiModifyDefaultBranchRequest {
	r.modifyDefaultBranchRequest = &modifyDefaultBranchRequest
	return r
}

func (r ApiModifyDefaultBranchRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.ModifyDefaultBranchExecute(r)
}

/*
ModifyDefaultBranch 仓库设置-修改仓库默认分支

✨ 修改仓库默认分支

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyDefaultBranchRequest
*/
func (a *DefaultApiService) ModifyDefaultBranch(ctx context.Context) ApiModifyDefaultBranchRequest {
	return ApiModifyDefaultBranchRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) ModifyDefaultBranchExecute(r ApiModifyDefaultBranchRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyDefaultBranch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ModifyDefaultBranch"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyDefaultBranchRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyDefectRelatedRequirementRequest struct {
	ctx                                   context.Context
	ApiService                            *DefaultApiService
	authorization                         *string
	action                                *string
	modifyDefectRelatedRequirementRequest *ModifyDefectRelatedRequirementRequest
}

// 认证信息
func (r ApiModifyDefectRelatedRequirementRequest) Authorization(authorization string) ApiModifyDefectRelatedRequirementRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyDefectRelatedRequirementRequest) Action(action string) ApiModifyDefectRelatedRequirementRequest {
	r.action = &action
	return r
}

func (r ApiModifyDefectRelatedRequirementRequest) ModifyDefectRelatedRequirementRequest(modifyDefectRelatedRequirementRequest ModifyDefectRelatedRequirementRequest) ApiModifyDefectRelatedRequirementRequest {
	r.modifyDefectRelatedRequirementRequest = &modifyDefectRelatedRequirementRequest
	return r
}

func (r ApiModifyDefectRelatedRequirementRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.ModifyDefectRelatedRequirementExecute(r)
}

/*
ModifyDefectRelatedRequirement 缺陷所属的需求修改

✨ 修改缺陷所属的需求

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyDefectRelatedRequirementRequest
*/
func (a *DefaultApiService) ModifyDefectRelatedRequirement(ctx context.Context) ApiModifyDefectRelatedRequirementRequest {
	return ApiModifyDefectRelatedRequirementRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) ModifyDefectRelatedRequirementExecute(r ApiModifyDefectRelatedRequirementRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyDefectRelatedRequirement")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=ModifyDefectRelatedRequirement"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyDefectRelatedRequirementRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyDepartmentRequest struct {
	ctx                     context.Context
	ApiService              *DefaultApiService
	authorization           *string
	action                  *string
	modifyDepartmentRequest *ModifyDepartmentRequest
}

// 认证信息
func (r ApiModifyDepartmentRequest) Authorization(authorization string) ApiModifyDepartmentRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyDepartmentRequest) Action(action string) ApiModifyDepartmentRequest {
	r.action = &action
	return r
}

func (r ApiModifyDepartmentRequest) ModifyDepartmentRequest(modifyDepartmentRequest ModifyDepartmentRequest) ApiModifyDepartmentRequest {
	r.modifyDepartmentRequest = &modifyDepartmentRequest
	return r
}

func (r ApiModifyDepartmentRequest) Execute() (*ModifyDepartment200Response, *http.Response, error) {
	return r.ApiService.ModifyDepartmentExecute(r)
}

/*
ModifyDepartment 部门信息修改

✨ 修改部门信息(部门名，移动位置)

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyDepartmentRequest
*/
func (a *DefaultApiService) ModifyDepartment(ctx context.Context) ApiModifyDepartmentRequest {
	return ApiModifyDepartmentRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModifyDepartment200Response
func (a *DefaultApiService) ModifyDepartmentExecute(r ApiModifyDepartmentRequest) (*ModifyDepartment200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModifyDepartment200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyDepartment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=ModifyDepartment"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyDepartmentRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyDepartmentAssigneeRequest struct {
	ctx                             context.Context
	ApiService                      *DefaultApiService
	authorization                   *string
	action                          *string
	modifyDepartmentAssigneeRequest *ModifyDepartmentAssigneeRequest
}

// 认证信息
func (r ApiModifyDepartmentAssigneeRequest) Authorization(authorization string) ApiModifyDepartmentAssigneeRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyDepartmentAssigneeRequest) Action(action string) ApiModifyDepartmentAssigneeRequest {
	r.action = &action
	return r
}

func (r ApiModifyDepartmentAssigneeRequest) ModifyDepartmentAssigneeRequest(modifyDepartmentAssigneeRequest ModifyDepartmentAssigneeRequest) ApiModifyDepartmentAssigneeRequest {
	r.modifyDepartmentAssigneeRequest = &modifyDepartmentAssigneeRequest
	return r
}

func (r ApiModifyDepartmentAssigneeRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.ModifyDepartmentAssigneeExecute(r)
}

/*
ModifyDepartmentAssignee 部门负责人管理

✨ 部门负责人管理

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyDepartmentAssigneeRequest
*/
func (a *DefaultApiService) ModifyDepartmentAssignee(ctx context.Context) ApiModifyDepartmentAssigneeRequest {
	return ApiModifyDepartmentAssigneeRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) ModifyDepartmentAssigneeExecute(r ApiModifyDepartmentAssigneeRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyDepartmentAssignee")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=ModifyDepartmentAssignee"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyDepartmentAssigneeRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyDepartmentMemberRequest struct {
	ctx                           context.Context
	ApiService                    *DefaultApiService
	authorization                 *string
	action                        *string
	modifyDepartmentMemberRequest *ModifyDepartmentMemberRequest
}

// 认证信息
func (r ApiModifyDepartmentMemberRequest) Authorization(authorization string) ApiModifyDepartmentMemberRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyDepartmentMemberRequest) Action(action string) ApiModifyDepartmentMemberRequest {
	r.action = &action
	return r
}

func (r ApiModifyDepartmentMemberRequest) ModifyDepartmentMemberRequest(modifyDepartmentMemberRequest ModifyDepartmentMemberRequest) ApiModifyDepartmentMemberRequest {
	r.modifyDepartmentMemberRequest = &modifyDepartmentMemberRequest
	return r
}

func (r ApiModifyDepartmentMemberRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.ModifyDepartmentMemberExecute(r)
}

/*
ModifyDepartmentMember 部门成员管理

✨ 部门成员管理

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyDepartmentMemberRequest
*/
func (a *DefaultApiService) ModifyDepartmentMember(ctx context.Context) ApiModifyDepartmentMemberRequest {
	return ApiModifyDepartmentMemberRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) ModifyDepartmentMemberExecute(r ApiModifyDepartmentMemberRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyDepartmentMember")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=ModifyDepartmentMember"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyDepartmentMemberRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyDepotDescriptionRequest struct {
	ctx                           context.Context
	ApiService                    *DefaultApiService
	authorization                 *string
	action                        *string
	modifyDepotDescriptionRequest *ModifyDepotDescriptionRequest
}

// 认证信息
func (r ApiModifyDepotDescriptionRequest) Authorization(authorization string) ApiModifyDepotDescriptionRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyDepotDescriptionRequest) Action(action string) ApiModifyDepotDescriptionRequest {
	r.action = &action
	return r
}

func (r ApiModifyDepotDescriptionRequest) ModifyDepotDescriptionRequest(modifyDepotDescriptionRequest ModifyDepotDescriptionRequest) ApiModifyDepotDescriptionRequest {
	r.modifyDepotDescriptionRequest = &modifyDepotDescriptionRequest
	return r
}

func (r ApiModifyDepotDescriptionRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.ModifyDepotDescriptionExecute(r)
}

/*
ModifyDepotDescription 仓库信息-修改仓库描述

✨ 修改仓库描述

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyDepotDescriptionRequest
*/
func (a *DefaultApiService) ModifyDepotDescription(ctx context.Context) ApiModifyDepotDescriptionRequest {
	return ApiModifyDepotDescriptionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) ModifyDepotDescriptionExecute(r ApiModifyDepotDescriptionRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyDepotDescription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ModifyDepotDescription"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyDepotDescriptionRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyDepotFilePushRuleRequest struct {
	ctx                            context.Context
	ApiService                     *DefaultApiService
	authorization                  *string
	action                         *string
	modifyDepotFilePushRuleRequest *ModifyDepotFilePushRuleRequest
}

// 认证信息
func (r ApiModifyDepotFilePushRuleRequest) Authorization(authorization string) ApiModifyDepotFilePushRuleRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyDepotFilePushRuleRequest) Action(action string) ApiModifyDepotFilePushRuleRequest {
	r.action = &action
	return r
}

func (r ApiModifyDepotFilePushRuleRequest) ModifyDepotFilePushRuleRequest(modifyDepotFilePushRuleRequest ModifyDepotFilePushRuleRequest) ApiModifyDepotFilePushRuleRequest {
	r.modifyDepotFilePushRuleRequest = &modifyDepotFilePushRuleRequest
	return r
}

func (r ApiModifyDepotFilePushRuleRequest) Execute() (*ModifyDepotFilePushRule200Response, *http.Response, error) {
	return r.ApiService.ModifyDepotFilePushRuleExecute(r)
}

/*
ModifyDepotFilePushRule 仓库设置-修改git仓库文件推送规则

✨ 修改 git 仓库文件推送规则

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyDepotFilePushRuleRequest
*/
func (a *DefaultApiService) ModifyDepotFilePushRule(ctx context.Context) ApiModifyDepotFilePushRuleRequest {
	return ApiModifyDepotFilePushRuleRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModifyDepotFilePushRule200Response
func (a *DefaultApiService) ModifyDepotFilePushRuleExecute(r ApiModifyDepotFilePushRuleRequest) (*ModifyDepotFilePushRule200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModifyDepotFilePushRule200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyDepotFilePushRule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ModifyDepotFilePushRule"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyDepotFilePushRuleRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyDepotFilePushRuleDenyPrivilegeRequest struct {
	ctx                                         context.Context
	ApiService                                  *DefaultApiService
	authorization                               *string
	action                                      *string
	modifyDepotFilePushRuleDenyPrivilegeRequest *ModifyDepotFilePushRuleDenyPrivilegeRequest
}

// 认证信息
func (r ApiModifyDepotFilePushRuleDenyPrivilegeRequest) Authorization(authorization string) ApiModifyDepotFilePushRuleDenyPrivilegeRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyDepotFilePushRuleDenyPrivilegeRequest) Action(action string) ApiModifyDepotFilePushRuleDenyPrivilegeRequest {
	r.action = &action
	return r
}

func (r ApiModifyDepotFilePushRuleDenyPrivilegeRequest) ModifyDepotFilePushRuleDenyPrivilegeRequest(modifyDepotFilePushRuleDenyPrivilegeRequest ModifyDepotFilePushRuleDenyPrivilegeRequest) ApiModifyDepotFilePushRuleDenyPrivilegeRequest {
	r.modifyDepotFilePushRuleDenyPrivilegeRequest = &modifyDepotFilePushRuleDenyPrivilegeRequest
	return r
}

func (r ApiModifyDepotFilePushRuleDenyPrivilegeRequest) Execute() (*ModifyDepotFilePushRuleDenyPrivilege200Response, *http.Response, error) {
	return r.ApiService.ModifyDepotFilePushRuleDenyPrivilegeExecute(r)
}

/*
ModifyDepotFilePushRuleDenyPrivilege 仓库设置-修改 git 仓库特权者文件推送权限

✨ 修改 git 仓库特权者文件推送权限

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyDepotFilePushRuleDenyPrivilegeRequest
*/
func (a *DefaultApiService) ModifyDepotFilePushRuleDenyPrivilege(ctx context.Context) ApiModifyDepotFilePushRuleDenyPrivilegeRequest {
	return ApiModifyDepotFilePushRuleDenyPrivilegeRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModifyDepotFilePushRuleDenyPrivilege200Response
func (a *DefaultApiService) ModifyDepotFilePushRuleDenyPrivilegeExecute(r ApiModifyDepotFilePushRuleDenyPrivilegeRequest) (*ModifyDepotFilePushRuleDenyPrivilege200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModifyDepotFilePushRuleDenyPrivilege200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyDepotFilePushRuleDenyPrivilege")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ModifyDepotFilePushRuleDenyPrivilege"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyDepotFilePushRuleDenyPrivilegeRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyDepotLevelDepotSpecRequest struct {
	ctx                              context.Context
	ApiService                       *DefaultApiService
	authorization                    *string
	action                           *string
	modifyDepotLevelDepotSpecRequest *ModifyDepotLevelDepotSpecRequest
}

// 认证信息
func (r ApiModifyDepotLevelDepotSpecRequest) Authorization(authorization string) ApiModifyDepotLevelDepotSpecRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyDepotLevelDepotSpecRequest) Action(action string) ApiModifyDepotLevelDepotSpecRequest {
	r.action = &action
	return r
}

func (r ApiModifyDepotLevelDepotSpecRequest) ModifyDepotLevelDepotSpecRequest(modifyDepotLevelDepotSpecRequest ModifyDepotLevelDepotSpecRequest) ApiModifyDepotLevelDepotSpecRequest {
	r.modifyDepotLevelDepotSpecRequest = &modifyDepotLevelDepotSpecRequest
	return r
}

func (r ApiModifyDepotLevelDepotSpecRequest) Execute() (*ModifyDepotLevelDepotSpec200Response, *http.Response, error) {
	return r.ApiService.ModifyDepotLevelDepotSpecExecute(r)
}

/*
ModifyDepotLevelDepotSpec 仓库设置-修改、新增仓库级别的仓库规范

✨ 修改、新增仓库级别的仓库规范

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyDepotLevelDepotSpecRequest
*/
func (a *DefaultApiService) ModifyDepotLevelDepotSpec(ctx context.Context) ApiModifyDepotLevelDepotSpecRequest {
	return ApiModifyDepotLevelDepotSpecRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModifyDepotLevelDepotSpec200Response
func (a *DefaultApiService) ModifyDepotLevelDepotSpecExecute(r ApiModifyDepotLevelDepotSpecRequest) (*ModifyDepotLevelDepotSpec200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModifyDepotLevelDepotSpec200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyDepotLevelDepotSpec")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ModifyDepotLevelDepotSpec"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyDepotLevelDepotSpecRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyDepotNameRequest struct {
	ctx                    context.Context
	ApiService             *DefaultApiService
	authorization          *string
	action                 *string
	modifyDepotNameRequest *ModifyDepotNameRequest
}

// 认证信息
func (r ApiModifyDepotNameRequest) Authorization(authorization string) ApiModifyDepotNameRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyDepotNameRequest) Action(action string) ApiModifyDepotNameRequest {
	r.action = &action
	return r
}

func (r ApiModifyDepotNameRequest) ModifyDepotNameRequest(modifyDepotNameRequest ModifyDepotNameRequest) ApiModifyDepotNameRequest {
	r.modifyDepotNameRequest = &modifyDepotNameRequest
	return r
}

func (r ApiModifyDepotNameRequest) Execute() (*ModifyDepotName200Response, *http.Response, error) {
	return r.ApiService.ModifyDepotNameExecute(r)
}

/*
ModifyDepotName 仓库信息-修改仓库名称

✨ 修改仓库名称

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyDepotNameRequest
*/
func (a *DefaultApiService) ModifyDepotName(ctx context.Context) ApiModifyDepotNameRequest {
	return ApiModifyDepotNameRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModifyDepotName200Response
func (a *DefaultApiService) ModifyDepotNameExecute(r ApiModifyDepotNameRequest) (*ModifyDepotName200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModifyDepotName200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyDepotName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ModifyDepotName"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyDepotNameRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyDepotPushSettingRequest struct {
	ctx                           context.Context
	ApiService                    *DefaultApiService
	authorization                 *string
	action                        *string
	modifyDepotPushSettingRequest *ModifyDepotPushSettingRequest
}

// 认证信息
func (r ApiModifyDepotPushSettingRequest) Authorization(authorization string) ApiModifyDepotPushSettingRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyDepotPushSettingRequest) Action(action string) ApiModifyDepotPushSettingRequest {
	r.action = &action
	return r
}

func (r ApiModifyDepotPushSettingRequest) ModifyDepotPushSettingRequest(modifyDepotPushSettingRequest ModifyDepotPushSettingRequest) ApiModifyDepotPushSettingRequest {
	r.modifyDepotPushSettingRequest = &modifyDepotPushSettingRequest
	return r
}

func (r ApiModifyDepotPushSettingRequest) Execute() (*ModifyDepotPushSetting200Response, *http.Response, error) {
	return r.ApiService.ModifyDepotPushSettingExecute(r)
}

/*
ModifyDepotPushSetting 仓库设置-修改仓库推送设置

✨ 修改仓库推送设置

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyDepotPushSettingRequest
*/
func (a *DefaultApiService) ModifyDepotPushSetting(ctx context.Context) ApiModifyDepotPushSettingRequest {
	return ApiModifyDepotPushSettingRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModifyDepotPushSetting200Response
func (a *DefaultApiService) ModifyDepotPushSettingExecute(r ApiModifyDepotPushSettingRequest) (*ModifyDepotPushSetting200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModifyDepotPushSetting200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyDepotPushSetting")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ModifyDepotPushSetting"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyDepotPushSettingRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyDepotQuotaRequest struct {
	ctx                     context.Context
	ApiService              *DefaultApiService
	authorization           *string
	action                  *string
	modifyDepotQuotaRequest *ModifyDepotQuotaRequest
}

// 认证信息
func (r ApiModifyDepotQuotaRequest) Authorization(authorization string) ApiModifyDepotQuotaRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyDepotQuotaRequest) Action(action string) ApiModifyDepotQuotaRequest {
	r.action = &action
	return r
}

func (r ApiModifyDepotQuotaRequest) ModifyDepotQuotaRequest(modifyDepotQuotaRequest ModifyDepotQuotaRequest) ApiModifyDepotQuotaRequest {
	r.modifyDepotQuotaRequest = &modifyDepotQuotaRequest
	return r
}

func (r ApiModifyDepotQuotaRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.ModifyDepotQuotaExecute(r)
}

/*
ModifyDepotQuota 仓库信息-修改仓库容量

✨ 修改仓库容量

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyDepotQuotaRequest
*/
func (a *DefaultApiService) ModifyDepotQuota(ctx context.Context) ApiModifyDepotQuotaRequest {
	return ApiModifyDepotQuotaRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) ModifyDepotQuotaExecute(r ApiModifyDepotQuotaRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyDepotQuota")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ModifyDepotQuota"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyDepotQuotaRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyDepotSettingsRequest struct {
	ctx                        context.Context
	ApiService                 *DefaultApiService
	authorization              *string
	action                     *string
	modifyDepotSettingsRequest *ModifyDepotSettingsRequest
}

// 认证信息
func (r ApiModifyDepotSettingsRequest) Authorization(authorization string) ApiModifyDepotSettingsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyDepotSettingsRequest) Action(action string) ApiModifyDepotSettingsRequest {
	r.action = &action
	return r
}

func (r ApiModifyDepotSettingsRequest) ModifyDepotSettingsRequest(modifyDepotSettingsRequest ModifyDepotSettingsRequest) ApiModifyDepotSettingsRequest {
	r.modifyDepotSettingsRequest = &modifyDepotSettingsRequest
	return r
}

func (r ApiModifyDepotSettingsRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.ModifyDepotSettingsExecute(r)
}

/*
ModifyDepotSettings 仓库设置-修改仓库设置

✨ 修改仓库设置

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyDepotSettingsRequest
*/
func (a *DefaultApiService) ModifyDepotSettings(ctx context.Context) ApiModifyDepotSettingsRequest {
	return ApiModifyDepotSettingsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) ModifyDepotSettingsExecute(r ApiModifyDepotSettingsRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyDepotSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ModifyDepotSettings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyDepotSettingsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyDepotSharedSettingRequest struct {
	ctx                             context.Context
	ApiService                      *DefaultApiService
	authorization                   *string
	action                          *string
	modifyDepotSharedSettingRequest *ModifyDepotSharedSettingRequest
}

// 认证信息
func (r ApiModifyDepotSharedSettingRequest) Authorization(authorization string) ApiModifyDepotSharedSettingRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyDepotSharedSettingRequest) Action(action string) ApiModifyDepotSharedSettingRequest {
	r.action = &action
	return r
}

func (r ApiModifyDepotSharedSettingRequest) ModifyDepotSharedSettingRequest(modifyDepotSharedSettingRequest ModifyDepotSharedSettingRequest) ApiModifyDepotSharedSettingRequest {
	r.modifyDepotSharedSettingRequest = &modifyDepotSharedSettingRequest
	return r
}

func (r ApiModifyDepotSharedSettingRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.ModifyDepotSharedSettingExecute(r)
}

/*
ModifyDepotSharedSetting 仓库设置-修改仓库是否开源设置

✨ 修改仓库是否开源设置

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyDepotSharedSettingRequest
*/
func (a *DefaultApiService) ModifyDepotSharedSetting(ctx context.Context) ApiModifyDepotSharedSettingRequest {
	return ApiModifyDepotSharedSettingRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) ModifyDepotSharedSettingExecute(r ApiModifyDepotSharedSettingRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyDepotSharedSetting")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ModifyDepotSharedSetting"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyDepotSharedSettingRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyGitCherryPickRequest struct {
	ctx                        context.Context
	ApiService                 *DefaultApiService
	authorization              *string
	action                     *string
	modifyGitCherryPickRequest *ModifyGitCherryPickRequest
}

// 认证信息
func (r ApiModifyGitCherryPickRequest) Authorization(authorization string) ApiModifyGitCherryPickRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyGitCherryPickRequest) Action(action string) ApiModifyGitCherryPickRequest {
	r.action = &action
	return r
}

func (r ApiModifyGitCherryPickRequest) ModifyGitCherryPickRequest(modifyGitCherryPickRequest ModifyGitCherryPickRequest) ApiModifyGitCherryPickRequest {
	r.modifyGitCherryPickRequest = &modifyGitCherryPickRequest
	return r
}

func (r ApiModifyGitCherryPickRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.ModifyGitCherryPickExecute(r)
}

/*
ModifyGitCherryPick Git提交-将某次提交cherry-pick到指定分支

✨ 将某次提交cherry-pick到指定分支

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyGitCherryPickRequest
*/
func (a *DefaultApiService) ModifyGitCherryPick(ctx context.Context) ApiModifyGitCherryPickRequest {
	return ApiModifyGitCherryPickRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) ModifyGitCherryPickExecute(r ApiModifyGitCherryPickRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyGitCherryPick")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ModifyGitCherryPick"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyGitCherryPickRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyGitCommitRevertRequest struct {
	ctx                          context.Context
	ApiService                   *DefaultApiService
	authorization                *string
	action                       *string
	modifyGitCommitRevertRequest *ModifyGitCommitRevertRequest
}

// 认证信息
func (r ApiModifyGitCommitRevertRequest) Authorization(authorization string) ApiModifyGitCommitRevertRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyGitCommitRevertRequest) Action(action string) ApiModifyGitCommitRevertRequest {
	r.action = &action
	return r
}

func (r ApiModifyGitCommitRevertRequest) ModifyGitCommitRevertRequest(modifyGitCommitRevertRequest ModifyGitCommitRevertRequest) ApiModifyGitCommitRevertRequest {
	r.modifyGitCommitRevertRequest = &modifyGitCommitRevertRequest
	return r
}

func (r ApiModifyGitCommitRevertRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.ModifyGitCommitRevertExecute(r)
}

/*
ModifyGitCommitRevert Git提交-还原某次提交

✨ 还原某次提交

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyGitCommitRevertRequest
*/
func (a *DefaultApiService) ModifyGitCommitRevert(ctx context.Context) ApiModifyGitCommitRevertRequest {
	return ApiModifyGitCommitRevertRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) ModifyGitCommitRevertExecute(r ApiModifyGitCommitRevertRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyGitCommitRevert")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ModifyGitCommitRevert"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyGitCommitRevertRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyGitCommitStatusRequest struct {
	ctx                          context.Context
	ApiService                   *DefaultApiService
	authorization                *string
	action                       *string
	modifyGitCommitStatusRequest *ModifyGitCommitStatusRequest
}

// 认证信息
func (r ApiModifyGitCommitStatusRequest) Authorization(authorization string) ApiModifyGitCommitStatusRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyGitCommitStatusRequest) Action(action string) ApiModifyGitCommitStatusRequest {
	r.action = &action
	return r
}

func (r ApiModifyGitCommitStatusRequest) ModifyGitCommitStatusRequest(modifyGitCommitStatusRequest ModifyGitCommitStatusRequest) ApiModifyGitCommitStatusRequest {
	r.modifyGitCommitStatusRequest = &modifyGitCommitStatusRequest
	return r
}

func (r ApiModifyGitCommitStatusRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.ModifyGitCommitStatusExecute(r)
}

/*
ModifyGitCommitStatus Git提交-修改提交对应的流水线状态

✨ 修改提交对应的流水线状态

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyGitCommitStatusRequest
*/
func (a *DefaultApiService) ModifyGitCommitStatus(ctx context.Context) ApiModifyGitCommitStatusRequest {
	return ApiModifyGitCommitStatusRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) ModifyGitCommitStatusExecute(r ApiModifyGitCommitStatusRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyGitCommitStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ModifyGitCommitStatus"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyGitCommitStatusRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyGitDepotArchiveRequest struct {
	ctx                          context.Context
	ApiService                   *DefaultApiService
	authorization                *string
	action                       *string
	modifyGitDepotArchiveRequest *ModifyGitDepotArchiveRequest
}

// 认证信息
func (r ApiModifyGitDepotArchiveRequest) Authorization(authorization string) ApiModifyGitDepotArchiveRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyGitDepotArchiveRequest) Action(action string) ApiModifyGitDepotArchiveRequest {
	r.action = &action
	return r
}

func (r ApiModifyGitDepotArchiveRequest) ModifyGitDepotArchiveRequest(modifyGitDepotArchiveRequest ModifyGitDepotArchiveRequest) ApiModifyGitDepotArchiveRequest {
	r.modifyGitDepotArchiveRequest = &modifyGitDepotArchiveRequest
	return r
}

func (r ApiModifyGitDepotArchiveRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.ModifyGitDepotArchiveExecute(r)
}

/*
ModifyGitDepotArchive 仓库设置-仓库归档

✨ 仓库归档

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyGitDepotArchiveRequest
*/
func (a *DefaultApiService) ModifyGitDepotArchive(ctx context.Context) ApiModifyGitDepotArchiveRequest {
	return ApiModifyGitDepotArchiveRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) ModifyGitDepotArchiveExecute(r ApiModifyGitDepotArchiveRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyGitDepotArchive")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ModifyGitDepotArchive"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyGitDepotArchiveRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyGitDepotUnarchiveRequest struct {
	ctx                            context.Context
	ApiService                     *DefaultApiService
	authorization                  *string
	action                         *string
	modifyGitDepotUnarchiveRequest *ModifyGitDepotUnarchiveRequest
}

// 认证信息
func (r ApiModifyGitDepotUnarchiveRequest) Authorization(authorization string) ApiModifyGitDepotUnarchiveRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyGitDepotUnarchiveRequest) Action(action string) ApiModifyGitDepotUnarchiveRequest {
	r.action = &action
	return r
}

func (r ApiModifyGitDepotUnarchiveRequest) ModifyGitDepotUnarchiveRequest(modifyGitDepotUnarchiveRequest ModifyGitDepotUnarchiveRequest) ApiModifyGitDepotUnarchiveRequest {
	r.modifyGitDepotUnarchiveRequest = &modifyGitDepotUnarchiveRequest
	return r
}

func (r ApiModifyGitDepotUnarchiveRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.ModifyGitDepotUnarchiveExecute(r)
}

/*
ModifyGitDepotUnarchive 仓库设置-仓库解除归档

✨ 仓库解除归档

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyGitDepotUnarchiveRequest
*/
func (a *DefaultApiService) ModifyGitDepotUnarchive(ctx context.Context) ApiModifyGitDepotUnarchiveRequest {
	return ApiModifyGitDepotUnarchiveRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) ModifyGitDepotUnarchiveExecute(r ApiModifyGitDepotUnarchiveRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyGitDepotUnarchive")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ModifyGitDepotUnarchive"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyGitDepotUnarchiveRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyGitFilesRequest struct {
	ctx                   context.Context
	ApiService            *DefaultApiService
	authorization         *string
	action                *string
	modifyGitFilesRequest *ModifyGitFilesRequest
}

// 认证信息
func (r ApiModifyGitFilesRequest) Authorization(authorization string) ApiModifyGitFilesRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyGitFilesRequest) Action(action string) ApiModifyGitFilesRequest {
	r.action = &action
	return r
}

func (r ApiModifyGitFilesRequest) ModifyGitFilesRequest(modifyGitFilesRequest ModifyGitFilesRequest) ApiModifyGitFilesRequest {
	r.modifyGitFilesRequest = &modifyGitFilesRequest
	return r
}

func (r ApiModifyGitFilesRequest) Execute() (*ModifyGitFiles200Response, *http.Response, error) {
	return r.ApiService.ModifyGitFilesExecute(r)
}

/*
ModifyGitFiles Git提交-修改仓库某文件

✨ 修改仓库某文件

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyGitFilesRequest
*/
func (a *DefaultApiService) ModifyGitFiles(ctx context.Context) ApiModifyGitFilesRequest {
	return ApiModifyGitFilesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModifyGitFiles200Response
func (a *DefaultApiService) ModifyGitFilesExecute(r ApiModifyGitFilesRequest) (*ModifyGitFiles200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModifyGitFiles200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyGitFiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ModifyGitFiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyGitFilesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyGitMergeBranchRequest struct {
	ctx                         context.Context
	ApiService                  *DefaultApiService
	authorization               *string
	action                      *string
	modifyGitMergeBranchRequest *ModifyGitMergeBranchRequest
}

// 认证信息
func (r ApiModifyGitMergeBranchRequest) Authorization(authorization string) ApiModifyGitMergeBranchRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyGitMergeBranchRequest) Action(action string) ApiModifyGitMergeBranchRequest {
	r.action = &action
	return r
}

func (r ApiModifyGitMergeBranchRequest) ModifyGitMergeBranchRequest(modifyGitMergeBranchRequest ModifyGitMergeBranchRequest) ApiModifyGitMergeBranchRequest {
	r.modifyGitMergeBranchRequest = &modifyGitMergeBranchRequest
	return r
}

func (r ApiModifyGitMergeBranchRequest) Execute() (*ModifyGitMergeBranch200Response, *http.Response, error) {
	return r.ApiService.ModifyGitMergeBranchExecute(r)
}

/*
ModifyGitMergeBranch 合并请求-将源分支的改动合并到目标分支

✨ 将源分支的改动合并到目标分支

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyGitMergeBranchRequest
*/
func (a *DefaultApiService) ModifyGitMergeBranch(ctx context.Context) ApiModifyGitMergeBranchRequest {
	return ApiModifyGitMergeBranchRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModifyGitMergeBranch200Response
func (a *DefaultApiService) ModifyGitMergeBranchExecute(r ApiModifyGitMergeBranchRequest) (*ModifyGitMergeBranch200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModifyGitMergeBranch200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyGitMergeBranch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ModifyGitMergeBranch"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyGitMergeBranchRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyGitMergeRequestRequest struct {
	ctx                          context.Context
	ApiService                   *DefaultApiService
	authorization                *string
	action                       *string
	modifyGitMergeRequestRequest *ModifyGitMergeRequestRequest
}

// 认证信息
func (r ApiModifyGitMergeRequestRequest) Authorization(authorization string) ApiModifyGitMergeRequestRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyGitMergeRequestRequest) Action(action string) ApiModifyGitMergeRequestRequest {
	r.action = &action
	return r
}

func (r ApiModifyGitMergeRequestRequest) ModifyGitMergeRequestRequest(modifyGitMergeRequestRequest ModifyGitMergeRequestRequest) ApiModifyGitMergeRequestRequest {
	r.modifyGitMergeRequestRequest = &modifyGitMergeRequestRequest
	return r
}

func (r ApiModifyGitMergeRequestRequest) Execute() (*ModifyGitMergeRequest200Response, *http.Response, error) {
	return r.ApiService.ModifyGitMergeRequestExecute(r)
}

/*
ModifyGitMergeRequest 合并请求-修改合并请求的标题和描述信息

✨ 修改合并请求的标题和描述信息

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyGitMergeRequestRequest
*/
func (a *DefaultApiService) ModifyGitMergeRequest(ctx context.Context) ApiModifyGitMergeRequestRequest {
	return ApiModifyGitMergeRequestRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModifyGitMergeRequest200Response
func (a *DefaultApiService) ModifyGitMergeRequestExecute(r ApiModifyGitMergeRequestRequest) (*ModifyGitMergeRequest200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModifyGitMergeRequest200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyGitMergeRequest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ModifyGitMergeRequest"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyGitMergeRequestRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyGitMergeRequestRebaseRequest struct {
	ctx                                context.Context
	ApiService                         *DefaultApiService
	authorization                      *string
	action                             *string
	modifyGitMergeRequestRebaseRequest *ModifyGitMergeRequestRebaseRequest
}

// 认证信息
func (r ApiModifyGitMergeRequestRebaseRequest) Authorization(authorization string) ApiModifyGitMergeRequestRebaseRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyGitMergeRequestRebaseRequest) Action(action string) ApiModifyGitMergeRequestRebaseRequest {
	r.action = &action
	return r
}

func (r ApiModifyGitMergeRequestRebaseRequest) ModifyGitMergeRequestRebaseRequest(modifyGitMergeRequestRebaseRequest ModifyGitMergeRequestRebaseRequest) ApiModifyGitMergeRequestRebaseRequest {
	r.modifyGitMergeRequestRebaseRequest = &modifyGitMergeRequestRebaseRequest
	return r
}

func (r ApiModifyGitMergeRequestRebaseRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.ModifyGitMergeRequestRebaseExecute(r)
}

/*
ModifyGitMergeRequestRebase 合并请求-合并请求中的源分支进行rebase操作

✨ 合并请求中的源分支进行rebase操作

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyGitMergeRequestRebaseRequest
*/
func (a *DefaultApiService) ModifyGitMergeRequestRebase(ctx context.Context) ApiModifyGitMergeRequestRebaseRequest {
	return ApiModifyGitMergeRequestRebaseRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) ModifyGitMergeRequestRebaseExecute(r ApiModifyGitMergeRequestRebaseRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyGitMergeRequestRebase")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ModifyGitMergeRequestRebase"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyGitMergeRequestRebaseRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyGitRebaseRequest struct {
	ctx                    context.Context
	ApiService             *DefaultApiService
	authorization          *string
	action                 *string
	modifyGitRebaseRequest *ModifyGitRebaseRequest
}

// 认证信息
func (r ApiModifyGitRebaseRequest) Authorization(authorization string) ApiModifyGitRebaseRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyGitRebaseRequest) Action(action string) ApiModifyGitRebaseRequest {
	r.action = &action
	return r
}

func (r ApiModifyGitRebaseRequest) ModifyGitRebaseRequest(modifyGitRebaseRequest ModifyGitRebaseRequest) ApiModifyGitRebaseRequest {
	r.modifyGitRebaseRequest = &modifyGitRebaseRequest
	return r
}

func (r ApiModifyGitRebaseRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.ModifyGitRebaseExecute(r)
}

/*
ModifyGitRebase 仓库信息-git变基操作

✨ git变基操作

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyGitRebaseRequest
*/
func (a *DefaultApiService) ModifyGitRebase(ctx context.Context) ApiModifyGitRebaseRequest {
	return ApiModifyGitRebaseRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) ModifyGitRebaseExecute(r ApiModifyGitRebaseRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyGitRebase")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ModifyGitRebase"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyGitRebaseRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyGitReleaseRequest struct {
	ctx                     context.Context
	ApiService              *DefaultApiService
	authorization           *string
	action                  *string
	modifyGitReleaseRequest *ModifyGitReleaseRequest
}

// 认证信息
func (r ApiModifyGitReleaseRequest) Authorization(authorization string) ApiModifyGitReleaseRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyGitReleaseRequest) Action(action string) ApiModifyGitReleaseRequest {
	r.action = &action
	return r
}

func (r ApiModifyGitReleaseRequest) ModifyGitReleaseRequest(modifyGitReleaseRequest ModifyGitReleaseRequest) ApiModifyGitReleaseRequest {
	r.modifyGitReleaseRequest = &modifyGitReleaseRequest
	return r
}

func (r ApiModifyGitReleaseRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.ModifyGitReleaseExecute(r)
}

/*
ModifyGitRelease 版本信息-修改仓库版本信息

✨ 修改仓库版本信息

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyGitReleaseRequest
*/
func (a *DefaultApiService) ModifyGitRelease(ctx context.Context) ApiModifyGitReleaseRequest {
	return ApiModifyGitReleaseRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) ModifyGitReleaseExecute(r ApiModifyGitReleaseRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyGitRelease")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ModifyGitRelease"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyGitReleaseRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyGitTransferRequest struct {
	ctx                      context.Context
	ApiService               *DefaultApiService
	authorization            *string
	action                   *string
	modifyGitTransferRequest *ModifyGitTransferRequest
}

// 认证信息
func (r ApiModifyGitTransferRequest) Authorization(authorization string) ApiModifyGitTransferRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyGitTransferRequest) Action(action string) ApiModifyGitTransferRequest {
	r.action = &action
	return r
}

func (r ApiModifyGitTransferRequest) ModifyGitTransferRequest(modifyGitTransferRequest ModifyGitTransferRequest) ApiModifyGitTransferRequest {
	r.modifyGitTransferRequest = &modifyGitTransferRequest
	return r
}

func (r ApiModifyGitTransferRequest) Execute() (*ModifyGitTransfer200Response, *http.Response, error) {
	return r.ApiService.ModifyGitTransferExecute(r)
}

/*
ModifyGitTransfer 仓库信息-仓库转移至同团队下的其他项目中

✨ 仓库转移至同团队下的其他项目中

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyGitTransferRequest
*/
func (a *DefaultApiService) ModifyGitTransfer(ctx context.Context) ApiModifyGitTransferRequest {
	return ApiModifyGitTransferRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModifyGitTransfer200Response
func (a *DefaultApiService) ModifyGitTransferExecute(r ApiModifyGitTransferRequest) (*ModifyGitTransfer200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModifyGitTransfer200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyGitTransfer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ModifyGitTransfer"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyGitTransferRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyIssueRequest struct {
	ctx                context.Context
	ApiService         *DefaultApiService
	authorization      *string
	action             *string
	modifyIssueRequest *ModifyIssueRequest
}

// 认证信息
func (r ApiModifyIssueRequest) Authorization(authorization string) ApiModifyIssueRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyIssueRequest) Action(action string) ApiModifyIssueRequest {
	r.action = &action
	return r
}

func (r ApiModifyIssueRequest) ModifyIssueRequest(modifyIssueRequest ModifyIssueRequest) ApiModifyIssueRequest {
	r.modifyIssueRequest = &modifyIssueRequest
	return r
}

func (r ApiModifyIssueRequest) Execute() (*ModifyIssue200Response, *http.Response, error) {
	return r.ApiService.ModifyIssueExecute(r)
}

/*
ModifyIssue 事项修改

✨ 修改事项

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyIssueRequest
*/
func (a *DefaultApiService) ModifyIssue(ctx context.Context) ApiModifyIssueRequest {
	return ApiModifyIssueRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModifyIssue200Response
func (a *DefaultApiService) ModifyIssueExecute(r ApiModifyIssueRequest) (*ModifyIssue200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModifyIssue200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyIssue")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ModifyIssue"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyIssueRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyIssueCommentRequest struct {
	ctx                       context.Context
	ApiService                *DefaultApiService
	authorization             *string
	action                    *string
	modifyIssueCommentRequest *ModifyIssueCommentRequest
}

// 认证信息
func (r ApiModifyIssueCommentRequest) Authorization(authorization string) ApiModifyIssueCommentRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyIssueCommentRequest) Action(action string) ApiModifyIssueCommentRequest {
	r.action = &action
	return r
}

func (r ApiModifyIssueCommentRequest) ModifyIssueCommentRequest(modifyIssueCommentRequest ModifyIssueCommentRequest) ApiModifyIssueCommentRequest {
	r.modifyIssueCommentRequest = &modifyIssueCommentRequest
	return r
}

func (r ApiModifyIssueCommentRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.ModifyIssueCommentExecute(r)
}

/*
ModifyIssueComment 事项评论修改

✨ 修改事项评论

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyIssueCommentRequest
*/
func (a *DefaultApiService) ModifyIssueComment(ctx context.Context) ApiModifyIssueCommentRequest {
	return ApiModifyIssueCommentRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) ModifyIssueCommentExecute(r ApiModifyIssueCommentRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyIssueComment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=ModifyIssueComment"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyIssueCommentRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyIssueDescriptionRequest struct {
	ctx                           context.Context
	ApiService                    *DefaultApiService
	authorization                 *string
	action                        *string
	modifyIssueDescriptionRequest *ModifyIssueDescriptionRequest
}

// 认证信息
func (r ApiModifyIssueDescriptionRequest) Authorization(authorization string) ApiModifyIssueDescriptionRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyIssueDescriptionRequest) Action(action string) ApiModifyIssueDescriptionRequest {
	r.action = &action
	return r
}

func (r ApiModifyIssueDescriptionRequest) ModifyIssueDescriptionRequest(modifyIssueDescriptionRequest ModifyIssueDescriptionRequest) ApiModifyIssueDescriptionRequest {
	r.modifyIssueDescriptionRequest = &modifyIssueDescriptionRequest
	return r
}

func (r ApiModifyIssueDescriptionRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.ModifyIssueDescriptionExecute(r)
}

/*
ModifyIssueDescription 事项描述修改

✨ 修改事项描述

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyIssueDescriptionRequest
*/
func (a *DefaultApiService) ModifyIssueDescription(ctx context.Context) ApiModifyIssueDescriptionRequest {
	return ApiModifyIssueDescriptionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) ModifyIssueDescriptionExecute(r ApiModifyIssueDescriptionRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyIssueDescription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=ModifyIssueDescription"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyIssueDescriptionRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyIssueParentRequirementRequest struct {
	ctx                                 context.Context
	ApiService                          *DefaultApiService
	authorization                       *string
	action                              *string
	modifyIssueParentRequirementRequest *ModifyIssueParentRequirementRequest
}

// 认证信息
func (r ApiModifyIssueParentRequirementRequest) Authorization(authorization string) ApiModifyIssueParentRequirementRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyIssueParentRequirementRequest) Action(action string) ApiModifyIssueParentRequirementRequest {
	r.action = &action
	return r
}

func (r ApiModifyIssueParentRequirementRequest) ModifyIssueParentRequirementRequest(modifyIssueParentRequirementRequest ModifyIssueParentRequirementRequest) ApiModifyIssueParentRequirementRequest {
	r.modifyIssueParentRequirementRequest = &modifyIssueParentRequirementRequest
	return r
}

func (r ApiModifyIssueParentRequirementRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.ModifyIssueParentRequirementExecute(r)
}

/*
ModifyIssueParentRequirement 事项父需求修改

✨ 修改事项父需求

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyIssueParentRequirementRequest
*/
func (a *DefaultApiService) ModifyIssueParentRequirement(ctx context.Context) ApiModifyIssueParentRequirementRequest {
	return ApiModifyIssueParentRequirementRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) ModifyIssueParentRequirementExecute(r ApiModifyIssueParentRequirementRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyIssueParentRequirement")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=ModifyIssueParentRequirement"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyIssueParentRequirementRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyIterationRequest struct {
	ctx                    context.Context
	ApiService             *DefaultApiService
	authorization          *string
	action                 *string
	modifyIterationRequest *ModifyIterationRequest
}

// 认证信息
func (r ApiModifyIterationRequest) Authorization(authorization string) ApiModifyIterationRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyIterationRequest) Action(action string) ApiModifyIterationRequest {
	r.action = &action
	return r
}

func (r ApiModifyIterationRequest) ModifyIterationRequest(modifyIterationRequest ModifyIterationRequest) ApiModifyIterationRequest {
	r.modifyIterationRequest = &modifyIterationRequest
	return r
}

func (r ApiModifyIterationRequest) Execute() (*ModifyIteration200Response, *http.Response, error) {
	return r.ApiService.ModifyIterationExecute(r)
}

/*
ModifyIteration 迭代修改

✨ 修改迭代

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyIterationRequest
*/
func (a *DefaultApiService) ModifyIteration(ctx context.Context) ApiModifyIterationRequest {
	return ApiModifyIterationRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModifyIteration200Response
func (a *DefaultApiService) ModifyIterationExecute(r ApiModifyIterationRequest) (*ModifyIteration200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModifyIteration200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyIteration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=ModifyIteration"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyIterationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyMergeMRRequest struct {
	ctx                  context.Context
	ApiService           *DefaultApiService
	authorization        *string
	action               *string
	modifyMergeMRRequest *ModifyMergeMRRequest
}

// 认证信息
func (r ApiModifyMergeMRRequest) Authorization(authorization string) ApiModifyMergeMRRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyMergeMRRequest) Action(action string) ApiModifyMergeMRRequest {
	r.action = &action
	return r
}

func (r ApiModifyMergeMRRequest) ModifyMergeMRRequest(modifyMergeMRRequest ModifyMergeMRRequest) ApiModifyMergeMRRequest {
	r.modifyMergeMRRequest = &modifyMergeMRRequest
	return r
}

func (r ApiModifyMergeMRRequest) Execute() (*ModifyMergeMR200Response, *http.Response, error) {
	return r.ApiService.ModifyMergeMRExecute(r)
}

/*
ModifyMergeMR 合并信息-执行合并

✨ 执行合并

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyMergeMRRequest
*/
func (a *DefaultApiService) ModifyMergeMR(ctx context.Context) ApiModifyMergeMRRequest {
	return ApiModifyMergeMRRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModifyMergeMR200Response
func (a *DefaultApiService) ModifyMergeMRExecute(r ApiModifyMergeMRRequest) (*ModifyMergeMR200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModifyMergeMR200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyMergeMR")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ModifyMergeMR"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyMergeMRRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyMergeRequestBasicSettingsRequest struct {
	ctx                                    context.Context
	ApiService                             *DefaultApiService
	authorization                          *string
	action                                 *string
	modifyMergeRequestBasicSettingsRequest *ModifyMergeRequestBasicSettingsRequest
}

// 认证信息
func (r ApiModifyMergeRequestBasicSettingsRequest) Authorization(authorization string) ApiModifyMergeRequestBasicSettingsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyMergeRequestBasicSettingsRequest) Action(action string) ApiModifyMergeRequestBasicSettingsRequest {
	r.action = &action
	return r
}

func (r ApiModifyMergeRequestBasicSettingsRequest) ModifyMergeRequestBasicSettingsRequest(modifyMergeRequestBasicSettingsRequest ModifyMergeRequestBasicSettingsRequest) ApiModifyMergeRequestBasicSettingsRequest {
	r.modifyMergeRequestBasicSettingsRequest = &modifyMergeRequestBasicSettingsRequest
	return r
}

func (r ApiModifyMergeRequestBasicSettingsRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.ModifyMergeRequestBasicSettingsExecute(r)
}

/*
ModifyMergeRequestBasicSettings 仓库设置-修改合并请求基础设置

✨ 修改合并请求基础设置

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyMergeRequestBasicSettingsRequest
*/
func (a *DefaultApiService) ModifyMergeRequestBasicSettings(ctx context.Context) ApiModifyMergeRequestBasicSettingsRequest {
	return ApiModifyMergeRequestBasicSettingsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) ModifyMergeRequestBasicSettingsExecute(r ApiModifyMergeRequestBasicSettingsRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyMergeRequestBasicSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ModifyMergeRequestBasicSettings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyMergeRequestBasicSettingsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyMergeRequestMergeCommitMessageTemplateRequest struct {
	ctx                                                  context.Context
	ApiService                                           *DefaultApiService
	authorization                                        *string
	action                                               *string
	modifyMergeRequestSquashCommitMessageTemplateRequest *ModifyMergeRequestSquashCommitMessageTemplateRequest
}

// 认证信息
func (r ApiModifyMergeRequestMergeCommitMessageTemplateRequest) Authorization(authorization string) ApiModifyMergeRequestMergeCommitMessageTemplateRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyMergeRequestMergeCommitMessageTemplateRequest) Action(action string) ApiModifyMergeRequestMergeCommitMessageTemplateRequest {
	r.action = &action
	return r
}

func (r ApiModifyMergeRequestMergeCommitMessageTemplateRequest) ModifyMergeRequestSquashCommitMessageTemplateRequest(modifyMergeRequestSquashCommitMessageTemplateRequest ModifyMergeRequestSquashCommitMessageTemplateRequest) ApiModifyMergeRequestMergeCommitMessageTemplateRequest {
	r.modifyMergeRequestSquashCommitMessageTemplateRequest = &modifyMergeRequestSquashCommitMessageTemplateRequest
	return r
}

func (r ApiModifyMergeRequestMergeCommitMessageTemplateRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.ModifyMergeRequestMergeCommitMessageTemplateExecute(r)
}

/*
ModifyMergeRequestMergeCommitMessageTemplate 仓库设置-修改合并请求合并提交消息模版

✨ 修改合并请求合并提交消息模版

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyMergeRequestMergeCommitMessageTemplateRequest
*/
func (a *DefaultApiService) ModifyMergeRequestMergeCommitMessageTemplate(ctx context.Context) ApiModifyMergeRequestMergeCommitMessageTemplateRequest {
	return ApiModifyMergeRequestMergeCommitMessageTemplateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) ModifyMergeRequestMergeCommitMessageTemplateExecute(r ApiModifyMergeRequestMergeCommitMessageTemplateRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyMergeRequestMergeCommitMessageTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ModifyMergeRequestMergeCommitMessageTemplate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyMergeRequestSquashCommitMessageTemplateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyMergeRequestSquashCommitMessageTemplateRequest struct {
	ctx                                                  context.Context
	ApiService                                           *DefaultApiService
	authorization                                        *string
	action                                               *string
	modifyMergeRequestSquashCommitMessageTemplateRequest *ModifyMergeRequestSquashCommitMessageTemplateRequest
}

// 认证信息
func (r ApiModifyMergeRequestSquashCommitMessageTemplateRequest) Authorization(authorization string) ApiModifyMergeRequestSquashCommitMessageTemplateRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyMergeRequestSquashCommitMessageTemplateRequest) Action(action string) ApiModifyMergeRequestSquashCommitMessageTemplateRequest {
	r.action = &action
	return r
}

func (r ApiModifyMergeRequestSquashCommitMessageTemplateRequest) ModifyMergeRequestSquashCommitMessageTemplateRequest(modifyMergeRequestSquashCommitMessageTemplateRequest ModifyMergeRequestSquashCommitMessageTemplateRequest) ApiModifyMergeRequestSquashCommitMessageTemplateRequest {
	r.modifyMergeRequestSquashCommitMessageTemplateRequest = &modifyMergeRequestSquashCommitMessageTemplateRequest
	return r
}

func (r ApiModifyMergeRequestSquashCommitMessageTemplateRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.ModifyMergeRequestSquashCommitMessageTemplateExecute(r)
}

/*
ModifyMergeRequestSquashCommitMessageTemplate 仓库设置-修改合并请求合并压缩提交消息模版

✨ 修改合并请求合并压缩提交消息模版

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyMergeRequestSquashCommitMessageTemplateRequest
*/
func (a *DefaultApiService) ModifyMergeRequestSquashCommitMessageTemplate(ctx context.Context) ApiModifyMergeRequestSquashCommitMessageTemplateRequest {
	return ApiModifyMergeRequestSquashCommitMessageTemplateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) ModifyMergeRequestSquashCommitMessageTemplateExecute(r ApiModifyMergeRequestSquashCommitMessageTemplateRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyMergeRequestSquashCommitMessageTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ModifyMergeRequestSquashCommitMessageTemplate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyMergeRequestSquashCommitMessageTemplateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyPolicyRequest struct {
	ctx                 context.Context
	ApiService          *DefaultApiService
	authorization       *string
	action              *string
	modifyPolicyRequest *ModifyPolicyRequest
}

// 认证信息
func (r ApiModifyPolicyRequest) Authorization(authorization string) ApiModifyPolicyRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyPolicyRequest) Action(action string) ApiModifyPolicyRequest {
	r.action = &action
	return r
}

func (r ApiModifyPolicyRequest) ModifyPolicyRequest(modifyPolicyRequest ModifyPolicyRequest) ApiModifyPolicyRequest {
	r.modifyPolicyRequest = &modifyPolicyRequest
	return r
}

func (r ApiModifyPolicyRequest) Execute() (*ModifyPolicy200Response, *http.Response, error) {
	return r.ApiService.ModifyPolicyExecute(r)
}

/*
ModifyPolicy 权限组修改

✨ 权限组修改

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyPolicyRequest
*/
func (a *DefaultApiService) ModifyPolicy(ctx context.Context) ApiModifyPolicyRequest {
	return ApiModifyPolicyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModifyPolicy200Response
func (a *DefaultApiService) ModifyPolicyExecute(r ApiModifyPolicyRequest) (*ModifyPolicy200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModifyPolicy200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyPolicy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=ModifyPolicy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyPolicyRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyProjectRequest struct {
	ctx                  context.Context
	ApiService           *DefaultApiService
	authorization        *string
	action               *string
	modifyProjectRequest *ModifyProjectRequest
}

// 认证信息
func (r ApiModifyProjectRequest) Authorization(authorization string) ApiModifyProjectRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyProjectRequest) Action(action string) ApiModifyProjectRequest {
	r.action = &action
	return r
}

func (r ApiModifyProjectRequest) ModifyProjectRequest(modifyProjectRequest ModifyProjectRequest) ApiModifyProjectRequest {
	r.modifyProjectRequest = &modifyProjectRequest
	return r
}

func (r ApiModifyProjectRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.ModifyProjectExecute(r)
}

/*
ModifyProject 项目信息修改

✨ 项目信息修改

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyProjectRequest
*/
func (a *DefaultApiService) ModifyProject(ctx context.Context) ApiModifyProjectRequest {
	return ApiModifyProjectRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) ModifyProjectExecute(r ApiModifyProjectRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyProject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=ModifyProject"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyProjectRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyProjectAnnouncementRequest struct {
	ctx                              context.Context
	ApiService                       *DefaultApiService
	authorization                    *string
	action                           *string
	modifyProjectAnnouncementRequest *ModifyProjectAnnouncementRequest
}

// 认证信息
func (r ApiModifyProjectAnnouncementRequest) Authorization(authorization string) ApiModifyProjectAnnouncementRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyProjectAnnouncementRequest) Action(action string) ApiModifyProjectAnnouncementRequest {
	r.action = &action
	return r
}

func (r ApiModifyProjectAnnouncementRequest) ModifyProjectAnnouncementRequest(modifyProjectAnnouncementRequest ModifyProjectAnnouncementRequest) ApiModifyProjectAnnouncementRequest {
	r.modifyProjectAnnouncementRequest = &modifyProjectAnnouncementRequest
	return r
}

func (r ApiModifyProjectAnnouncementRequest) Execute() (*ModifyProjectAnnouncement200Response, *http.Response, error) {
	return r.ApiService.ModifyProjectAnnouncementExecute(r)
}

/*
ModifyProjectAnnouncement 项目公告更新

✨ 项目公告更新

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyProjectAnnouncementRequest
*/
func (a *DefaultApiService) ModifyProjectAnnouncement(ctx context.Context) ApiModifyProjectAnnouncementRequest {
	return ApiModifyProjectAnnouncementRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModifyProjectAnnouncement200Response
func (a *DefaultApiService) ModifyProjectAnnouncementExecute(r ApiModifyProjectAnnouncementRequest) (*ModifyProjectAnnouncement200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModifyProjectAnnouncement200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyProjectAnnouncement")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=ModifyProjectAnnouncement"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyProjectAnnouncementRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyProjectLabelRequest struct {
	ctx                       context.Context
	ApiService                *DefaultApiService
	authorization             *string
	action                    *string
	modifyProjectLabelRequest *ModifyProjectLabelRequest
}

// 认证信息
func (r ApiModifyProjectLabelRequest) Authorization(authorization string) ApiModifyProjectLabelRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyProjectLabelRequest) Action(action string) ApiModifyProjectLabelRequest {
	r.action = &action
	return r
}

func (r ApiModifyProjectLabelRequest) ModifyProjectLabelRequest(modifyProjectLabelRequest ModifyProjectLabelRequest) ApiModifyProjectLabelRequest {
	r.modifyProjectLabelRequest = &modifyProjectLabelRequest
	return r
}

func (r ApiModifyProjectLabelRequest) Execute() (*ModifyProjectLabel200Response, *http.Response, error) {
	return r.ApiService.ModifyProjectLabelExecute(r)
}

/*
ModifyProjectLabel 项目标签修改

✨ 项目标签修改

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyProjectLabelRequest
*/
func (a *DefaultApiService) ModifyProjectLabel(ctx context.Context) ApiModifyProjectLabelRequest {
	return ApiModifyProjectLabelRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModifyProjectLabel200Response
func (a *DefaultApiService) ModifyProjectLabelExecute(r ApiModifyProjectLabelRequest) (*ModifyProjectLabel200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModifyProjectLabel200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyProjectLabel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=ModifyProjectLabel"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyProjectLabelRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyProjectPermissionRequest struct {
	ctx                            context.Context
	ApiService                     *DefaultApiService
	authorization                  *string
	action                         *string
	modifyProjectPermissionRequest *ModifyProjectPermissionRequest
}

// 认证信息
func (r ApiModifyProjectPermissionRequest) Authorization(authorization string) ApiModifyProjectPermissionRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyProjectPermissionRequest) Action(action string) ApiModifyProjectPermissionRequest {
	r.action = &action
	return r
}

func (r ApiModifyProjectPermissionRequest) ModifyProjectPermissionRequest(modifyProjectPermissionRequest ModifyProjectPermissionRequest) ApiModifyProjectPermissionRequest {
	r.modifyProjectPermissionRequest = &modifyProjectPermissionRequest
	return r
}

func (r ApiModifyProjectPermissionRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.ModifyProjectPermissionExecute(r)
}

/*
ModifyProjectPermission 项目成员权限配置(老权限)

✨ 项目成员权限配置(老权限)

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyProjectPermissionRequest
*/
func (a *DefaultApiService) ModifyProjectPermission(ctx context.Context) ApiModifyProjectPermissionRequest {
	return ApiModifyProjectPermissionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) ModifyProjectPermissionExecute(r ApiModifyProjectPermissionRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyProjectPermission")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=ModifyProjectPermission"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyProjectPermissionRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyReleaseRequest struct {
	ctx                  context.Context
	ApiService           *DefaultApiService
	authorization        *string
	action               *string
	modifyReleaseRequest *ModifyReleaseRequest
}

// 认证信息
func (r ApiModifyReleaseRequest) Authorization(authorization string) ApiModifyReleaseRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyReleaseRequest) Action(action string) ApiModifyReleaseRequest {
	r.action = &action
	return r
}

func (r ApiModifyReleaseRequest) ModifyReleaseRequest(modifyReleaseRequest ModifyReleaseRequest) ApiModifyReleaseRequest {
	r.modifyReleaseRequest = &modifyReleaseRequest
	return r
}

func (r ApiModifyReleaseRequest) Execute() (*ModifyRelease200Response, *http.Response, error) {
	return r.ApiService.ModifyReleaseExecute(r)
}

/*
ModifyRelease 版本修改

✨ 修改版本

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyReleaseRequest
*/
func (a *DefaultApiService) ModifyRelease(ctx context.Context) ApiModifyReleaseRequest {
	return ApiModifyReleaseRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModifyRelease200Response
func (a *DefaultApiService) ModifyReleaseExecute(r ApiModifyReleaseRequest) (*ModifyRelease200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModifyRelease200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyRelease")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ModifyRelease"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyReleaseRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyTeamLevelDepotSpecRequest struct {
	ctx                             context.Context
	ApiService                      *DefaultApiService
	authorization                   *string
	action                          *string
	modifyTeamLevelDepotSpecRequest *ModifyTeamLevelDepotSpecRequest
}

// 认证信息
func (r ApiModifyTeamLevelDepotSpecRequest) Authorization(authorization string) ApiModifyTeamLevelDepotSpecRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyTeamLevelDepotSpecRequest) Action(action string) ApiModifyTeamLevelDepotSpecRequest {
	r.action = &action
	return r
}

func (r ApiModifyTeamLevelDepotSpecRequest) ModifyTeamLevelDepotSpecRequest(modifyTeamLevelDepotSpecRequest ModifyTeamLevelDepotSpecRequest) ApiModifyTeamLevelDepotSpecRequest {
	r.modifyTeamLevelDepotSpecRequest = &modifyTeamLevelDepotSpecRequest
	return r
}

func (r ApiModifyTeamLevelDepotSpecRequest) Execute() (*ModifyTeamLevelDepotSpec200Response, *http.Response, error) {
	return r.ApiService.ModifyTeamLevelDepotSpecExecute(r)
}

/*
ModifyTeamLevelDepotSpec 仓库设置-修改、新增团队级别的仓库规范

✨ 修改、新增团队级别的仓库规范

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyTeamLevelDepotSpecRequest
*/
func (a *DefaultApiService) ModifyTeamLevelDepotSpec(ctx context.Context) ApiModifyTeamLevelDepotSpecRequest {
	return ApiModifyTeamLevelDepotSpecRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModifyTeamLevelDepotSpec200Response
func (a *DefaultApiService) ModifyTeamLevelDepotSpecExecute(r ApiModifyTeamLevelDepotSpecRequest) (*ModifyTeamLevelDepotSpec200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModifyTeamLevelDepotSpec200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyTeamLevelDepotSpec")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ModifyTeamLevelDepotSpec"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyTeamLevelDepotSpecRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyTeamMemberLockedRequest struct {
	ctx                             context.Context
	ApiService                      *DefaultApiService
	authorization                   *string
	action                          *string
	modifyTeamMemberUnlockedRequest *ModifyTeamMemberUnlockedRequest
}

// 认证信息
func (r ApiModifyTeamMemberLockedRequest) Authorization(authorization string) ApiModifyTeamMemberLockedRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyTeamMemberLockedRequest) Action(action string) ApiModifyTeamMemberLockedRequest {
	r.action = &action
	return r
}

func (r ApiModifyTeamMemberLockedRequest) ModifyTeamMemberUnlockedRequest(modifyTeamMemberUnlockedRequest ModifyTeamMemberUnlockedRequest) ApiModifyTeamMemberLockedRequest {
	r.modifyTeamMemberUnlockedRequest = &modifyTeamMemberUnlockedRequest
	return r
}

func (r ApiModifyTeamMemberLockedRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.ModifyTeamMemberLockedExecute(r)
}

/*
ModifyTeamMemberLocked 团队成员锁定

✨ 通过用户 ID 团队成员锁定

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyTeamMemberLockedRequest
*/
func (a *DefaultApiService) ModifyTeamMemberLocked(ctx context.Context) ApiModifyTeamMemberLockedRequest {
	return ApiModifyTeamMemberLockedRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) ModifyTeamMemberLockedExecute(r ApiModifyTeamMemberLockedRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyTeamMemberLocked")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=ModifyTeamMemberLocked"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyTeamMemberUnlockedRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyTeamMemberUnlockedRequest struct {
	ctx                             context.Context
	ApiService                      *DefaultApiService
	authorization                   *string
	action                          *string
	modifyTeamMemberUnlockedRequest *ModifyTeamMemberUnlockedRequest
}

// 认证信息
func (r ApiModifyTeamMemberUnlockedRequest) Authorization(authorization string) ApiModifyTeamMemberUnlockedRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyTeamMemberUnlockedRequest) Action(action string) ApiModifyTeamMemberUnlockedRequest {
	r.action = &action
	return r
}

func (r ApiModifyTeamMemberUnlockedRequest) ModifyTeamMemberUnlockedRequest(modifyTeamMemberUnlockedRequest ModifyTeamMemberUnlockedRequest) ApiModifyTeamMemberUnlockedRequest {
	r.modifyTeamMemberUnlockedRequest = &modifyTeamMemberUnlockedRequest
	return r
}

func (r ApiModifyTeamMemberUnlockedRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.ModifyTeamMemberUnlockedExecute(r)
}

/*
ModifyTeamMemberUnlocked 团队成员解锁

✨ 通过用户 ID 解锁团队成员

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyTeamMemberUnlockedRequest
*/
func (a *DefaultApiService) ModifyTeamMemberUnlocked(ctx context.Context) ApiModifyTeamMemberUnlockedRequest {
	return ApiModifyTeamMemberUnlockedRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) ModifyTeamMemberUnlockedExecute(r ApiModifyTeamMemberUnlockedRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyTeamMemberUnlocked")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=ModifyTeamMemberUnlocked"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyTeamMemberUnlockedRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyTestCaseRequest struct {
	ctx                   context.Context
	ApiService            *DefaultApiService
	authorization         *string
	action                *string
	modifyTestCaseRequest *ModifyTestCaseRequest
}

// 认证信息
func (r ApiModifyTestCaseRequest) Authorization(authorization string) ApiModifyTestCaseRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyTestCaseRequest) Action(action string) ApiModifyTestCaseRequest {
	r.action = &action
	return r
}

func (r ApiModifyTestCaseRequest) ModifyTestCaseRequest(modifyTestCaseRequest ModifyTestCaseRequest) ApiModifyTestCaseRequest {
	r.modifyTestCaseRequest = &modifyTestCaseRequest
	return r
}

func (r ApiModifyTestCaseRequest) Execute() (*ModifyTestCase200Response, *http.Response, error) {
	return r.ApiService.ModifyTestCaseExecute(r)
}

/*
ModifyTestCase 测试用例修改

✨ 测试用例修改

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyTestCaseRequest
*/
func (a *DefaultApiService) ModifyTestCase(ctx context.Context) ApiModifyTestCaseRequest {
	return ApiModifyTestCaseRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModifyTestCase200Response
func (a *DefaultApiService) ModifyTestCaseExecute(r ApiModifyTestCaseRequest) (*ModifyTestCase200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModifyTestCase200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyTestCase")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=ModifyTestCase"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyTestCaseRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyTestCaseSectionRequest struct {
	ctx                          context.Context
	ApiService                   *DefaultApiService
	authorization                *string
	action                       *string
	modifyTestCaseSectionRequest *ModifyTestCaseSectionRequest
}

// 认证信息
func (r ApiModifyTestCaseSectionRequest) Authorization(authorization string) ApiModifyTestCaseSectionRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyTestCaseSectionRequest) Action(action string) ApiModifyTestCaseSectionRequest {
	r.action = &action
	return r
}

func (r ApiModifyTestCaseSectionRequest) ModifyTestCaseSectionRequest(modifyTestCaseSectionRequest ModifyTestCaseSectionRequest) ApiModifyTestCaseSectionRequest {
	r.modifyTestCaseSectionRequest = &modifyTestCaseSectionRequest
	return r
}

func (r ApiModifyTestCaseSectionRequest) Execute() (*ModifyTestCaseSection200Response, *http.Response, error) {
	return r.ApiService.ModifyTestCaseSectionExecute(r)
}

/*
ModifyTestCaseSection 测试用例分组修改

✨ 测试用例分组修改

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyTestCaseSectionRequest
*/
func (a *DefaultApiService) ModifyTestCaseSection(ctx context.Context) ApiModifyTestCaseSectionRequest {
	return ApiModifyTestCaseSectionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModifyTestCaseSection200Response
func (a *DefaultApiService) ModifyTestCaseSectionExecute(r ApiModifyTestCaseSectionRequest) (*ModifyTestCaseSection200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModifyTestCaseSection200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyTestCaseSection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=ModifyTestCaseSection"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyTestCaseSectionRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyTestRunRequest struct {
	ctx                  context.Context
	ApiService           *DefaultApiService
	authorization        *string
	action               *string
	modifyTestRunRequest *ModifyTestRunRequest
}

// 认证信息
func (r ApiModifyTestRunRequest) Authorization(authorization string) ApiModifyTestRunRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyTestRunRequest) Action(action string) ApiModifyTestRunRequest {
	r.action = &action
	return r
}

func (r ApiModifyTestRunRequest) ModifyTestRunRequest(modifyTestRunRequest ModifyTestRunRequest) ApiModifyTestRunRequest {
	r.modifyTestRunRequest = &modifyTestRunRequest
	return r
}

func (r ApiModifyTestRunRequest) Execute() (*ModifyTestRun200Response, *http.Response, error) {
	return r.ApiService.ModifyTestRunExecute(r)
}

/*
ModifyTestRun 测试计划修改

✨ 测试计划修改

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyTestRunRequest
*/
func (a *DefaultApiService) ModifyTestRun(ctx context.Context) ApiModifyTestRunRequest {
	return ApiModifyTestRunRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModifyTestRun200Response
func (a *DefaultApiService) ModifyTestRunExecute(r ApiModifyTestRunRequest) (*ModifyTestRun200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModifyTestRun200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyTestRun")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=ModifyTestRun"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyTestRunRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyWorkItemSplitIssuesRequest struct {
	ctx                              context.Context
	ApiService                       *DefaultApiService
	authorization                    *string
	action                           *string
	modifyWorkItemSplitIssuesRequest *ModifyWorkItemSplitIssuesRequest
}

// 认证信息
func (r ApiModifyWorkItemSplitIssuesRequest) Authorization(authorization string) ApiModifyWorkItemSplitIssuesRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyWorkItemSplitIssuesRequest) Action(action string) ApiModifyWorkItemSplitIssuesRequest {
	r.action = &action
	return r
}

func (r ApiModifyWorkItemSplitIssuesRequest) ModifyWorkItemSplitIssuesRequest(modifyWorkItemSplitIssuesRequest ModifyWorkItemSplitIssuesRequest) ApiModifyWorkItemSplitIssuesRequest {
	r.modifyWorkItemSplitIssuesRequest = &modifyWorkItemSplitIssuesRequest
	return r
}

func (r ApiModifyWorkItemSplitIssuesRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.ModifyWorkItemSplitIssuesExecute(r)
}

/*
ModifyWorkItemSplitIssues 项目集工作项分解&取消分解到项目中的事项

✨ 项目集工作项分解/取消分解到项目中的事项

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiModifyWorkItemSplitIssuesRequest
*/
func (a *DefaultApiService) ModifyWorkItemSplitIssues(ctx context.Context) ApiModifyWorkItemSplitIssuesRequest {
	return ApiModifyWorkItemSplitIssuesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) ModifyWorkItemSplitIssuesExecute(r ApiModifyWorkItemSplitIssuesRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyWorkItemSplitIssues")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ModifyWorkItemSplitIssues"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.modifyWorkItemSplitIssuesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPlanIterationIssueRequest struct {
	ctx                       context.Context
	ApiService                *DefaultApiService
	authorization             *string
	action                    *string
	planIterationIssueRequest *PlanIterationIssueRequest
}

// 认证信息
func (r ApiPlanIterationIssueRequest) Authorization(authorization string) ApiPlanIterationIssueRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiPlanIterationIssueRequest) Action(action string) ApiPlanIterationIssueRequest {
	r.action = &action
	return r
}

func (r ApiPlanIterationIssueRequest) PlanIterationIssueRequest(planIterationIssueRequest PlanIterationIssueRequest) ApiPlanIterationIssueRequest {
	r.planIterationIssueRequest = &planIterationIssueRequest
	return r
}

func (r ApiPlanIterationIssueRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.PlanIterationIssueExecute(r)
}

/*
PlanIterationIssue 迭代批量规划

✨ 批量规划迭代

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPlanIterationIssueRequest
*/
func (a *DefaultApiService) PlanIterationIssue(ctx context.Context) ApiPlanIterationIssueRequest {
	return ApiPlanIterationIssueRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) PlanIterationIssueExecute(r ApiPlanIterationIssueRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.PlanIterationIssue")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=PlanIterationIssue"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.planIterationIssueRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReleaseArtifactVersionRequest struct {
	ctx                              context.Context
	ApiService                       *DefaultApiService
	authorization                    *string
	action                           *string
	describeArtifactChecksumsRequest *DescribeArtifactChecksumsRequest
}

// 认证信息
func (r ApiReleaseArtifactVersionRequest) Authorization(authorization string) ApiReleaseArtifactVersionRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiReleaseArtifactVersionRequest) Action(action string) ApiReleaseArtifactVersionRequest {
	r.action = &action
	return r
}

func (r ApiReleaseArtifactVersionRequest) DescribeArtifactChecksumsRequest(describeArtifactChecksumsRequest DescribeArtifactChecksumsRequest) ApiReleaseArtifactVersionRequest {
	r.describeArtifactChecksumsRequest = &describeArtifactChecksumsRequest
	return r
}

func (r ApiReleaseArtifactVersionRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.ReleaseArtifactVersionExecute(r)
}

/*
ReleaseArtifactVersion 制品版本发布

✨ 将指定版本的制品的发布状态调整为已发布

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiReleaseArtifactVersionRequest
*/
func (a *DefaultApiService) ReleaseArtifactVersion(ctx context.Context) ApiReleaseArtifactVersionRequest {
	return ApiReleaseArtifactVersionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) ReleaseArtifactVersionExecute(r ApiReleaseArtifactVersionRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ReleaseArtifactVersion")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=ReleaseArtifactVersion"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeArtifactChecksumsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReorderCdPipelinesRequest struct {
	ctx                       context.Context
	ApiService                *DefaultApiService
	authorization             *string
	action                    *string
	reorderCdPipelinesRequest *ReorderCdPipelinesRequest
}

// 认证信息
func (r ApiReorderCdPipelinesRequest) Authorization(authorization string) ApiReorderCdPipelinesRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiReorderCdPipelinesRequest) Action(action string) ApiReorderCdPipelinesRequest {
	r.action = &action
	return r
}

func (r ApiReorderCdPipelinesRequest) ReorderCdPipelinesRequest(reorderCdPipelinesRequest ReorderCdPipelinesRequest) ApiReorderCdPipelinesRequest {
	r.reorderCdPipelinesRequest = &reorderCdPipelinesRequest
	return r
}

func (r ApiReorderCdPipelinesRequest) Execute() (*ReorderCdPipelines200Response, *http.Response, error) {
	return r.ApiService.ReorderCdPipelinesExecute(r)
}

/*
ReorderCdPipelines 部署流程重排序

✨ 部署流程重排序

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiReorderCdPipelinesRequest
*/
func (a *DefaultApiService) ReorderCdPipelines(ctx context.Context) ApiReorderCdPipelinesRequest {
	return ApiReorderCdPipelinesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ReorderCdPipelines200Response
func (a *DefaultApiService) ReorderCdPipelinesExecute(r ApiReorderCdPipelinesRequest) (*ReorderCdPipelines200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ReorderCdPipelines200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ReorderCdPipelines")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=ReorderCdPipelines"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.reorderCdPipelinesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetGrantToResourceRequest struct {
	ctx                       context.Context
	ApiService                *DefaultApiService
	authorization             *string
	action                    *string
	setGrantToResourceRequest *SetGrantToResourceRequest
}

// 认证信息
func (r ApiSetGrantToResourceRequest) Authorization(authorization string) ApiSetGrantToResourceRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiSetGrantToResourceRequest) Action(action string) ApiSetGrantToResourceRequest {
	r.action = &action
	return r
}

func (r ApiSetGrantToResourceRequest) SetGrantToResourceRequest(setGrantToResourceRequest SetGrantToResourceRequest) ApiSetGrantToResourceRequest {
	r.setGrantToResourceRequest = &setGrantToResourceRequest
	return r
}

func (r ApiSetGrantToResourceRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.SetGrantToResourceExecute(r)
}

/*
SetGrantToResource 授权设置，收回授权体在资源中的所有授权，重新设置为参数指定的授权

✨ 授权设置，收回授权体在资源中的所有授权，重新设置为参数指定的授权

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSetGrantToResourceRequest
*/
func (a *DefaultApiService) SetGrantToResource(ctx context.Context) ApiSetGrantToResourceRequest {
	return ApiSetGrantToResourceRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) SetGrantToResourceExecute(r ApiSetGrantToResourceRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.SetGrantToResource")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=SetGrantToResource"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.setGrantToResourceRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetPredicatePolicyOnResourceRequest struct {
	ctx                                 context.Context
	ApiService                          *DefaultApiService
	authorization                       *string
	action                              *string
	setPredicatePolicyOnResourceRequest *SetPredicatePolicyOnResourceRequest
}

// 认证信息
func (r ApiSetPredicatePolicyOnResourceRequest) Authorization(authorization string) ApiSetPredicatePolicyOnResourceRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiSetPredicatePolicyOnResourceRequest) Action(action string) ApiSetPredicatePolicyOnResourceRequest {
	r.action = &action
	return r
}

func (r ApiSetPredicatePolicyOnResourceRequest) SetPredicatePolicyOnResourceRequest(setPredicatePolicyOnResourceRequest SetPredicatePolicyOnResourceRequest) ApiSetPredicatePolicyOnResourceRequest {
	r.setPredicatePolicyOnResourceRequest = &setPredicatePolicyOnResourceRequest
	return r
}

func (r ApiSetPredicatePolicyOnResourceRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.SetPredicatePolicyOnResourceExecute(r)
}

/*
SetPredicatePolicyOnResource 资源权限判定策略设置

✨ 资源权限判定策略设置

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSetPredicatePolicyOnResourceRequest
*/
func (a *DefaultApiService) SetPredicatePolicyOnResource(ctx context.Context) ApiSetPredicatePolicyOnResourceRequest {
	return ApiSetPredicatePolicyOnResourceRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) SetPredicatePolicyOnResourceExecute(r ApiSetPredicatePolicyOnResourceRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.SetPredicatePolicyOnResource")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=SetPredicatePolicyOnResource"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.setPredicatePolicyOnResourceRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStopCodingCIBuildRequest struct {
	ctx                               context.Context
	ApiService                        *DefaultApiService
	authorization                     *string
	action                            *string
	describeCodingCIBuildStageRequest *DescribeCodingCIBuildStageRequest
}

// 认证信息
func (r ApiStopCodingCIBuildRequest) Authorization(authorization string) ApiStopCodingCIBuildRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiStopCodingCIBuildRequest) Action(action string) ApiStopCodingCIBuildRequest {
	r.action = &action
	return r
}

func (r ApiStopCodingCIBuildRequest) DescribeCodingCIBuildStageRequest(describeCodingCIBuildStageRequest DescribeCodingCIBuildStageRequest) ApiStopCodingCIBuildRequest {
	r.describeCodingCIBuildStageRequest = &describeCodingCIBuildStageRequest
	return r
}

func (r ApiStopCodingCIBuildRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.StopCodingCIBuildExecute(r)
}

/*
StopCodingCIBuild 构建停止

✨ 构建停止

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiStopCodingCIBuildRequest
*/
func (a *DefaultApiService) StopCodingCIBuild(ctx context.Context) ApiStopCodingCIBuildRequest {
	return ApiStopCodingCIBuildRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) StopCodingCIBuildExecute(r ApiStopCodingCIBuildRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.StopCodingCIBuild")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=StopCodingCIBuild"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.describeCodingCIBuildStageRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTriggerCdPipelineRequest struct {
	ctx                      context.Context
	ApiService               *DefaultApiService
	authorization            *string
	action                   *string
	triggerCdPipelineRequest *TriggerCdPipelineRequest
}

// 认证信息
func (r ApiTriggerCdPipelineRequest) Authorization(authorization string) ApiTriggerCdPipelineRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiTriggerCdPipelineRequest) Action(action string) ApiTriggerCdPipelineRequest {
	r.action = &action
	return r
}

func (r ApiTriggerCdPipelineRequest) TriggerCdPipelineRequest(triggerCdPipelineRequest TriggerCdPipelineRequest) ApiTriggerCdPipelineRequest {
	r.triggerCdPipelineRequest = &triggerCdPipelineRequest
	return r
}

func (r ApiTriggerCdPipelineRequest) Execute() (*TriggerCdPipeline200Response, *http.Response, error) {
	return r.ApiService.TriggerCdPipelineExecute(r)
}

/*
TriggerCdPipeline 部署流程触发

✨ 部署流程触发

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiTriggerCdPipelineRequest
*/
func (a *DefaultApiService) TriggerCdPipeline(ctx context.Context) ApiTriggerCdPipelineRequest {
	return ApiTriggerCdPipelineRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return TriggerCdPipeline200Response
func (a *DefaultApiService) TriggerCdPipelineExecute(r ApiTriggerCdPipelineRequest) (*TriggerCdPipeline200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TriggerCdPipeline200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.TriggerCdPipeline")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=TriggerCdPipeline"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.triggerCdPipelineRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTriggerCodingCIBuildRequest struct {
	ctx                         context.Context
	ApiService                  *DefaultApiService
	authorization               *string
	action                      *string
	triggerCodingCIBuildRequest *TriggerCodingCIBuildRequest
}

// 认证信息
func (r ApiTriggerCodingCIBuildRequest) Authorization(authorization string) ApiTriggerCodingCIBuildRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiTriggerCodingCIBuildRequest) Action(action string) ApiTriggerCodingCIBuildRequest {
	r.action = &action
	return r
}

func (r ApiTriggerCodingCIBuildRequest) TriggerCodingCIBuildRequest(triggerCodingCIBuildRequest TriggerCodingCIBuildRequest) ApiTriggerCodingCIBuildRequest {
	r.triggerCodingCIBuildRequest = &triggerCodingCIBuildRequest
	return r
}

func (r ApiTriggerCodingCIBuildRequest) Execute() (*TriggerCodingCIBuild200Response, *http.Response, error) {
	return r.ApiService.TriggerCodingCIBuildExecute(r)
}

/*
TriggerCodingCIBuild 构建触发

✨ 构建触发

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiTriggerCodingCIBuildRequest
*/
func (a *DefaultApiService) TriggerCodingCIBuild(ctx context.Context) ApiTriggerCodingCIBuildRequest {
	return ApiTriggerCodingCIBuildRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return TriggerCodingCIBuild200Response
func (a *DefaultApiService) TriggerCodingCIBuildExecute(r ApiTriggerCodingCIBuildRequest) (*TriggerCodingCIBuild200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TriggerCodingCIBuild200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.TriggerCodingCIBuild")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=TriggerCodingCIBuild"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.triggerCodingCIBuildRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTriggerCodingScanRequest struct {
	ctx                      context.Context
	ApiService               *DefaultApiService
	authorization            *string
	action                   *string
	triggerCodingScanRequest *TriggerCodingScanRequest
}

// 认证信息
func (r ApiTriggerCodingScanRequest) Authorization(authorization string) ApiTriggerCodingScanRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiTriggerCodingScanRequest) Action(action string) ApiTriggerCodingScanRequest {
	r.action = &action
	return r
}

func (r ApiTriggerCodingScanRequest) TriggerCodingScanRequest(triggerCodingScanRequest TriggerCodingScanRequest) ApiTriggerCodingScanRequest {
	r.triggerCodingScanRequest = &triggerCodingScanRequest
	return r
}

func (r ApiTriggerCodingScanRequest) Execute() (*TriggerCodingScan200Response, *http.Response, error) {
	return r.ApiService.TriggerCodingScanExecute(r)
}

/*
TriggerCodingScan 代码扫描触发

✨ 代码扫描触发

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiTriggerCodingScanRequest
*/
func (a *DefaultApiService) TriggerCodingScan(ctx context.Context) ApiTriggerCodingScanRequest {
	return ApiTriggerCodingScanRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return TriggerCodingScan200Response
func (a *DefaultApiService) TriggerCodingScanExecute(r ApiTriggerCodingScanRequest) (*TriggerCodingScan200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TriggerCodingScan200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.TriggerCodingScan")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=TriggerCodingScan"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.triggerCodingScanRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateUserGroupByIdRequest struct {
	ctx                        context.Context
	ApiService                 *DefaultApiService
	authorization              *string
	action                     *string
	updateUserGroupByIdRequest *UpdateUserGroupByIdRequest
}

// 认证信息
func (r ApiUpdateUserGroupByIdRequest) Authorization(authorization string) ApiUpdateUserGroupByIdRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiUpdateUserGroupByIdRequest) Action(action string) ApiUpdateUserGroupByIdRequest {
	r.action = &action
	return r
}

func (r ApiUpdateUserGroupByIdRequest) UpdateUserGroupByIdRequest(updateUserGroupByIdRequest UpdateUserGroupByIdRequest) ApiUpdateUserGroupByIdRequest {
	r.updateUserGroupByIdRequest = &updateUserGroupByIdRequest
	return r
}

func (r ApiUpdateUserGroupByIdRequest) Execute() (*DeleteAPIDoc200Response, *http.Response, error) {
	return r.ApiService.UpdateUserGroupByIdExecute(r)
}

/*
UpdateUserGroupById 用户组更新

✨ 用户组更新

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiUpdateUserGroupByIdRequest
*/
func (a *DefaultApiService) UpdateUserGroupById(ctx context.Context) ApiUpdateUserGroupByIdRequest {
	return ApiUpdateUserGroupByIdRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeleteAPIDoc200Response
func (a *DefaultApiService) UpdateUserGroupByIdExecute(r ApiUpdateUserGroupByIdRequest) (*DeleteAPIDoc200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAPIDoc200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.UpdateUserGroupById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=UpdateUserGroupById"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {

	}
	if r.action == nil {

	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = r.updateUserGroupByIdRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
