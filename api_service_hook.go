/*
CODING OPEN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	. "github.com/mindfocus/coding-sdk/utils"
	. "github.com/mindfocus/coding-sdk/models"
	"io"
	"net/http"
	"net/url"
)


// ServiceHookAPIService ServiceHookAPI service
type ServiceHookAPIService service

type ApiCreateServiceHookRequest struct {
	ctx context.Context
	ApiService *ServiceHookAPIService
	authorization *string
	action *string
	createServiceHookRequest *CreateServiceHookRequest
}

// 认证信息
func (r ApiCreateServiceHookRequest) Authorization(authorization string) ApiCreateServiceHookRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiCreateServiceHookRequest) Action(action string) ApiCreateServiceHookRequest {
	r.action = &action
	return r
}

func (r ApiCreateServiceHookRequest) CreateServiceHookRequest(createServiceHookRequest CreateServiceHookRequest) ApiCreateServiceHookRequest {
	r.createServiceHookRequest = &createServiceHookRequest
	return r
}

func (r ApiCreateServiceHookRequest) Execute() (*CreateServiceHook200Response, *http.Response, error) {
	return r.ApiService.CreateServiceHookExecute(r)
}

/*
CreateServiceHook Service Hook 创建

✨ Service Hook 创建

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateServiceHookRequest
*/
func (a *ServiceHookAPIService) CreateServiceHook(ctx context.Context) ApiCreateServiceHookRequest {
	return ApiCreateServiceHookRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateServiceHook200Response
func (a *ServiceHookAPIService) CreateServiceHookExecute(r ApiCreateServiceHookRequest) (*CreateServiceHook200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateServiceHook200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceHookAPIService.CreateServiceHook")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=CreateServiceHook"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, ReportError("authorization is required and must be specified")
	}
	if r.action == nil {
		return localVarReturnValue, nil, ReportError("action is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "Action", r.action, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "simple", "")
	// body params
	localVarPostBody = r.createServiceHookRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteServiceHookRequest struct {
	ctx context.Context
	ApiService *ServiceHookAPIService
	authorization *string
	action *string
	deleteServiceHookRequest *DeleteServiceHookRequest
}

// 认证信息
func (r ApiDeleteServiceHookRequest) Authorization(authorization string) ApiDeleteServiceHookRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDeleteServiceHookRequest) Action(action string) ApiDeleteServiceHookRequest {
	r.action = &action
	return r
}

func (r ApiDeleteServiceHookRequest) DeleteServiceHookRequest(deleteServiceHookRequest DeleteServiceHookRequest) ApiDeleteServiceHookRequest {
	r.deleteServiceHookRequest = &deleteServiceHookRequest
	return r
}

func (r ApiDeleteServiceHookRequest) Execute() (*EnabledServiceHook200Response, *http.Response, error) {
	return r.ApiService.DeleteServiceHookExecute(r)
}

/*
DeleteServiceHook Service Hook 删除

✨ Service Hook 删除

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeleteServiceHookRequest
*/
func (a *ServiceHookAPIService) DeleteServiceHook(ctx context.Context) ApiDeleteServiceHookRequest {
	return ApiDeleteServiceHookRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EnabledServiceHook200Response
func (a *ServiceHookAPIService) DeleteServiceHookExecute(r ApiDeleteServiceHookRequest) (*EnabledServiceHook200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnabledServiceHook200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceHookAPIService.DeleteServiceHook")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DeleteServiceHook"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, ReportError("authorization is required and must be specified")
	}
	if r.action == nil {
		return localVarReturnValue, nil, ReportError("action is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "Action", r.action, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "simple", "")
	// body params
	localVarPostBody = r.deleteServiceHookRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeEventsRequest struct {
	ctx context.Context
	ApiService *ServiceHookAPIService
	authorization *string
	action *string
	body *map[string]interface{}
}

// 认证信息
func (r ApiDescribeEventsRequest) Authorization(authorization string) ApiDescribeEventsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeEventsRequest) Action(action string) ApiDescribeEventsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeEventsRequest) Body(body map[string]interface{}) ApiDescribeEventsRequest {
	r.body = &body
	return r
}

func (r ApiDescribeEventsRequest) Execute() (*DescribeEvents200Response, *http.Response, error) {
	return r.ApiService.DescribeEventsExecute(r)
}

/*
DescribeEvents Service Hook 事件列表查询

✨ 查询 Service Hook 事件列表，返回事件英文标识、事件中文名、事件分组英文标识、事件分组中文名

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDescribeEventsRequest
*/
func (a *ServiceHookAPIService) DescribeEvents(ctx context.Context) ApiDescribeEventsRequest {
	return ApiDescribeEventsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DescribeEvents200Response
func (a *ServiceHookAPIService) DescribeEventsExecute(r ApiDescribeEventsRequest) (*DescribeEvents200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DescribeEvents200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceHookAPIService.DescribeEvents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeEvents"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, ReportError("authorization is required and must be specified")
	}
	if r.action == nil {
		return localVarReturnValue, nil, ReportError("action is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "Action", r.action, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "simple", "")
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeServiceHookRequest struct {
	ctx context.Context
	ApiService *ServiceHookAPIService
	authorization *string
	action *string
	describeServiceHookRequest *DescribeServiceHookRequest
}

// 认证信息
func (r ApiDescribeServiceHookRequest) Authorization(authorization string) ApiDescribeServiceHookRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeServiceHookRequest) Action(action string) ApiDescribeServiceHookRequest {
	r.action = &action
	return r
}

func (r ApiDescribeServiceHookRequest) DescribeServiceHookRequest(describeServiceHookRequest DescribeServiceHookRequest) ApiDescribeServiceHookRequest {
	r.describeServiceHookRequest = &describeServiceHookRequest
	return r
}

func (r ApiDescribeServiceHookRequest) Execute() (*DescribeServiceHook200Response, *http.Response, error) {
	return r.ApiService.DescribeServiceHookExecute(r)
}

/*
DescribeServiceHook Service Hook 查询单条

✨ Service Hook 查询

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDescribeServiceHookRequest
*/
func (a *ServiceHookAPIService) DescribeServiceHook(ctx context.Context) ApiDescribeServiceHookRequest {
	return ApiDescribeServiceHookRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DescribeServiceHook200Response
func (a *ServiceHookAPIService) DescribeServiceHookExecute(r ApiDescribeServiceHookRequest) (*DescribeServiceHook200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DescribeServiceHook200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceHookAPIService.DescribeServiceHook")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeServiceHook"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, ReportError("authorization is required and must be specified")
	}
	if r.action == nil {
		return localVarReturnValue, nil, ReportError("action is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "Action", r.action, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "simple", "")
	// body params
	localVarPostBody = r.describeServiceHookRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeServiceHookLogsRequest struct {
	ctx context.Context
	ApiService *ServiceHookAPIService
	authorization *string
	action *string
	describeServiceHookLogsRequest *DescribeServiceHookLogsRequest
}

// 认证信息
func (r ApiDescribeServiceHookLogsRequest) Authorization(authorization string) ApiDescribeServiceHookLogsRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeServiceHookLogsRequest) Action(action string) ApiDescribeServiceHookLogsRequest {
	r.action = &action
	return r
}

func (r ApiDescribeServiceHookLogsRequest) DescribeServiceHookLogsRequest(describeServiceHookLogsRequest DescribeServiceHookLogsRequest) ApiDescribeServiceHookLogsRequest {
	r.describeServiceHookLogsRequest = &describeServiceHookLogsRequest
	return r
}

func (r ApiDescribeServiceHookLogsRequest) Execute() (*DescribeServiceHookLogs200Response, *http.Response, error) {
	return r.ApiService.DescribeServiceHookLogsExecute(r)
}

/*
DescribeServiceHookLogs Service Hook 发送记录分页查询

✨ Service Hook 发送记录分页查询

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDescribeServiceHookLogsRequest
*/
func (a *ServiceHookAPIService) DescribeServiceHookLogs(ctx context.Context) ApiDescribeServiceHookLogsRequest {
	return ApiDescribeServiceHookLogsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DescribeServiceHookLogs200Response
func (a *ServiceHookAPIService) DescribeServiceHookLogsExecute(r ApiDescribeServiceHookLogsRequest) (*DescribeServiceHookLogs200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DescribeServiceHookLogs200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceHookAPIService.DescribeServiceHookLogs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeServiceHookLogs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, ReportError("authorization is required and must be specified")
	}
	if r.action == nil {
		return localVarReturnValue, nil, ReportError("action is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "Action", r.action, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "simple", "")
	// body params
	localVarPostBody = r.describeServiceHookLogsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeServiceHooksRequest struct {
	ctx context.Context
	ApiService *ServiceHookAPIService
	authorization *string
	action *string
	describeServiceHooksRequest *DescribeServiceHooksRequest
}

// 认证信息
func (r ApiDescribeServiceHooksRequest) Authorization(authorization string) ApiDescribeServiceHooksRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiDescribeServiceHooksRequest) Action(action string) ApiDescribeServiceHooksRequest {
	r.action = &action
	return r
}

func (r ApiDescribeServiceHooksRequest) DescribeServiceHooksRequest(describeServiceHooksRequest DescribeServiceHooksRequest) ApiDescribeServiceHooksRequest {
	r.describeServiceHooksRequest = &describeServiceHooksRequest
	return r
}

func (r ApiDescribeServiceHooksRequest) Execute() (*DescribeServiceHooks200Response, *http.Response, error) {
	return r.ApiService.DescribeServiceHooksExecute(r)
}

/*
DescribeServiceHooks Service Hook 列表分页查询

✨ Service Hook 列表分页查询

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDescribeServiceHooksRequest
*/
func (a *ServiceHookAPIService) DescribeServiceHooks(ctx context.Context) ApiDescribeServiceHooksRequest {
	return ApiDescribeServiceHooksRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DescribeServiceHooks200Response
func (a *ServiceHookAPIService) DescribeServiceHooksExecute(r ApiDescribeServiceHooksRequest) (*DescribeServiceHooks200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DescribeServiceHooks200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceHookAPIService.DescribeServiceHooks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=DescribeServiceHooks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, ReportError("authorization is required and must be specified")
	}
	if r.action == nil {
		return localVarReturnValue, nil, ReportError("action is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "Action", r.action, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "simple", "")
	// body params
	localVarPostBody = r.describeServiceHooksRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnabledServiceHookRequest struct {
	ctx context.Context
	ApiService *ServiceHookAPIService
	authorization *string
	action *string
	enabledServiceHookRequest *EnabledServiceHookRequest
}

// 认证信息
func (r ApiEnabledServiceHookRequest) Authorization(authorization string) ApiEnabledServiceHookRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiEnabledServiceHookRequest) Action(action string) ApiEnabledServiceHookRequest {
	r.action = &action
	return r
}

func (r ApiEnabledServiceHookRequest) EnabledServiceHookRequest(enabledServiceHookRequest EnabledServiceHookRequest) ApiEnabledServiceHookRequest {
	r.enabledServiceHookRequest = &enabledServiceHookRequest
	return r
}

func (r ApiEnabledServiceHookRequest) Execute() (*EnabledServiceHook200Response, *http.Response, error) {
	return r.ApiService.EnabledServiceHookExecute(r)
}

/*
EnabledServiceHook Service Hook 事件开关

✨ Service Hook 事件开关

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEnabledServiceHookRequest
*/
func (a *ServiceHookAPIService) EnabledServiceHook(ctx context.Context) ApiEnabledServiceHookRequest {
	return ApiEnabledServiceHookRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EnabledServiceHook200Response
func (a *ServiceHookAPIService) EnabledServiceHookExecute(r ApiEnabledServiceHookRequest) (*EnabledServiceHook200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnabledServiceHook200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceHookAPIService.EnabledServiceHook")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=EnabledServiceHook"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, ReportError("authorization is required and must be specified")
	}
	if r.action == nil {
		return localVarReturnValue, nil, ReportError("action is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "Action", r.action, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "simple", "")
	// body params
	localVarPostBody = r.enabledServiceHookRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyServiceHookRequest struct {
	ctx context.Context
	ApiService *ServiceHookAPIService
	authorization *string
	action *string
	modifyServiceHookRequest *ModifyServiceHookRequest
}

// 认证信息
func (r ApiModifyServiceHookRequest) Authorization(authorization string) ApiModifyServiceHookRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiModifyServiceHookRequest) Action(action string) ApiModifyServiceHookRequest {
	r.action = &action
	return r
}

func (r ApiModifyServiceHookRequest) ModifyServiceHookRequest(modifyServiceHookRequest ModifyServiceHookRequest) ApiModifyServiceHookRequest {
	r.modifyServiceHookRequest = &modifyServiceHookRequest
	return r
}

func (r ApiModifyServiceHookRequest) Execute() (*ModifyServiceHook200Response, *http.Response, error) {
	return r.ApiService.ModifyServiceHookExecute(r)
}

/*
ModifyServiceHook Service Hook 修改

✨ Service Hook 修改

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiModifyServiceHookRequest
*/
func (a *ServiceHookAPIService) ModifyServiceHook(ctx context.Context) ApiModifyServiceHookRequest {
	return ApiModifyServiceHookRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ModifyServiceHook200Response
func (a *ServiceHookAPIService) ModifyServiceHookExecute(r ApiModifyServiceHookRequest) (*ModifyServiceHook200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModifyServiceHook200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceHookAPIService.ModifyServiceHook")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=ModifyServiceHook"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, ReportError("authorization is required and must be specified")
	}
	if r.action == nil {
		return localVarReturnValue, nil, ReportError("action is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "Action", r.action, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "simple", "")
	// body params
	localVarPostBody = r.modifyServiceHookRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPingServiceHookRequest struct {
	ctx context.Context
	ApiService *ServiceHookAPIService
	authorization *string
	action *string
	pingServiceHookRequest *PingServiceHookRequest
}

// 认证信息
func (r ApiPingServiceHookRequest) Authorization(authorization string) ApiPingServiceHookRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiPingServiceHookRequest) Action(action string) ApiPingServiceHookRequest {
	r.action = &action
	return r
}

func (r ApiPingServiceHookRequest) PingServiceHookRequest(pingServiceHookRequest PingServiceHookRequest) ApiPingServiceHookRequest {
	r.pingServiceHookRequest = &pingServiceHookRequest
	return r
}

func (r ApiPingServiceHookRequest) Execute() (*EnabledServiceHook200Response, *http.Response, error) {
	return r.ApiService.PingServiceHookExecute(r)
}

/*
PingServiceHook Service Hook 测试

✨ Service Hook 测试

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPingServiceHookRequest
*/
func (a *ServiceHookAPIService) PingServiceHook(ctx context.Context) ApiPingServiceHookRequest {
	return ApiPingServiceHookRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EnabledServiceHook200Response
func (a *ServiceHookAPIService) PingServiceHookExecute(r ApiPingServiceHookRequest) (*EnabledServiceHook200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnabledServiceHook200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceHookAPIService.PingServiceHook")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=PingServiceHook"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, ReportError("authorization is required and must be specified")
	}
	if r.action == nil {
		return localVarReturnValue, nil, ReportError("action is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "Action", r.action, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "simple", "")
	// body params
	localVarPostBody = r.pingServiceHookRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiResendServiceHookLogRequest struct {
	ctx context.Context
	ApiService *ServiceHookAPIService
	authorization *string
	action *string
	resendServiceHookLogRequest *ResendServiceHookLogRequest
}

// 认证信息
func (r ApiResendServiceHookLogRequest) Authorization(authorization string) ApiResendServiceHookLogRequest {
	r.authorization = &authorization
	return r
}

// Action
func (r ApiResendServiceHookLogRequest) Action(action string) ApiResendServiceHookLogRequest {
	r.action = &action
	return r
}

func (r ApiResendServiceHookLogRequest) ResendServiceHookLogRequest(resendServiceHookLogRequest ResendServiceHookLogRequest) ApiResendServiceHookLogRequest {
	r.resendServiceHookLogRequest = &resendServiceHookLogRequest
	return r
}

func (r ApiResendServiceHookLogRequest) Execute() (*ResendServiceHookLog200Response, *http.Response, error) {
	return r.ApiService.ResendServiceHookLogExecute(r)
}

/*
ResendServiceHookLog Service Hook 重发

✨ Service Hook 重发

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiResendServiceHookLogRequest
*/
func (a *ServiceHookAPIService) ResendServiceHookLog(ctx context.Context) ApiResendServiceHookLogRequest {
	return ApiResendServiceHookLogRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResendServiceHookLog200Response
func (a *ServiceHookAPIService) ResendServiceHookLogExecute(r ApiResendServiceHookLogRequest) (*ResendServiceHookLog200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResendServiceHookLog200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceHookAPIService.ResendServiceHookLog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/?action=ResendServiceHookLog"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, ReportError("authorization is required and must be specified")
	}
	if r.action == nil {
		return localVarReturnValue, nil, ReportError("action is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "Action", r.action, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "simple", "")
	// body params
	localVarPostBody = r.resendServiceHookLogRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
